
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f44  08003f44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003f44  08003f44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f44  08003f44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000bc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098ca  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001921  00000000  00000000  0002996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0002b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  0002b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020325  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6c2  00000000  00000000  0004c38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bab17  00000000  00000000  00056a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00111566  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002384  00000000  00000000  001115b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e14 	.word	0x08003e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003e14 	.word	0x08003e14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <MX_GPIO_Init+0xc4>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a2a      	ldr	r2, [pc, #168]	; (8000334 <MX_GPIO_Init+0xc4>)
 800028c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <MX_GPIO_Init+0xc4>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800029e:	4b25      	ldr	r3, [pc, #148]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a24      	ldr	r2, [pc, #144]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b22      	ldr	r3, [pc, #136]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a18      	ldr	r2, [pc, #96]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f000 fd5b 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	4619      	mov	r1, r3
 8000308:	480b      	ldr	r0, [pc, #44]	; (8000338 <MX_GPIO_Init+0xc8>)
 800030a:	f000 fbdb 	bl	8000ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800030e:	2320      	movs	r3, #32
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2300      	movs	r3, #0
 800031c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f000 fbcc 	bl	8000ac4 <HAL_GPIO_Init>

}
 800032c:	bf00      	nop
 800032e:	3728      	adds	r7, #40	; 0x28
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	48000800 	.word	0x48000800

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 fa4f 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f825 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f7ff ff91 	bl	8000270 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800034e:	f000 f9ab 	bl	80006a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader started...\nVersion: %d.%d\n",BL_Version[MAJOR], BL_Version[MINOR]);
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <main+0x50>)
 8000354:	785b      	ldrb	r3, [r3, #1]
 8000356:	4619      	mov	r1, r3
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <main+0x50>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <main+0x54>)
 8000360:	f002 fd54 	bl	8002e0c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(unsigned char i = 0; i<=20; i++ ){
 8000364:	2300      	movs	r3, #0
 8000366:	71fb      	strb	r3, [r7, #7]
 8000368:	e00a      	b.n	8000380 <main+0x44>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800036a:	2120      	movs	r1, #32
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f000 fd32 	bl	8000dd8 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000374:	2064      	movs	r0, #100	; 0x64
 8000376:	f000 fa9b 	bl	80008b0 <HAL_Delay>
	  for(unsigned char i = 0; i<=20; i++ ){
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3301      	adds	r3, #1
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b14      	cmp	r3, #20
 8000384:	d9f1      	bls.n	800036a <main+0x2e>
	  }
	  goto_application();
 8000386:	f000 f871 	bl	800046c <goto_application>
	  for(unsigned char i = 0; i<=20; i++ ){
 800038a:	e7eb      	b.n	8000364 <main+0x28>
 800038c:	20000000 	.word	0x20000000
 8000390:	08003e2c 	.word	0x08003e2c

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b096      	sub	sp, #88	; 0x58
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039e:	2228      	movs	r2, #40	; 0x28
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fd2a 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	f107 031c 	add.w	r3, r7, #28
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b8:	463b      	mov	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2310      	movs	r3, #16
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d6:	2302      	movs	r3, #2
 80003d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003da:	2300      	movs	r3, #0
 80003dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fd0f 	bl	8000e0c <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003f4:	f000 f84e 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040e:	f107 031c 	add.w	r3, r7, #28
 8000412:	2102      	movs	r1, #2
 8000414:	4618      	mov	r0, r3
 8000416:	f001 fd37 	bl	8001e88 <HAL_RCC_ClockConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000420:	f000 f838 	bl	8000494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000424:	2301      	movs	r3, #1
 8000426:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	4618      	mov	r0, r3
 8000430:	f001 ff60 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800043a:	f000 f82b 	bl	8000494 <Error_Handler>
  }
}
 800043e:	bf00      	nop
 8000440:	3758      	adds	r7, #88	; 0x58
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000450:	1d39      	adds	r1, r7, #4
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	2201      	movs	r2, #1
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <__io_putchar+0x20>)
 800045a:	f002 f8cf 	bl	80025fc <HAL_UART_Transmit>
  return ch;
 800045e:	687b      	ldr	r3, [r7, #4]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000094 	.word	0x20000094

0800046c <goto_application>:

static void goto_application( void )
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  printf("Going to Jump to Application...\n");
 8000472:	4806      	ldr	r0, [pc, #24]	; (800048c <goto_application+0x20>)
 8000474:	f002 fd50 	bl	8002f18 <puts>
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(0x08004400 + 4U)));
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <goto_application+0x24>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	607b      	str	r3, [r7, #4]
  app_reset_handler();
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4798      	blx	r3
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	08003e54 	.word	0x08003e54
 8000490:	08004404 	.word	0x08004404

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004d6:	2007      	movs	r0, #7
 80004d8:	f000 fac0 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f99c 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e00a      	b.n	8000564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800054e:	f3af 8000 	nop.w
 8000552:	4601      	mov	r1, r0
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	b2ca      	uxtb	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf0      	blt.n	800054e <_read+0x12>
	}

return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b086      	sub	sp, #24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e009      	b.n	800059c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	60ba      	str	r2, [r7, #8]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff59 	bl	8000448 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3301      	adds	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dbf1      	blt.n	8000588 <_write+0x12>
	}
	return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_close>:

int _close(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return -1;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d6:	605a      	str	r2, [r3, #4]
	return 0;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_isatty>:

int _isatty(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
	return 0;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <_sbrk+0x5c>)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_sbrk+0x60>)
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <_sbrk+0x64>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <_sbrk+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d207      	bcs.n	8000658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000648:	f002 fbae 	bl	8002da8 <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e009      	b.n	800066c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <_sbrk+0x64>)
 8000668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20003000 	.word	0x20003000
 8000678:	00000400 	.word	0x00000400
 800067c:	20000090 	.word	0x20000090
 8000680:	20000130 	.word	0x20000130

08000684 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <SystemInit+0x20>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <SystemInit+0x20>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART1_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x58>)
 80006ec:	f001 ff38 	bl	8002560 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f7ff fecd 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000094 	.word	0x20000094
 8000704:	40013800 	.word	0x40013800

08000708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a18      	ldr	r2, [pc, #96]	; (8000788 <HAL_UART_MspInit+0x80>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d129      	bne.n	800077e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_UART_MspInit+0x84>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_UART_MspInit+0x84>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_UART_MspInit+0x84>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_UART_MspInit+0x84>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_UART_MspInit+0x84>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_UART_MspInit+0x84>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800075a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800076c:	2307      	movs	r3, #7
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f000 f9a3 	bl	8000ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40013800 	.word	0x40013800
 800078c:	40021000 	.word	0x40021000

08000790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000794:	f7ff ff76 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490d      	ldr	r1, [pc, #52]	; (80007d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0a      	ldr	r4, [pc, #40]	; (80007dc <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f002 faf9 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007c2:	f7ff fdbb 	bl	800033c <main>

080007c6 <LoopForever>:

LoopForever:
    b LoopForever
 80007c6:	e7fe      	b.n	80007c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007d4:	08003f4c 	.word	0x08003f4c
  ldr r2, =_sbss
 80007d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007dc:	20000130 	.word	0x20000130

080007e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_2_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x28>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f931 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f808 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff fe4e 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f93b 	bl	8000aaa <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f911 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000004 	.word	0x20000004
 8000868:	2000000c 	.word	0x2000000c
 800086c:	20000008 	.word	0x20000008

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x20>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x24>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_IncTick+0x24>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	2000000c 	.word	0x2000000c
 8000894:	2000011c 	.word	0x2000011c

08000898 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;  
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_GetTick+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000011c 	.word	0x2000011c

080008b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff ffee 	bl	8000898 <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffde 	bl	8000898 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff47 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff5c 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb0 	bl	8000a18 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e14e      	b.n	8000d72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8140 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x40>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0201 	and.w	r2, r3, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 809a 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b52      	ldr	r3, [pc, #328]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2d4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1d4>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb6:	4937      	ldr	r1, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f47f aea9 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	041a      	lsls	r2, r3, #16
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43d9      	mvns	r1, r3
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	400b      	ands	r3, r1
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f001 b823 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 817d 	beq.w	8001142 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e48:	4bbc      	ldr	r3, [pc, #752]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d00c      	beq.n	8000e6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e54:	4bb9      	ldr	r3, [pc, #740]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d15c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x10e>
 8000e60:	4bb6      	ldr	r3, [pc, #728]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6c:	d155      	bne.n	8000f1a <HAL_RCC_OscConfig+0x10e>
 8000e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e86:	fab3 f383 	clz	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	095b      	lsrs	r3, r3, #5
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d102      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x94>
 8000e9a:	4ba8      	ldr	r3, [pc, #672]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	e015      	b.n	8000ecc <HAL_RCC_OscConfig+0xc0>
 8000ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ebc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ec8:	4b9c      	ldr	r3, [pc, #624]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ed4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ed8:	fa92 f2a2 	rbit	r2, r2
 8000edc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ee0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ee4:	fab2 f282 	clz	r2, r2
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f002 021f 	and.w	r2, r2, #31
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 811f 	beq.w	8001140 <HAL_RCC_OscConfig+0x334>
 8000f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8116 	bne.w	8001140 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f000 bfaf 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12e>
 8000f2c:	4b83      	ldr	r3, [pc, #524]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e036      	b.n	8000fa8 <HAL_RCC_OscConfig+0x19c>
 8000f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x158>
 8000f4a:	4b7c      	ldr	r3, [pc, #496]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7b      	ldr	r2, [pc, #492]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b79      	ldr	r3, [pc, #484]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a78      	ldr	r2, [pc, #480]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e021      	b.n	8000fa8 <HAL_RCC_OscConfig+0x19c>
 8000f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x184>
 8000f76:	4b71      	ldr	r3, [pc, #452]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a70      	ldr	r2, [pc, #448]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a6d      	ldr	r2, [pc, #436]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x19c>
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a69      	ldr	r2, [pc, #420]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a66      	ldr	r2, [pc, #408]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fa8:	4b64      	ldr	r3, [pc, #400]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	f023 020f 	bic.w	r2, r3, #15
 8000fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	495f      	ldr	r1, [pc, #380]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d059      	beq.n	8001086 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fc61 	bl	8000898 <HAL_GetTick>
 8000fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fc5c 	bl	8000898 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	; 0x64
 8000fea:	d902      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f000 bf43 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001006:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0x218>
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e015      	b.n	8001050 <HAL_RCC_OscConfig+0x244>
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001040:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800104c:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_RCC_OscConfig+0x330>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001054:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001058:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001064:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001068:	fab2 f282 	clz	r2, r2
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f002 021f 	and.w	r2, r2, #31
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0ab      	beq.n	8000fdc <HAL_RCC_OscConfig+0x1d0>
 8001084:	e05d      	b.n	8001142 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fc07 	bl	8000898 <HAL_GetTick>
 800108a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	e00a      	b.n	80010a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fc02 	bl	8000898 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	d902      	bls.n	80010a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f000 bee9 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 80010a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2cc>
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_RCC_OscConfig+0x330>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	e015      	b.n	8001104 <HAL_RCC_OscConfig+0x2f8>
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_RCC_OscConfig+0x330>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001108:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800110c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001110:	fa92 f2a2 	rbit	r2, r2
 8001114:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001118:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800111c:	fab2 f282 	clz	r2, r2
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f042 0220 	orr.w	r2, r2, #32
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f002 021f 	and.w	r2, r2, #31
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ab      	bne.n	8001090 <HAL_RCC_OscConfig+0x284>
 8001138:	e003      	b.n	8001142 <HAL_RCC_OscConfig+0x336>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 817d 	beq.w	8001452 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001158:	4ba6      	ldr	r3, [pc, #664]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00b      	beq.n	800117c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001164:	4ba3      	ldr	r3, [pc, #652]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d172      	bne.n	8001256 <HAL_RCC_OscConfig+0x44a>
 8001170:	4ba0      	ldr	r3, [pc, #640]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d16c      	bne.n	8001256 <HAL_RCC_OscConfig+0x44a>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800118e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x3a0>
 80011a6:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c8>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011d0:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	f002 021f 	and.w	r2, r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	4013      	ands	r3, r2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <HAL_RCC_OscConfig+0x410>
 8001206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d002      	beq.n	800121c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	f000 be2e 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b75      	ldr	r3, [pc, #468]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	21f8      	movs	r1, #248	; 0xf8
 8001232:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800123a:	fa91 f1a1 	rbit	r1, r1
 800123e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001242:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001246:	fab1 f181 	clz	r1, r1
 800124a:	b2c9      	uxtb	r1, r1
 800124c:	408b      	lsls	r3, r1
 800124e:	4969      	ldr	r1, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001254:	e0fd      	b.n	8001452 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8088 	beq.w	8001378 <HAL_RCC_OscConfig+0x56c>
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800127a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001288:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	2301      	movs	r3, #1
 8001292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb00 	bl	8000898 <HAL_GetTick>
 8001298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fafb 	bl	8000898 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d902      	bls.n	80012b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f000 bde2 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_RCC_OscConfig+0x4d8>
 80012de:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e013      	b.n	800130c <HAL_RCC_OscConfig+0x500>
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80012fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	2202      	movs	r2, #2
 800130e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001312:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001316:	fa92 f2a2 	rbit	r2, r2
 800131a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800131e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001322:	fab2 f282 	clz	r2, r2
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	f002 021f 	and.w	r2, r2, #31
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f202 	lsl.w	r2, r1, r2
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0af      	beq.n	800129e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	21f8      	movs	r1, #248	; 0xf8
 8001354:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800135c:	fa91 f1a1 	rbit	r1, r1
 8001360:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001364:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001368:	fab1 f181 	clz	r1, r1
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	408b      	lsls	r3, r1
 8001370:	4920      	ldr	r1, [pc, #128]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
 8001376:	e06c      	b.n	8001452 <HAL_RCC_OscConfig+0x646>
 8001378:	2301      	movs	r3, #1
 800137a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800138a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fa78 	bl	8000898 <HAL_GetTick>
 80013a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fa73 	bl	8000898 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d902      	bls.n	80013c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	f000 bd5a 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d104      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5ec>
 80013ee:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <HAL_RCC_OscConfig+0x5e8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	e015      	b.n	8001420 <HAL_RCC_OscConfig+0x614>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001410:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001414:	fa93 f3a3 	rbit	r3, r3
 8001418:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800141c:	4bc8      	ldr	r3, [pc, #800]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	2202      	movs	r2, #2
 8001422:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001426:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800142a:	fa92 f2a2 	rbit	r2, r2
 800142e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001432:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001436:	fab2 f282 	clz	r2, r2
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	f002 021f 	and.w	r2, r2, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ad      	bne.n	80013ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8110 	beq.w	8001688 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d079      	beq.n	800156c <HAL_RCC_OscConfig+0x760>
 8001478:	2301      	movs	r3, #1
 800147a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800148a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4bab      	ldr	r3, [pc, #684]	; (8001744 <HAL_RCC_OscConfig+0x938>)
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	2301      	movs	r3, #1
 80014a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f9f9 	bl	8000898 <HAL_GetTick>
 80014a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff f9f4 	bl	8000898 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d902      	bls.n	80014c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	f000 bcdb 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800151a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001528:	2102      	movs	r1, #2
 800152a:	6019      	str	r1, [r3, #0]
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	fa93 f1a3 	rbit	r1, r3
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001542:	6019      	str	r1, [r3, #0]
  return result;
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0a0      	beq.n	80014ac <HAL_RCC_OscConfig+0x6a0>
 800156a:	e08d      	b.n	8001688 <HAL_RCC_OscConfig+0x87c>
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800158e:	601a      	str	r2, [r3, #0]
  return result;
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001598:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x938>)
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	461a      	mov	r2, r3
 80015aa:	2300      	movs	r3, #0
 80015ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff f973 	bl	8000898 <HAL_GetTick>
 80015b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff f96e 	bl	8000898 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d902      	bls.n	80015ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	f000 bc55 	b.w	8001e78 <HAL_RCC_OscConfig+0x106c>
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f2a3 	rbit	r2, r3
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800161e:	2202      	movs	r2, #2
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001638:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 800163c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001646:	2102      	movs	r1, #2
 8001648:	6019      	str	r1, [r3, #0]
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f1a3 	rbit	r1, r3
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001660:	6019      	str	r1, [r3, #0]
  return result;
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	2101      	movs	r1, #1
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d197      	bne.n	80015b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 81a1 	beq.w	80019e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d116      	bne.n	80016de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_RCC_OscConfig+0x93c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_RCC_OscConfig+0x93c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_RCC_OscConfig+0x93c>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f8cf 	bl	8000898 <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	e009      	b.n	8001714 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff f8ca 	bl	8000898 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e3b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <HAL_RCC_OscConfig+0x93c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10d      	bne.n	800174c <HAL_RCC_OscConfig+0x940>
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a02      	ldr	r2, [pc, #8]	; (8001740 <HAL_RCC_OscConfig+0x934>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	e03c      	b.n	80017b8 <HAL_RCC_OscConfig+0x9ac>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	10908120 	.word	0x10908120
 8001748:	40007000 	.word	0x40007000
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0x96a>
 800175c:	4bc1      	ldr	r3, [pc, #772]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4ac0      	ldr	r2, [pc, #768]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6213      	str	r3, [r2, #32]
 8001768:	4bbe      	ldr	r3, [pc, #760]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4abd      	ldr	r2, [pc, #756]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e020      	b.n	80017b8 <HAL_RCC_OscConfig+0x9ac>
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x994>
 8001786:	4bb7      	ldr	r3, [pc, #732]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4ab6      	ldr	r2, [pc, #728]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	4bb4      	ldr	r3, [pc, #720]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4ab3      	ldr	r2, [pc, #716]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0x9ac>
 80017a0:	4bb0      	ldr	r3, [pc, #704]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4aaf      	ldr	r2, [pc, #700]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	4bad      	ldr	r3, [pc, #692]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4aac      	ldr	r2, [pc, #688]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80017b2:	f023 0304 	bic.w	r3, r3, #4
 80017b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8081 	beq.w	80018cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f865 	bl	8000898 <HAL_GetTick>
 80017ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff f860 	bl	8000898 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e345      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
 80017ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001818:	2202      	movs	r2, #2
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001820:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	fa93 f2a3 	rbit	r2, r3
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001832:	601a      	str	r2, [r3, #0]
  return result;
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800183c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0xa4c>
 8001852:	4b84      	ldr	r3, [pc, #528]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	e013      	b.n	8001880 <HAL_RCC_OscConfig+0xa74>
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001860:	2202      	movs	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	4b79      	ldr	r3, [pc, #484]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001884:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001888:	2102      	movs	r1, #2
 800188a:	6011      	str	r1, [r2, #0]
 800188c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001890:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	fa92 f1a2 	rbit	r1, r2
 800189a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018a2:	6011      	str	r1, [r2, #0]
  return result;
 80018a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d084      	beq.n	80017d4 <HAL_RCC_OscConfig+0x9c8>
 80018ca:	e07f      	b.n	80019cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018cc:	f7fe ffe4 	bl	8000898 <HAL_GetTick>
 80018d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7fe ffdf 	bl	8000898 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2c4      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800191a:	2202      	movs	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	fa93 f2a3 	rbit	r2, r3
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001934:	601a      	str	r2, [r3, #0]
  return result;
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800193e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	b2db      	uxtb	r3, r3
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d102      	bne.n	800195a <HAL_RCC_OscConfig+0xb4e>
 8001954:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	e013      	b.n	8001982 <HAL_RCC_OscConfig+0xb76>
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001986:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800198a:	2102      	movs	r1, #2
 800198c:	6011      	str	r1, [r2, #0]
 800198e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001992:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fa92 f1a2 	rbit	r1, r2
 800199c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019a4:	6011      	str	r1, [r2, #0]
  return result;
 80019a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	fab2 f282 	clz	r2, r2
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	f002 021f 	and.w	r2, r2, #31
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d184      	bne.n	80018d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80019da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8242 	beq.w	8001e76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_RCC_OscConfig+0xc58>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	f000 8213 	beq.w	8001e26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f040 8162 	bne.w	8001cd6 <HAL_RCC_OscConfig+0xeca>
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a36:	601a      	str	r2, [r3, #0]
  return result;
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	461a      	mov	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe ff1e 	bl	8000898 <HAL_GetTick>
 8001a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	e00c      	b.n	8001a7c <HAL_RCC_OscConfig+0xc70>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7fe ff16 	bl	8000898 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1fd      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aa0:	601a      	str	r2, [r3, #0]
  return result;
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xcba>
 8001ac0:	4bb0      	ldr	r3, [pc, #704]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e027      	b.n	8001b16 <HAL_RCC_OscConfig+0xd0a>
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4b9c      	ldr	r3, [pc, #624]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b22:	6011      	str	r1, [r2, #0]
 8001b24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	fa92 f1a2 	rbit	r1, r2
 8001b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b3a:	6011      	str	r1, [r2, #0]
  return result;
 8001b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fab2 f282 	clz	r2, r2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f042 0220 	orr.w	r2, r2, #32
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	f002 021f 	and.w	r2, r2, #31
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d182      	bne.n	8001a68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	430b      	orrs	r3, r1
 8001b84:	497f      	ldr	r1, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bae:	601a      	str	r2, [r3, #0]
  return result;
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2301      	movs	r3, #1
 8001bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fe62 	bl	8000898 <HAL_GetTick>
 8001bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe fe5d 	bl	8000898 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e144      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0xe2c>
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e027      	b.n	8001c88 <HAL_RCC_OscConfig+0xe7c>
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c94:	6011      	str	r1, [r2, #0]
 8001c96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fa92 f1a2 	rbit	r1, r2
 8001ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cac:	6011      	str	r1, [r2, #0]
  return result;
 8001cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f002 021f 	and.w	r2, r2, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d082      	beq.n	8001bda <HAL_RCC_OscConfig+0xdce>
 8001cd4:	e0cf      	b.n	8001e76 <HAL_RCC_OscConfig+0x106a>
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001cfa:	601a      	str	r2, [r3, #0]
  return result;
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fdbc 	bl	8000898 <HAL_GetTick>
 8001d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe fdb7 	bl	8000898 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e09e      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d5e:	601a      	str	r2, [r3, #0]
  return result;
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d104      	bne.n	8001d88 <HAL_RCC_OscConfig+0xf7c>
 8001d7e:	4b01      	ldr	r3, [pc, #4]	; (8001d84 <HAL_RCC_OscConfig+0xf78>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	e029      	b.n	8001dd8 <HAL_RCC_OscConfig+0xfcc>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x1078>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ddc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001de0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001de4:	6011      	str	r1, [r2, #0]
 8001de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fa92 f1a2 	rbit	r1, r2
 8001df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001dfc:	6011      	str	r1, [r2, #0]
  return result;
 8001dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d180      	bne.n	8001d26 <HAL_RCC_OscConfig+0xf1a>
 8001e24:	e027      	b.n	8001e76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01e      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x1078>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d10b      	bne.n	8001e72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b09e      	sub	sp, #120	; 0x78
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e162      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b90      	ldr	r3, [pc, #576]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b8d      	ldr	r3, [pc, #564]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	498b      	ldr	r1, [pc, #556]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e14a      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	497f      	ldr	r1, [pc, #508]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80dc 	beq.w	80020b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d13c      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xf6>
 8001f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xa6>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e00f      	b.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
 8001f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	663b      	str	r3, [r7, #96]	; 0x60
 8001f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f52:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f56:	fa92 f2a2 	rbit	r2, r2
 8001f5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f002 021f 	and.w	r2, r2, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d17b      	bne.n	8002072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0f3      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d13c      	bne.n	8002000 <HAL_RCC_ClockConfig+0x178>
 8001f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x128>
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x148>
 8001fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	f002 021f 	and.w	r2, r2, #31
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d13a      	bne.n	8002072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b2      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
 8002000:	2302      	movs	r3, #2
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d102      	bne.n	8002028 <HAL_RCC_ClockConfig+0x1a0>
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	e00d      	b.n	8002044 <HAL_RCC_ClockConfig+0x1bc>
 8002028:	2302      	movs	r3, #2
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	2202      	movs	r2, #2
 8002046:	61ba      	str	r2, [r7, #24]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	617a      	str	r2, [r7, #20]
  return result;
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e079      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 0203 	bic.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	491a      	ldr	r1, [pc, #104]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe fc08 	bl	8000898 <HAL_GetTick>
 8002088:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fc04 	bl	8000898 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e061      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 020c 	and.w	r2, r3, #12
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d1eb      	bne.n	800208c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d214      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4906      	ldr	r1, [pc, #24]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_ClockConfig+0x25c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e040      	b.n	8002166 <HAL_RCC_ClockConfig+0x2de>
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_ClockConfig+0x2e8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	491a      	ldr	r1, [pc, #104]	; (8002170 <HAL_RCC_ClockConfig+0x2e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x2e8>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4912      	ldr	r1, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x2e8>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800212a:	f000 f829 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800212e:	4601      	mov	r1, r0
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_RCC_ClockConfig+0x2e8>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002138:	22f0      	movs	r2, #240	; 0xf0
 800213a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	60fa      	str	r2, [r7, #12]
  return result;
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	40d3      	lsrs	r3, r2
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x2ec>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	fa21 f303 	lsr.w	r3, r1, r3
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_RCC_ClockConfig+0x2f0>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_RCC_ClockConfig+0x2f4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fb56 	bl	8000810 <HAL_InitTick>
  
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3778      	adds	r7, #120	; 0x78
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	08003e74 	.word	0x08003e74
 8002178:	20000004 	.word	0x20000004
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_GetSysClockFreq+0xc0>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x30>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ae:	e03c      	b.n	800222a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b2:	623b      	str	r3, [r7, #32]
      break;
 80021b4:	e03c      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	607a      	str	r2, [r7, #4]
  return result;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	40d3      	lsrs	r3, r2
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	220f      	movs	r2, #15
 80021e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	60fa      	str	r2, [r7, #12]
  return result;
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_RCC_GetSysClockFreq+0xcc>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_RCC_GetSysClockFreq+0xc4>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	e004      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_GetSysClockFreq+0xd0>)
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	623b      	str	r3, [r7, #32]
      break;
 8002228:	e002      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_GetSysClockFreq+0xc4>)
 800222c:	623b      	str	r3, [r7, #32]
      break;
 800222e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002230:	6a3b      	ldr	r3, [r7, #32]
}
 8002232:	4618      	mov	r0, r3
 8002234:	372c      	adds	r7, #44	; 0x2c
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	007a1200 	.word	0x007a1200
 8002248:	08003e8c 	.word	0x08003e8c
 800224c:	08003e9c 	.word	0x08003e9c
 8002250:	003d0900 	.word	0x003d0900

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_RCC_GetHCLKFreq+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002272:	f7ff ffef 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002276:	4601      	mov	r1, r0
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002280:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002284:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	603a      	str	r2, [r7, #0]
  return result;
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	40d3      	lsrs	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08003e84 	.word	0x08003e84

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022b6:	f7ff ffcd 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	603a      	str	r2, [r7, #0]
  return result;
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	40d3      	lsrs	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08003e84 	.word	0x08003e84

080022f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b092      	sub	sp, #72	; 0x48
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80cd 	beq.w	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10e      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b85      	ldr	r3, [pc, #532]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe fa9d 	bl	8000898 <HAL_GetTick>
 800235e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7fe fa99 	bl	8000898 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d901      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e0ea      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002380:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002388:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d07d      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002398:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800239a:	429a      	cmp	r2, r3
 800239c:	d076      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800239e:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	4b66      	ldr	r3, [pc, #408]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	2301      	movs	r3, #1
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b5d      	ldr	r3, [pc, #372]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	461a      	mov	r2, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d045      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fa4a 	bl	8000898 <HAL_GetTick>
 8002404:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fa46 	bl	8000898 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e095      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800241e:	2302      	movs	r3, #2
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
 800242a:	2302      	movs	r3, #2
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	61fb      	str	r3, [r7, #28]
  return result;
 8002436:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d102      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	e007      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002452:	2302      	movs	r3, #2
 8002454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2202      	movs	r2, #2
 8002464:	613a      	str	r2, [r7, #16]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	fa92 f2a2 	rbit	r2, r2
 800246c:	60fa      	str	r2, [r7, #12]
  return result;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0bd      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800248c:	4b31      	ldr	r3, [pc, #196]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	492e      	ldr	r1, [pc, #184]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	4313      	orrs	r3, r2
 800249c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800249e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f023 0210 	bic.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	491a      	ldr	r1, [pc, #104]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4913      	ldr	r1, [pc, #76]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	490b      	ldr	r1, [pc, #44]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	4313      	orrs	r3, r2
 8002528:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	4313      	orrs	r3, r2
 8002546:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3748      	adds	r7, #72	; 0x48
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	10908100 	.word	0x10908100

08002560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e040      	b.n	80025f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f8c0 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8b6 	bl	8002710 <UART_SetConfig>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e022      	b.n	80025f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9e0 	bl	800297c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fa67 	bl	8002ac0 <UART_CheckIdleState>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002610:	2b20      	cmp	r3, #32
 8002612:	d178      	bne.n	8002706 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_UART_Transmit+0x24>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e071      	b.n	8002708 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2221      	movs	r2, #33	; 0x21
 8002630:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002632:	f7fe f931 	bl	8000898 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	d108      	bne.n	8002664 <HAL_UART_Transmit+0x68>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	e003      	b.n	800266c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800266c:	e030      	b.n	80026d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2200      	movs	r2, #0
 8002676:	2180      	movs	r1, #128	; 0x80
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fac9 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e03c      	b.n	8002708 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a0:	b292      	uxth	r2, r2
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	3302      	adds	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e008      	b.n	80026be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b292      	uxth	r2, r2
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1c8      	bne.n	800266e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa92 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e005      	b.n	8002708 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <UART_SetConfig+0x254>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	430b      	orrs	r3, r1
 8002746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a78      	ldr	r2, [pc, #480]	; (8002968 <UART_SetConfig+0x258>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d120      	bne.n	80027ce <UART_SetConfig+0xbe>
 800278c:	4b77      	ldr	r3, [pc, #476]	; (800296c <UART_SetConfig+0x25c>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b03      	cmp	r3, #3
 8002796:	d817      	bhi.n	80027c8 <UART_SetConfig+0xb8>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <UART_SetConfig+0x90>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027c3 	.word	0x080027c3
 80027ac:	080027b7 	.word	0x080027b7
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e01d      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027b6:	2302      	movs	r3, #2
 80027b8:	77fb      	strb	r3, [r7, #31]
 80027ba:	e01a      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027bc:	2304      	movs	r3, #4
 80027be:	77fb      	strb	r3, [r7, #31]
 80027c0:	e017      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027c2:	2308      	movs	r3, #8
 80027c4:	77fb      	strb	r3, [r7, #31]
 80027c6:	e014      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027c8:	2310      	movs	r3, #16
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	e011      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <UART_SetConfig+0x260>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d102      	bne.n	80027de <UART_SetConfig+0xce>
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e009      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a64      	ldr	r2, [pc, #400]	; (8002974 <UART_SetConfig+0x264>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <UART_SetConfig+0xde>
 80027e8:	2300      	movs	r3, #0
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e001      	b.n	80027f2 <UART_SetConfig+0xe2>
 80027ee:	2310      	movs	r3, #16
 80027f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fa:	d15a      	bne.n	80028b2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80027fc:	7ffb      	ldrb	r3, [r7, #31]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d827      	bhi.n	8002852 <UART_SetConfig+0x142>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <UART_SetConfig+0xf8>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800282d 	.word	0x0800282d
 800280c:	08002835 	.word	0x08002835
 8002810:	0800283d 	.word	0x0800283d
 8002814:	08002853 	.word	0x08002853
 8002818:	08002843 	.word	0x08002843
 800281c:	08002853 	.word	0x08002853
 8002820:	08002853 	.word	0x08002853
 8002824:	08002853 	.word	0x08002853
 8002828:	0800284b 	.word	0x0800284b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800282c:	f7ff fd1e 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 8002830:	61b8      	str	r0, [r7, #24]
        break;
 8002832:	e013      	b.n	800285c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002834:	f7ff fd3c 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 8002838:	61b8      	str	r0, [r7, #24]
        break;
 800283a:	e00f      	b.n	800285c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <UART_SetConfig+0x268>)
 800283e:	61bb      	str	r3, [r7, #24]
        break;
 8002840:	e00c      	b.n	800285c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002842:	f7ff fc9d 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 8002846:	61b8      	str	r0, [r7, #24]
        break;
 8002848:	e008      	b.n	800285c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	61bb      	str	r3, [r7, #24]
        break;
 8002850:	e004      	b.n	800285c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	77bb      	strb	r3, [r7, #30]
        break;
 800285a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d074      	beq.n	800294c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	005a      	lsls	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b0f      	cmp	r3, #15
 800287c:	d916      	bls.n	80028ac <UART_SetConfig+0x19c>
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d212      	bcs.n	80028ac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f023 030f 	bic.w	r3, r3, #15
 800288e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	b29a      	uxth	r2, r3
 800289c:	89fb      	ldrh	r3, [r7, #14]
 800289e:	4313      	orrs	r3, r2
 80028a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	89fa      	ldrh	r2, [r7, #14]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e04f      	b.n	800294c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77bb      	strb	r3, [r7, #30]
 80028b0:	e04c      	b.n	800294c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d828      	bhi.n	800290a <UART_SetConfig+0x1fa>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <UART_SetConfig+0x1b0>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028e5 	.word	0x080028e5
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	0800290b 	.word	0x0800290b
 80028d0:	080028fb 	.word	0x080028fb
 80028d4:	0800290b 	.word	0x0800290b
 80028d8:	0800290b 	.word	0x0800290b
 80028dc:	0800290b 	.word	0x0800290b
 80028e0:	08002903 	.word	0x08002903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e4:	f7ff fcc2 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 80028e8:	61b8      	str	r0, [r7, #24]
        break;
 80028ea:	e013      	b.n	8002914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028ec:	f7ff fce0 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 80028f0:	61b8      	str	r0, [r7, #24]
        break;
 80028f2:	e00f      	b.n	8002914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <UART_SetConfig+0x268>)
 80028f6:	61bb      	str	r3, [r7, #24]
        break;
 80028f8:	e00c      	b.n	8002914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028fa:	f7ff fc41 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 80028fe:	61b8      	str	r0, [r7, #24]
        break;
 8002900:	e008      	b.n	8002914 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002906:	61bb      	str	r3, [r7, #24]
        break;
 8002908:	e004      	b.n	8002914 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	77bb      	strb	r3, [r7, #30]
        break;
 8002912:	bf00      	nop
    }

    if (pclk != 0U)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	085a      	lsrs	r2, r3, #1
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	441a      	add	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d909      	bls.n	8002948 <UART_SetConfig+0x238>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293a:	d205      	bcs.n	8002948 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	e001      	b.n	800294c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002958:	7fbb      	ldrb	r3, [r7, #30]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	efff69f3 	.word	0xefff69f3
 8002968:	40013800 	.word	0x40013800
 800296c:	40021000 	.word	0x40021000
 8002970:	40004400 	.word	0x40004400
 8002974:	40004800 	.word	0x40004800
 8002978:	007a1200 	.word	0x007a1200

0800297c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01a      	beq.n	8002a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7a:	d10a      	bne.n	8002a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b098      	sub	sp, #96	; 0x60
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad0:	f7fd fee2 	bl	8000898 <HAL_GetTick>
 8002ad4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d12e      	bne.n	8002b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	2200      	movs	r2, #0
 8002aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f88c 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d021      	beq.n	8002b42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b1e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e6      	bne.n	8002afe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e062      	b.n	8002c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d149      	bne.n	8002be4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f856 	bl	8002c10 <UART_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03c      	beq.n	8002be4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	623b      	str	r3, [r7, #32]
   return(result);
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e6      	bne.n	8002b6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3308      	adds	r3, #8
 8002ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3308      	adds	r3, #8
 8002bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bbc:	61fa      	str	r2, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e5      	bne.n	8002b9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e011      	b.n	8002c08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3758      	adds	r7, #88	; 0x58
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	e049      	b.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d045      	beq.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7fd fe35 	bl	8000898 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e048      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d031      	beq.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d110      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2208      	movs	r2, #8
 8002c66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f838 	bl	8002cde <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2208      	movs	r2, #8
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e029      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c90:	d111      	bne.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f81e 	bl	8002cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e00f      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d0a6      	beq.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b095      	sub	sp, #84	; 0x54
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	643b      	str	r3, [r7, #64]	; 0x40
 8002d06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e6      	bne.n	8002ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3308      	adds	r3, #8
 8002d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d118      	bne.n	8002d86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f023 0310 	bic.w	r3, r3, #16
 8002d68:	647b      	str	r3, [r7, #68]	; 0x44
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6979      	ldr	r1, [r7, #20]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e6      	bne.n	8002d54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002d9a:	bf00      	nop
 8002d9c:	3754      	adds	r7, #84	; 0x54
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <__errno>:
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <__errno+0x8>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000010 	.word	0x20000010

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	; (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	; (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	; (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	; (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f001 f824 	bl	8003e14 <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08003f44 	.word	0x08003f44
 8002df0:	08003f44 	.word	0x08003f44
 8002df4:	08003f44 	.word	0x08003f44
 8002df8:	08003f48 	.word	0x08003f48

08002dfc <memset>:
 8002dfc:	4402      	add	r2, r0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <iprintf>:
 8002e0c:	b40f      	push	{r0, r1, r2, r3}
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <iprintf+0x2c>)
 8002e10:	b513      	push	{r0, r1, r4, lr}
 8002e12:	681c      	ldr	r4, [r3, #0]
 8002e14:	b124      	cbz	r4, 8002e20 <iprintf+0x14>
 8002e16:	69a3      	ldr	r3, [r4, #24]
 8002e18:	b913      	cbnz	r3, 8002e20 <iprintf+0x14>
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f000 fa5e 	bl	80032dc <__sinit>
 8002e20:	ab05      	add	r3, sp, #20
 8002e22:	9a04      	ldr	r2, [sp, #16]
 8002e24:	68a1      	ldr	r1, [r4, #8]
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 fc67 	bl	80036fc <_vfiprintf_r>
 8002e2e:	b002      	add	sp, #8
 8002e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e34:	b004      	add	sp, #16
 8002e36:	4770      	bx	lr
 8002e38:	20000010 	.word	0x20000010

08002e3c <_puts_r>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	460e      	mov	r6, r1
 8002e40:	4605      	mov	r5, r0
 8002e42:	b118      	cbz	r0, 8002e4c <_puts_r+0x10>
 8002e44:	6983      	ldr	r3, [r0, #24]
 8002e46:	b90b      	cbnz	r3, 8002e4c <_puts_r+0x10>
 8002e48:	f000 fa48 	bl	80032dc <__sinit>
 8002e4c:	69ab      	ldr	r3, [r5, #24]
 8002e4e:	68ac      	ldr	r4, [r5, #8]
 8002e50:	b913      	cbnz	r3, 8002e58 <_puts_r+0x1c>
 8002e52:	4628      	mov	r0, r5
 8002e54:	f000 fa42 	bl	80032dc <__sinit>
 8002e58:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <_puts_r+0xd0>)
 8002e5a:	429c      	cmp	r4, r3
 8002e5c:	d120      	bne.n	8002ea0 <_puts_r+0x64>
 8002e5e:	686c      	ldr	r4, [r5, #4]
 8002e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e62:	07db      	lsls	r3, r3, #31
 8002e64:	d405      	bmi.n	8002e72 <_puts_r+0x36>
 8002e66:	89a3      	ldrh	r3, [r4, #12]
 8002e68:	0598      	lsls	r0, r3, #22
 8002e6a:	d402      	bmi.n	8002e72 <_puts_r+0x36>
 8002e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e6e:	f000 fad3 	bl	8003418 <__retarget_lock_acquire_recursive>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	0719      	lsls	r1, r3, #28
 8002e76:	d51d      	bpl.n	8002eb4 <_puts_r+0x78>
 8002e78:	6923      	ldr	r3, [r4, #16]
 8002e7a:	b1db      	cbz	r3, 8002eb4 <_puts_r+0x78>
 8002e7c:	3e01      	subs	r6, #1
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60a3      	str	r3, [r4, #8]
 8002e88:	bb39      	cbnz	r1, 8002eda <_puts_r+0x9e>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da38      	bge.n	8002f00 <_puts_r+0xc4>
 8002e8e:	4622      	mov	r2, r4
 8002e90:	210a      	movs	r1, #10
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 f848 	bl	8002f28 <__swbuf_r>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d011      	beq.n	8002ec0 <_puts_r+0x84>
 8002e9c:	250a      	movs	r5, #10
 8002e9e:	e011      	b.n	8002ec4 <_puts_r+0x88>
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <_puts_r+0xd4>)
 8002ea2:	429c      	cmp	r4, r3
 8002ea4:	d101      	bne.n	8002eaa <_puts_r+0x6e>
 8002ea6:	68ac      	ldr	r4, [r5, #8]
 8002ea8:	e7da      	b.n	8002e60 <_puts_r+0x24>
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <_puts_r+0xd8>)
 8002eac:	429c      	cmp	r4, r3
 8002eae:	bf08      	it	eq
 8002eb0:	68ec      	ldreq	r4, [r5, #12]
 8002eb2:	e7d5      	b.n	8002e60 <_puts_r+0x24>
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f000 f888 	bl	8002fcc <__swsetup_r>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d0dd      	beq.n	8002e7c <_puts_r+0x40>
 8002ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ec6:	07da      	lsls	r2, r3, #31
 8002ec8:	d405      	bmi.n	8002ed6 <_puts_r+0x9a>
 8002eca:	89a3      	ldrh	r3, [r4, #12]
 8002ecc:	059b      	lsls	r3, r3, #22
 8002ece:	d402      	bmi.n	8002ed6 <_puts_r+0x9a>
 8002ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ed2:	f000 faa2 	bl	800341a <__retarget_lock_release_recursive>
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da04      	bge.n	8002ee8 <_puts_r+0xac>
 8002ede:	69a2      	ldr	r2, [r4, #24]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dc06      	bgt.n	8002ef2 <_puts_r+0xb6>
 8002ee4:	290a      	cmp	r1, #10
 8002ee6:	d004      	beq.n	8002ef2 <_puts_r+0xb6>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	6022      	str	r2, [r4, #0]
 8002eee:	7019      	strb	r1, [r3, #0]
 8002ef0:	e7c5      	b.n	8002e7e <_puts_r+0x42>
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f000 f817 	bl	8002f28 <__swbuf_r>
 8002efa:	3001      	adds	r0, #1
 8002efc:	d1bf      	bne.n	8002e7e <_puts_r+0x42>
 8002efe:	e7df      	b.n	8002ec0 <_puts_r+0x84>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	250a      	movs	r5, #10
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	701d      	strb	r5, [r3, #0]
 8002f0a:	e7db      	b.n	8002ec4 <_puts_r+0x88>
 8002f0c:	08003ed0 	.word	0x08003ed0
 8002f10:	08003ef0 	.word	0x08003ef0
 8002f14:	08003eb0 	.word	0x08003eb0

08002f18 <puts>:
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <puts+0xc>)
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	f7ff bf8d 	b.w	8002e3c <_puts_r>
 8002f22:	bf00      	nop
 8002f24:	20000010 	.word	0x20000010

08002f28 <__swbuf_r>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	460e      	mov	r6, r1
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	4605      	mov	r5, r0
 8002f30:	b118      	cbz	r0, 8002f3a <__swbuf_r+0x12>
 8002f32:	6983      	ldr	r3, [r0, #24]
 8002f34:	b90b      	cbnz	r3, 8002f3a <__swbuf_r+0x12>
 8002f36:	f000 f9d1 	bl	80032dc <__sinit>
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <__swbuf_r+0x98>)
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	d12b      	bne.n	8002f98 <__swbuf_r+0x70>
 8002f40:	686c      	ldr	r4, [r5, #4]
 8002f42:	69a3      	ldr	r3, [r4, #24]
 8002f44:	60a3      	str	r3, [r4, #8]
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	071a      	lsls	r2, r3, #28
 8002f4a:	d52f      	bpl.n	8002fac <__swbuf_r+0x84>
 8002f4c:	6923      	ldr	r3, [r4, #16]
 8002f4e:	b36b      	cbz	r3, 8002fac <__swbuf_r+0x84>
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	1ac0      	subs	r0, r0, r3
 8002f56:	6963      	ldr	r3, [r4, #20]
 8002f58:	b2f6      	uxtb	r6, r6
 8002f5a:	4283      	cmp	r3, r0
 8002f5c:	4637      	mov	r7, r6
 8002f5e:	dc04      	bgt.n	8002f6a <__swbuf_r+0x42>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 f926 	bl	80031b4 <_fflush_r>
 8002f68:	bb30      	cbnz	r0, 8002fb8 <__swbuf_r+0x90>
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	60a3      	str	r3, [r4, #8]
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	6022      	str	r2, [r4, #0]
 8002f76:	701e      	strb	r6, [r3, #0]
 8002f78:	6963      	ldr	r3, [r4, #20]
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	4283      	cmp	r3, r0
 8002f7e:	d004      	beq.n	8002f8a <__swbuf_r+0x62>
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	07db      	lsls	r3, r3, #31
 8002f84:	d506      	bpl.n	8002f94 <__swbuf_r+0x6c>
 8002f86:	2e0a      	cmp	r6, #10
 8002f88:	d104      	bne.n	8002f94 <__swbuf_r+0x6c>
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f000 f911 	bl	80031b4 <_fflush_r>
 8002f92:	b988      	cbnz	r0, 8002fb8 <__swbuf_r+0x90>
 8002f94:	4638      	mov	r0, r7
 8002f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <__swbuf_r+0x9c>)
 8002f9a:	429c      	cmp	r4, r3
 8002f9c:	d101      	bne.n	8002fa2 <__swbuf_r+0x7a>
 8002f9e:	68ac      	ldr	r4, [r5, #8]
 8002fa0:	e7cf      	b.n	8002f42 <__swbuf_r+0x1a>
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <__swbuf_r+0xa0>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	bf08      	it	eq
 8002fa8:	68ec      	ldreq	r4, [r5, #12]
 8002faa:	e7ca      	b.n	8002f42 <__swbuf_r+0x1a>
 8002fac:	4621      	mov	r1, r4
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 f80c 	bl	8002fcc <__swsetup_r>
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0cb      	beq.n	8002f50 <__swbuf_r+0x28>
 8002fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8002fbc:	e7ea      	b.n	8002f94 <__swbuf_r+0x6c>
 8002fbe:	bf00      	nop
 8002fc0:	08003ed0 	.word	0x08003ed0
 8002fc4:	08003ef0 	.word	0x08003ef0
 8002fc8:	08003eb0 	.word	0x08003eb0

08002fcc <__swsetup_r>:
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <__swsetup_r+0xcc>)
 8002fce:	b570      	push	{r4, r5, r6, lr}
 8002fd0:	681d      	ldr	r5, [r3, #0]
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	b125      	cbz	r5, 8002fe2 <__swsetup_r+0x16>
 8002fd8:	69ab      	ldr	r3, [r5, #24]
 8002fda:	b913      	cbnz	r3, 8002fe2 <__swsetup_r+0x16>
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f000 f97d 	bl	80032dc <__sinit>
 8002fe2:	4b2e      	ldr	r3, [pc, #184]	; (800309c <__swsetup_r+0xd0>)
 8002fe4:	429c      	cmp	r4, r3
 8002fe6:	d10f      	bne.n	8003008 <__swsetup_r+0x3c>
 8002fe8:	686c      	ldr	r4, [r5, #4]
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ff0:	0719      	lsls	r1, r3, #28
 8002ff2:	d42c      	bmi.n	800304e <__swsetup_r+0x82>
 8002ff4:	06dd      	lsls	r5, r3, #27
 8002ff6:	d411      	bmi.n	800301c <__swsetup_r+0x50>
 8002ff8:	2309      	movs	r3, #9
 8002ffa:	6033      	str	r3, [r6, #0]
 8002ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	e03e      	b.n	8003086 <__swsetup_r+0xba>
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <__swsetup_r+0xd4>)
 800300a:	429c      	cmp	r4, r3
 800300c:	d101      	bne.n	8003012 <__swsetup_r+0x46>
 800300e:	68ac      	ldr	r4, [r5, #8]
 8003010:	e7eb      	b.n	8002fea <__swsetup_r+0x1e>
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <__swsetup_r+0xd8>)
 8003014:	429c      	cmp	r4, r3
 8003016:	bf08      	it	eq
 8003018:	68ec      	ldreq	r4, [r5, #12]
 800301a:	e7e6      	b.n	8002fea <__swsetup_r+0x1e>
 800301c:	0758      	lsls	r0, r3, #29
 800301e:	d512      	bpl.n	8003046 <__swsetup_r+0x7a>
 8003020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003022:	b141      	cbz	r1, 8003036 <__swsetup_r+0x6a>
 8003024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003028:	4299      	cmp	r1, r3
 800302a:	d002      	beq.n	8003032 <__swsetup_r+0x66>
 800302c:	4630      	mov	r0, r6
 800302e:	f000 fa5b 	bl	80034e8 <_free_r>
 8003032:	2300      	movs	r3, #0
 8003034:	6363      	str	r3, [r4, #52]	; 0x34
 8003036:	89a3      	ldrh	r3, [r4, #12]
 8003038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800303c:	81a3      	strh	r3, [r4, #12]
 800303e:	2300      	movs	r3, #0
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	6923      	ldr	r3, [r4, #16]
 8003050:	b94b      	cbnz	r3, 8003066 <__swsetup_r+0x9a>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d003      	beq.n	8003066 <__swsetup_r+0x9a>
 800305e:	4621      	mov	r1, r4
 8003060:	4630      	mov	r0, r6
 8003062:	f000 fa01 	bl	8003468 <__smakebuf_r>
 8003066:	89a0      	ldrh	r0, [r4, #12]
 8003068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800306c:	f010 0301 	ands.w	r3, r0, #1
 8003070:	d00a      	beq.n	8003088 <__swsetup_r+0xbc>
 8003072:	2300      	movs	r3, #0
 8003074:	60a3      	str	r3, [r4, #8]
 8003076:	6963      	ldr	r3, [r4, #20]
 8003078:	425b      	negs	r3, r3
 800307a:	61a3      	str	r3, [r4, #24]
 800307c:	6923      	ldr	r3, [r4, #16]
 800307e:	b943      	cbnz	r3, 8003092 <__swsetup_r+0xc6>
 8003080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003084:	d1ba      	bne.n	8002ffc <__swsetup_r+0x30>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	0781      	lsls	r1, r0, #30
 800308a:	bf58      	it	pl
 800308c:	6963      	ldrpl	r3, [r4, #20]
 800308e:	60a3      	str	r3, [r4, #8]
 8003090:	e7f4      	b.n	800307c <__swsetup_r+0xb0>
 8003092:	2000      	movs	r0, #0
 8003094:	e7f7      	b.n	8003086 <__swsetup_r+0xba>
 8003096:	bf00      	nop
 8003098:	20000010 	.word	0x20000010
 800309c:	08003ed0 	.word	0x08003ed0
 80030a0:	08003ef0 	.word	0x08003ef0
 80030a4:	08003eb0 	.word	0x08003eb0

080030a8 <__sflush_r>:
 80030a8:	898a      	ldrh	r2, [r1, #12]
 80030aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ae:	4605      	mov	r5, r0
 80030b0:	0710      	lsls	r0, r2, #28
 80030b2:	460c      	mov	r4, r1
 80030b4:	d458      	bmi.n	8003168 <__sflush_r+0xc0>
 80030b6:	684b      	ldr	r3, [r1, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dc05      	bgt.n	80030c8 <__sflush_r+0x20>
 80030bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	dc02      	bgt.n	80030c8 <__sflush_r+0x20>
 80030c2:	2000      	movs	r0, #0
 80030c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	d0f9      	beq.n	80030c2 <__sflush_r+0x1a>
 80030ce:	2300      	movs	r3, #0
 80030d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030d4:	682f      	ldr	r7, [r5, #0]
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	d032      	beq.n	8003140 <__sflush_r+0x98>
 80030da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	075a      	lsls	r2, r3, #29
 80030e0:	d505      	bpl.n	80030ee <__sflush_r+0x46>
 80030e2:	6863      	ldr	r3, [r4, #4]
 80030e4:	1ac0      	subs	r0, r0, r3
 80030e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030e8:	b10b      	cbz	r3, 80030ee <__sflush_r+0x46>
 80030ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030ec:	1ac0      	subs	r0, r0, r3
 80030ee:	2300      	movs	r3, #0
 80030f0:	4602      	mov	r2, r0
 80030f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030f4:	6a21      	ldr	r1, [r4, #32]
 80030f6:	4628      	mov	r0, r5
 80030f8:	47b0      	blx	r6
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	d106      	bne.n	800310e <__sflush_r+0x66>
 8003100:	6829      	ldr	r1, [r5, #0]
 8003102:	291d      	cmp	r1, #29
 8003104:	d82c      	bhi.n	8003160 <__sflush_r+0xb8>
 8003106:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <__sflush_r+0x108>)
 8003108:	40ca      	lsrs	r2, r1
 800310a:	07d6      	lsls	r6, r2, #31
 800310c:	d528      	bpl.n	8003160 <__sflush_r+0xb8>
 800310e:	2200      	movs	r2, #0
 8003110:	6062      	str	r2, [r4, #4]
 8003112:	04d9      	lsls	r1, r3, #19
 8003114:	6922      	ldr	r2, [r4, #16]
 8003116:	6022      	str	r2, [r4, #0]
 8003118:	d504      	bpl.n	8003124 <__sflush_r+0x7c>
 800311a:	1c42      	adds	r2, r0, #1
 800311c:	d101      	bne.n	8003122 <__sflush_r+0x7a>
 800311e:	682b      	ldr	r3, [r5, #0]
 8003120:	b903      	cbnz	r3, 8003124 <__sflush_r+0x7c>
 8003122:	6560      	str	r0, [r4, #84]	; 0x54
 8003124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003126:	602f      	str	r7, [r5, #0]
 8003128:	2900      	cmp	r1, #0
 800312a:	d0ca      	beq.n	80030c2 <__sflush_r+0x1a>
 800312c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003130:	4299      	cmp	r1, r3
 8003132:	d002      	beq.n	800313a <__sflush_r+0x92>
 8003134:	4628      	mov	r0, r5
 8003136:	f000 f9d7 	bl	80034e8 <_free_r>
 800313a:	2000      	movs	r0, #0
 800313c:	6360      	str	r0, [r4, #52]	; 0x34
 800313e:	e7c1      	b.n	80030c4 <__sflush_r+0x1c>
 8003140:	6a21      	ldr	r1, [r4, #32]
 8003142:	2301      	movs	r3, #1
 8003144:	4628      	mov	r0, r5
 8003146:	47b0      	blx	r6
 8003148:	1c41      	adds	r1, r0, #1
 800314a:	d1c7      	bne.n	80030dc <__sflush_r+0x34>
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0c4      	beq.n	80030dc <__sflush_r+0x34>
 8003152:	2b1d      	cmp	r3, #29
 8003154:	d001      	beq.n	800315a <__sflush_r+0xb2>
 8003156:	2b16      	cmp	r3, #22
 8003158:	d101      	bne.n	800315e <__sflush_r+0xb6>
 800315a:	602f      	str	r7, [r5, #0]
 800315c:	e7b1      	b.n	80030c2 <__sflush_r+0x1a>
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	81a3      	strh	r3, [r4, #12]
 8003166:	e7ad      	b.n	80030c4 <__sflush_r+0x1c>
 8003168:	690f      	ldr	r7, [r1, #16]
 800316a:	2f00      	cmp	r7, #0
 800316c:	d0a9      	beq.n	80030c2 <__sflush_r+0x1a>
 800316e:	0793      	lsls	r3, r2, #30
 8003170:	680e      	ldr	r6, [r1, #0]
 8003172:	bf08      	it	eq
 8003174:	694b      	ldreq	r3, [r1, #20]
 8003176:	600f      	str	r7, [r1, #0]
 8003178:	bf18      	it	ne
 800317a:	2300      	movne	r3, #0
 800317c:	eba6 0807 	sub.w	r8, r6, r7
 8003180:	608b      	str	r3, [r1, #8]
 8003182:	f1b8 0f00 	cmp.w	r8, #0
 8003186:	dd9c      	ble.n	80030c2 <__sflush_r+0x1a>
 8003188:	6a21      	ldr	r1, [r4, #32]
 800318a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800318c:	4643      	mov	r3, r8
 800318e:	463a      	mov	r2, r7
 8003190:	4628      	mov	r0, r5
 8003192:	47b0      	blx	r6
 8003194:	2800      	cmp	r0, #0
 8003196:	dc06      	bgt.n	80031a6 <__sflush_r+0xfe>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319e:	81a3      	strh	r3, [r4, #12]
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	e78e      	b.n	80030c4 <__sflush_r+0x1c>
 80031a6:	4407      	add	r7, r0
 80031a8:	eba8 0800 	sub.w	r8, r8, r0
 80031ac:	e7e9      	b.n	8003182 <__sflush_r+0xda>
 80031ae:	bf00      	nop
 80031b0:	20400001 	.word	0x20400001

080031b4 <_fflush_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	690b      	ldr	r3, [r1, #16]
 80031b8:	4605      	mov	r5, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	b913      	cbnz	r3, 80031c4 <_fflush_r+0x10>
 80031be:	2500      	movs	r5, #0
 80031c0:	4628      	mov	r0, r5
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	b118      	cbz	r0, 80031ce <_fflush_r+0x1a>
 80031c6:	6983      	ldr	r3, [r0, #24]
 80031c8:	b90b      	cbnz	r3, 80031ce <_fflush_r+0x1a>
 80031ca:	f000 f887 	bl	80032dc <__sinit>
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <_fflush_r+0x6c>)
 80031d0:	429c      	cmp	r4, r3
 80031d2:	d11b      	bne.n	800320c <_fflush_r+0x58>
 80031d4:	686c      	ldr	r4, [r5, #4]
 80031d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ef      	beq.n	80031be <_fflush_r+0xa>
 80031de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031e0:	07d0      	lsls	r0, r2, #31
 80031e2:	d404      	bmi.n	80031ee <_fflush_r+0x3a>
 80031e4:	0599      	lsls	r1, r3, #22
 80031e6:	d402      	bmi.n	80031ee <_fflush_r+0x3a>
 80031e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ea:	f000 f915 	bl	8003418 <__retarget_lock_acquire_recursive>
 80031ee:	4628      	mov	r0, r5
 80031f0:	4621      	mov	r1, r4
 80031f2:	f7ff ff59 	bl	80030a8 <__sflush_r>
 80031f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031f8:	07da      	lsls	r2, r3, #31
 80031fa:	4605      	mov	r5, r0
 80031fc:	d4e0      	bmi.n	80031c0 <_fflush_r+0xc>
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	059b      	lsls	r3, r3, #22
 8003202:	d4dd      	bmi.n	80031c0 <_fflush_r+0xc>
 8003204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003206:	f000 f908 	bl	800341a <__retarget_lock_release_recursive>
 800320a:	e7d9      	b.n	80031c0 <_fflush_r+0xc>
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <_fflush_r+0x70>)
 800320e:	429c      	cmp	r4, r3
 8003210:	d101      	bne.n	8003216 <_fflush_r+0x62>
 8003212:	68ac      	ldr	r4, [r5, #8]
 8003214:	e7df      	b.n	80031d6 <_fflush_r+0x22>
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <_fflush_r+0x74>)
 8003218:	429c      	cmp	r4, r3
 800321a:	bf08      	it	eq
 800321c:	68ec      	ldreq	r4, [r5, #12]
 800321e:	e7da      	b.n	80031d6 <_fflush_r+0x22>
 8003220:	08003ed0 	.word	0x08003ed0
 8003224:	08003ef0 	.word	0x08003ef0
 8003228:	08003eb0 	.word	0x08003eb0

0800322c <std>:
 800322c:	2300      	movs	r3, #0
 800322e:	b510      	push	{r4, lr}
 8003230:	4604      	mov	r4, r0
 8003232:	e9c0 3300 	strd	r3, r3, [r0]
 8003236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800323a:	6083      	str	r3, [r0, #8]
 800323c:	8181      	strh	r1, [r0, #12]
 800323e:	6643      	str	r3, [r0, #100]	; 0x64
 8003240:	81c2      	strh	r2, [r0, #14]
 8003242:	6183      	str	r3, [r0, #24]
 8003244:	4619      	mov	r1, r3
 8003246:	2208      	movs	r2, #8
 8003248:	305c      	adds	r0, #92	; 0x5c
 800324a:	f7ff fdd7 	bl	8002dfc <memset>
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <std+0x38>)
 8003250:	6263      	str	r3, [r4, #36]	; 0x24
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <std+0x3c>)
 8003254:	62a3      	str	r3, [r4, #40]	; 0x28
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <std+0x40>)
 8003258:	62e3      	str	r3, [r4, #44]	; 0x2c
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <std+0x44>)
 800325c:	6224      	str	r4, [r4, #32]
 800325e:	6323      	str	r3, [r4, #48]	; 0x30
 8003260:	bd10      	pop	{r4, pc}
 8003262:	bf00      	nop
 8003264:	08003ca5 	.word	0x08003ca5
 8003268:	08003cc7 	.word	0x08003cc7
 800326c:	08003cff 	.word	0x08003cff
 8003270:	08003d23 	.word	0x08003d23

08003274 <_cleanup_r>:
 8003274:	4901      	ldr	r1, [pc, #4]	; (800327c <_cleanup_r+0x8>)
 8003276:	f000 b8af 	b.w	80033d8 <_fwalk_reent>
 800327a:	bf00      	nop
 800327c:	080031b5 	.word	0x080031b5

08003280 <__sfmoreglue>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	2268      	movs	r2, #104	; 0x68
 8003284:	1e4d      	subs	r5, r1, #1
 8003286:	4355      	muls	r5, r2
 8003288:	460e      	mov	r6, r1
 800328a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800328e:	f000 f997 	bl	80035c0 <_malloc_r>
 8003292:	4604      	mov	r4, r0
 8003294:	b140      	cbz	r0, 80032a8 <__sfmoreglue+0x28>
 8003296:	2100      	movs	r1, #0
 8003298:	e9c0 1600 	strd	r1, r6, [r0]
 800329c:	300c      	adds	r0, #12
 800329e:	60a0      	str	r0, [r4, #8]
 80032a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032a4:	f7ff fdaa 	bl	8002dfc <memset>
 80032a8:	4620      	mov	r0, r4
 80032aa:	bd70      	pop	{r4, r5, r6, pc}

080032ac <__sfp_lock_acquire>:
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <__sfp_lock_acquire+0x8>)
 80032ae:	f000 b8b3 	b.w	8003418 <__retarget_lock_acquire_recursive>
 80032b2:	bf00      	nop
 80032b4:	20000121 	.word	0x20000121

080032b8 <__sfp_lock_release>:
 80032b8:	4801      	ldr	r0, [pc, #4]	; (80032c0 <__sfp_lock_release+0x8>)
 80032ba:	f000 b8ae 	b.w	800341a <__retarget_lock_release_recursive>
 80032be:	bf00      	nop
 80032c0:	20000121 	.word	0x20000121

080032c4 <__sinit_lock_acquire>:
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <__sinit_lock_acquire+0x8>)
 80032c6:	f000 b8a7 	b.w	8003418 <__retarget_lock_acquire_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000122 	.word	0x20000122

080032d0 <__sinit_lock_release>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__sinit_lock_release+0x8>)
 80032d2:	f000 b8a2 	b.w	800341a <__retarget_lock_release_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000122 	.word	0x20000122

080032dc <__sinit>:
 80032dc:	b510      	push	{r4, lr}
 80032de:	4604      	mov	r4, r0
 80032e0:	f7ff fff0 	bl	80032c4 <__sinit_lock_acquire>
 80032e4:	69a3      	ldr	r3, [r4, #24]
 80032e6:	b11b      	cbz	r3, 80032f0 <__sinit+0x14>
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ec:	f7ff bff0 	b.w	80032d0 <__sinit_lock_release>
 80032f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032f4:	6523      	str	r3, [r4, #80]	; 0x50
 80032f6:	4b13      	ldr	r3, [pc, #76]	; (8003344 <__sinit+0x68>)
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <__sinit+0x6c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80032fe:	42a3      	cmp	r3, r4
 8003300:	bf04      	itt	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	61a3      	streq	r3, [r4, #24]
 8003306:	4620      	mov	r0, r4
 8003308:	f000 f820 	bl	800334c <__sfp>
 800330c:	6060      	str	r0, [r4, #4]
 800330e:	4620      	mov	r0, r4
 8003310:	f000 f81c 	bl	800334c <__sfp>
 8003314:	60a0      	str	r0, [r4, #8]
 8003316:	4620      	mov	r0, r4
 8003318:	f000 f818 	bl	800334c <__sfp>
 800331c:	2200      	movs	r2, #0
 800331e:	60e0      	str	r0, [r4, #12]
 8003320:	2104      	movs	r1, #4
 8003322:	6860      	ldr	r0, [r4, #4]
 8003324:	f7ff ff82 	bl	800322c <std>
 8003328:	68a0      	ldr	r0, [r4, #8]
 800332a:	2201      	movs	r2, #1
 800332c:	2109      	movs	r1, #9
 800332e:	f7ff ff7d 	bl	800322c <std>
 8003332:	68e0      	ldr	r0, [r4, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	2112      	movs	r1, #18
 8003338:	f7ff ff78 	bl	800322c <std>
 800333c:	2301      	movs	r3, #1
 800333e:	61a3      	str	r3, [r4, #24]
 8003340:	e7d2      	b.n	80032e8 <__sinit+0xc>
 8003342:	bf00      	nop
 8003344:	08003eac 	.word	0x08003eac
 8003348:	08003275 	.word	0x08003275

0800334c <__sfp>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	4607      	mov	r7, r0
 8003350:	f7ff ffac 	bl	80032ac <__sfp_lock_acquire>
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <__sfp+0x84>)
 8003356:	681e      	ldr	r6, [r3, #0]
 8003358:	69b3      	ldr	r3, [r6, #24]
 800335a:	b913      	cbnz	r3, 8003362 <__sfp+0x16>
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff ffbd 	bl	80032dc <__sinit>
 8003362:	3648      	adds	r6, #72	; 0x48
 8003364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003368:	3b01      	subs	r3, #1
 800336a:	d503      	bpl.n	8003374 <__sfp+0x28>
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	b30b      	cbz	r3, 80033b4 <__sfp+0x68>
 8003370:	6836      	ldr	r6, [r6, #0]
 8003372:	e7f7      	b.n	8003364 <__sfp+0x18>
 8003374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003378:	b9d5      	cbnz	r5, 80033b0 <__sfp+0x64>
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <__sfp+0x88>)
 800337c:	60e3      	str	r3, [r4, #12]
 800337e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003382:	6665      	str	r5, [r4, #100]	; 0x64
 8003384:	f000 f847 	bl	8003416 <__retarget_lock_init_recursive>
 8003388:	f7ff ff96 	bl	80032b8 <__sfp_lock_release>
 800338c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003394:	6025      	str	r5, [r4, #0]
 8003396:	61a5      	str	r5, [r4, #24]
 8003398:	2208      	movs	r2, #8
 800339a:	4629      	mov	r1, r5
 800339c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033a0:	f7ff fd2c 	bl	8002dfc <memset>
 80033a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033ac:	4620      	mov	r0, r4
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b0:	3468      	adds	r4, #104	; 0x68
 80033b2:	e7d9      	b.n	8003368 <__sfp+0x1c>
 80033b4:	2104      	movs	r1, #4
 80033b6:	4638      	mov	r0, r7
 80033b8:	f7ff ff62 	bl	8003280 <__sfmoreglue>
 80033bc:	4604      	mov	r4, r0
 80033be:	6030      	str	r0, [r6, #0]
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d1d5      	bne.n	8003370 <__sfp+0x24>
 80033c4:	f7ff ff78 	bl	80032b8 <__sfp_lock_release>
 80033c8:	230c      	movs	r3, #12
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	e7ee      	b.n	80033ac <__sfp+0x60>
 80033ce:	bf00      	nop
 80033d0:	08003eac 	.word	0x08003eac
 80033d4:	ffff0001 	.word	0xffff0001

080033d8 <_fwalk_reent>:
 80033d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033dc:	4606      	mov	r6, r0
 80033de:	4688      	mov	r8, r1
 80033e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033e4:	2700      	movs	r7, #0
 80033e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ea:	f1b9 0901 	subs.w	r9, r9, #1
 80033ee:	d505      	bpl.n	80033fc <_fwalk_reent+0x24>
 80033f0:	6824      	ldr	r4, [r4, #0]
 80033f2:	2c00      	cmp	r4, #0
 80033f4:	d1f7      	bne.n	80033e6 <_fwalk_reent+0xe>
 80033f6:	4638      	mov	r0, r7
 80033f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033fc:	89ab      	ldrh	r3, [r5, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d907      	bls.n	8003412 <_fwalk_reent+0x3a>
 8003402:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003406:	3301      	adds	r3, #1
 8003408:	d003      	beq.n	8003412 <_fwalk_reent+0x3a>
 800340a:	4629      	mov	r1, r5
 800340c:	4630      	mov	r0, r6
 800340e:	47c0      	blx	r8
 8003410:	4307      	orrs	r7, r0
 8003412:	3568      	adds	r5, #104	; 0x68
 8003414:	e7e9      	b.n	80033ea <_fwalk_reent+0x12>

08003416 <__retarget_lock_init_recursive>:
 8003416:	4770      	bx	lr

08003418 <__retarget_lock_acquire_recursive>:
 8003418:	4770      	bx	lr

0800341a <__retarget_lock_release_recursive>:
 800341a:	4770      	bx	lr

0800341c <__swhatbuf_r>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	460e      	mov	r6, r1
 8003420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003424:	2900      	cmp	r1, #0
 8003426:	b096      	sub	sp, #88	; 0x58
 8003428:	4614      	mov	r4, r2
 800342a:	461d      	mov	r5, r3
 800342c:	da08      	bge.n	8003440 <__swhatbuf_r+0x24>
 800342e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	602a      	str	r2, [r5, #0]
 8003436:	061a      	lsls	r2, r3, #24
 8003438:	d410      	bmi.n	800345c <__swhatbuf_r+0x40>
 800343a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343e:	e00e      	b.n	800345e <__swhatbuf_r+0x42>
 8003440:	466a      	mov	r2, sp
 8003442:	f000 fc95 	bl	8003d70 <_fstat_r>
 8003446:	2800      	cmp	r0, #0
 8003448:	dbf1      	blt.n	800342e <__swhatbuf_r+0x12>
 800344a:	9a01      	ldr	r2, [sp, #4]
 800344c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003450:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003454:	425a      	negs	r2, r3
 8003456:	415a      	adcs	r2, r3
 8003458:	602a      	str	r2, [r5, #0]
 800345a:	e7ee      	b.n	800343a <__swhatbuf_r+0x1e>
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	2000      	movs	r0, #0
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	b016      	add	sp, #88	; 0x58
 8003464:	bd70      	pop	{r4, r5, r6, pc}
	...

08003468 <__smakebuf_r>:
 8003468:	898b      	ldrh	r3, [r1, #12]
 800346a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800346c:	079d      	lsls	r5, r3, #30
 800346e:	4606      	mov	r6, r0
 8003470:	460c      	mov	r4, r1
 8003472:	d507      	bpl.n	8003484 <__smakebuf_r+0x1c>
 8003474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	6123      	str	r3, [r4, #16]
 800347c:	2301      	movs	r3, #1
 800347e:	6163      	str	r3, [r4, #20]
 8003480:	b002      	add	sp, #8
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	ab01      	add	r3, sp, #4
 8003486:	466a      	mov	r2, sp
 8003488:	f7ff ffc8 	bl	800341c <__swhatbuf_r>
 800348c:	9900      	ldr	r1, [sp, #0]
 800348e:	4605      	mov	r5, r0
 8003490:	4630      	mov	r0, r6
 8003492:	f000 f895 	bl	80035c0 <_malloc_r>
 8003496:	b948      	cbnz	r0, 80034ac <__smakebuf_r+0x44>
 8003498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800349c:	059a      	lsls	r2, r3, #22
 800349e:	d4ef      	bmi.n	8003480 <__smakebuf_r+0x18>
 80034a0:	f023 0303 	bic.w	r3, r3, #3
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	81a3      	strh	r3, [r4, #12]
 80034aa:	e7e3      	b.n	8003474 <__smakebuf_r+0xc>
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <__smakebuf_r+0x7c>)
 80034ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	81a3      	strh	r3, [r4, #12]
 80034ba:	9b00      	ldr	r3, [sp, #0]
 80034bc:	6163      	str	r3, [r4, #20]
 80034be:	9b01      	ldr	r3, [sp, #4]
 80034c0:	6120      	str	r0, [r4, #16]
 80034c2:	b15b      	cbz	r3, 80034dc <__smakebuf_r+0x74>
 80034c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034c8:	4630      	mov	r0, r6
 80034ca:	f000 fc63 	bl	8003d94 <_isatty_r>
 80034ce:	b128      	cbz	r0, 80034dc <__smakebuf_r+0x74>
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	81a3      	strh	r3, [r4, #12]
 80034dc:	89a0      	ldrh	r0, [r4, #12]
 80034de:	4305      	orrs	r5, r0
 80034e0:	81a5      	strh	r5, [r4, #12]
 80034e2:	e7cd      	b.n	8003480 <__smakebuf_r+0x18>
 80034e4:	08003275 	.word	0x08003275

080034e8 <_free_r>:
 80034e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ea:	2900      	cmp	r1, #0
 80034ec:	d044      	beq.n	8003578 <_free_r+0x90>
 80034ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f2:	9001      	str	r0, [sp, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f1a1 0404 	sub.w	r4, r1, #4
 80034fa:	bfb8      	it	lt
 80034fc:	18e4      	addlt	r4, r4, r3
 80034fe:	f000 fc6b 	bl	8003dd8 <__malloc_lock>
 8003502:	4a1e      	ldr	r2, [pc, #120]	; (800357c <_free_r+0x94>)
 8003504:	9801      	ldr	r0, [sp, #4]
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	b933      	cbnz	r3, 8003518 <_free_r+0x30>
 800350a:	6063      	str	r3, [r4, #4]
 800350c:	6014      	str	r4, [r2, #0]
 800350e:	b003      	add	sp, #12
 8003510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003514:	f000 bc66 	b.w	8003de4 <__malloc_unlock>
 8003518:	42a3      	cmp	r3, r4
 800351a:	d908      	bls.n	800352e <_free_r+0x46>
 800351c:	6825      	ldr	r5, [r4, #0]
 800351e:	1961      	adds	r1, r4, r5
 8003520:	428b      	cmp	r3, r1
 8003522:	bf01      	itttt	eq
 8003524:	6819      	ldreq	r1, [r3, #0]
 8003526:	685b      	ldreq	r3, [r3, #4]
 8003528:	1949      	addeq	r1, r1, r5
 800352a:	6021      	streq	r1, [r4, #0]
 800352c:	e7ed      	b.n	800350a <_free_r+0x22>
 800352e:	461a      	mov	r2, r3
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	b10b      	cbz	r3, 8003538 <_free_r+0x50>
 8003534:	42a3      	cmp	r3, r4
 8003536:	d9fa      	bls.n	800352e <_free_r+0x46>
 8003538:	6811      	ldr	r1, [r2, #0]
 800353a:	1855      	adds	r5, r2, r1
 800353c:	42a5      	cmp	r5, r4
 800353e:	d10b      	bne.n	8003558 <_free_r+0x70>
 8003540:	6824      	ldr	r4, [r4, #0]
 8003542:	4421      	add	r1, r4
 8003544:	1854      	adds	r4, r2, r1
 8003546:	42a3      	cmp	r3, r4
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	d1e0      	bne.n	800350e <_free_r+0x26>
 800354c:	681c      	ldr	r4, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	6053      	str	r3, [r2, #4]
 8003552:	4421      	add	r1, r4
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	e7da      	b.n	800350e <_free_r+0x26>
 8003558:	d902      	bls.n	8003560 <_free_r+0x78>
 800355a:	230c      	movs	r3, #12
 800355c:	6003      	str	r3, [r0, #0]
 800355e:	e7d6      	b.n	800350e <_free_r+0x26>
 8003560:	6825      	ldr	r5, [r4, #0]
 8003562:	1961      	adds	r1, r4, r5
 8003564:	428b      	cmp	r3, r1
 8003566:	bf04      	itt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	6063      	str	r3, [r4, #4]
 800356e:	bf04      	itt	eq
 8003570:	1949      	addeq	r1, r1, r5
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	6054      	str	r4, [r2, #4]
 8003576:	e7ca      	b.n	800350e <_free_r+0x26>
 8003578:	b003      	add	sp, #12
 800357a:	bd30      	pop	{r4, r5, pc}
 800357c:	20000124 	.word	0x20000124

08003580 <sbrk_aligned>:
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	4e0e      	ldr	r6, [pc, #56]	; (80035bc <sbrk_aligned+0x3c>)
 8003584:	460c      	mov	r4, r1
 8003586:	6831      	ldr	r1, [r6, #0]
 8003588:	4605      	mov	r5, r0
 800358a:	b911      	cbnz	r1, 8003592 <sbrk_aligned+0x12>
 800358c:	f000 fb7a 	bl	8003c84 <_sbrk_r>
 8003590:	6030      	str	r0, [r6, #0]
 8003592:	4621      	mov	r1, r4
 8003594:	4628      	mov	r0, r5
 8003596:	f000 fb75 	bl	8003c84 <_sbrk_r>
 800359a:	1c43      	adds	r3, r0, #1
 800359c:	d00a      	beq.n	80035b4 <sbrk_aligned+0x34>
 800359e:	1cc4      	adds	r4, r0, #3
 80035a0:	f024 0403 	bic.w	r4, r4, #3
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d007      	beq.n	80035b8 <sbrk_aligned+0x38>
 80035a8:	1a21      	subs	r1, r4, r0
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 fb6a 	bl	8003c84 <_sbrk_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d101      	bne.n	80035b8 <sbrk_aligned+0x38>
 80035b4:	f04f 34ff 	mov.w	r4, #4294967295
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	20000128 	.word	0x20000128

080035c0 <_malloc_r>:
 80035c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c4:	1ccd      	adds	r5, r1, #3
 80035c6:	f025 0503 	bic.w	r5, r5, #3
 80035ca:	3508      	adds	r5, #8
 80035cc:	2d0c      	cmp	r5, #12
 80035ce:	bf38      	it	cc
 80035d0:	250c      	movcc	r5, #12
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	4607      	mov	r7, r0
 80035d6:	db01      	blt.n	80035dc <_malloc_r+0x1c>
 80035d8:	42a9      	cmp	r1, r5
 80035da:	d905      	bls.n	80035e8 <_malloc_r+0x28>
 80035dc:	230c      	movs	r3, #12
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	2600      	movs	r6, #0
 80035e2:	4630      	mov	r0, r6
 80035e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e8:	4e2e      	ldr	r6, [pc, #184]	; (80036a4 <_malloc_r+0xe4>)
 80035ea:	f000 fbf5 	bl	8003dd8 <__malloc_lock>
 80035ee:	6833      	ldr	r3, [r6, #0]
 80035f0:	461c      	mov	r4, r3
 80035f2:	bb34      	cbnz	r4, 8003642 <_malloc_r+0x82>
 80035f4:	4629      	mov	r1, r5
 80035f6:	4638      	mov	r0, r7
 80035f8:	f7ff ffc2 	bl	8003580 <sbrk_aligned>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	4604      	mov	r4, r0
 8003600:	d14d      	bne.n	800369e <_malloc_r+0xde>
 8003602:	6834      	ldr	r4, [r6, #0]
 8003604:	4626      	mov	r6, r4
 8003606:	2e00      	cmp	r6, #0
 8003608:	d140      	bne.n	800368c <_malloc_r+0xcc>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4631      	mov	r1, r6
 800360e:	4638      	mov	r0, r7
 8003610:	eb04 0803 	add.w	r8, r4, r3
 8003614:	f000 fb36 	bl	8003c84 <_sbrk_r>
 8003618:	4580      	cmp	r8, r0
 800361a:	d13a      	bne.n	8003692 <_malloc_r+0xd2>
 800361c:	6821      	ldr	r1, [r4, #0]
 800361e:	3503      	adds	r5, #3
 8003620:	1a6d      	subs	r5, r5, r1
 8003622:	f025 0503 	bic.w	r5, r5, #3
 8003626:	3508      	adds	r5, #8
 8003628:	2d0c      	cmp	r5, #12
 800362a:	bf38      	it	cc
 800362c:	250c      	movcc	r5, #12
 800362e:	4629      	mov	r1, r5
 8003630:	4638      	mov	r0, r7
 8003632:	f7ff ffa5 	bl	8003580 <sbrk_aligned>
 8003636:	3001      	adds	r0, #1
 8003638:	d02b      	beq.n	8003692 <_malloc_r+0xd2>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	442b      	add	r3, r5
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	e00e      	b.n	8003660 <_malloc_r+0xa0>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	1b52      	subs	r2, r2, r5
 8003646:	d41e      	bmi.n	8003686 <_malloc_r+0xc6>
 8003648:	2a0b      	cmp	r2, #11
 800364a:	d916      	bls.n	800367a <_malloc_r+0xba>
 800364c:	1961      	adds	r1, r4, r5
 800364e:	42a3      	cmp	r3, r4
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	bf18      	it	ne
 8003654:	6059      	strne	r1, [r3, #4]
 8003656:	6863      	ldr	r3, [r4, #4]
 8003658:	bf08      	it	eq
 800365a:	6031      	streq	r1, [r6, #0]
 800365c:	5162      	str	r2, [r4, r5]
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	4638      	mov	r0, r7
 8003662:	f104 060b 	add.w	r6, r4, #11
 8003666:	f000 fbbd 	bl	8003de4 <__malloc_unlock>
 800366a:	f026 0607 	bic.w	r6, r6, #7
 800366e:	1d23      	adds	r3, r4, #4
 8003670:	1af2      	subs	r2, r6, r3
 8003672:	d0b6      	beq.n	80035e2 <_malloc_r+0x22>
 8003674:	1b9b      	subs	r3, r3, r6
 8003676:	50a3      	str	r3, [r4, r2]
 8003678:	e7b3      	b.n	80035e2 <_malloc_r+0x22>
 800367a:	6862      	ldr	r2, [r4, #4]
 800367c:	42a3      	cmp	r3, r4
 800367e:	bf0c      	ite	eq
 8003680:	6032      	streq	r2, [r6, #0]
 8003682:	605a      	strne	r2, [r3, #4]
 8003684:	e7ec      	b.n	8003660 <_malloc_r+0xa0>
 8003686:	4623      	mov	r3, r4
 8003688:	6864      	ldr	r4, [r4, #4]
 800368a:	e7b2      	b.n	80035f2 <_malloc_r+0x32>
 800368c:	4634      	mov	r4, r6
 800368e:	6876      	ldr	r6, [r6, #4]
 8003690:	e7b9      	b.n	8003606 <_malloc_r+0x46>
 8003692:	230c      	movs	r3, #12
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4638      	mov	r0, r7
 8003698:	f000 fba4 	bl	8003de4 <__malloc_unlock>
 800369c:	e7a1      	b.n	80035e2 <_malloc_r+0x22>
 800369e:	6025      	str	r5, [r4, #0]
 80036a0:	e7de      	b.n	8003660 <_malloc_r+0xa0>
 80036a2:	bf00      	nop
 80036a4:	20000124 	.word	0x20000124

080036a8 <__sfputc_r>:
 80036a8:	6893      	ldr	r3, [r2, #8]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	b410      	push	{r4}
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	da08      	bge.n	80036c6 <__sfputc_r+0x1e>
 80036b4:	6994      	ldr	r4, [r2, #24]
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	db01      	blt.n	80036be <__sfputc_r+0x16>
 80036ba:	290a      	cmp	r1, #10
 80036bc:	d103      	bne.n	80036c6 <__sfputc_r+0x1e>
 80036be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c2:	f7ff bc31 	b.w	8002f28 <__swbuf_r>
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	1c58      	adds	r0, r3, #1
 80036ca:	6010      	str	r0, [r2, #0]
 80036cc:	7019      	strb	r1, [r3, #0]
 80036ce:	4608      	mov	r0, r1
 80036d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <__sfputs_r>:
 80036d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d8:	4606      	mov	r6, r0
 80036da:	460f      	mov	r7, r1
 80036dc:	4614      	mov	r4, r2
 80036de:	18d5      	adds	r5, r2, r3
 80036e0:	42ac      	cmp	r4, r5
 80036e2:	d101      	bne.n	80036e8 <__sfputs_r+0x12>
 80036e4:	2000      	movs	r0, #0
 80036e6:	e007      	b.n	80036f8 <__sfputs_r+0x22>
 80036e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ec:	463a      	mov	r2, r7
 80036ee:	4630      	mov	r0, r6
 80036f0:	f7ff ffda 	bl	80036a8 <__sfputc_r>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d1f3      	bne.n	80036e0 <__sfputs_r+0xa>
 80036f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036fc <_vfiprintf_r>:
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	460d      	mov	r5, r1
 8003702:	b09d      	sub	sp, #116	; 0x74
 8003704:	4614      	mov	r4, r2
 8003706:	4698      	mov	r8, r3
 8003708:	4606      	mov	r6, r0
 800370a:	b118      	cbz	r0, 8003714 <_vfiprintf_r+0x18>
 800370c:	6983      	ldr	r3, [r0, #24]
 800370e:	b90b      	cbnz	r3, 8003714 <_vfiprintf_r+0x18>
 8003710:	f7ff fde4 	bl	80032dc <__sinit>
 8003714:	4b89      	ldr	r3, [pc, #548]	; (800393c <_vfiprintf_r+0x240>)
 8003716:	429d      	cmp	r5, r3
 8003718:	d11b      	bne.n	8003752 <_vfiprintf_r+0x56>
 800371a:	6875      	ldr	r5, [r6, #4]
 800371c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800371e:	07d9      	lsls	r1, r3, #31
 8003720:	d405      	bmi.n	800372e <_vfiprintf_r+0x32>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	059a      	lsls	r2, r3, #22
 8003726:	d402      	bmi.n	800372e <_vfiprintf_r+0x32>
 8003728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800372a:	f7ff fe75 	bl	8003418 <__retarget_lock_acquire_recursive>
 800372e:	89ab      	ldrh	r3, [r5, #12]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	d501      	bpl.n	8003738 <_vfiprintf_r+0x3c>
 8003734:	692b      	ldr	r3, [r5, #16]
 8003736:	b9eb      	cbnz	r3, 8003774 <_vfiprintf_r+0x78>
 8003738:	4629      	mov	r1, r5
 800373a:	4630      	mov	r0, r6
 800373c:	f7ff fc46 	bl	8002fcc <__swsetup_r>
 8003740:	b1c0      	cbz	r0, 8003774 <_vfiprintf_r+0x78>
 8003742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003744:	07dc      	lsls	r4, r3, #31
 8003746:	d50e      	bpl.n	8003766 <_vfiprintf_r+0x6a>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	b01d      	add	sp, #116	; 0x74
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <_vfiprintf_r+0x244>)
 8003754:	429d      	cmp	r5, r3
 8003756:	d101      	bne.n	800375c <_vfiprintf_r+0x60>
 8003758:	68b5      	ldr	r5, [r6, #8]
 800375a:	e7df      	b.n	800371c <_vfiprintf_r+0x20>
 800375c:	4b79      	ldr	r3, [pc, #484]	; (8003944 <_vfiprintf_r+0x248>)
 800375e:	429d      	cmp	r5, r3
 8003760:	bf08      	it	eq
 8003762:	68f5      	ldreq	r5, [r6, #12]
 8003764:	e7da      	b.n	800371c <_vfiprintf_r+0x20>
 8003766:	89ab      	ldrh	r3, [r5, #12]
 8003768:	0598      	lsls	r0, r3, #22
 800376a:	d4ed      	bmi.n	8003748 <_vfiprintf_r+0x4c>
 800376c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800376e:	f7ff fe54 	bl	800341a <__retarget_lock_release_recursive>
 8003772:	e7e9      	b.n	8003748 <_vfiprintf_r+0x4c>
 8003774:	2300      	movs	r3, #0
 8003776:	9309      	str	r3, [sp, #36]	; 0x24
 8003778:	2320      	movs	r3, #32
 800377a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003782:	2330      	movs	r3, #48	; 0x30
 8003784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003948 <_vfiprintf_r+0x24c>
 8003788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800378c:	f04f 0901 	mov.w	r9, #1
 8003790:	4623      	mov	r3, r4
 8003792:	469a      	mov	sl, r3
 8003794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003798:	b10a      	cbz	r2, 800379e <_vfiprintf_r+0xa2>
 800379a:	2a25      	cmp	r2, #37	; 0x25
 800379c:	d1f9      	bne.n	8003792 <_vfiprintf_r+0x96>
 800379e:	ebba 0b04 	subs.w	fp, sl, r4
 80037a2:	d00b      	beq.n	80037bc <_vfiprintf_r+0xc0>
 80037a4:	465b      	mov	r3, fp
 80037a6:	4622      	mov	r2, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	4630      	mov	r0, r6
 80037ac:	f7ff ff93 	bl	80036d6 <__sfputs_r>
 80037b0:	3001      	adds	r0, #1
 80037b2:	f000 80aa 	beq.w	800390a <_vfiprintf_r+0x20e>
 80037b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037b8:	445a      	add	r2, fp
 80037ba:	9209      	str	r2, [sp, #36]	; 0x24
 80037bc:	f89a 3000 	ldrb.w	r3, [sl]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a2 	beq.w	800390a <_vfiprintf_r+0x20e>
 80037c6:	2300      	movs	r3, #0
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295
 80037cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037d0:	f10a 0a01 	add.w	sl, sl, #1
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	9307      	str	r3, [sp, #28]
 80037d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037dc:	931a      	str	r3, [sp, #104]	; 0x68
 80037de:	4654      	mov	r4, sl
 80037e0:	2205      	movs	r2, #5
 80037e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e6:	4858      	ldr	r0, [pc, #352]	; (8003948 <_vfiprintf_r+0x24c>)
 80037e8:	f7fc fcf2 	bl	80001d0 <memchr>
 80037ec:	9a04      	ldr	r2, [sp, #16]
 80037ee:	b9d8      	cbnz	r0, 8003828 <_vfiprintf_r+0x12c>
 80037f0:	06d1      	lsls	r1, r2, #27
 80037f2:	bf44      	itt	mi
 80037f4:	2320      	movmi	r3, #32
 80037f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037fa:	0713      	lsls	r3, r2, #28
 80037fc:	bf44      	itt	mi
 80037fe:	232b      	movmi	r3, #43	; 0x2b
 8003800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003804:	f89a 3000 	ldrb.w	r3, [sl]
 8003808:	2b2a      	cmp	r3, #42	; 0x2a
 800380a:	d015      	beq.n	8003838 <_vfiprintf_r+0x13c>
 800380c:	9a07      	ldr	r2, [sp, #28]
 800380e:	4654      	mov	r4, sl
 8003810:	2000      	movs	r0, #0
 8003812:	f04f 0c0a 	mov.w	ip, #10
 8003816:	4621      	mov	r1, r4
 8003818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800381c:	3b30      	subs	r3, #48	; 0x30
 800381e:	2b09      	cmp	r3, #9
 8003820:	d94e      	bls.n	80038c0 <_vfiprintf_r+0x1c4>
 8003822:	b1b0      	cbz	r0, 8003852 <_vfiprintf_r+0x156>
 8003824:	9207      	str	r2, [sp, #28]
 8003826:	e014      	b.n	8003852 <_vfiprintf_r+0x156>
 8003828:	eba0 0308 	sub.w	r3, r0, r8
 800382c:	fa09 f303 	lsl.w	r3, r9, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	46a2      	mov	sl, r4
 8003836:	e7d2      	b.n	80037de <_vfiprintf_r+0xe2>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	1d19      	adds	r1, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	9103      	str	r1, [sp, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfbb      	ittet	lt
 8003844:	425b      	neglt	r3, r3
 8003846:	f042 0202 	orrlt.w	r2, r2, #2
 800384a:	9307      	strge	r3, [sp, #28]
 800384c:	9307      	strlt	r3, [sp, #28]
 800384e:	bfb8      	it	lt
 8003850:	9204      	strlt	r2, [sp, #16]
 8003852:	7823      	ldrb	r3, [r4, #0]
 8003854:	2b2e      	cmp	r3, #46	; 0x2e
 8003856:	d10c      	bne.n	8003872 <_vfiprintf_r+0x176>
 8003858:	7863      	ldrb	r3, [r4, #1]
 800385a:	2b2a      	cmp	r3, #42	; 0x2a
 800385c:	d135      	bne.n	80038ca <_vfiprintf_r+0x1ce>
 800385e:	9b03      	ldr	r3, [sp, #12]
 8003860:	1d1a      	adds	r2, r3, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	9203      	str	r2, [sp, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	bfb8      	it	lt
 800386a:	f04f 33ff 	movlt.w	r3, #4294967295
 800386e:	3402      	adds	r4, #2
 8003870:	9305      	str	r3, [sp, #20]
 8003872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003958 <_vfiprintf_r+0x25c>
 8003876:	7821      	ldrb	r1, [r4, #0]
 8003878:	2203      	movs	r2, #3
 800387a:	4650      	mov	r0, sl
 800387c:	f7fc fca8 	bl	80001d0 <memchr>
 8003880:	b140      	cbz	r0, 8003894 <_vfiprintf_r+0x198>
 8003882:	2340      	movs	r3, #64	; 0x40
 8003884:	eba0 000a 	sub.w	r0, r0, sl
 8003888:	fa03 f000 	lsl.w	r0, r3, r0
 800388c:	9b04      	ldr	r3, [sp, #16]
 800388e:	4303      	orrs	r3, r0
 8003890:	3401      	adds	r4, #1
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003898:	482c      	ldr	r0, [pc, #176]	; (800394c <_vfiprintf_r+0x250>)
 800389a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800389e:	2206      	movs	r2, #6
 80038a0:	f7fc fc96 	bl	80001d0 <memchr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d03f      	beq.n	8003928 <_vfiprintf_r+0x22c>
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <_vfiprintf_r+0x254>)
 80038aa:	bb1b      	cbnz	r3, 80038f4 <_vfiprintf_r+0x1f8>
 80038ac:	9b03      	ldr	r3, [sp, #12]
 80038ae:	3307      	adds	r3, #7
 80038b0:	f023 0307 	bic.w	r3, r3, #7
 80038b4:	3308      	adds	r3, #8
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ba:	443b      	add	r3, r7
 80038bc:	9309      	str	r3, [sp, #36]	; 0x24
 80038be:	e767      	b.n	8003790 <_vfiprintf_r+0x94>
 80038c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c4:	460c      	mov	r4, r1
 80038c6:	2001      	movs	r0, #1
 80038c8:	e7a5      	b.n	8003816 <_vfiprintf_r+0x11a>
 80038ca:	2300      	movs	r3, #0
 80038cc:	3401      	adds	r4, #1
 80038ce:	9305      	str	r3, [sp, #20]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f04f 0c0a 	mov.w	ip, #10
 80038d6:	4620      	mov	r0, r4
 80038d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038dc:	3a30      	subs	r2, #48	; 0x30
 80038de:	2a09      	cmp	r2, #9
 80038e0:	d903      	bls.n	80038ea <_vfiprintf_r+0x1ee>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0c5      	beq.n	8003872 <_vfiprintf_r+0x176>
 80038e6:	9105      	str	r1, [sp, #20]
 80038e8:	e7c3      	b.n	8003872 <_vfiprintf_r+0x176>
 80038ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ee:	4604      	mov	r4, r0
 80038f0:	2301      	movs	r3, #1
 80038f2:	e7f0      	b.n	80038d6 <_vfiprintf_r+0x1da>
 80038f4:	ab03      	add	r3, sp, #12
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	462a      	mov	r2, r5
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <_vfiprintf_r+0x258>)
 80038fc:	a904      	add	r1, sp, #16
 80038fe:	4630      	mov	r0, r6
 8003900:	f3af 8000 	nop.w
 8003904:	4607      	mov	r7, r0
 8003906:	1c78      	adds	r0, r7, #1
 8003908:	d1d6      	bne.n	80038b8 <_vfiprintf_r+0x1bc>
 800390a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800390c:	07d9      	lsls	r1, r3, #31
 800390e:	d405      	bmi.n	800391c <_vfiprintf_r+0x220>
 8003910:	89ab      	ldrh	r3, [r5, #12]
 8003912:	059a      	lsls	r2, r3, #22
 8003914:	d402      	bmi.n	800391c <_vfiprintf_r+0x220>
 8003916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003918:	f7ff fd7f 	bl	800341a <__retarget_lock_release_recursive>
 800391c:	89ab      	ldrh	r3, [r5, #12]
 800391e:	065b      	lsls	r3, r3, #25
 8003920:	f53f af12 	bmi.w	8003748 <_vfiprintf_r+0x4c>
 8003924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003926:	e711      	b.n	800374c <_vfiprintf_r+0x50>
 8003928:	ab03      	add	r3, sp, #12
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	462a      	mov	r2, r5
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <_vfiprintf_r+0x258>)
 8003930:	a904      	add	r1, sp, #16
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f880 	bl	8003a38 <_printf_i>
 8003938:	e7e4      	b.n	8003904 <_vfiprintf_r+0x208>
 800393a:	bf00      	nop
 800393c:	08003ed0 	.word	0x08003ed0
 8003940:	08003ef0 	.word	0x08003ef0
 8003944:	08003eb0 	.word	0x08003eb0
 8003948:	08003f10 	.word	0x08003f10
 800394c:	08003f1a 	.word	0x08003f1a
 8003950:	00000000 	.word	0x00000000
 8003954:	080036d7 	.word	0x080036d7
 8003958:	08003f16 	.word	0x08003f16

0800395c <_printf_common>:
 800395c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003960:	4616      	mov	r6, r2
 8003962:	4699      	mov	r9, r3
 8003964:	688a      	ldr	r2, [r1, #8]
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800396c:	4293      	cmp	r3, r2
 800396e:	bfb8      	it	lt
 8003970:	4613      	movlt	r3, r2
 8003972:	6033      	str	r3, [r6, #0]
 8003974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003978:	4607      	mov	r7, r0
 800397a:	460c      	mov	r4, r1
 800397c:	b10a      	cbz	r2, 8003982 <_printf_common+0x26>
 800397e:	3301      	adds	r3, #1
 8003980:	6033      	str	r3, [r6, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	0699      	lsls	r1, r3, #26
 8003986:	bf42      	ittt	mi
 8003988:	6833      	ldrmi	r3, [r6, #0]
 800398a:	3302      	addmi	r3, #2
 800398c:	6033      	strmi	r3, [r6, #0]
 800398e:	6825      	ldr	r5, [r4, #0]
 8003990:	f015 0506 	ands.w	r5, r5, #6
 8003994:	d106      	bne.n	80039a4 <_printf_common+0x48>
 8003996:	f104 0a19 	add.w	sl, r4, #25
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	6832      	ldr	r2, [r6, #0]
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dc26      	bgt.n	80039f2 <_printf_common+0x96>
 80039a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a8:	1e13      	subs	r3, r2, #0
 80039aa:	6822      	ldr	r2, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	2301      	movne	r3, #1
 80039b0:	0692      	lsls	r2, r2, #26
 80039b2:	d42b      	bmi.n	8003a0c <_printf_common+0xb0>
 80039b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b8:	4649      	mov	r1, r9
 80039ba:	4638      	mov	r0, r7
 80039bc:	47c0      	blx	r8
 80039be:	3001      	adds	r0, #1
 80039c0:	d01e      	beq.n	8003a00 <_printf_common+0xa4>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	68e5      	ldr	r5, [r4, #12]
 80039c6:	6832      	ldr	r2, [r6, #0]
 80039c8:	f003 0306 	and.w	r3, r3, #6
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	bf08      	it	eq
 80039d0:	1aad      	subeq	r5, r5, r2
 80039d2:	68a3      	ldr	r3, [r4, #8]
 80039d4:	6922      	ldr	r2, [r4, #16]
 80039d6:	bf0c      	ite	eq
 80039d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039dc:	2500      	movne	r5, #0
 80039de:	4293      	cmp	r3, r2
 80039e0:	bfc4      	itt	gt
 80039e2:	1a9b      	subgt	r3, r3, r2
 80039e4:	18ed      	addgt	r5, r5, r3
 80039e6:	2600      	movs	r6, #0
 80039e8:	341a      	adds	r4, #26
 80039ea:	42b5      	cmp	r5, r6
 80039ec:	d11a      	bne.n	8003a24 <_printf_common+0xc8>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e008      	b.n	8003a04 <_printf_common+0xa8>
 80039f2:	2301      	movs	r3, #1
 80039f4:	4652      	mov	r2, sl
 80039f6:	4649      	mov	r1, r9
 80039f8:	4638      	mov	r0, r7
 80039fa:	47c0      	blx	r8
 80039fc:	3001      	adds	r0, #1
 80039fe:	d103      	bne.n	8003a08 <_printf_common+0xac>
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	3501      	adds	r5, #1
 8003a0a:	e7c6      	b.n	800399a <_printf_common+0x3e>
 8003a0c:	18e1      	adds	r1, r4, r3
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	2030      	movs	r0, #48	; 0x30
 8003a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a16:	4422      	add	r2, r4
 8003a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a20:	3302      	adds	r3, #2
 8003a22:	e7c7      	b.n	80039b4 <_printf_common+0x58>
 8003a24:	2301      	movs	r3, #1
 8003a26:	4622      	mov	r2, r4
 8003a28:	4649      	mov	r1, r9
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	47c0      	blx	r8
 8003a2e:	3001      	adds	r0, #1
 8003a30:	d0e6      	beq.n	8003a00 <_printf_common+0xa4>
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7d9      	b.n	80039ea <_printf_common+0x8e>
	...

08003a38 <_printf_i>:
 8003a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	7e0f      	ldrb	r7, [r1, #24]
 8003a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a40:	2f78      	cmp	r7, #120	; 0x78
 8003a42:	4691      	mov	r9, r2
 8003a44:	4680      	mov	r8, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	469a      	mov	sl, r3
 8003a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a4e:	d807      	bhi.n	8003a60 <_printf_i+0x28>
 8003a50:	2f62      	cmp	r7, #98	; 0x62
 8003a52:	d80a      	bhi.n	8003a6a <_printf_i+0x32>
 8003a54:	2f00      	cmp	r7, #0
 8003a56:	f000 80d8 	beq.w	8003c0a <_printf_i+0x1d2>
 8003a5a:	2f58      	cmp	r7, #88	; 0x58
 8003a5c:	f000 80a3 	beq.w	8003ba6 <_printf_i+0x16e>
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a68:	e03a      	b.n	8003ae0 <_printf_i+0xa8>
 8003a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a6e:	2b15      	cmp	r3, #21
 8003a70:	d8f6      	bhi.n	8003a60 <_printf_i+0x28>
 8003a72:	a101      	add	r1, pc, #4	; (adr r1, 8003a78 <_printf_i+0x40>)
 8003a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a78:	08003ad1 	.word	0x08003ad1
 8003a7c:	08003ae5 	.word	0x08003ae5
 8003a80:	08003a61 	.word	0x08003a61
 8003a84:	08003a61 	.word	0x08003a61
 8003a88:	08003a61 	.word	0x08003a61
 8003a8c:	08003a61 	.word	0x08003a61
 8003a90:	08003ae5 	.word	0x08003ae5
 8003a94:	08003a61 	.word	0x08003a61
 8003a98:	08003a61 	.word	0x08003a61
 8003a9c:	08003a61 	.word	0x08003a61
 8003aa0:	08003a61 	.word	0x08003a61
 8003aa4:	08003bf1 	.word	0x08003bf1
 8003aa8:	08003b15 	.word	0x08003b15
 8003aac:	08003bd3 	.word	0x08003bd3
 8003ab0:	08003a61 	.word	0x08003a61
 8003ab4:	08003a61 	.word	0x08003a61
 8003ab8:	08003c13 	.word	0x08003c13
 8003abc:	08003a61 	.word	0x08003a61
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a61 	.word	0x08003a61
 8003ac8:	08003a61 	.word	0x08003a61
 8003acc:	08003bdb 	.word	0x08003bdb
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	602a      	str	r2, [r5, #0]
 8003ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0a3      	b.n	8003c2c <_printf_i+0x1f4>
 8003ae4:	6820      	ldr	r0, [r4, #0]
 8003ae6:	6829      	ldr	r1, [r5, #0]
 8003ae8:	0606      	lsls	r6, r0, #24
 8003aea:	f101 0304 	add.w	r3, r1, #4
 8003aee:	d50a      	bpl.n	8003b06 <_printf_i+0xce>
 8003af0:	680e      	ldr	r6, [r1, #0]
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	da03      	bge.n	8003b00 <_printf_i+0xc8>
 8003af8:	232d      	movs	r3, #45	; 0x2d
 8003afa:	4276      	negs	r6, r6
 8003afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b00:	485e      	ldr	r0, [pc, #376]	; (8003c7c <_printf_i+0x244>)
 8003b02:	230a      	movs	r3, #10
 8003b04:	e019      	b.n	8003b3a <_printf_i+0x102>
 8003b06:	680e      	ldr	r6, [r1, #0]
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b0e:	bf18      	it	ne
 8003b10:	b236      	sxthne	r6, r6
 8003b12:	e7ef      	b.n	8003af4 <_printf_i+0xbc>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	6029      	str	r1, [r5, #0]
 8003b1c:	0601      	lsls	r1, r0, #24
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0xec>
 8003b20:	681e      	ldr	r6, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0xf2>
 8003b24:	0646      	lsls	r6, r0, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0xe8>
 8003b28:	881e      	ldrh	r6, [r3, #0]
 8003b2a:	4854      	ldr	r0, [pc, #336]	; (8003c7c <_printf_i+0x244>)
 8003b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b2e:	bf0c      	ite	eq
 8003b30:	2308      	moveq	r3, #8
 8003b32:	230a      	movne	r3, #10
 8003b34:	2100      	movs	r1, #0
 8003b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3a:	6865      	ldr	r5, [r4, #4]
 8003b3c:	60a5      	str	r5, [r4, #8]
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	bfa2      	ittt	ge
 8003b42:	6821      	ldrge	r1, [r4, #0]
 8003b44:	f021 0104 	bicge.w	r1, r1, #4
 8003b48:	6021      	strge	r1, [r4, #0]
 8003b4a:	b90e      	cbnz	r6, 8003b50 <_printf_i+0x118>
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	d04d      	beq.n	8003bec <_printf_i+0x1b4>
 8003b50:	4615      	mov	r5, r2
 8003b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b56:	fb03 6711 	mls	r7, r3, r1, r6
 8003b5a:	5dc7      	ldrb	r7, [r0, r7]
 8003b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b60:	4637      	mov	r7, r6
 8003b62:	42bb      	cmp	r3, r7
 8003b64:	460e      	mov	r6, r1
 8003b66:	d9f4      	bls.n	8003b52 <_printf_i+0x11a>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d10b      	bne.n	8003b84 <_printf_i+0x14c>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	07de      	lsls	r6, r3, #31
 8003b70:	d508      	bpl.n	8003b84 <_printf_i+0x14c>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	6861      	ldr	r1, [r4, #4]
 8003b76:	4299      	cmp	r1, r3
 8003b78:	bfde      	ittt	le
 8003b7a:	2330      	movle	r3, #48	; 0x30
 8003b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b84:	1b52      	subs	r2, r2, r5
 8003b86:	6122      	str	r2, [r4, #16]
 8003b88:	f8cd a000 	str.w	sl, [sp]
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	aa03      	add	r2, sp, #12
 8003b90:	4621      	mov	r1, r4
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff fee2 	bl	800395c <_printf_common>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d14c      	bne.n	8003c36 <_printf_i+0x1fe>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	b004      	add	sp, #16
 8003ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba6:	4835      	ldr	r0, [pc, #212]	; (8003c7c <_printf_i+0x244>)
 8003ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bac:	6829      	ldr	r1, [r5, #0]
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bb4:	6029      	str	r1, [r5, #0]
 8003bb6:	061d      	lsls	r5, r3, #24
 8003bb8:	d514      	bpl.n	8003be4 <_printf_i+0x1ac>
 8003bba:	07df      	lsls	r7, r3, #31
 8003bbc:	bf44      	itt	mi
 8003bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8003bc2:	6023      	strmi	r3, [r4, #0]
 8003bc4:	b91e      	cbnz	r6, 8003bce <_printf_i+0x196>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	f023 0320 	bic.w	r3, r3, #32
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	2310      	movs	r3, #16
 8003bd0:	e7b0      	b.n	8003b34 <_printf_i+0xfc>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	f043 0320 	orr.w	r3, r3, #32
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	2378      	movs	r3, #120	; 0x78
 8003bdc:	4828      	ldr	r0, [pc, #160]	; (8003c80 <_printf_i+0x248>)
 8003bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003be2:	e7e3      	b.n	8003bac <_printf_i+0x174>
 8003be4:	0659      	lsls	r1, r3, #25
 8003be6:	bf48      	it	mi
 8003be8:	b2b6      	uxthmi	r6, r6
 8003bea:	e7e6      	b.n	8003bba <_printf_i+0x182>
 8003bec:	4615      	mov	r5, r2
 8003bee:	e7bb      	b.n	8003b68 <_printf_i+0x130>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	6826      	ldr	r6, [r4, #0]
 8003bf4:	6961      	ldr	r1, [r4, #20]
 8003bf6:	1d18      	adds	r0, r3, #4
 8003bf8:	6028      	str	r0, [r5, #0]
 8003bfa:	0635      	lsls	r5, r6, #24
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0x1cc>
 8003c00:	6019      	str	r1, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <_printf_i+0x1d2>
 8003c04:	0670      	lsls	r0, r6, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0x1c8>
 8003c08:	8019      	strh	r1, [r3, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	4615      	mov	r5, r2
 8003c10:	e7ba      	b.n	8003b88 <_printf_i+0x150>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	602a      	str	r2, [r5, #0]
 8003c18:	681d      	ldr	r5, [r3, #0]
 8003c1a:	6862      	ldr	r2, [r4, #4]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7fc fad6 	bl	80001d0 <memchr>
 8003c24:	b108      	cbz	r0, 8003c2a <_printf_i+0x1f2>
 8003c26:	1b40      	subs	r0, r0, r5
 8003c28:	6060      	str	r0, [r4, #4]
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c34:	e7a8      	b.n	8003b88 <_printf_i+0x150>
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	462a      	mov	r2, r5
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	4640      	mov	r0, r8
 8003c3e:	47d0      	blx	sl
 8003c40:	3001      	adds	r0, #1
 8003c42:	d0ab      	beq.n	8003b9c <_printf_i+0x164>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	079b      	lsls	r3, r3, #30
 8003c48:	d413      	bmi.n	8003c72 <_printf_i+0x23a>
 8003c4a:	68e0      	ldr	r0, [r4, #12]
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	4298      	cmp	r0, r3
 8003c50:	bfb8      	it	lt
 8003c52:	4618      	movlt	r0, r3
 8003c54:	e7a4      	b.n	8003ba0 <_printf_i+0x168>
 8003c56:	2301      	movs	r3, #1
 8003c58:	4632      	mov	r2, r6
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d09b      	beq.n	8003b9c <_printf_i+0x164>
 8003c64:	3501      	adds	r5, #1
 8003c66:	68e3      	ldr	r3, [r4, #12]
 8003c68:	9903      	ldr	r1, [sp, #12]
 8003c6a:	1a5b      	subs	r3, r3, r1
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	dcf2      	bgt.n	8003c56 <_printf_i+0x21e>
 8003c70:	e7eb      	b.n	8003c4a <_printf_i+0x212>
 8003c72:	2500      	movs	r5, #0
 8003c74:	f104 0619 	add.w	r6, r4, #25
 8003c78:	e7f5      	b.n	8003c66 <_printf_i+0x22e>
 8003c7a:	bf00      	nop
 8003c7c:	08003f21 	.word	0x08003f21
 8003c80:	08003f32 	.word	0x08003f32

08003c84 <_sbrk_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4d06      	ldr	r5, [pc, #24]	; (8003ca0 <_sbrk_r+0x1c>)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fc fcc2 	bl	8000618 <_sbrk>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_sbrk_r+0x1a>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_sbrk_r+0x1a>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	2000012c 	.word	0x2000012c

08003ca4 <__sread>:
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cac:	f000 f8a0 	bl	8003df0 <_read_r>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	bfab      	itete	ge
 8003cb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb8:	181b      	addge	r3, r3, r0
 8003cba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cbe:	bfac      	ite	ge
 8003cc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cc2:	81a3      	strhlt	r3, [r4, #12]
 8003cc4:	bd10      	pop	{r4, pc}

08003cc6 <__swrite>:
 8003cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cca:	461f      	mov	r7, r3
 8003ccc:	898b      	ldrh	r3, [r1, #12]
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	4605      	mov	r5, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	d505      	bpl.n	8003ce4 <__swrite+0x1e>
 8003cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cdc:	2302      	movs	r3, #2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f000 f868 	bl	8003db4 <_lseek_r>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	4632      	mov	r2, r6
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfa:	f000 b817 	b.w	8003d2c <_write_r>

08003cfe <__sseek>:
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	460c      	mov	r4, r1
 8003d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d06:	f000 f855 	bl	8003db4 <_lseek_r>
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	bf15      	itete	ne
 8003d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d1a:	81a3      	strheq	r3, [r4, #12]
 8003d1c:	bf18      	it	ne
 8003d1e:	81a3      	strhne	r3, [r4, #12]
 8003d20:	bd10      	pop	{r4, pc}

08003d22 <__sclose>:
 8003d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d26:	f000 b813 	b.w	8003d50 <_close_r>
	...

08003d2c <_write_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d07      	ldr	r5, [pc, #28]	; (8003d4c <_write_r+0x20>)
 8003d30:	4604      	mov	r4, r0
 8003d32:	4608      	mov	r0, r1
 8003d34:	4611      	mov	r1, r2
 8003d36:	2200      	movs	r2, #0
 8003d38:	602a      	str	r2, [r5, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7fc fc1b 	bl	8000576 <_write>
 8003d40:	1c43      	adds	r3, r0, #1
 8003d42:	d102      	bne.n	8003d4a <_write_r+0x1e>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	b103      	cbz	r3, 8003d4a <_write_r+0x1e>
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
 8003d4c:	2000012c 	.word	0x2000012c

08003d50 <_close_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4d06      	ldr	r5, [pc, #24]	; (8003d6c <_close_r+0x1c>)
 8003d54:	2300      	movs	r3, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fc fc27 	bl	80005ae <_close>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_close_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_close_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	2000012c 	.word	0x2000012c

08003d70 <_fstat_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	; (8003d90 <_fstat_r+0x20>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	f7fc fc22 	bl	80005c6 <_fstat>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d102      	bne.n	8003d8c <_fstat_r+0x1c>
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	b103      	cbz	r3, 8003d8c <_fstat_r+0x1c>
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	2000012c 	.word	0x2000012c

08003d94 <_isatty_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	; (8003db0 <_isatty_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc fc21 	bl	80005e6 <_isatty>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_isatty_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_isatty_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	2000012c 	.word	0x2000012c

08003db4 <_lseek_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4d07      	ldr	r5, [pc, #28]	; (8003dd4 <_lseek_r+0x20>)
 8003db8:	4604      	mov	r4, r0
 8003dba:	4608      	mov	r0, r1
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	602a      	str	r2, [r5, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f7fc fc1a 	bl	80005fc <_lseek>
 8003dc8:	1c43      	adds	r3, r0, #1
 8003dca:	d102      	bne.n	8003dd2 <_lseek_r+0x1e>
 8003dcc:	682b      	ldr	r3, [r5, #0]
 8003dce:	b103      	cbz	r3, 8003dd2 <_lseek_r+0x1e>
 8003dd0:	6023      	str	r3, [r4, #0]
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}
 8003dd4:	2000012c 	.word	0x2000012c

08003dd8 <__malloc_lock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_lock+0x8>)
 8003dda:	f7ff bb1d 	b.w	8003418 <__retarget_lock_acquire_recursive>
 8003dde:	bf00      	nop
 8003de0:	20000120 	.word	0x20000120

08003de4 <__malloc_unlock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__malloc_unlock+0x8>)
 8003de6:	f7ff bb18 	b.w	800341a <__retarget_lock_release_recursive>
 8003dea:	bf00      	nop
 8003dec:	20000120 	.word	0x20000120

08003df0 <_read_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d07      	ldr	r5, [pc, #28]	; (8003e10 <_read_r+0x20>)
 8003df4:	4604      	mov	r4, r0
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	602a      	str	r2, [r5, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fc fb9c 	bl	800053c <_read>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_read_r+0x1e>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_read_r+0x1e>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	2000012c 	.word	0x2000012c

08003e14 <_init>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr

08003e20 <_fini>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	bf00      	nop
 8003e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e26:	bc08      	pop	{r3}
 8003e28:	469e      	mov	lr, r3
 8003e2a:	4770      	bx	lr
