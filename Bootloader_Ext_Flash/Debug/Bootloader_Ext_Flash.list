
Bootloader_Ext_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003794  08003794  0000510c  2**0
                  CONTENTS
  4 .ARM          00000000  08003794  08003794  0000510c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003794  08003794  0000510c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00004794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800379c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000010c  080038a8  0000510c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000294  080038a8  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a26  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001500  00000000  00000000  0000bb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  0000d068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c1  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4b7  00000000  00000000  0000db91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000819f  00000000  00000000  0002b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aeea0  00000000  00000000  000331e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b8  00000000  00000000  000e20cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e3984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000010c 	.word	0x2000010c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800374c 	.word	0x0800374c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000110 	.word	0x20000110
 80001d0:	0800374c 	.word	0x0800374c

080001d4 <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	81fb      	strh	r3, [r7, #14]
 80001e4:	e007      	b.n	80001f6 <clearBuffer+0x22>
		pBuff[i] = 0x00;
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	3301      	adds	r3, #1
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	89fa      	ldrh	r2, [r7, #14]
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f3      	bcc.n	80001e6 <clearBuffer+0x12>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <softDelay>:

void softDelay(uint32_t count)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8000214:	e002      	b.n	800021c <softDelay+0x10>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3b01      	subs	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f9      	bne.n	8000216 <softDelay+0xa>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	4613      	mov	r3, r2
 800023c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	82fb      	strh	r3, [r7, #22]
 8000242:	e00a      	b.n	800025a <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8000244:	8afb      	ldrh	r3, [r7, #22]
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	441a      	add	r2, r3
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afa      	ldrh	r2, [r7, #22]
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3f0      	bcc.n	8000244 <flashDataCopy+0x14>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	371c      	adds	r7, #28
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <extFlashInit>:
void extFlashInit(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800027a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027e:	f001 f889 	bl	8001394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <extFlashInit+0x68>)
 8000288:	f001 f884 	bl	8001394 <HAL_GPIO_WritePin>
	  softDelay(100);
 800028c:	2064      	movs	r0, #100	@ 0x64
 800028e:	f7ff ffbd 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029c:	f001 f87a 	bl	8001394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2104      	movs	r1, #4
 80002a4:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <extFlashInit+0x68>)
 80002a6:	f001 f875 	bl	8001394 <HAL_GPIO_WritePin>
	  softDelay(100);
 80002aa:	2064      	movs	r0, #100	@ 0x64
 80002ac:	f7ff ffae 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ba:	f001 f86b 	bl	8001394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2104      	movs	r1, #4
 80002c2:	4805      	ldr	r0, [pc, #20]	@ (80002d8 <extFlashInit+0x68>)
 80002c4:	f001 f866 	bl	8001394 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2108      	movs	r1, #8
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <extFlashInit+0x6c>)
 80002ce:	f001 f861 	bl	8001394 <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000c00 	.word	0x48000c00
 80002dc:	48000400 	.word	0x48000400

080002e0 <SPI_FLASH_getDeviceId>:
void SPI_FLASH_getDeviceId(uint8_t *pDeviceIdRxData)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
//	uint8_t deviceId[] = {0xAB,0x00,0x00,0x00,0x00};				//
	uint8_t manufacturerId[] = {0x90,0x00,0x00,0x00};				//
 80002e8:	2390      	movs	r3, #144	@ 0x90
 80002ea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2104      	movs	r1, #4
 80002f0:	480e      	ldr	r0, [pc, #56]	@ (800032c <SPI_FLASH_getDeviceId+0x4c>)
 80002f2:	f001 f84f 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&manufacturerId, 4, 1);
 80002f6:	f107 010c 	add.w	r1, r7, #12
 80002fa:	2301      	movs	r3, #1
 80002fc:	2204      	movs	r2, #4
 80002fe:	480c      	ldr	r0, [pc, #48]	@ (8000330 <SPI_FLASH_getDeviceId+0x50>)
 8000300:	f002 fb6d 	bl	80029de <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
 8000304:	2364      	movs	r3, #100	@ 0x64
 8000306:	2202      	movs	r2, #2
 8000308:	6879      	ldr	r1, [r7, #4]
 800030a:	4809      	ldr	r0, [pc, #36]	@ (8000330 <SPI_FLASH_getDeviceId+0x50>)
 800030c:	f002 fcdc 	bl	8002cc8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2104      	movs	r1, #4
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <SPI_FLASH_getDeviceId+0x4c>)
 8000316:	f001 f83d 	bl	8001394 <HAL_GPIO_WritePin>
	softDelay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031e:	f7ff ff75 	bl	800020c <softDelay>
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	48000c00 	.word	0x48000c00
 8000330:	2000022c 	.word	0x2000022c

08000334 <extFlashGetStatusReg1>:
uint8_t extFlashGetStatusReg1(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <extFlashGetStatusReg1+0x54>)
 800033c:	2205      	movs	r2, #5
 800033e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8000344:	4811      	ldr	r0, [pc, #68]	@ (800038c <extFlashGetStatusReg1+0x58>)
 8000346:	f002 fa77 	bl	8002838 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2104      	movs	r1, #4
 800034e:	4810      	ldr	r0, [pc, #64]	@ (8000390 <extFlashGetStatusReg1+0x5c>)
 8000350:	f001 f820 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8000354:	2364      	movs	r3, #100	@ 0x64
 8000356:	2201      	movs	r2, #1
 8000358:	490b      	ldr	r1, [pc, #44]	@ (8000388 <extFlashGetStatusReg1+0x54>)
 800035a:	480c      	ldr	r0, [pc, #48]	@ (800038c <extFlashGetStatusReg1+0x58>)
 800035c:	f002 fb3f 	bl	80029de <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8000360:	1df9      	adds	r1, r7, #7
 8000362:	2301      	movs	r3, #1
 8000364:	2201      	movs	r2, #1
 8000366:	4809      	ldr	r0, [pc, #36]	@ (800038c <extFlashGetStatusReg1+0x58>)
 8000368:	f002 fcae 	bl	8002cc8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2104      	movs	r1, #4
 8000370:	4807      	ldr	r0, [pc, #28]	@ (8000390 <extFlashGetStatusReg1+0x5c>)
 8000372:	f001 f80f 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <extFlashGetStatusReg1+0x58>)
 8000378:	f002 fb09 	bl	800298e <HAL_SPI_DeInit>
	return status;
 800037c:	79fb      	ldrb	r3, [r7, #7]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000128 	.word	0x20000128
 800038c:	2000022c 	.word	0x2000022c
 8000390:	48000c00 	.word	0x48000c00

08000394 <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
//	uint8_t writeEnableCmd = 0x98;
	HAL_SPI_Init(&hspi3);
 800039e:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <extFlashSendCommand+0x40>)
 80003a0:	f002 fa4a 	bl	8002838 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	480b      	ldr	r0, [pc, #44]	@ (80003d8 <extFlashSendCommand+0x44>)
 80003aa:	f000 fff3 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 80003ae:	1df9      	adds	r1, r7, #7
 80003b0:	2301      	movs	r3, #1
 80003b2:	2201      	movs	r2, #1
 80003b4:	4807      	ldr	r0, [pc, #28]	@ (80003d4 <extFlashSendCommand+0x40>)
 80003b6:	f002 fb12 	bl	80029de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2104      	movs	r1, #4
 80003be:	4806      	ldr	r0, [pc, #24]	@ (80003d8 <extFlashSendCommand+0x44>)
 80003c0:	f000 ffe8 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80003c4:	4803      	ldr	r0, [pc, #12]	@ (80003d4 <extFlashSendCommand+0x40>)
 80003c6:	f002 fae2 	bl	800298e <HAL_SPI_DeInit>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	2000022c 	.word	0x2000022c
 80003d8:	48000c00 	.word	0x48000c00

080003dc <extFlashPageRead>:
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&writeEnableCmd, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
}
void extFlashPageRead(uint32_t address, uint8_t* pData, uint8_t dataLength){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	4613      	mov	r3, r2
 80003e8:	71fb      	strb	r3, [r7, #7]
	flashInstruction[0] = READ_DATA;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	@ (800045c <extFlashPageRead+0x80>)
 80003ec:	2203      	movs	r2, #3
 80003ee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 80003f0:	2303      	movs	r3, #3
 80003f2:	75fb      	strb	r3, [r7, #23]
 80003f4:	e00a      	b.n	800040c <extFlashPageRead+0x30>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	b2d1      	uxtb	r1, r2
 80003fc:	4a17      	ldr	r2, [pc, #92]	@ (800045c <extFlashPageRead+0x80>)
 80003fe:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	0a1b      	lsrs	r3, r3, #8
 8000404:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	3b01      	subs	r3, #1
 800040a:	75fb      	strb	r3, [r7, #23]
 800040c:	7dfb      	ldrb	r3, [r7, #23]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f1      	bne.n	80003f6 <extFlashPageRead+0x1a>
	}
	HAL_SPI_Init(&hspi3);
 8000412:	4813      	ldr	r0, [pc, #76]	@ (8000460 <extFlashPageRead+0x84>)
 8000414:	f002 fa10 	bl	8002838 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2104      	movs	r1, #4
 800041c:	4811      	ldr	r0, [pc, #68]	@ (8000464 <extFlashPageRead+0x88>)
 800041e:	f000 ffb9 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000422:	2301      	movs	r3, #1
 8000424:	2204      	movs	r2, #4
 8000426:	490d      	ldr	r1, [pc, #52]	@ (800045c <extFlashPageRead+0x80>)
 8000428:	480d      	ldr	r0, [pc, #52]	@ (8000460 <extFlashPageRead+0x84>)
 800042a:	f002 fad8 	bl	80029de <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	b29a      	uxth	r2, r3
 8000432:	230a      	movs	r3, #10
 8000434:	68b9      	ldr	r1, [r7, #8]
 8000436:	480a      	ldr	r0, [pc, #40]	@ (8000460 <extFlashPageRead+0x84>)
 8000438:	f002 fc46 	bl	8002cc8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2104      	movs	r1, #4
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <extFlashPageRead+0x88>)
 8000442:	f000 ffa7 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000446:	4806      	ldr	r0, [pc, #24]	@ (8000460 <extFlashPageRead+0x84>)
 8000448:	f002 faa1 	bl	800298e <HAL_SPI_DeInit>
	HAL_Delay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f000 fc21 	bl	8000c94 <HAL_Delay>
}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000128 	.word	0x20000128
 8000460:	2000022c 	.word	0x2000022c
 8000464:	48000c00 	.word	0x48000c00

08000468 <extFlashPageWrite>:
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	4613      	mov	r3, r2
 8000474:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	clearBuffer(flashInstruction, 260);
 8000476:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800047a:	4823      	ldr	r0, [pc, #140]	@ (8000508 <extFlashPageWrite+0xa0>)
 800047c:	f7ff feaa 	bl	80001d4 <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 8000480:	4b21      	ldr	r3, [pc, #132]	@ (8000508 <extFlashPageWrite+0xa0>)
 8000482:	2202      	movs	r2, #2
 8000484:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 8000486:	2303      	movs	r3, #3
 8000488:	75fb      	strb	r3, [r7, #23]
 800048a:	e00a      	b.n	80004a2 <extFlashPageWrite+0x3a>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 800048c:	7dfb      	ldrb	r3, [r7, #23]
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	b2d1      	uxtb	r1, r2
 8000492:	4a1d      	ldr	r2, [pc, #116]	@ (8000508 <extFlashPageWrite+0xa0>)
 8000494:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 800049c:	7dfb      	ldrb	r3, [r7, #23]
 800049e:	3b01      	subs	r3, #1
 80004a0:	75fb      	strb	r3, [r7, #23]
 80004a2:	7dfb      	ldrb	r3, [r7, #23]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f1      	bne.n	800048c <extFlashPageWrite+0x24>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 80004a8:	4818      	ldr	r0, [pc, #96]	@ (800050c <extFlashPageWrite+0xa4>)
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	461a      	mov	r2, r3
 80004ae:	68b9      	ldr	r1, [r7, #8]
 80004b0:	f7ff febe 	bl	8000230 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 80004b4:	4816      	ldr	r0, [pc, #88]	@ (8000510 <extFlashPageWrite+0xa8>)
 80004b6:	f002 f9bf 	bl	8002838 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2104      	movs	r1, #4
 80004be:	4815      	ldr	r0, [pc, #84]	@ (8000514 <extFlashPageWrite+0xac>)
 80004c0:	f000 ff68 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	3304      	adds	r3, #4
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	230a      	movs	r3, #10
 80004cc:	490e      	ldr	r1, [pc, #56]	@ (8000508 <extFlashPageWrite+0xa0>)
 80004ce:	4810      	ldr	r0, [pc, #64]	@ (8000510 <extFlashPageWrite+0xa8>)
 80004d0:	f002 fa85 	bl	80029de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2104      	movs	r1, #4
 80004d8:	480e      	ldr	r0, [pc, #56]	@ (8000514 <extFlashPageWrite+0xac>)
 80004da:	f000 ff5b 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80004de:	480c      	ldr	r0, [pc, #48]	@ (8000510 <extFlashPageWrite+0xa8>)
 80004e0:	f002 fa55 	bl	800298e <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fbd5 	bl	8000c94 <HAL_Delay>
		status = extFlashGetStatusReg1();
 80004ea:	f7ff ff23 	bl	8000334 <extFlashGetStatusReg1>
 80004ee:	4603      	mov	r3, r0
 80004f0:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 80004f2:	7dbb      	ldrb	r3, [r7, #22]
 80004f4:	f003 0303 	and.w	r3, r3, #3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f3      	bne.n	80004e4 <extFlashPageWrite+0x7c>
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000128 	.word	0x20000128
 800050c:	2000012c 	.word	0x2000012c
 8000510:	2000022c 	.word	0x2000022c
 8000514:	48000c00 	.word	0x48000c00

08000518 <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(0x06);
 8000524:	2006      	movs	r0, #6
 8000526:	f7ff ff35 	bl	8000394 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800052a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800052e:	481f      	ldr	r0, [pc, #124]	@ (80005ac <extFlashErase+0x94>)
 8000530:	f7ff fe50 	bl	80001d4 <clearBuffer>
	flashInstruction[0]	= cmd;
 8000534:	4a1d      	ldr	r2, [pc, #116]	@ (80005ac <extFlashErase+0x94>)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	7013      	strb	r3, [r2, #0]
//	uint32_t blockAddressToErase= (blockId * 0x10000);
	for(uint8_t i = 3; i>0; i--){
 800053a:	2303      	movs	r3, #3
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e00a      	b.n	8000556 <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	b2d1      	uxtb	r1, r2
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <extFlashErase+0x94>)
 8000548:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	3b01      	subs	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1f1      	bne.n	8000540 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 800055c:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <extFlashErase+0x98>)
 800055e:	f002 f96b 	bl	8002838 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2104      	movs	r1, #4
 8000566:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <extFlashErase+0x9c>)
 8000568:	f000 ff14 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 800056c:	2301      	movs	r3, #1
 800056e:	2204      	movs	r2, #4
 8000570:	490e      	ldr	r1, [pc, #56]	@ (80005ac <extFlashErase+0x94>)
 8000572:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <extFlashErase+0x98>)
 8000574:	f002 fa33 	bl	80029de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2104      	movs	r1, #4
 800057c:	480d      	ldr	r0, [pc, #52]	@ (80005b4 <extFlashErase+0x9c>)
 800057e:	f000 ff09 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000582:	480b      	ldr	r0, [pc, #44]	@ (80005b0 <extFlashErase+0x98>)
 8000584:	f002 fa03 	bl	800298e <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fb83 	bl	8000c94 <HAL_Delay>
		status = extFlashGetStatusReg1();
 800058e:	f7ff fed1 	bl	8000334 <extFlashGetStatusReg1>
 8000592:	4603      	mov	r3, r0
 8000594:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1f3      	bne.n	8000588 <extFlashErase+0x70>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000128 	.word	0x20000128
 80005b0:	2000022c 	.word	0x2000022c
 80005b4:	48000c00 	.word	0x48000c00

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0c8      	sub	sp, #288	@ 0x120
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t readData[64] 			= {0};
 80005be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005c6:	4618      	mov	r0, r3
 80005c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005cc:	461a      	mov	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f003 f890 	bl	80036f4 <memset>
	uint32_t extFlashReadAddress 	= FLASH_PAGE0_BASE_ADDRESS;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint32_t intFlashWriteAddress 	= 0x50000;
 80005da:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	uint32_t extFlashWriteAddress 	= 0x0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	uint8_t  DataFlagReadBack 		= 0;
 80005e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005ec:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fae8 	bl	8000bc8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f8e4 	bl	80007c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f95c 	bl	80008b8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000600:	f000 f91c 	bl	800083c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

//  HAL_Delay(10000); // Just wait 10 secbefore proceeding to Bootloader

  extFlashInit();
 8000604:	f7ff fe34 	bl	8000270 <extFlashInit>

  SPI_FLASH_getDeviceId(&device_Id);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe67 	bl	80002e0 <SPI_FLASH_getDeviceId>


  extFlashSendCommand(ENABLE_RESET);
 8000612:	2066      	movs	r0, #102	@ 0x66
 8000614:	f7ff febe 	bl	8000394 <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 8000618:	2099      	movs	r0, #153	@ 0x99
 800061a:	f7ff febb 	bl	8000394 <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 800061e:	2098      	movs	r0, #152	@ 0x98
 8000620:	f7ff feb8 	bl	8000394 <extFlashSendCommand>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
 8000624:	2100      	movs	r1, #0
 8000626:	20d8      	movs	r0, #216	@ 0xd8
 8000628:	f7ff ff76 	bl	8000518 <extFlashErase>
  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
 800062c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000630:	20d8      	movs	r0, #216	@ 0xd8
 8000632:	f7ff ff71 	bl	8000518 <extFlashErase>
  extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 8000636:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800063a:	2020      	movs	r0, #32
 800063c:	f7ff ff6c 	bl	8000518 <extFlashErase>

  extFlashWriteAddress = FLASH_PAGE0_BASE_ADDRESS;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

  for(uint8_t i = 0; i < 4; i++){
 8000646:	2300      	movs	r3, #0
 8000648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800064c:	e014      	b.n	8000678 <main+0xc0>
	  extFlashSendCommand(0x06);	// enable write
 800064e:	2006      	movs	r0, #6
 8000650:	f7ff fea0 	bl	8000394 <extFlashSendCommand>
	  extFlashPageWrite(extFlashWriteAddress, userData, (sizeof(userData)));
 8000654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000658:	4959      	ldr	r1, [pc, #356]	@ (80007c0 <main+0x208>)
 800065a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800065e:	f7ff ff03 	bl	8000468 <extFlashPageWrite>
	  extFlashWriteAddress += (sizeof(userData));
 8000662:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000666:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800066a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  for(uint8_t i = 0; i < 4; i++){
 800066e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000672:	3301      	adds	r3, #1
 8000674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800067c:	2b03      	cmp	r3, #3
 800067e:	d9e6      	bls.n	800064e <main+0x96>
  }
  uint8_t dummyFlagData = 0xAA;
 8000680:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000684:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000688:	22aa      	movs	r2, #170	@ 0xaa
 800068a:	701a      	strb	r2, [r3, #0]
  extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, &dummyFlagData, (sizeof(dummyFlagData)));
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000696:	f7ff fee7 	bl	8000468 <extFlashPageWrite>
  extFlashWriteAddress = FLASH_FLAG_SAVE_ADDRESS;
 800069a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800069e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  extFlashPageRead(FLASH_FLAG_SAVE_ADDRESS,&DataFlagReadBack, 1);
 80006a2:	f107 030b 	add.w	r3, r7, #11
 80006a6:	2201      	movs	r2, #1
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80006ae:	f7ff fe95 	bl	80003dc <extFlashPageRead>
  if(DataFlagReadBack == 0xAA){
 80006b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006b6:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2baa      	cmp	r3, #170	@ 0xaa
 80006be:	d000      	beq.n	80006c2 <main+0x10a>
 80006c0:	e06a      	b.n	8000798 <main+0x1e0>
	  extFlashReadAddress = FLASH_PAGE0_BASE_ADDRESS;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  for(uint8_t i=0; i < 64; i++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80006ce:	e015      	b.n	80006fc <main+0x144>
		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&readData[i], 4);
 80006d0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	2204      	movs	r2, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80006e4:	f7ff fe7a 	bl	80003dc <extFlashPageRead>
		  extFlashReadAddress += 4;
 80006e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80006ec:	3304      	adds	r3, #4
 80006ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  for(uint8_t i=0; i < 64; i++){
 80006f2:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80006f6:	3301      	adds	r3, #1
 80006f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80006fc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000700:	2b3f      	cmp	r3, #63	@ 0x3f
 8000702:	d9e5      	bls.n	80006d0 <main+0x118>
	  }
//	  intFlashWrite(intFlashWriteAddress, readData, 64);
//	  intFlashWriteAddress += 256;
	  clearBuffer((uint8_t*)readData, 256);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fd61 	bl	80001d4 <clearBuffer>


	  for(uint8_t i=0; i < 64; i++){
 8000712:	2300      	movs	r3, #0
 8000714:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000718:	e015      	b.n	8000746 <main+0x18e>
		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&readData[i], 4);
 800071a:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	2204      	movs	r2, #4
 8000728:	4619      	mov	r1, r3
 800072a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800072e:	f7ff fe55 	bl	80003dc <extFlashPageRead>
		  extFlashReadAddress += 4;
 8000732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000736:	3304      	adds	r3, #4
 8000738:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  for(uint8_t i=0; i < 64; i++){
 800073c:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000740:	3301      	adds	r3, #1
 8000742:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000746:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800074a:	2b3f      	cmp	r3, #63	@ 0x3f
 800074c:	d9e5      	bls.n	800071a <main+0x162>
	  }
//	  intFlashWrite(intFlashWriteAddress, readData, 64);
//	  intFlashWriteAddress += 256;
	  clearBuffer((uint8_t*)readData, 256);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd3c 	bl	80001d4 <clearBuffer>

	  for(uint8_t i=0; i < 64; i++){
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
 8000762:	e015      	b.n	8000790 <main+0x1d8>
		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&readData[i], 4);
 8000764:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000768:	f107 020c 	add.w	r2, r7, #12
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	2204      	movs	r2, #4
 8000772:	4619      	mov	r1, r3
 8000774:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8000778:	f7ff fe30 	bl	80003dc <extFlashPageRead>
		  extFlashReadAddress += 4;
 800077c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000780:	3304      	adds	r3, #4
 8000782:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  for(uint8_t i=0; i < 64; i++){
 8000786:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800078a:	3301      	adds	r3, #1
 800078c:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
 8000790:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000794:	2b3f      	cmp	r3, #63	@ 0x3f
 8000796:	d9e5      	bls.n	8000764 <main+0x1ac>
//	  intFlashWrite(intFlashWriteAddress, readData, 64);
//	  intFlashWriteAddress += 256;
  }
  while (1)
  {
	  for(unsigned char i = 0; i<=20; i++ ){
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 800079e:	e007      	b.n	80007b0 <main+0x1f8>
		  HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	@ 0x64
 80007a2:	f000 fa77 	bl	8000c94 <HAL_Delay>
	  for(unsigned char i = 0; i<=20; i++ ){
 80007a6:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80007aa:	3301      	adds	r3, #1
 80007ac:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80007b0:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80007b4:	2b14      	cmp	r3, #20
 80007b6:	d9f3      	bls.n	80007a0 <main+0x1e8>

	  }
	  	  goto_application();
 80007b8:	f000 f900 	bl	80009bc <goto_application>
	  for(unsigned char i = 0; i<=20; i++ ){
 80007bc:	e7ec      	b.n	8000798 <main+0x1e0>
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	@ 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	@ 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 ff8e 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	2310      	movs	r3, #16
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fde2 	bl	80013c4 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000806:	f000 f8e7 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fe22 	bl	800246c <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8d3 	bl	80009d8 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3740      	adds	r7, #64	@ 0x40
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_SPI3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000856:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800085a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI3_Init+0x74>)
 800086a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000872:	2210      	movs	r2, #16
 8000874:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI3_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI3_Init+0x74>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI3_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_SPI3_Init+0x74>)
 800089c:	f001 ffcc 	bl	8002838 <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f897 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000022c 	.word	0x2000022c
 80008b4:	40003c00 	.word	0x40003c00

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b38      	ldr	r3, [pc, #224]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a37      	ldr	r2, [pc, #220]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b35      	ldr	r3, [pc, #212]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b32      	ldr	r3, [pc, #200]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a31      	ldr	r2, [pc, #196]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a25      	ldr	r2, [pc, #148]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fd2c 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	481c      	ldr	r0, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000942:	f000 fd27 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	481b      	ldr	r0, [pc, #108]	@ (80009b8 <MX_GPIO_Init+0x100>)
 800094c:	f000 fd22 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : F_RST_Pin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 8000950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096c:	f000 fa9c 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_nCS_Pin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000988:	f000 fa8e 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_WP_Pin */
  GPIO_InitStruct.Pin = F_WP_Pin;
 800098c:	2308      	movs	r3, #8
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_WP_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_GPIO_Init+0x100>)
 80009a4:	f000 fa80 	bl	8000ea8 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000c00 	.word	0x48000c00
 80009b8:	48000400 	.word	0x48000400

080009bc <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application( void )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
//  printf("Going to Jump to Application...\n");
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(0x08050000 + 4U)));
 80009c2:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <goto_application+0x18>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	607b      	str	r3, [r7, #4]
  app_reset_handler();
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4798      	blx	r3
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08050004 	.word	0x08050004

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_SPI_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d128      	bne.n	8000aa0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <HAL_SPI_MspInit+0x80>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a90:	2306      	movs	r3, #6
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a9c:	f000 fa04 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	@ 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40003c00 	.word	0x40003c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000800 	.word	0x48000800

08000ab4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_SPI_MspDeInit+0x30>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10a      	bne.n	8000adc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_SPI_MspDeInit+0x34>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_SPI_MspDeInit+0x34>)
 8000acc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ad0:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8000ad2:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_SPI_MspDeInit+0x38>)
 8000ad8:	f000 fb70 	bl	80011bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40003c00 	.word	0x40003c00
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000800 	.word	0x48000800

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f885 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff ffea 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 fdaf 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fd07 	bl	80005b8 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000bb8:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8000bbc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000bc0:	20000294 	.word	0x20000294

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <HAL_Init+0x28>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <HAL_Init+0x28>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f931 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fefe 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f93b 	bl	8000e8e <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f911 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	@ (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000100 	.word	0x20000100
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	20000104 	.word	0x20000104

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000108 	.word	0x20000108
 8000c78:	20000290 	.word	0x20000290

08000c7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000290 	.word	0x20000290

08000c94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000108 	.word	0x20000108

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff47 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff5c 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff8e 	bl	8000d94 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5d 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffb0 	bl	8000dfc <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e160      	b.n	800117a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8152 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80ac 	beq.w	8001174 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_GPIO_Init+0x2f0>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a59      	ldr	r2, [pc, #356]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800105e:	d025      	beq.n	80010ac <HAL_GPIO_Init+0x204>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x2f8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d01f      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_GPIO_Init+0x2fc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d019      	beq.n	80010a4 <HAL_GPIO_Init+0x1fc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a4d      	ldr	r2, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x300>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1f8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a4c      	ldr	r2, [pc, #304]	@ (80011ac <HAL_GPIO_Init+0x304>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1f4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a4b      	ldr	r2, [pc, #300]	@ (80011b0 <HAL_GPIO_Init+0x308>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1f0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a4a      	ldr	r2, [pc, #296]	@ (80011b4 <HAL_GPIO_Init+0x30c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1ec>
 8001090:	2306      	movs	r3, #6
 8001092:	e00c      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001094:	2307      	movs	r3, #7
 8001096:	e00a      	b.n	80010ae <HAL_GPIO_Init+0x206>
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x206>
 800109c:	2304      	movs	r3, #4
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x206>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010cc:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f0:	4a31      	ldr	r2, [pc, #196]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111a:	4a27      	ldr	r2, [pc, #156]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800116e:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <HAL_GPIO_Init+0x310>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f ae97 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	40010400 	.word	0x40010400

080011bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80011ca:	e0c4      	b.n	8001356 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011cc:	2201      	movs	r2, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80b7 	beq.w	8001350 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80011e2:	4a64      	ldr	r2, [pc, #400]	@ (8001374 <HAL_GPIO_DeInit+0x1b8>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800120a:	d025      	beq.n	8001258 <HAL_GPIO_DeInit+0x9c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <HAL_GPIO_DeInit+0x1bc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_DeInit+0x98>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a59      	ldr	r2, [pc, #356]	@ (800137c <HAL_GPIO_DeInit+0x1c0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_DeInit+0x94>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <HAL_GPIO_DeInit+0x1c4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_DeInit+0x90>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a57      	ldr	r2, [pc, #348]	@ (8001384 <HAL_GPIO_DeInit+0x1c8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_DeInit+0x8c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a56      	ldr	r2, [pc, #344]	@ (8001388 <HAL_GPIO_DeInit+0x1cc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_DeInit+0x88>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a55      	ldr	r2, [pc, #340]	@ (800138c <HAL_GPIO_DeInit+0x1d0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_DeInit+0x84>
 800123c:	2306      	movs	r3, #6
 800123e:	e00c      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001240:	2307      	movs	r3, #7
 8001242:	e00a      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001244:	2305      	movs	r3, #5
 8001246:	e008      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001248:	2304      	movs	r3, #4
 800124a:	e006      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 800124c:	2303      	movs	r3, #3
 800124e:	e004      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001250:	2302      	movs	r3, #2
 8001252:	e002      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_DeInit+0x9e>
 8001258:	2300      	movs	r3, #0
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	d132      	bne.n	80012d0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800126a:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	4947      	ldr	r1, [pc, #284]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 8001274:	4013      	ands	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	4943      	ldr	r1, [pc, #268]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 8001282:	4013      	ands	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001286:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	4940      	ldr	r1, [pc, #256]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 8001290:	4013      	ands	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	493c      	ldr	r1, [pc, #240]	@ (8001390 <HAL_GPIO_DeInit+0x1d4>)
 800129e:	4013      	ands	r3, r2
 80012a0:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80012b2:	4a30      	ldr	r2, [pc, #192]	@ (8001374 <HAL_GPIO_DeInit+0x1b8>)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43da      	mvns	r2, r3
 80012c2:	482c      	ldr	r0, [pc, #176]	@ (8001374 <HAL_GPIO_DeInit+0x1b8>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	400a      	ands	r2, r1
 80012ca:	3302      	adds	r3, #2
 80012cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2103      	movs	r1, #3
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	08da      	lsrs	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3208      	adds	r2, #8
 80012ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	08d2      	lsrs	r2, r2, #3
 8001306:	4019      	ands	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2103      	movs	r1, #3
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	401a      	ands	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	2101      	movs	r1, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2103      	movs	r1, #3
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f af34 	bne.w	80011cc <HAL_GPIO_DeInit+0x10>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	48001400 	.word	0x48001400
 800138c:	48001800 	.word	0x48001800
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f001 b83a 	b.w	800245e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 816f 	beq.w	80016de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001400:	4bb5      	ldr	r3, [pc, #724]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4bb2      	ldr	r3, [pc, #712]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d15c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x10e>
 8001418:	4baf      	ldr	r3, [pc, #700]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d155      	bne.n	80014d2 <HAL_RCC_OscConfig+0x10e>
 8001426:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800142a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800143a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <HAL_RCC_OscConfig+0x94>
 8001452:	4ba1      	ldr	r3, [pc, #644]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0xc0>
 8001458:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800145c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800146c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001470:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001474:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001480:	4b95      	ldr	r3, [pc, #596]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001488:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800148c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001490:	fa92 f2a2 	rbit	r2, r2
 8001494:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001498:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800149c:	fab2 f282 	clz	r2, r2
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f002 021f 	and.w	r2, r2, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8111 	beq.w	80016dc <HAL_RCC_OscConfig+0x318>
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 8108 	bne.w	80016dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f000 bfc6 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12e>
 80014e4:	4b7c      	ldr	r3, [pc, #496]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a7b      	ldr	r2, [pc, #492]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e036      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 80014f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x158>
 8001502:	4b75      	ldr	r3, [pc, #468]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a74      	ldr	r2, [pc, #464]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b72      	ldr	r3, [pc, #456]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a71      	ldr	r2, [pc, #452]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001514:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e021      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 800151c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001520:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x184>
 800152e:	4b6a      	ldr	r3, [pc, #424]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a69      	ldr	r2, [pc, #420]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b67      	ldr	r3, [pc, #412]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a66      	ldr	r2, [pc, #408]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x19c>
 8001548:	4b63      	ldr	r3, [pc, #396]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a62      	ldr	r2, [pc, #392]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b60      	ldr	r3, [pc, #384]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a5f      	ldr	r2, [pc, #380]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d059      	beq.n	8001624 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb84 	bl	8000c7c <HAL_GetTick>
 8001574:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fb7f 	bl	8000c7c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d902      	bls.n	8001590 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	f000 bf67 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001594:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80015a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <HAL_RCC_OscConfig+0x1fe>
 80015bc:	4b46      	ldr	r3, [pc, #280]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e015      	b.n	80015ee <HAL_RCC_OscConfig+0x22a>
 80015c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80015d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015da:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80015de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80015f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80015fa:	fa92 f2a2 	rbit	r2, r2
 80015fe:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001606:	fab2 f282 	clz	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f042 0220 	orr.w	r2, r2, #32
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	f002 021f 	and.w	r2, r2, #31
 8001616:	2101      	movs	r1, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ab      	beq.n	800157a <HAL_RCC_OscConfig+0x1b6>
 8001622:	e05c      	b.n	80016de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fb2a 	bl	8000c7c <HAL_GetTick>
 8001628:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162e:	f7ff fb25 	bl	8000c7c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	@ 0x64
 800163c:	d902      	bls.n	8001644 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	f000 bf0d 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001648:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x2b2>
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x2de>
 8001676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800167a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800168a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800168e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001696:	fa93 f3a3 	rbit	r3, r3
 800169a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_RCC_OscConfig+0x314>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80016aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80016ae:	fa92 f2a2 	rbit	r2, r2
 80016b2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80016b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f002 021f 	and.w	r2, r2, #31
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ab      	bne.n	800162e <HAL_RCC_OscConfig+0x26a>
 80016d6:	e002      	b.n	80016de <HAL_RCC_OscConfig+0x31a>
 80016d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 817f 	beq.w	80019f2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016f4:	4ba7      	ldr	r3, [pc, #668]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00c      	beq.n	800171a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001700:	4ba4      	ldr	r3, [pc, #656]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d173      	bne.n	80017f4 <HAL_RCC_OscConfig+0x430>
 800170c:	4ba1      	ldr	r3, [pc, #644]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001718:	d16c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x430>
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800172c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <HAL_RCC_OscConfig+0x386>
 8001744:	4b93      	ldr	r3, [pc, #588]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	e013      	b.n	8001772 <HAL_RCC_OscConfig+0x3ae>
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001762:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800176e:	4b89      	ldr	r3, [pc, #548]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	2202      	movs	r2, #2
 8001774:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001778:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800177c:	fa92 f2a2 	rbit	r2, r2
 8001780:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001784:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001788:	fab2 f282 	clz	r2, r2
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	f002 021f 	and.w	r2, r2, #31
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f202 	lsl.w	r2, r1, r2
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <HAL_RCC_OscConfig+0x3f6>
 80017a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d002      	beq.n	80017ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f000 be52 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b76      	ldr	r3, [pc, #472]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	21f8      	movs	r1, #248	@ 0xf8
 80017d0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80017d8:	fa91 f1a1 	rbit	r1, r1
 80017dc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80017e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80017e4:	fab1 f181 	clz	r1, r1
 80017e8:	b2c9      	uxtb	r1, r1
 80017ea:	408b      	lsls	r3, r1
 80017ec:	4969      	ldr	r1, [pc, #420]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e0fe      	b.n	80019f2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8088 	beq.w	8001916 <HAL_RCC_OscConfig+0x552>
 8001806:	2301      	movs	r3, #1
 8001808:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001818:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001826:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	461a      	mov	r2, r3
 800182e:	2301      	movs	r3, #1
 8001830:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fa23 	bl	8000c7c <HAL_GetTick>
 8001836:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fa1e 	bl	8000c7c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d902      	bls.n	8001852 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	f000 be06 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001864:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0x4be>
 800187c:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e013      	b.n	80018aa <HAL_RCC_OscConfig+0x4e6>
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800189a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80018a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	2202      	movs	r2, #2
 80018ac:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80018b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80018b4:	fa92 f2a2 	rbit	r2, r2
 80018b8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80018bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0220 	orr.w	r2, r2, #32
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0af      	beq.n	800183c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	21f8      	movs	r1, #248	@ 0xf8
 80018f2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80018fa:	fa91 f1a1 	rbit	r1, r1
 80018fe:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001902:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001906:	fab1 f181 	clz	r1, r1
 800190a:	b2c9      	uxtb	r1, r1
 800190c:	408b      	lsls	r3, r1
 800190e:	4921      	ldr	r1, [pc, #132]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e06d      	b.n	80019f2 <HAL_RCC_OscConfig+0x62e>
 8001916:	2301      	movs	r3, #1
 8001918:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001928:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001936:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	461a      	mov	r2, r3
 800193e:	2300      	movs	r3, #0
 8001940:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff f99b 	bl	8000c7c <HAL_GetTick>
 8001946:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff f996 	bl	8000c7c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d902      	bls.n	8001962 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	f000 bd7e 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001974:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0x5d4>
 800198c:	4b01      	ldr	r3, [pc, #4]	@ (8001994 <HAL_RCC_OscConfig+0x5d0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	e016      	b.n	80019c0 <HAL_RCC_OscConfig+0x5fc>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80019aa:	2302      	movs	r3, #2
 80019ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80019b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80019bc:	4bbf      	ldr	r3, [pc, #764]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	2202      	movs	r2, #2
 80019c2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019ca:	fa92 f2a2 	rbit	r2, r2
 80019ce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80019d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0220 	orr.w	r2, r2, #32
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ac      	bne.n	800194c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8113 	beq.w	8001c2e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d07c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x74e>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4ba2      	ldr	r3, [pc, #648]	@ (8001cc0 <HAL_RCC_OscConfig+0x8fc>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2301      	movs	r3, #1
 8001a40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f91b 	bl	8000c7c <HAL_GetTick>
 8001a46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f916 	bl	8000c7c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d902      	bls.n	8001a62 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	f000 bcfe 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ac0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ac6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ace:	2102      	movs	r1, #2
 8001ad0:	6019      	str	r1, [r3, #0]
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f1a3 	rbit	r1, r3
 8001ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ae8:	6019      	str	r1, [r3, #0]
  return result;
 8001aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d09d      	beq.n	8001a4c <HAL_RCC_OscConfig+0x688>
 8001b10:	e08d      	b.n	8001c2e <HAL_RCC_OscConfig+0x86a>
 8001b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc0 <HAL_RCC_OscConfig+0x8fc>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2300      	movs	r3, #0
 8001b52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff f892 	bl	8000c7c <HAL_GetTick>
 8001b58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f88d 	bl	8000c7c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d902      	bls.n	8001b74 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f000 bc75 	b.w	800245e <HAL_RCC_OscConfig+0x109a>
 8001b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	fa93 f2a3 	rbit	r2, r3
 8001b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001bde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bec:	2102      	movs	r1, #2
 8001bee:	6019      	str	r1, [r3, #0]
 8001bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	fa93 f1a3 	rbit	r1, r3
 8001bfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c06:	6019      	str	r1, [r3, #0]
  return result;
 8001c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d197      	bne.n	8001b5e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 81a5 	beq.w	8001f8e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <HAL_RCC_OscConfig+0x8f8>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_RCC_OscConfig+0x900>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d121      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_OscConfig+0x900>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_RCC_OscConfig+0x900>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9c:	f7fe ffee 	bl	8000c7c <HAL_GetTick>
 8001ca0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e010      	b.n	8001cc8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7fe ffe9 	bl	8000c7c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d908      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e3d1      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	10908120 	.word	0x10908120
 8001cc4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8001f00 <HAL_RCC_OscConfig+0xb3c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0e8      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x92e>
 8001ce4:	4b87      	ldr	r3, [pc, #540]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a86      	ldr	r2, [pc, #536]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e035      	b.n	8001d5e <HAL_RCC_OscConfig+0x99a>
 8001cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x958>
 8001d02:	4b80      	ldr	r3, [pc, #512]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a7f      	ldr	r2, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a7c      	ldr	r2, [pc, #496]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	e020      	b.n	8001d5e <HAL_RCC_OscConfig+0x99a>
 8001d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x982>
 8001d2c:	4b75      	ldr	r3, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a74      	ldr	r2, [pc, #464]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4b72      	ldr	r3, [pc, #456]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a71      	ldr	r2, [pc, #452]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x99a>
 8001d46:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a6b      	ldr	r2, [pc, #428]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7fe ff84 	bl	8000c7c <HAL_GetTick>
 8001d74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	e00b      	b.n	8001d92 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe ff7f 	bl	8000c7c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e365      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 8001d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001dd8:	601a      	str	r2, [r3, #0]
  return result;
 8001dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dde:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001de2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_OscConfig+0xa3a>
 8001df8:	4b42      	ldr	r3, [pc, #264]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	e013      	b.n	8001e26 <HAL_RCC_OscConfig+0xa62>
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e06:	2202      	movs	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	4b38      	ldr	r3, [pc, #224]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e2a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e2e:	2102      	movs	r1, #2
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e36:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fa92 f1a2 	rbit	r1, r2
 8001e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e44:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e48:	6011      	str	r1, [r2, #0]
  return result;
 8001e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e4e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	fab2 f282 	clz	r2, r2
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	f002 021f 	and.w	r2, r2, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d084      	beq.n	8001d7a <HAL_RCC_OscConfig+0x9b6>
 8001e70:	e083      	b.n	8001f7a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe ff03 	bl	8000c7c <HAL_GetTick>
 8001e76:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fefe 	bl	8000c7c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2e4      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 8001e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001eda:	601a      	str	r2, [r3, #0]
  return result;
 8001edc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ee4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0xb44>
 8001efa:	4b02      	ldr	r3, [pc, #8]	@ (8001f04 <HAL_RCC_OscConfig+0xb40>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	e017      	b.n	8001f30 <HAL_RCC_OscConfig+0xb6c>
 8001f00:	40007000 	.word	0x40007000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f10:	2202      	movs	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f18:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	fa93 f2a3 	rbit	r2, r3
 8001f22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f26:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4bb3      	ldr	r3, [pc, #716]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f34:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f38:	2102      	movs	r1, #2
 8001f3a:	6011      	str	r1, [r2, #0]
 8001f3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f40:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	fa92 f1a2 	rbit	r1, r2
 8001f4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f4e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f52:	6011      	str	r1, [r2, #0]
  return result;
 8001f54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f58:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f002 021f 	and.w	r2, r2, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d180      	bne.n	8001e7c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b9e      	ldr	r3, [pc, #632]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a9d      	ldr	r2, [pc, #628]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 825e 	beq.w	800245c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b96      	ldr	r3, [pc, #600]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	f000 821f 	beq.w	80023ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	f040 8170 	bne.w	80022a0 <HAL_RCC_OscConfig+0xedc>
 8001fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fe4:	601a      	str	r2, [r3, #0]
  return result;
 8001fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001fee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ffa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	461a      	mov	r2, r3
 8002002:	2300      	movs	r3, #0
 8002004:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe fe39 	bl	8000c7c <HAL_GetTick>
 800200a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	e009      	b.n	8002024 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fe34 	bl	8000c7c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e21c      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800202c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002036:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002044:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0xcaa>
 8002068:	4b64      	ldr	r3, [pc, #400]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e027      	b.n	80020be <HAL_RCC_OscConfig+0xcfa>
 800206e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002072:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002080:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800209c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020ca:	6011      	str	r1, [r2, #0]
 80020cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	fa92 f1a2 	rbit	r1, r2
 80020da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020de:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80020e2:	6011      	str	r1, [r2, #0]
  return result;
 80020e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020e8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	fab2 f282 	clz	r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f002 021f 	and.w	r2, r2, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d182      	bne.n	8002010 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210a:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	f023 020f 	bic.w	r2, r3, #15
 8002112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002116:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	4937      	ldr	r1, [pc, #220]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8002120:	4313      	orrs	r3, r2
 8002122:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002124:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a19      	ldr	r1, [r3, #32]
 8002138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	430b      	orrs	r3, r1
 8002146:	492d      	ldr	r1, [pc, #180]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002150:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002170:	601a      	str	r2, [r3, #0]
  return result;
 8002172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002176:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800217a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002186:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7fe fd73 	bl	8000c7c <HAL_GetTick>
 8002196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fd6e 	bl	8000c7c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e156      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021d4:	601a      	str	r2, [r3, #0]
  return result;
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0xe3c>
 80021f4:	4b01      	ldr	r3, [pc, #4]	@ (80021fc <HAL_RCC_OscConfig+0xe38>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e02a      	b.n	8002250 <HAL_RCC_OscConfig+0xe8c>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002204:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002208:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800220c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002212:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800222e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	fa93 f2a3 	rbit	r2, r3
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	4b86      	ldr	r3, [pc, #536]	@ (8002468 <HAL_RCC_OscConfig+0x10a4>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002254:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002258:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800225c:	6011      	str	r1, [r2, #0]
 800225e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002262:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fa92 f1a2 	rbit	r1, r2
 800226c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002270:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002274:	6011      	str	r1, [r2, #0]
  return result;
 8002276:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800227a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f43f af7f 	beq.w	800219c <HAL_RCC_OscConfig+0xdd8>
 800229e:	e0dd      	b.n	800245c <HAL_RCC_OscConfig+0x1098>
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80022a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022c4:	601a      	str	r2, [r3, #0]
  return result;
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80022ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	461a      	mov	r2, r3
 80022e2:	2300      	movs	r3, #0
 80022e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fcc9 	bl	8000c7c <HAL_GetTick>
 80022ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e009      	b.n	8002304 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fcc4 	bl	8000c7c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0ac      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
 8002304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002308:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800230c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002328:	601a      	str	r2, [r3, #0]
  return result;
 800232a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002332:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0xf8a>
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_OscConfig+0x10a4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e027      	b.n	800239e <HAL_RCC_OscConfig+0xfda>
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002356:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002378:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800237c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002386:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x10a4>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023a2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80023a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023aa:	6011      	str	r1, [r2, #0]
 80023ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fa92 f1a2 	rbit	r1, r2
 80023ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80023c2:	6011      	str	r1, [r2, #0]
  return result;
 80023c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023c8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f042 0220 	orr.w	r2, r2, #32
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f002 021f 	and.w	r2, r2, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f202 	lsl.w	r2, r1, r2
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d182      	bne.n	80022f0 <HAL_RCC_OscConfig+0xf2c>
 80023ea:	e037      	b.n	800245c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e02e      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_OscConfig+0x10a4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_RCC_OscConfig+0x10a4>)
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002410:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002414:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	429a      	cmp	r2, r3
 8002426:	d117      	bne.n	8002458 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002428:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800242c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800243c:	429a      	cmp	r2, r3
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b09e      	sub	sp, #120	@ 0x78
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e162      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b90      	ldr	r3, [pc, #576]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b8d      	ldr	r3, [pc, #564]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	498b      	ldr	r1, [pc, #556]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b89      	ldr	r3, [pc, #548]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e14a      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	497f      	ldr	r1, [pc, #508]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80dc 	beq.w	8002698 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d13c      	bne.n	8002562 <HAL_RCC_ClockConfig+0xf6>
 80024e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80024f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_ClockConfig+0xa6>
 800250c:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e00f      	b.n	8002532 <HAL_RCC_ClockConfig+0xc6>
 8002512:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002516:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002524:	663b      	str	r3, [r7, #96]	@ 0x60
 8002526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800252e:	4b67      	ldr	r3, [pc, #412]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002536:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d17b      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0f3      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d13c      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x178>
 800256a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800256e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_ClockConfig+0x128>
 800258e:	4b4f      	ldr	r3, [pc, #316]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_ClockConfig+0x148>
 8002594:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80025a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b0:	4b46      	ldr	r3, [pc, #280]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025bc:	fa92 f2a2 	rbit	r2, r2
 80025c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80025c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d13a      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b2      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
 80025e4:	2302      	movs	r3, #2
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_RCC_ClockConfig+0x1a0>
 8002606:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e00d      	b.n	8002628 <HAL_RCC_ClockConfig+0x1bc>
 800260c:	2302      	movs	r3, #2
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	627b      	str	r3, [r7, #36]	@ 0x24
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	4b29      	ldr	r3, [pc, #164]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	61ba      	str	r2, [r7, #24]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	617a      	str	r2, [r7, #20]
  return result;
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e079      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	491a      	ldr	r1, [pc, #104]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002668:	f7fe fb08 	bl	8000c7c <HAL_GetTick>
 800266c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fb04 	bl	8000c7c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e061      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_RCC_ClockConfig+0x260>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d214      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4906      	ldr	r1, [pc, #24]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e040      	b.n	800274a <HAL_RCC_ClockConfig+0x2de>
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	491a      	ldr	r1, [pc, #104]	@ (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4912      	ldr	r1, [pc, #72]	@ (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800270e:	f000 f829 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002712:	4601      	mov	r1, r0
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <HAL_RCC_ClockConfig+0x2e8>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800271c:	22f0      	movs	r2, #240	@ 0xf0
 800271e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	60fa      	str	r2, [r7, #12]
  return result;
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	fab2 f282 	clz	r2, r2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	40d3      	lsrs	r3, r2
 8002732:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x2ec>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	fa21 f303 	lsr.w	r3, r1, r3
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_RCC_ClockConfig+0x2f0>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_RCC_ClockConfig+0x2f4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fa56 	bl	8000bf4 <HAL_InitTick>
  
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3778      	adds	r7, #120	@ 0x78
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	08003764 	.word	0x08003764
 800275c:	20000100 	.word	0x20000100
 8002760:	20000104 	.word	0x20000104

08002764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b08b      	sub	sp, #44	@ 0x2c
 8002768:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800277e:	4b2a      	ldr	r3, [pc, #168]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d002      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x30>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x36>
 8002792:	e03f      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002796:	623b      	str	r3, [r7, #32]
      break;
 8002798:	e03f      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80027a0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80027a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	fa92 f2a2 	rbit	r2, r2
 80027ac:	607a      	str	r2, [r7, #4]
  return result;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	220f      	movs	r2, #15
 80027c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	60fa      	str	r2, [r7, #12]
  return result;
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	40d3      	lsrs	r3, r2
 80027dc:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027ec:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fc:	e007      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027fe:	4a0b      	ldr	r2, [pc, #44]	@ (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	fbb2 f2f3 	udiv	r2, r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	623b      	str	r3, [r7, #32]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002816:	623b      	str	r3, [r7, #32]
      break;
 8002818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281a:	6a3b      	ldr	r3, [r7, #32]
}
 800281c:	4618      	mov	r0, r3
 800281e:	372c      	adds	r7, #44	@ 0x2c
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	007a1200 	.word	0x007a1200
 8002830:	08003774 	.word	0x08003774
 8002834:	08003784 	.word	0x08003784

08002838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e09d      	b.n	8002986 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800285a:	d009      	beq.n	8002870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
 8002862:	e005      	b.n	8002870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe f8ce 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028b0:	d902      	bls.n	80028b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e002      	b.n	80028be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80028c6:	d007      	beq.n	80028d8 <HAL_SPI_Init+0xa0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	ea42 0103 	orr.w	r1, r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	0c1b      	lsrs	r3, r3, #16
 8002934:	f003 0204 	and.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002954:	ea42 0103 	orr.w	r1, r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e01a      	b.n	80029d6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe f87b 	bl	8000ab4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_SPI_Transmit+0x22>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e15f      	b.n	8002cc0 <HAL_SPI_Transmit+0x2e2>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a08:	f7fe f938 	bl	8000c7c <HAL_GetTick>
 8002a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a22:	e148      	b.n	8002cb6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_SPI_Transmit+0x52>
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a34:	e13f      	b.n	8002cb6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a80:	d10f      	bne.n	8002aa2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	2b40      	cmp	r3, #64	@ 0x40
 8002aae:	d007      	beq.n	8002ac0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ac8:	d94f      	bls.n	8002b6a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Transmit+0xfa>
 8002ad2:	8afb      	ldrh	r3, [r7, #22]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d142      	bne.n	8002b5e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002afc:	e02f      	b.n	8002b5e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d112      	bne.n	8002b32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	881a      	ldrh	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	1c9a      	adds	r2, r3, #2
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b30:	e015      	b.n	8002b5e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b32:	f7fe f8a3 	bl	8000c7c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d803      	bhi.n	8002b4a <HAL_SPI_Transmit+0x16c>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d102      	bne.n	8002b50 <HAL_SPI_Transmit+0x172>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002b5c:	e0ab      	b.n	8002cb6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ca      	bne.n	8002afe <HAL_SPI_Transmit+0x120>
 8002b68:	e080      	b.n	8002c6c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_SPI_Transmit+0x19a>
 8002b72:	8afb      	ldrh	r3, [r7, #22]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d174      	bne.n	8002c62 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d912      	bls.n	8002ba8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b02      	subs	r3, #2
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ba6:	e05c      	b.n	8002c62 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002bce:	e048      	b.n	8002c62 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d12b      	bne.n	8002c36 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d912      	bls.n	8002c0e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b02      	subs	r3, #2
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c0c:	e029      	b.n	8002c62 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c34:	e015      	b.n	8002c62 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c36:	f7fe f821 	bl	8000c7c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d803      	bhi.n	8002c4e <HAL_SPI_Transmit+0x270>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d102      	bne.n	8002c54 <HAL_SPI_Transmit+0x276>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002c60:	e029      	b.n	8002cb6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1b1      	bne.n	8002bd0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fcf9 	bl	8003668 <SPI_EndRxTxTransaction>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e003      	b.n	8002cb6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cec:	e11a      	b.n	8002f24 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cf6:	d112      	bne.n	8002d1e <HAL_SPI_Receive+0x56>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10e      	bne.n	8002d1e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2204      	movs	r2, #4
 8002d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f90e 	bl	8002f36 <HAL_SPI_TransmitReceive>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	e107      	b.n	8002f2e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_SPI_Receive+0x64>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e100      	b.n	8002f2e <HAL_SPI_Receive+0x266>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d34:	f7fd ffa2 	bl	8000c7c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Receive+0x7e>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d4a:	e0eb      	b.n	8002f24 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d96:	d908      	bls.n	8002daa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e007      	b.n	8002dba <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002db8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc2:	d10f      	bne.n	8002de4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002de2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dee:	2b40      	cmp	r3, #64	@ 0x40
 8002df0:	d007      	beq.n	8002e02 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e0a:	d86f      	bhi.n	8002eec <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e0c:	e034      	b.n	8002e78 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d117      	bne.n	8002e4c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f103 020c 	add.w	r2, r3, #12
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002e4a:	e015      	b.n	8002e78 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4c:	f7fd ff16 	bl	8000c7c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d803      	bhi.n	8002e64 <HAL_SPI_Receive+0x19c>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Receive+0x1a2>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e76:	e055      	b.n	8002f24 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1c4      	bne.n	8002e0e <HAL_SPI_Receive+0x146>
 8002e84:	e038      	b.n	8002ef8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d115      	bne.n	8002ec0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002ebe:	e015      	b.n	8002eec <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec0:	f7fd fedc 	bl	8000c7c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d803      	bhi.n	8002ed8 <HAL_SPI_Receive+0x210>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d102      	bne.n	8002ede <HAL_SPI_Receive+0x216>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002eea:	e01b      	b.n	8002f24 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1c6      	bne.n	8002e86 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb5b 	bl	80035b8 <SPI_EndRxTransaction>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
 8002f1a:	e003      	b.n	8002f24 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	@ 0x28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_SPI_TransmitReceive+0x26>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e20a      	b.n	8003372 <HAL_SPI_TransmitReceive+0x43c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f64:	f7fd fe8a 	bl	8000c7c <HAL_GetTick>
 8002f68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f80:	7efb      	ldrb	r3, [r7, #27]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d00e      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x6e>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x66>
 8002f96:	7efb      	ldrb	r3, [r7, #27]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d003      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002fa2:	e1e0      	b.n	8003366 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x80>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x80>
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002fbc:	e1d3      	b.n	8003366 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d003      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2205      	movs	r2, #5
 8002fce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	887a      	ldrh	r2, [r7, #2]
 8002fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	887a      	ldrh	r2, [r7, #2]
 8002ffe:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003014:	d802      	bhi.n	800301c <HAL_SPI_TransmitReceive+0xe6>
 8003016:	8a3b      	ldrh	r3, [r7, #16]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d908      	bls.n	800302e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e007      	b.n	800303e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800303c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	2b40      	cmp	r3, #64	@ 0x40
 800304a:	d007      	beq.n	800305c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003064:	f240 8081 	bls.w	800316a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x140>
 8003070:	8a7b      	ldrh	r3, [r7, #18]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d16d      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309a:	e05a      	b.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d11b      	bne.n	80030e2 <HAL_SPI_TransmitReceive+0x1ac>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x1ac>
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d113      	bne.n	80030e2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d11c      	bne.n	800312a <HAL_SPI_TransmitReceive+0x1f4>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003126:	2301      	movs	r3, #1
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800312a:	f7fd fda7 	bl	8000c7c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003136:	429a      	cmp	r2, r3
 8003138:	d80b      	bhi.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d007      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003150:	e109      	b.n	8003366 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d19f      	bne.n	800309c <HAL_SPI_TransmitReceive+0x166>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d199      	bne.n	800309c <HAL_SPI_TransmitReceive+0x166>
 8003168:	e0e3      	b.n	8003332 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_SPI_TransmitReceive+0x244>
 8003172:	8a7b      	ldrh	r3, [r7, #18]
 8003174:	2b01      	cmp	r3, #1
 8003176:	f040 80cf 	bne.w	8003318 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d912      	bls.n	80031aa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b02      	subs	r3, #2
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031a8:	e0b6      	b.n	8003318 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d0:	e0a2      	b.n	8003318 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d134      	bne.n	800324a <HAL_SPI_TransmitReceive+0x314>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d02f      	beq.n	800324a <HAL_SPI_TransmitReceive+0x314>
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d12c      	bne.n	800324a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d912      	bls.n	8003220 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b02      	subs	r3, #2
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800321e:	e012      	b.n	8003246 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d148      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x3b4>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d042      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d923      	bls.n	80032b8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	b292      	uxth	r2, r2
 800327c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b02      	subs	r3, #2
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d81f      	bhi.n	80032e6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	e016      	b.n	80032e6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f103 020c 	add.w	r2, r3, #12
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e6:	2301      	movs	r3, #1
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ea:	f7fd fcc7 	bl	8000c7c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_TransmitReceive+0x3cc>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x3d2>
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003316:	e026      	b.n	8003366 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f af57 	bne.w	80031d2 <HAL_SPI_TransmitReceive+0x29c>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f af50 	bne.w	80031d2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f996 	bl	8003668 <SPI_EndRxTxTransaction>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335c:	e003      	b.n	8003366 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800336e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003372:	4618      	mov	r0, r3
 8003374:	3728      	adds	r7, #40	@ 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800338c:	f7fd fc76 	bl	8000c7c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800339c:	f7fd fc6e 	bl	8000c7c <HAL_GetTick>
 80033a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a2:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	015b      	lsls	r3, r3, #5
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b2:	e054      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d050      	beq.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033bc:	f7fd fc5e 	bl	8000c7c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d902      	bls.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d13d      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ea:	d111      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	d004      	beq.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d107      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003418:	d10f      	bne.n	800343a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e017      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3b01      	subs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	429a      	cmp	r2, r3
 800347a:	d19b      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000100 	.word	0x20000100

0800348c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800349e:	f7fd fbed 	bl	8000c7c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80034ae:	f7fd fbe5 	bl	8000c7c <HAL_GetTick>
 80034b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034bc:	4b3d      	ldr	r3, [pc, #244]	@ (80035b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00da      	lsls	r2, r3, #3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	0d1b      	lsrs	r3, r3, #20
 80034cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034d4:	e060      	b.n	8003598 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80034dc:	d107      	bne.n	80034ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d050      	beq.n	8003598 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f6:	f7fd fbc1 	bl	8000c7c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003502:	429a      	cmp	r2, r3
 8003504:	d902      	bls.n	800350c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d13d      	bne.n	8003588 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800351a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003524:	d111      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800352e:	d004      	beq.n	800353a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003538:	d107      	bne.n	800354a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003548:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003552:	d10f      	bne.n	8003574 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003572:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e010      	b.n	80035aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3b01      	subs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d196      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3728      	adds	r7, #40	@ 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000100 	.word	0x20000100

080035b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035cc:	d111      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d6:	d004      	beq.n	80035e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e0:	d107      	bne.n	80035f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff febd 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e023      	b.n	8003660 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003620:	d11d      	bne.n	800365e <SPI_EndRxTransaction+0xa6>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800362a:	d004      	beq.n	8003636 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003634:	d113      	bne.n	800365e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff ff22 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e000      	b.n	8003660 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff03 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e027      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fe68 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	f043 0220 	orr.w	r2, r3, #32
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e014      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fedc 	bl	800348c <SPI_WaitFifoStateUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e000      	b.n	80036ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <memset>:
 80036f4:	4402      	add	r2, r0
 80036f6:	4603      	mov	r3, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4d0d      	ldr	r5, [pc, #52]	@ (800373c <__libc_init_array+0x38>)
 8003708:	4c0d      	ldr	r4, [pc, #52]	@ (8003740 <__libc_init_array+0x3c>)
 800370a:	1b64      	subs	r4, r4, r5
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	2600      	movs	r6, #0
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	4d0b      	ldr	r5, [pc, #44]	@ (8003744 <__libc_init_array+0x40>)
 8003716:	4c0c      	ldr	r4, [pc, #48]	@ (8003748 <__libc_init_array+0x44>)
 8003718:	f000 f818 	bl	800374c <_init>
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	2600      	movs	r6, #0
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	08003794 	.word	0x08003794
 8003740:	08003794 	.word	0x08003794
 8003744:	08003794 	.word	0x08003794
 8003748:	08003798 	.word	0x08003798

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
