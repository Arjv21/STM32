
Bootloader_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b70  08003b70  00004b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba8  08003ba8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba8  08003ba8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  08003bbc  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  200001c8  08003bbc  000051c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000785e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0f  00000000  00000000  0000c89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b4  00000000  00000000  0000eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da49  00000000  00000000  0000f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f2e  00000000  00000000  0002cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af537  00000000  00000000  00036a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d70  00000000  00000000  000e6008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e7d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b58 	.word	0x08003b58

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003b58 	.word	0x08003b58

080001d4 <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	81fb      	strh	r3, [r7, #14]
 80001e4:	e007      	b.n	80001f6 <clearBuffer+0x22>
		pBuff[i] = 0x00;
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	3301      	adds	r3, #1
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	89fa      	ldrh	r2, [r7, #14]
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f3      	bcc.n	80001e6 <clearBuffer+0x12>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <softDelay>:

void softDelay(uint32_t count)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8000214:	e002      	b.n	800021c <softDelay+0x10>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3b01      	subs	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f9      	bne.n	8000216 <softDelay+0xa>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	4613      	mov	r3, r2
 800023c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	82fb      	strh	r3, [r7, #22]
 8000242:	e00a      	b.n	800025a <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8000244:	8afb      	ldrh	r3, [r7, #22]
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	441a      	add	r2, r3
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afa      	ldrh	r2, [r7, #22]
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3f0      	bcc.n	8000244 <flashDataCopy+0x14>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	371c      	adds	r7, #28
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <extFlashHardReset>:
void extFlashHardReset(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2108      	movs	r1, #8
 8000278:	4818      	ldr	r0, [pc, #96]	@ (80002dc <extFlashHardReset+0x6c>)
 800027a:	f001 fa91 	bl	80017a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f001 fa8a 	bl	80017a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2104      	movs	r1, #4
 8000290:	4813      	ldr	r0, [pc, #76]	@ (80002e0 <extFlashHardReset+0x70>)
 8000292:	f001 fa85 	bl	80017a0 <HAL_GPIO_WritePin>
	  softDelay(100);
 8000296:	2064      	movs	r0, #100	@ 0x64
 8000298:	f7ff ffb8 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 fa7b 	bl	80017a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <extFlashHardReset+0x70>)
 80002b0:	f001 fa76 	bl	80017a0 <HAL_GPIO_WritePin>
	  softDelay(100);
 80002b4:	2064      	movs	r0, #100	@ 0x64
 80002b6:	f7ff ffa9 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c4:	f001 fa6c 	bl	80017a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2104      	movs	r1, #4
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <extFlashHardReset+0x70>)
 80002ce:	f001 fa67 	bl	80017a0 <HAL_GPIO_WritePin>
	  softDelay(200);
 80002d2:	20c8      	movs	r0, #200	@ 0xc8
 80002d4:	f7ff ff9a 	bl	800020c <softDelay>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	48000400 	.word	0x48000400
 80002e0:	48000c00 	.word	0x48000c00

080002e4 <extFlashGetDeviceId>:
void extFlashGetDeviceId(uint8_t *pDeviceIdRxData){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint8_t manufacturerId[] = {0x90,0x00,0x00,0x00};				//
 80002ec:	2390      	movs	r3, #144	@ 0x90
 80002ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2104      	movs	r1, #4
 80002f4:	480e      	ldr	r0, [pc, #56]	@ (8000330 <extFlashGetDeviceId+0x4c>)
 80002f6:	f001 fa53 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&manufacturerId, 4, 1);
 80002fa:	f107 010c 	add.w	r1, r7, #12
 80002fe:	2301      	movs	r3, #1
 8000300:	2204      	movs	r2, #4
 8000302:	480c      	ldr	r0, [pc, #48]	@ (8000334 <extFlashGetDeviceId+0x50>)
 8000304:	f002 fd71 	bl	8002dea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
 8000308:	2364      	movs	r3, #100	@ 0x64
 800030a:	2202      	movs	r2, #2
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4809      	ldr	r0, [pc, #36]	@ (8000334 <extFlashGetDeviceId+0x50>)
 8000310:	f002 fee0 	bl	80030d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2104      	movs	r1, #4
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <extFlashGetDeviceId+0x4c>)
 800031a:	f001 fa41 	bl	80017a0 <HAL_GPIO_WritePin>
	softDelay(500);
 800031e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000322:	f7ff ff73 	bl	800020c <softDelay>
}
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	48000c00 	.word	0x48000c00
 8000334:	20000140 	.word	0x20000140

08000338 <extFlashGetStatusReg1>:
uint8_t extFlashGetStatusReg1(){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 800033e:	4b13      	ldr	r3, [pc, #76]	@ (800038c <extFlashGetStatusReg1+0x54>)
 8000340:	2205      	movs	r2, #5
 8000342:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8000348:	4811      	ldr	r0, [pc, #68]	@ (8000390 <extFlashGetStatusReg1+0x58>)
 800034a:	f002 fc7b 	bl	8002c44 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2104      	movs	r1, #4
 8000352:	4810      	ldr	r0, [pc, #64]	@ (8000394 <extFlashGetStatusReg1+0x5c>)
 8000354:	f001 fa24 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8000358:	2364      	movs	r3, #100	@ 0x64
 800035a:	2201      	movs	r2, #1
 800035c:	490b      	ldr	r1, [pc, #44]	@ (800038c <extFlashGetStatusReg1+0x54>)
 800035e:	480c      	ldr	r0, [pc, #48]	@ (8000390 <extFlashGetStatusReg1+0x58>)
 8000360:	f002 fd43 	bl	8002dea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8000364:	1df9      	adds	r1, r7, #7
 8000366:	2301      	movs	r3, #1
 8000368:	2201      	movs	r2, #1
 800036a:	4809      	ldr	r0, [pc, #36]	@ (8000390 <extFlashGetStatusReg1+0x58>)
 800036c:	f002 feb2 	bl	80030d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2104      	movs	r1, #4
 8000374:	4807      	ldr	r0, [pc, #28]	@ (8000394 <extFlashGetStatusReg1+0x5c>)
 8000376:	f001 fa13 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <extFlashGetStatusReg1+0x58>)
 800037c:	f002 fd0d 	bl	8002d9a <HAL_SPI_DeInit>
	return status;
 8000380:	79fb      	ldrb	r3, [r7, #7]
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000002c 	.word	0x2000002c
 8000390:	20000140 	.word	0x20000140
 8000394:	48000c00 	.word	0x48000c00

08000398 <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 80003a2:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <extFlashSendCommand+0x40>)
 80003a4:	f002 fc4e 	bl	8002c44 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	480b      	ldr	r0, [pc, #44]	@ (80003dc <extFlashSendCommand+0x44>)
 80003ae:	f001 f9f7 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 80003b2:	1df9      	adds	r1, r7, #7
 80003b4:	2301      	movs	r3, #1
 80003b6:	2201      	movs	r2, #1
 80003b8:	4807      	ldr	r0, [pc, #28]	@ (80003d8 <extFlashSendCommand+0x40>)
 80003ba:	f002 fd16 	bl	8002dea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2104      	movs	r1, #4
 80003c2:	4806      	ldr	r0, [pc, #24]	@ (80003dc <extFlashSendCommand+0x44>)
 80003c4:	f001 f9ec 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <extFlashSendCommand+0x40>)
 80003ca:	f002 fce6 	bl	8002d9a <HAL_SPI_DeInit>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000140 	.word	0x20000140
 80003dc:	48000c00 	.word	0x48000c00

080003e0 <extFlashPageRead>:
void extFlashPageRead(uint32_t address, uint8_t* pData, uint8_t dataLength){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	4613      	mov	r3, r2
 80003ec:	71fb      	strb	r3, [r7, #7]
	flashInstruction[0] = READ_DATA;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000460 <extFlashPageRead+0x80>)
 80003f0:	2203      	movs	r2, #3
 80003f2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 80003f4:	2303      	movs	r3, #3
 80003f6:	75fb      	strb	r3, [r7, #23]
 80003f8:	e00a      	b.n	8000410 <extFlashPageRead+0x30>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 80003fa:	7dfb      	ldrb	r3, [r7, #23]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	b2d1      	uxtb	r1, r2
 8000400:	4a17      	ldr	r2, [pc, #92]	@ (8000460 <extFlashPageRead+0x80>)
 8000402:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 800040a:	7dfb      	ldrb	r3, [r7, #23]
 800040c:	3b01      	subs	r3, #1
 800040e:	75fb      	strb	r3, [r7, #23]
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1f1      	bne.n	80003fa <extFlashPageRead+0x1a>
	}
	HAL_SPI_Init(&hspi3);
 8000416:	4813      	ldr	r0, [pc, #76]	@ (8000464 <extFlashPageRead+0x84>)
 8000418:	f002 fc14 	bl	8002c44 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	4811      	ldr	r0, [pc, #68]	@ (8000468 <extFlashPageRead+0x88>)
 8000422:	f001 f9bd 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000426:	2301      	movs	r3, #1
 8000428:	2204      	movs	r2, #4
 800042a:	490d      	ldr	r1, [pc, #52]	@ (8000460 <extFlashPageRead+0x80>)
 800042c:	480d      	ldr	r0, [pc, #52]	@ (8000464 <extFlashPageRead+0x84>)
 800042e:	f002 fcdc 	bl	8002dea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	b29a      	uxth	r2, r3
 8000436:	230a      	movs	r3, #10
 8000438:	68b9      	ldr	r1, [r7, #8]
 800043a:	480a      	ldr	r0, [pc, #40]	@ (8000464 <extFlashPageRead+0x84>)
 800043c:	f002 fe4a 	bl	80030d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2104      	movs	r1, #4
 8000444:	4808      	ldr	r0, [pc, #32]	@ (8000468 <extFlashPageRead+0x88>)
 8000446:	f001 f9ab 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <extFlashPageRead+0x84>)
 800044c:	f002 fca5 	bl	8002d9a <HAL_SPI_DeInit>
	HAL_Delay(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fc41 	bl	8000cd8 <HAL_Delay>
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000002c 	.word	0x2000002c
 8000464:	20000140 	.word	0x20000140
 8000468:	48000c00 	.word	0x48000c00

0800046c <extFlashPageWrite>:
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	4613      	mov	r3, r2
 8000478:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	extFlashSendCommand(WRITE_ENABLE);
 800047a:	2006      	movs	r0, #6
 800047c:	f7ff ff8c 	bl	8000398 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 8000480:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000484:	4822      	ldr	r0, [pc, #136]	@ (8000510 <extFlashPageWrite+0xa4>)
 8000486:	f7ff fea5 	bl	80001d4 <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 800048a:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <extFlashPageWrite+0xa4>)
 800048c:	2202      	movs	r2, #2
 800048e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 8000490:	2303      	movs	r3, #3
 8000492:	75fb      	strb	r3, [r7, #23]
 8000494:	e00a      	b.n	80004ac <extFlashPageWrite+0x40>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	b2d1      	uxtb	r1, r2
 800049c:	4a1c      	ldr	r2, [pc, #112]	@ (8000510 <extFlashPageWrite+0xa4>)
 800049e:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	0a1b      	lsrs	r3, r3, #8
 80004a4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 80004a6:	7dfb      	ldrb	r3, [r7, #23]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	75fb      	strb	r3, [r7, #23]
 80004ac:	7dfb      	ldrb	r3, [r7, #23]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f1      	bne.n	8000496 <extFlashPageWrite+0x2a>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 80004b2:	4818      	ldr	r0, [pc, #96]	@ (8000514 <extFlashPageWrite+0xa8>)
 80004b4:	88fb      	ldrh	r3, [r7, #6]
 80004b6:	461a      	mov	r2, r3
 80004b8:	68b9      	ldr	r1, [r7, #8]
 80004ba:	f7ff feb9 	bl	8000230 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 80004be:	4816      	ldr	r0, [pc, #88]	@ (8000518 <extFlashPageWrite+0xac>)
 80004c0:	f002 fbc0 	bl	8002c44 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2104      	movs	r1, #4
 80004c8:	4814      	ldr	r0, [pc, #80]	@ (800051c <extFlashPageWrite+0xb0>)
 80004ca:	f001 f969 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	3304      	adds	r3, #4
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	230a      	movs	r3, #10
 80004d6:	490e      	ldr	r1, [pc, #56]	@ (8000510 <extFlashPageWrite+0xa4>)
 80004d8:	480f      	ldr	r0, [pc, #60]	@ (8000518 <extFlashPageWrite+0xac>)
 80004da:	f002 fc86 	bl	8002dea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2104      	movs	r1, #4
 80004e2:	480e      	ldr	r0, [pc, #56]	@ (800051c <extFlashPageWrite+0xb0>)
 80004e4:	f001 f95c 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <extFlashPageWrite+0xac>)
 80004ea:	f002 fc56 	bl	8002d9a <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fbf2 	bl	8000cd8 <HAL_Delay>
		status = extFlashGetStatusReg1();
 80004f4:	f7ff ff20 	bl	8000338 <extFlashGetStatusReg1>
 80004f8:	4603      	mov	r3, r0
 80004fa:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 80004fc:	7dbb      	ldrb	r3, [r7, #22]
 80004fe:	f003 0303 	and.w	r3, r3, #3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f3      	bne.n	80004ee <extFlashPageWrite+0x82>
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000030 	.word	0x20000030
 8000518:	20000140 	.word	0x20000140
 800051c:	48000c00 	.word	0x48000c00

08000520 <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(WRITE_ENABLE);
 800052c:	2006      	movs	r0, #6
 800052e:	f7ff ff33 	bl	8000398 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 8000532:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000536:	481f      	ldr	r0, [pc, #124]	@ (80005b4 <extFlashErase+0x94>)
 8000538:	f7ff fe4c 	bl	80001d4 <clearBuffer>
	flashInstruction[0]	= cmd;
 800053c:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <extFlashErase+0x94>)
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 3; i>0; i--){
 8000542:	2303      	movs	r3, #3
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	e00a      	b.n	800055e <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	b2d1      	uxtb	r1, r2
 800054e:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <extFlashErase+0x94>)
 8000550:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	3b01      	subs	r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f1      	bne.n	8000548 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 8000564:	4814      	ldr	r0, [pc, #80]	@ (80005b8 <extFlashErase+0x98>)
 8000566:	f002 fb6d 	bl	8002c44 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2104      	movs	r1, #4
 800056e:	4813      	ldr	r0, [pc, #76]	@ (80005bc <extFlashErase+0x9c>)
 8000570:	f001 f916 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000574:	2301      	movs	r3, #1
 8000576:	2204      	movs	r2, #4
 8000578:	490e      	ldr	r1, [pc, #56]	@ (80005b4 <extFlashErase+0x94>)
 800057a:	480f      	ldr	r0, [pc, #60]	@ (80005b8 <extFlashErase+0x98>)
 800057c:	f002 fc35 	bl	8002dea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2104      	movs	r1, #4
 8000584:	480d      	ldr	r0, [pc, #52]	@ (80005bc <extFlashErase+0x9c>)
 8000586:	f001 f90b 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800058a:	480b      	ldr	r0, [pc, #44]	@ (80005b8 <extFlashErase+0x98>)
 800058c:	f002 fc05 	bl	8002d9a <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fba1 	bl	8000cd8 <HAL_Delay>
		status = extFlashGetStatusReg1();
 8000596:	f7ff fecf 	bl	8000338 <extFlashGetStatusReg1>
 800059a:	4603      	mov	r3, r0
 800059c:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f3      	bne.n	8000590 <extFlashErase+0x70>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000002c 	.word	0x2000002c
 80005b8:	20000140 	.word	0x20000140
 80005bc:	48000c00 	.word	0x48000c00

080005c0 <resetFotaFlag>:
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);

}


void resetFotaFlag(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 80005c6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80005ca:	2020      	movs	r0, #32
 80005cc:	f7ff ffa8 	bl	8000520 <extFlashErase>
	uint8_t header[3] = {0};
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <resetFotaFlag+0x34>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	80bb      	strh	r3, [r7, #4]
 80005d6:	2300      	movs	r3, #0
 80005d8:	71bb      	strb	r3, [r7, #6]
	header[0] = 0xAA;
 80005da:	23aa      	movs	r3, #170	@ 0xaa
 80005dc:	713b      	strb	r3, [r7, #4]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2203      	movs	r2, #3
 80005e2:	4619      	mov	r1, r3
 80005e4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80005e8:	f7ff ff40 	bl	800046c <extFlashPageWrite>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08003b70 	.word	0x08003b70

080005f8 <intFlashWrite1>:
 */

#include "int_flash.h"


uint32_t intFlashWrite1(uint32_t *pData, uint16_t numberOfWordsTowrite){
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	static uint8_t erasePageCount = 0;
	uint32_t PAGEError;
	uint16_t sofar=0;
 8000604:	2300      	movs	r3, #0
 8000606:	82fb      	strh	r3, [r7, #22]
	uint32_t flashBaseAddress = (USER_APP_BASE_ADDRESS + (erasePageCount*0x800));
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <intFlashWrite1+0xa8>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000610:	330a      	adds	r3, #10
 8000612:	02db      	lsls	r3, r3, #11
 8000614:	613b      	str	r3, [r7, #16]
	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000616:	f000 fcd9 	bl	8000fcc <HAL_FLASH_Unlock>
	    * the interface expects pData to an array of maximum 2K of data
	    * since page size = 2K
	    * We will erase and program an entire page in a go!!
	    */
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <intFlashWrite1+0xac>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = flashBaseAddress;
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <intFlashWrite1+0xac>)
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6053      	str	r3, [r2, #4]
	   EraseInitStruct.NbPages     = 1;
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <intFlashWrite1+0xac>)
 8000628:	2201      	movs	r2, #1
 800062a:	609a      	str	r2, [r3, #8]
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK){
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	481c      	ldr	r0, [pc, #112]	@ (80006a4 <intFlashWrite1+0xac>)
 8000634:	f000 fd9a 	bl	800116c <HAL_FLASHEx_Erase>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d01f      	beq.n	800067e <intFlashWrite1+0x86>
		 /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800063e:	f000 fcfb 	bl	8001038 <HAL_FLASH_GetError>
 8000642:	4603      	mov	r3, r0
 8000644:	e028      	b.n	8000698 <intFlashWrite1+0xa0>
	   }
	   /* Program the user Flash area word by word*/

	   while (sofar<numberOfWordsTowrite){
		   if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashBaseAddress, pData[sofar]) == HAL_OK){
 8000646:	8afb      	ldrh	r3, [r7, #22]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	461c      	mov	r4, r3
 8000654:	4615      	mov	r5, r2
 8000656:	4622      	mov	r2, r4
 8000658:	462b      	mov	r3, r5
 800065a:	6939      	ldr	r1, [r7, #16]
 800065c:	2002      	movs	r0, #2
 800065e:	f000 fc45 	bl	8000eec <HAL_FLASH_Program>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <intFlashWrite1+0x7e>
			   flashBaseAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	3304      	adds	r3, #4
 800066c:	613b      	str	r3, [r7, #16]
			   sofar++;
 800066e:	8afb      	ldrh	r3, [r7, #22]
 8000670:	3301      	adds	r3, #1
 8000672:	82fb      	strh	r3, [r7, #22]
 8000674:	e003      	b.n	800067e <intFlashWrite1+0x86>
		   }
		   else{
			   /* Error occurred while writing data in Flash memory*/
			   return HAL_FLASH_GetError ();
 8000676:	f000 fcdf 	bl	8001038 <HAL_FLASH_GetError>
 800067a:	4603      	mov	r3, r0
 800067c:	e00c      	b.n	8000698 <intFlashWrite1+0xa0>
	   while (sofar<numberOfWordsTowrite){
 800067e:	8afa      	ldrh	r2, [r7, #22]
 8000680:	887b      	ldrh	r3, [r7, #2]
 8000682:	429a      	cmp	r2, r3
 8000684:	d3df      	bcc.n	8000646 <intFlashWrite1+0x4e>
		   }
	   }
	   /* Lock the Flash to disable the flash control register access
	    * (recommended to protect the FLASH memory against possible unwanted operation)
	    */
	   HAL_FLASH_Lock();
 8000686:	f000 fcc7 	bl	8001018 <HAL_FLASH_Lock>
	   erasePageCount++;
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <intFlashWrite1+0xa8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <intFlashWrite1+0xa8>)
 8000694:	701a      	strb	r2, [r3, #0]

	   return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bdb0      	pop	{r4, r5, r7, pc}
 80006a0:	20000130 	.word	0x20000130
 80006a4:	20000134 	.word	0x20000134

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t	flashReadData[512] 		= {0};
 80006b0:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006b4:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80006b8:	4618      	mov	r0, r3
 80006ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fa1d 	bl	8003b00 <memset>
	uint32_t	extFlashReadAddress 	= FLASH_PAGE0_BASE_ADDRESS;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
//	uint32_t	intFlashWriteAddress 	= 0x50000;
//	uint32_t	extFlashWriteAddress 	= 0x0;
//	uint16_t	totalFirmwareBytes		= 0;
	uint16_t	totalWordsToRead 		= 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	uint16_t	wordsToRead 			= 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
	uint16_t	wordsRead				= 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
	uint8_t		device_Id[2]			= {0};
 80006de:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006e2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80006e6:	2200      	movs	r2, #0
 80006e8:	801a      	strh	r2, [r3, #0]
	uint8_t		savedFlagData[3]		= {0};
 80006ea:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006ee:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 80006f2:	4a44      	ldr	r2, [pc, #272]	@ (8000804 <main+0x15c>)
 80006f4:	8812      	ldrh	r2, [r2, #0]
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	2200      	movs	r2, #0
 80006fa:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fa86 	bl	8000c0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f882 	bl	8000808 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f8fa 	bl	80008fc <MX_GPIO_Init>
  MX_SPI3_Init();
 8000708:	f000 f8ba 	bl	8000880 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  extFlashHardReset();
 800070c:	f7ff fdb0 	bl	8000270 <extFlashHardReset>
  extFlashSendCommand(ENABLE_RESET);
 8000710:	2066      	movs	r0, #102	@ 0x66
 8000712:	f7ff fe41 	bl	8000398 <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 8000716:	2099      	movs	r0, #153	@ 0x99
 8000718:	f7ff fe3e 	bl	8000398 <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 800071c:	2098      	movs	r0, #152	@ 0x98
 800071e:	f7ff fe3b 	bl	8000398 <extFlashSendCommand>
  extFlashGetDeviceId(device_Id);
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fddc 	bl	80002e4 <extFlashGetDeviceId>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  extFlashPageRead(FLASH_FLAG_SAVE_ADDRESS,savedFlagData, 3);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2203      	movs	r2, #3
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000736:	f7ff fe53 	bl	80003e0 <extFlashPageRead>
  if(savedFlagData[0] == 0xBB){
 800073a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800073e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2bbb      	cmp	r3, #187	@ 0xbb
 8000746:	d15a      	bne.n	80007fe <main+0x156>
	  totalWordsToRead = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	  totalWordsToRead = savedFlagData[1];
 800074e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000752:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	  totalWordsToRead = (totalWordsToRead << 8) | savedFlagData[2];
 800075c:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21a      	sxth	r2, r3
 8000764:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000768:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	b21b      	sxth	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b21b      	sxth	r3, r3
 8000774:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
//	  totalWordsToRead = totalFirmwareBytes/4;
	  do{
		  if(totalWordsToRead >= 512)
 8000778:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800077c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000780:	d304      	bcc.n	800078c <main+0xe4>
			  wordsToRead = 512;
 8000782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000786:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 800078a:	e003      	b.n	8000794 <main+0xec>
		  else
			  wordsToRead = totalWordsToRead;
 800078c:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8000790:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
		  for(wordsRead = 0; wordsRead < wordsToRead; wordsRead++){
 8000794:	2300      	movs	r3, #0
 8000796:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 800079a:	e015      	b.n	80007c8 <main+0x120>
	  		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&flashReadData[wordsRead], 4);
 800079c:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80007a0:	f107 020c 	add.w	r2, r7, #12
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 80007b0:	f7ff fe16 	bl	80003e0 <extFlashPageRead>
	  		  extFlashReadAddress += 4;
 80007b4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80007b8:	3304      	adds	r3, #4
 80007ba:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
		  for(wordsRead = 0; wordsRead < wordsToRead; wordsRead++){
 80007be:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80007c2:	3301      	adds	r3, #1
 80007c4:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 80007c8:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 80007cc:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d3e3      	bcc.n	800079c <main+0xf4>
//	  		changeWordEndian((uint8_t*)&flashReadData[wordsRead]);
	  	  }
		  totalWordsToRead -= wordsToRead;
 80007d4:	f8b7 2812 	ldrh.w	r2, [r7, #2066]	@ 0x812
 80007d8:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
		  intFlashWrite1(flashReadData, wordsRead);
 80007e2:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff03 	bl	80005f8 <intFlashWrite1>
	  }while(totalWordsToRead != 0);
 80007f2:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1be      	bne.n	8000778 <main+0xd0>
	  resetFotaFlag();
 80007fa:	f7ff fee1 	bl	80005c0 <resetFotaFlag>
  while (1)
  {
//	  for(unsigned char i = 0; i<=20; i++ ){
//		  HAL_Delay(100);
//	  }
	  	  goto_application();
 80007fe:	f000 f8ff 	bl	8000a00 <goto_application>
 8000802:	e7fc      	b.n	80007fe <main+0x156>
 8000804:	08003b74 	.word	0x08003b74

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	@ 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	@ 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f972 	bl	8003b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 ffc6 	bl	80017d0 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800084a:	f000 f8e7 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f806 	bl	8002878 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000872:	f000 f8d3 	bl	8000a1c <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	@ 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <MX_SPI3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800089a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800089e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008b6:	2210      	movs	r2, #16
 80008b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008da:	2208      	movs	r2, #8
 80008dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008e0:	f002 f9b0 	bl	8002c44 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f897 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000140 	.word	0x20000140
 80008f8:	40003c00 	.word	0x40003c00

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b38      	ldr	r3, [pc, #224]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a37      	ldr	r2, [pc, #220]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b35      	ldr	r3, [pc, #212]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b32      	ldr	r3, [pc, #200]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a31      	ldr	r2, [pc, #196]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000930:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b2f      	ldr	r3, [pc, #188]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b2c      	ldr	r3, [pc, #176]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a2b      	ldr	r2, [pc, #172]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a25      	ldr	r2, [pc, #148]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_GPIO_Init+0xf8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 ff10 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <MX_GPIO_Init+0xfc>)
 8000986:	f000 ff0b 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	481b      	ldr	r0, [pc, #108]	@ (80009fc <MX_GPIO_Init+0x100>)
 8000990:	f000 ff06 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : F_RST_Pin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 8000994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b0:	f000 fc80 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_nCS_Pin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <MX_GPIO_Init+0xfc>)
 80009cc:	f000 fc72 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_WP_Pin */
  GPIO_InitStruct.Pin = F_WP_Pin;
 80009d0:	2308      	movs	r3, #8
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_WP_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_GPIO_Init+0x100>)
 80009e8:	f000 fc64 	bl	80012b4 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000c00 	.word	0x48000c00
 80009fc:	48000400 	.word	0x48000400

08000a00 <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application( void )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
//  printf("Going to Jump to Application...\n");
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(0x08005000 + 4U)));
 8000a06:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <goto_application+0x18>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	607b      	str	r3, [r7, #4]
  app_reset_handler();
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4798      	blx	r3
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08005004 	.word	0x08005004

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_SPI_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ac2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_SPI_MspInit+0x84>)
 8000ae0:	f000 fbe8 	bl	80012b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40003c00 	.word	0x40003c00
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800

08000af8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_SPI_MspDeInit+0x30>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d10a      	bne.n	8000b20 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_SPI_MspDeInit+0x34>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_SPI_MspDeInit+0x34>)
 8000b10:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b14:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8000b16:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <HAL_SPI_MspDeInit+0x38>)
 8000b1c:	f000 fd54 	bl	80015c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40003c00 	.word	0x40003c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000800 	.word	0x48000800

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <NMI_Handler+0x4>

08000b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f885 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bbc:	f7ff ffea 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <LoopForever+0xe>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c04 <LoopForever+0x16>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f002 ff93 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bea:	f7ff fd5d 	bl	80006a8 <main>

08000bee <LoopForever>:

LoopForever:
    b LoopForever
 8000bee:	e7fe      	b.n	8000bee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bfc:	08003bb0 	.word	0x08003bb0
  ldr r2, =_sbss
 8000c00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c04:	200001c8 	.word	0x200001c8

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_Init+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_Init+0x28>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f931 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fefe 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f93b 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f911 	bl	8000e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200001a4 	.word	0x200001a4

08000cc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200001a4 	.word	0x200001a4

08000cd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	@ (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	@ 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff47 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff5c 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffb0 	bl	8000e40 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f06:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_FLASH_Program+0xd8>)
 8000f08:	7e1b      	ldrb	r3, [r3, #24]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_FLASH_Program+0x26>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e054      	b.n	8000fbc <HAL_FLASH_Program+0xd0>
 8000f12:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <HAL_FLASH_Program+0xd8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f1c:	f000 f8b4 	bl	8001088 <FLASH_WaitForLastOperation>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d144      	bne.n	8000fb4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f30:	2301      	movs	r3, #1
 8000f32:	757b      	strb	r3, [r7, #21]
 8000f34:	e007      	b.n	8000f46 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d102      	bne.n	8000f42 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	757b      	strb	r3, [r7, #21]
 8000f40:	e001      	b.n	8000f46 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f42:	2304      	movs	r3, #4
 8000f44:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	75bb      	strb	r3, [r7, #22]
 8000f4a:	e02d      	b.n	8000fa8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	005a      	lsls	r2, r3, #1
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	eb02 0c03 	add.w	ip, r2, r3
 8000f56:	7dbb      	ldrb	r3, [r7, #22]
 8000f58:	0119      	lsls	r1, r3, #4
 8000f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5e:	f1c1 0620 	rsb	r6, r1, #32
 8000f62:	f1a1 0020 	sub.w	r0, r1, #32
 8000f66:	fa22 f401 	lsr.w	r4, r2, r1
 8000f6a:	fa03 f606 	lsl.w	r6, r3, r6
 8000f6e:	4334      	orrs	r4, r6
 8000f70:	fa23 f000 	lsr.w	r0, r3, r0
 8000f74:	4304      	orrs	r4, r0
 8000f76:	fa23 f501 	lsr.w	r5, r3, r1
 8000f7a:	b2a3      	uxth	r3, r4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4660      	mov	r0, ip
 8000f80:	f000 f866 	bl	8001050 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f84:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f88:	f000 f87e 	bl	8001088 <FLASH_WaitForLastOperation>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_FLASH_Program+0xdc>)
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_FLASH_Program+0xdc>)
 8000f96:	f023 0301 	bic.w	r3, r3, #1
 8000f9a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d107      	bne.n	8000fb2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fa2:	7dbb      	ldrb	r3, [r7, #22]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	75bb      	strb	r3, [r7, #22]
 8000fa8:	7dba      	ldrb	r2, [r7, #22]
 8000faa:	7d7b      	ldrb	r3, [r7, #21]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3cd      	bcc.n	8000f4c <HAL_FLASH_Program+0x60>
 8000fb0:	e000      	b.n	8000fb4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000fb2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_FLASH_Program+0xd8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	761a      	strb	r2, [r3, #24]

  return status;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc4:	200001a8 	.word	0x200001a8
 8000fc8:	40022000 	.word	0x40022000

08000fcc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_FLASH_Unlock+0x40>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00d      	beq.n	8000ffe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_FLASH_Unlock+0x40>)
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <HAL_FLASH_Unlock+0x44>)
 8000fe6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_FLASH_Unlock+0x40>)
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_FLASH_Unlock+0x48>)
 8000fec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_FLASH_Unlock+0x40>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40022000 	.word	0x40022000
 8001010:	45670123 	.word	0x45670123
 8001014:	cdef89ab 	.word	0xcdef89ab

08001018 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_FLASH_Lock+0x1c>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <HAL_FLASH_Lock+0x1c>)
 8001022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001026:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_FLASH_GetError+0x14>)
 800103e:	69db      	ldr	r3, [r3, #28]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001a8 	.word	0x200001a8

08001050 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <FLASH_Program_HalfWord+0x30>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <FLASH_Program_HalfWord+0x34>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <FLASH_Program_HalfWord+0x34>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	801a      	strh	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200001a8 	.word	0x200001a8
 8001084:	40022000 	.word	0x40022000

08001088 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fe16 	bl	8000cc0 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001096:	e010      	b.n	80010ba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109e:	d00c      	beq.n	80010ba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <FLASH_WaitForLastOperation+0x2e>
 80010a6:	f7ff fe0b 	bl	8000cc0 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d201      	bcs.n	80010ba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e01f      	b.n	80010fa <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010ba:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <FLASH_WaitForLastOperation+0x7c>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d0e8      	beq.n	8001098 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <FLASH_WaitForLastOperation+0x7c>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	d102      	bne.n	80010d8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <FLASH_WaitForLastOperation+0x7c>)
 80010d4:	2220      	movs	r2, #32
 80010d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <FLASH_WaitForLastOperation+0x7c>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d005      	beq.n	80010f0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <FLASH_WaitForLastOperation+0x7c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d103      	bne.n	80010f8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010f0:	f000 f80a 	bl	8001108 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <FLASH_SetErrorCode+0x5c>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b10      	cmp	r3, #16
 800111c:	d109      	bne.n	8001132 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <FLASH_SetErrorCode+0x60>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <FLASH_SetErrorCode+0x60>)
 8001128:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <FLASH_SetErrorCode+0x5c>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b04      	cmp	r3, #4
 800113c:	d109      	bne.n	8001152 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <FLASH_SetErrorCode+0x60>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <FLASH_SetErrorCode+0x60>)
 8001148:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <FLASH_SetErrorCode+0x5c>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60d3      	str	r3, [r2, #12]
}  
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40022000 	.word	0x40022000
 8001168:	200001a8 	.word	0x200001a8

0800116c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800117e:	4b2e      	ldr	r3, [pc, #184]	@ (8001238 <HAL_FLASHEx_Erase+0xcc>)
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_FLASHEx_Erase+0x1e>
 8001186:	2302      	movs	r3, #2
 8001188:	e052      	b.n	8001230 <HAL_FLASHEx_Erase+0xc4>
 800118a:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <HAL_FLASHEx_Erase+0xcc>)
 800118c:	2201      	movs	r2, #1
 800118e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d115      	bne.n	80011c4 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001198:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800119c:	f7ff ff74 	bl	8001088 <FLASH_WaitForLastOperation>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d140      	bne.n	8001228 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80011a6:	f000 f84b 	bl	8001240 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011ae:	f7ff ff6b 	bl	8001088 <FLASH_WaitForLastOperation>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <HAL_FLASHEx_Erase+0xd0>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a20      	ldr	r2, [pc, #128]	@ (800123c <HAL_FLASHEx_Erase+0xd0>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	6113      	str	r3, [r2, #16]
 80011c2:	e031      	b.n	8001228 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011c8:	f7ff ff5e 	bl	8001088 <FLASH_WaitForLastOperation>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d12a      	bne.n	8001228 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	e019      	b.n	8001216 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f000 f846 	bl	8001274 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011ec:	f7ff ff4c 	bl	8001088 <FLASH_WaitForLastOperation>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_FLASHEx_Erase+0xd0>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_FLASHEx_Erase+0xd0>)
 80011fa:	f023 0302 	bic.w	r3, r3, #2
 80011fe:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	601a      	str	r2, [r3, #0]
            break;
 800120c:	e00c      	b.n	8001228 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001214:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	02da      	lsls	r2, r3, #11
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4413      	add	r3, r2
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	429a      	cmp	r2, r3
 8001226:	d3dc      	bcc.n	80011e2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_FLASHEx_Erase+0xcc>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]

  return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001a8 	.word	0x200001a8
 800123c:	40022000 	.word	0x40022000

08001240 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <FLASH_MassErase+0x2c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <FLASH_MassErase+0x30>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <FLASH_MassErase+0x30>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <FLASH_MassErase+0x30>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <FLASH_MassErase+0x30>)
 800125c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001260:	6113      	str	r3, [r2, #16]
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	200001a8 	.word	0x200001a8
 8001270:	40022000 	.word	0x40022000

08001274 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <FLASH_PageErase+0x38>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <FLASH_PageErase+0x3c>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <FLASH_PageErase+0x3c>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <FLASH_PageErase+0x3c>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <FLASH_PageErase+0x3c>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <FLASH_PageErase+0x3c>)
 800129a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129e:	6113      	str	r3, [r2, #16]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	200001a8 	.word	0x200001a8
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	e160      	b.n	8001586 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8152 	beq.w	8001580 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_GPIO_Init+0x40>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	f003 0201 	and.w	r2, r3, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b03      	cmp	r3, #3
 8001360:	d017      	beq.n	8001392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d123      	bne.n	80013e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	6939      	ldr	r1, [r7, #16]
 80013e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0203 	and.w	r2, r3, #3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80ac 	beq.w	8001580 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001428:	4b5e      	ldr	r3, [pc, #376]	@ (80015a4 <HAL_GPIO_Init+0x2f0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a5d      	ldr	r2, [pc, #372]	@ (80015a4 <HAL_GPIO_Init+0x2f0>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b5b      	ldr	r3, [pc, #364]	@ (80015a4 <HAL_GPIO_Init+0x2f0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001440:	4a59      	ldr	r2, [pc, #356]	@ (80015a8 <HAL_GPIO_Init+0x2f4>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800146a:	d025      	beq.n	80014b8 <HAL_GPIO_Init+0x204>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4f      	ldr	r2, [pc, #316]	@ (80015ac <HAL_GPIO_Init+0x2f8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d01f      	beq.n	80014b4 <HAL_GPIO_Init+0x200>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a4e      	ldr	r2, [pc, #312]	@ (80015b0 <HAL_GPIO_Init+0x2fc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d019      	beq.n	80014b0 <HAL_GPIO_Init+0x1fc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a4d      	ldr	r2, [pc, #308]	@ (80015b4 <HAL_GPIO_Init+0x300>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d013      	beq.n	80014ac <HAL_GPIO_Init+0x1f8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4c      	ldr	r2, [pc, #304]	@ (80015b8 <HAL_GPIO_Init+0x304>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d00d      	beq.n	80014a8 <HAL_GPIO_Init+0x1f4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4b      	ldr	r2, [pc, #300]	@ (80015bc <HAL_GPIO_Init+0x308>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d007      	beq.n	80014a4 <HAL_GPIO_Init+0x1f0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4a      	ldr	r2, [pc, #296]	@ (80015c0 <HAL_GPIO_Init+0x30c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_GPIO_Init+0x1ec>
 800149c:	2306      	movs	r3, #6
 800149e:	e00c      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014a0:	2307      	movs	r3, #7
 80014a2:	e00a      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014a4:	2305      	movs	r3, #5
 80014a6:	e008      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e004      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e002      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_GPIO_Init+0x206>
 80014b8:	2300      	movs	r3, #0
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ca:	4937      	ldr	r1, [pc, #220]	@ (80015a8 <HAL_GPIO_Init+0x2f4>)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d8:	4b3a      	ldr	r3, [pc, #232]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fc:	4a31      	ldr	r2, [pc, #196]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001502:	4b30      	ldr	r3, [pc, #192]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001526:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001550:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <HAL_GPIO_Init+0x310>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	fa22 f303 	lsr.w	r3, r2, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f ae97 	bne.w	80012c4 <HAL_GPIO_Init+0x10>
  }
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000c00 	.word	0x48000c00
 80015b8:	48001000 	.word	0x48001000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	48001800 	.word	0x48001800
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80015d6:	e0c4      	b.n	8001762 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80b7 	beq.w	800175c <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80015ee:	4a64      	ldr	r2, [pc, #400]	@ (8001780 <HAL_GPIO_DeInit+0x1b8>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001616:	d025      	beq.n	8001664 <HAL_GPIO_DeInit+0x9c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a5a      	ldr	r2, [pc, #360]	@ (8001784 <HAL_GPIO_DeInit+0x1bc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d01f      	beq.n	8001660 <HAL_GPIO_DeInit+0x98>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a59      	ldr	r2, [pc, #356]	@ (8001788 <HAL_GPIO_DeInit+0x1c0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d019      	beq.n	800165c <HAL_GPIO_DeInit+0x94>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a58      	ldr	r2, [pc, #352]	@ (800178c <HAL_GPIO_DeInit+0x1c4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d013      	beq.n	8001658 <HAL_GPIO_DeInit+0x90>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a57      	ldr	r2, [pc, #348]	@ (8001790 <HAL_GPIO_DeInit+0x1c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d00d      	beq.n	8001654 <HAL_GPIO_DeInit+0x8c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a56      	ldr	r2, [pc, #344]	@ (8001794 <HAL_GPIO_DeInit+0x1cc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d007      	beq.n	8001650 <HAL_GPIO_DeInit+0x88>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a55      	ldr	r2, [pc, #340]	@ (8001798 <HAL_GPIO_DeInit+0x1d0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_GPIO_DeInit+0x84>
 8001648:	2306      	movs	r3, #6
 800164a:	e00c      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 800164c:	2307      	movs	r3, #7
 800164e:	e00a      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 8001650:	2305      	movs	r3, #5
 8001652:	e008      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 8001654:	2304      	movs	r3, #4
 8001656:	e006      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 8001658:	2303      	movs	r3, #3
 800165a:	e004      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 800165c:	2302      	movs	r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_DeInit+0x9e>
 8001664:	2300      	movs	r3, #0
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	d132      	bne.n	80016dc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001676:	4b49      	ldr	r3, [pc, #292]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	4947      	ldr	r1, [pc, #284]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 8001680:	4013      	ands	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001684:	4b45      	ldr	r3, [pc, #276]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	4943      	ldr	r1, [pc, #268]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 800168e:	4013      	ands	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001692:	4b42      	ldr	r3, [pc, #264]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	4940      	ldr	r1, [pc, #256]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 800169c:	4013      	ands	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80016a0:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	493c      	ldr	r1, [pc, #240]	@ (800179c <HAL_GPIO_DeInit+0x1d4>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80016be:	4a30      	ldr	r2, [pc, #192]	@ (8001780 <HAL_GPIO_DeInit+0x1b8>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	482c      	ldr	r0, [pc, #176]	@ (8001780 <HAL_GPIO_DeInit+0x1b8>)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	400a      	ands	r2, r1
 80016d6:	3302      	adds	r3, #2
 80016d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2103      	movs	r1, #3
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	08d2      	lsrs	r2, r2, #3
 8001712:	4019      	ands	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2103      	movs	r1, #3
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	2101      	movs	r1, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	401a      	ands	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2103      	movs	r1, #3
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa22 f303 	lsr.w	r3, r2, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	f47f af34 	bne.w	80015d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48001000 	.word	0x48001000
 8001794:	48001400 	.word	0x48001400
 8001798:	48001800 	.word	0x48001800
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f001 b83a 	b.w	800286a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 816f 	beq.w	8001aea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800180c:	4bb5      	ldr	r3, [pc, #724]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001818:	4bb2      	ldr	r3, [pc, #712]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d15c      	bne.n	80018de <HAL_RCC_OscConfig+0x10e>
 8001824:	4baf      	ldr	r3, [pc, #700]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001830:	d155      	bne.n	80018de <HAL_RCC_OscConfig+0x10e>
 8001832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001836:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001846:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0x94>
 800185e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	e015      	b.n	8001890 <HAL_RCC_OscConfig+0xc0>
 8001864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001868:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001880:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800188c:	4b95      	ldr	r3, [pc, #596]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001894:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001898:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800189c:	fa92 f2a2 	rbit	r2, r2
 80018a0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8111 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x318>
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 8108 	bne.w	8001ae8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	f000 bfc6 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x12e>
 80018f0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e036      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 80018fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001902:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x158>
 800190e:	4b75      	ldr	r3, [pc, #468]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a74      	ldr	r2, [pc, #464]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b72      	ldr	r3, [pc, #456]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a71      	ldr	r2, [pc, #452]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e021      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 8001928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x184>
 800193a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a69      	ldr	r2, [pc, #420]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b67      	ldr	r3, [pc, #412]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a66      	ldr	r2, [pc, #408]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0x19c>
 8001954:	4b63      	ldr	r3, [pc, #396]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a62      	ldr	r2, [pc, #392]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d059      	beq.n	8001a30 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff f9a0 	bl	8000cc0 <HAL_GetTick>
 8001980:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001986:	f7ff f99b 	bl	8000cc0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d902      	bls.n	800199c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	f000 bf67 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 800199c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80019b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x1fe>
 80019c8:	4b46      	ldr	r3, [pc, #280]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x22a>
 80019ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80019e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80019f6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019fe:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a02:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a06:	fa92 f2a2 	rbit	r2, r2
 8001a0a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a12:	fab2 f282 	clz	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ab      	beq.n	8001986 <HAL_RCC_OscConfig+0x1b6>
 8001a2e:	e05c      	b.n	8001aea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f946 	bl	8000cc0 <HAL_GetTick>
 8001a34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f941 	bl	8000cc0 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	@ 0x64
 8001a48:	d902      	bls.n	8001a50 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f000 bf0d 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 8001a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a54:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001a64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2b2>
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x2de>
 8001a82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a86:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001a96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <HAL_RCC_OscConfig+0x314>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ab2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ab6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001aba:	fa92 f2a2 	rbit	r2, r2
 8001abe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001ac2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f002 021f 	and.w	r2, r2, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ab      	bne.n	8001a3a <HAL_RCC_OscConfig+0x26a>
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_OscConfig+0x31a>
 8001ae4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 817f 	beq.w	8001dfe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b00:	4ba7      	ldr	r3, [pc, #668]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d173      	bne.n	8001c00 <HAL_RCC_OscConfig+0x430>
 8001b18:	4ba1      	ldr	r3, [pc, #644]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b24:	d16c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x430>
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b38:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3c:	fab3 f383 	clz	r3, r3
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x386>
 8001b50:	4b93      	ldr	r3, [pc, #588]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	e013      	b.n	8001b7e <HAL_RCC_OscConfig+0x3ae>
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b68:	2302      	movs	r3, #2
 8001b6a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b6e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b7a:	4b89      	ldr	r3, [pc, #548]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001b84:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001b88:	fa92 f2a2 	rbit	r2, r2
 8001b8c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001b90:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	f042 0220 	orr.w	r2, r2, #32
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f002 021f 	and.w	r2, r2, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3f6>
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d002      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f000 be52 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b76      	ldr	r3, [pc, #472]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	21f8      	movs	r1, #248	@ 0xf8
 8001bdc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001be4:	fa91 f1a1 	rbit	r1, r1
 8001be8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001bec:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001bf0:	fab1 f181 	clz	r1, r1
 8001bf4:	b2c9      	uxtb	r1, r1
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	4969      	ldr	r1, [pc, #420]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	e0fe      	b.n	8001dfe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8088 	beq.w	8001d22 <HAL_RCC_OscConfig+0x552>
 8001c12:	2301      	movs	r3, #1
 8001c14:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c24:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c32:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f83f 	bl	8000cc0 <HAL_GetTick>
 8001c42:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f83a 	bl	8000cc0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d902      	bls.n	8001c5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f000 be06 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001c70:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4be>
 8001c88:	4b45      	ldr	r3, [pc, #276]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e013      	b.n	8001cb6 <HAL_RCC_OscConfig+0x4e6>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ca6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cbc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001cc8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0af      	beq.n	8001c48 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	21f8      	movs	r1, #248	@ 0xf8
 8001cfe:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d06:	fa91 f1a1 	rbit	r1, r1
 8001d0a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d0e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d12:	fab1 f181 	clz	r1, r1
 8001d16:	b2c9      	uxtb	r1, r1
 8001d18:	408b      	lsls	r3, r1
 8001d1a:	4921      	ldr	r1, [pc, #132]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e06d      	b.n	8001dfe <HAL_RCC_OscConfig+0x62e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d34:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ffb7 	bl	8000cc0 <HAL_GetTick>
 8001d52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7fe ffb2 	bl	8000cc0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d902      	bls.n	8001d6e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f000 bd7e 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001d80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5d4>
 8001d98:	4b01      	ldr	r3, [pc, #4]	@ (8001da0 <HAL_RCC_OscConfig+0x5d0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	e016      	b.n	8001dcc <HAL_RCC_OscConfig+0x5fc>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	2302      	movs	r3, #2
 8001da6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001db6:	2302      	movs	r3, #2
 8001db8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dbc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001dc8:	4bbf      	ldr	r3, [pc, #764]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001dd2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001dd6:	fa92 f2a2 	rbit	r2, r2
 8001dda:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001dde:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ac      	bne.n	8001d58 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8113 	beq.w	800203a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d07c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x74e>
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4ba2      	ldr	r3, [pc, #648]	@ (80020cc <HAL_RCC_OscConfig+0x8fc>)
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff37 	bl	8000cc0 <HAL_GetTick>
 8001e52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7fe ff32 	bl	8000cc0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d902      	bls.n	8001e6e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f000 bcfe 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ecc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b7e      	ldr	r3, [pc, #504]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8001ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001eda:	2102      	movs	r1, #2
 8001edc:	6019      	str	r1, [r3, #0]
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f1a3 	rbit	r1, r3
 8001eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ef4:	6019      	str	r1, [r3, #0]
  return result;
 8001ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d09d      	beq.n	8001e58 <HAL_RCC_OscConfig+0x688>
 8001f1c:	e08d      	b.n	800203a <HAL_RCC_OscConfig+0x86a>
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f40:	601a      	str	r2, [r3, #0]
  return result;
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b5d      	ldr	r3, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x8fc>)
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7fe feae 	bl	8000cc0 <HAL_GetTick>
 8001f64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7fe fea9 	bl	8000cc0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d902      	bls.n	8001f80 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	f000 bc75 	b.w	800286a <HAL_RCC_OscConfig+0x109a>
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f88:	2202      	movs	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fac:	2202      	movs	r2, #2
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001fea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8001fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	6019      	str	r1, [r3, #0]
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f1a3 	rbit	r1, r3
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002012:	6019      	str	r1, [r3, #0]
  return result;
 8002014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002018:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d197      	bne.n	8001f6a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 81a5 	beq.w	800239a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_RCC_OscConfig+0x8f8>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_RCC_OscConfig+0x900>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d121      	bne.n	80020e0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_RCC_OscConfig+0x900>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0b      	ldr	r2, [pc, #44]	@ (80020d0 <HAL_RCC_OscConfig+0x900>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fe0a 	bl	8000cc0 <HAL_GetTick>
 80020ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e010      	b.n	80020d4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fe05 	bl	8000cc0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e3d1      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	10908120 	.word	0x10908120
 80020d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b8d      	ldr	r3, [pc, #564]	@ (800230c <HAL_RCC_OscConfig+0xb3c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0e8      	beq.n	80020b2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x92e>
 80020f0:	4b87      	ldr	r3, [pc, #540]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a86      	ldr	r2, [pc, #536]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e035      	b.n	800216a <HAL_RCC_OscConfig+0x99a>
 80020fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002102:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x958>
 800210e:	4b80      	ldr	r3, [pc, #512]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a7f      	ldr	r2, [pc, #508]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b7d      	ldr	r3, [pc, #500]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a7c      	ldr	r2, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	e020      	b.n	800216a <HAL_RCC_OscConfig+0x99a>
 8002128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x982>
 8002138:	4b75      	ldr	r3, [pc, #468]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a74      	ldr	r2, [pc, #464]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b72      	ldr	r3, [pc, #456]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a71      	ldr	r2, [pc, #452]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x99a>
 8002152:	4b6f      	ldr	r3, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b6c      	ldr	r3, [pc, #432]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a6b      	ldr	r2, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8081 	beq.w	800227e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7fe fda0 	bl	8000cc0 <HAL_GetTick>
 8002180:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fd9b 	bl	8000cc0 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e365      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 800219e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021a6:	2202      	movs	r2, #2
 80021a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021ca:	2202      	movs	r2, #2
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021e4:	601a      	str	r2, [r3, #0]
  return result;
 80021e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0xa3a>
 8002204:	4b42      	ldr	r3, [pc, #264]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	e013      	b.n	8002232 <HAL_RCC_OscConfig+0xa62>
 800220a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002236:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800223a:	2102      	movs	r1, #2
 800223c:	6011      	str	r1, [r2, #0]
 800223e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002242:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	fa92 f1a2 	rbit	r1, r2
 800224c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002250:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002254:	6011      	str	r1, [r2, #0]
  return result;
 8002256:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800225a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f002 021f 	and.w	r2, r2, #31
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f202 	lsl.w	r2, r1, r2
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d084      	beq.n	8002186 <HAL_RCC_OscConfig+0x9b6>
 800227c:	e083      	b.n	8002386 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7fe fd1f 	bl	8000cc0 <HAL_GetTick>
 8002282:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fd1a 	bl	8000cc0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e2e4      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022e6:	601a      	str	r2, [r3, #0]
  return result;
 80022e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d106      	bne.n	8002314 <HAL_RCC_OscConfig+0xb44>
 8002306:	4b02      	ldr	r3, [pc, #8]	@ (8002310 <HAL_RCC_OscConfig+0xb40>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	e017      	b.n	800233c <HAL_RCC_OscConfig+0xb6c>
 800230c:	40007000 	.word	0x40007000
 8002310:	40021000 	.word	0x40021000
 8002314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002318:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002332:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4bb3      	ldr	r3, [pc, #716]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002340:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002344:	2102      	movs	r1, #2
 8002346:	6011      	str	r1, [r2, #0]
 8002348:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800234c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	fa92 f1a2 	rbit	r1, r2
 8002356:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800235a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800235e:	6011      	str	r1, [r2, #0]
  return result;
 8002360:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002364:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d180      	bne.n	8002288 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002386:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b9e      	ldr	r3, [pc, #632]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a9d      	ldr	r2, [pc, #628]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 825e 	beq.w	8002868 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b96      	ldr	r3, [pc, #600]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	f000 821f 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f040 8170 	bne.w	80026ac <HAL_RCC_OscConfig+0xedc>
 80023cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023de:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023f0:	601a      	str	r2, [r3, #0]
  return result;
 80023f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023fa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002406:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fc55 	bl	8000cc0 <HAL_GetTick>
 8002416:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	e009      	b.n	8002430 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe fc50 	bl	8000cc0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e21c      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002438:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800243c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002450:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002454:	601a      	str	r2, [r3, #0]
  return result;
 8002456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800245e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_RCC_OscConfig+0xcaa>
 8002474:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	e027      	b.n	80024ca <HAL_RCC_OscConfig+0xcfa>
 800247a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002482:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024d2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024d6:	6011      	str	r1, [r2, #0]
 80024d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024dc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	fa92 f1a2 	rbit	r1, r2
 80024e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024ea:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80024ee:	6011      	str	r1, [r2, #0]
  return result;
 80024f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024f4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	fab2 f282 	clz	r2, r2
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	f002 021f 	and.w	r2, r2, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d182      	bne.n	800241c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002516:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002522:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	4937      	ldr	r1, [pc, #220]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 800252c:	4313      	orrs	r3, r2
 800252e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002530:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002548:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	430b      	orrs	r3, r1
 8002552:	492d      	ldr	r1, [pc, #180]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002578:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800257c:	601a      	str	r2, [r3, #0]
  return result;
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002586:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002592:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	2301      	movs	r3, #1
 800259c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fb8f 	bl	8000cc0 <HAL_GetTick>
 80025a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a6:	e009      	b.n	80025bc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fb8a 	bl	8000cc0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e156      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 80025bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025dc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d105      	bne.n	800260c <HAL_RCC_OscConfig+0xe3c>
 8002600:	4b01      	ldr	r3, [pc, #4]	@ (8002608 <HAL_RCC_OscConfig+0xe38>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	e02a      	b.n	800265c <HAL_RCC_OscConfig+0xe8c>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	fa93 f2a3 	rbit	r2, r3
 8002628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800263a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4b86      	ldr	r3, [pc, #536]	@ (8002874 <HAL_RCC_OscConfig+0x10a4>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002660:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002664:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002668:	6011      	str	r1, [r2, #0]
 800266a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	fa92 f1a2 	rbit	r1, r2
 8002678:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800267c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002680:	6011      	str	r1, [r2, #0]
  return result;
 8002682:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002686:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f43f af7f 	beq.w	80025a8 <HAL_RCC_OscConfig+0xdd8>
 80026aa:	e0dd      	b.n	8002868 <HAL_RCC_OscConfig+0x1098>
 80026ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026cc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026d0:	601a      	str	r2, [r3, #0]
  return result;
 80026d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026da:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	461a      	mov	r2, r3
 80026ee:	2300      	movs	r3, #0
 80026f0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fae5 	bl	8000cc0 <HAL_GetTick>
 80026f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e009      	b.n	8002710 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fae0 	bl	8000cc0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0ac      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
 8002710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002714:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002730:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002734:	601a      	str	r2, [r3, #0]
  return result;
 8002736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800273e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_RCC_OscConfig+0xf8a>
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_RCC_OscConfig+0x10a4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e027      	b.n	80027aa <HAL_RCC_OscConfig+0xfda>
 800275a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002762:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800277a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002784:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002788:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002792:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_RCC_OscConfig+0x10a4>)
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ae:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027b6:	6011      	str	r1, [r2, #0]
 80027b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	fa92 f1a2 	rbit	r1, r2
 80027c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ca:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027ce:	6011      	str	r1, [r2, #0]
  return result;
 80027d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027d4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	fab2 f282 	clz	r2, r2
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f042 0220 	orr.w	r2, r2, #32
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 021f 	and.w	r2, r2, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d182      	bne.n	80026fc <HAL_RCC_OscConfig+0xf2c>
 80027f6:	e037      	b.n	8002868 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e02e      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_OscConfig+0x10a4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002814:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <HAL_RCC_OscConfig+0x10a4>)
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800281c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002820:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d117      	bne.n	8002864 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002834:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002838:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002848:	429a      	cmp	r2, r3
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002858:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b09e      	sub	sp, #120	@ 0x78
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e162      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b90      	ldr	r3, [pc, #576]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d910      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	498b      	ldr	r1, [pc, #556]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b89      	ldr	r3, [pc, #548]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e14a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b82      	ldr	r3, [pc, #520]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	497f      	ldr	r1, [pc, #508]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80dc 	beq.w	8002aa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d13c      	bne.n	800296e <HAL_RCC_ClockConfig+0xf6>
 80028f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_ClockConfig+0xa6>
 8002918:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e00f      	b.n	800293e <HAL_RCC_ClockConfig+0xc6>
 800291e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002922:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	667b      	str	r3, [r7, #100]	@ 0x64
 800292c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002930:	663b      	str	r3, [r7, #96]	@ 0x60
 8002932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800293a:	4b67      	ldr	r3, [pc, #412]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002942:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002946:	fa92 f2a2 	rbit	r2, r2
 800294a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800294c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800294e:	fab2 f282 	clz	r2, r2
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f042 0220 	orr.w	r2, r2, #32
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f002 021f 	and.w	r2, r2, #31
 800295e:	2101      	movs	r1, #1
 8002960:	fa01 f202 	lsl.w	r2, r1, r2
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d17b      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0f3      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d13c      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x178>
 8002976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800297a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d102      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x128>
 800299a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_ClockConfig+0x148>
 80029a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80029b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029bc:	4b46      	ldr	r3, [pc, #280]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029d0:	fab2 f282 	clz	r2, r2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f042 0220 	orr.w	r2, r2, #32
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f002 021f 	and.w	r2, r2, #31
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d13a      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b2      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
 80029f0:	2302      	movs	r3, #2
 80029f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x1a0>
 8002a12:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e00d      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1bc>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	2202      	movs	r2, #2
 8002a36:	61ba      	str	r2, [r7, #24]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	fa92 f2a2 	rbit	r2, r2
 8002a3e:	617a      	str	r2, [r7, #20]
  return result;
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0220 	orr.w	r2, r2, #32
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e079      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	491a      	ldr	r1, [pc, #104]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe f924 	bl	8000cc0 <HAL_GetTick>
 8002a78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe f920 	bl	8000cc0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e061      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d214      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4906      	ldr	r1, [pc, #24]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e040      	b.n	8002b56 <HAL_RCC_ClockConfig+0x2de>
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <HAL_RCC_ClockConfig+0x2e8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	491a      	ldr	r1, [pc, #104]	@ (8002b60 <HAL_RCC_ClockConfig+0x2e8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_RCC_ClockConfig+0x2e8>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4912      	ldr	r1, [pc, #72]	@ (8002b60 <HAL_RCC_ClockConfig+0x2e8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b1a:	f000 f829 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_RCC_ClockConfig+0x2e8>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b28:	22f0      	movs	r2, #240	@ 0xf0
 8002b2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	fa92 f2a2 	rbit	r2, r2
 8002b32:	60fa      	str	r2, [r7, #12]
  return result;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	fab2 f282 	clz	r2, r2
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	40d3      	lsrs	r3, r2
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <HAL_RCC_ClockConfig+0x2ec>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	fa21 f303 	lsr.w	r3, r1, r3
 8002b46:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_RCC_ClockConfig+0x2f0>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_RCC_ClockConfig+0x2f4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f872 	bl	8000c38 <HAL_InitTick>
  
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3778      	adds	r7, #120	@ 0x78
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08003b78 	.word	0x08003b78
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b08b      	sub	sp, #44	@ 0x2c
 8002b74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8002b9e:	e03f      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ba2:	623b      	str	r3, [r7, #32]
      break;
 8002ba4:	e03f      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002bac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002bb0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	fa92 f2a2 	rbit	r2, r2
 8002bb8:	607a      	str	r2, [r7, #4]
  return result;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	40d3      	lsrs	r3, r2
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	60fa      	str	r2, [r7, #12]
  return result;
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	40d3      	lsrs	r3, r2
 8002be8:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	e007      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fb02 f303 	mul.w	r3, r2, r3
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	623b      	str	r3, [r7, #32]
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c22:	623b      	str	r3, [r7, #32]
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	6a3b      	ldr	r3, [r7, #32]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	372c      	adds	r7, #44	@ 0x2c
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	08003b88 	.word	0x08003b88
 8002c40:	08003b98 	.word	0x08003b98

08002c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e09d      	b.n	8002d92 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c66:	d009      	beq.n	8002c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd feea 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cbc:	d902      	bls.n	8002cc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e002      	b.n	8002cca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_Init+0xa0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	f003 0204 	and.w	r2, r3, #4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e01a      	b.n	8002de2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fe97 	bl	8000af8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b088      	sub	sp, #32
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_SPI_Transmit+0x22>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e15f      	b.n	80030cc <HAL_SPI_Transmit+0x2e2>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e14:	f7fd ff54 	bl	8000cc0 <HAL_GetTick>
 8002e18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e2e:	e148      	b.n	80030c2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x52>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e40:	e13f      	b.n	80030c2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e8c:	d10f      	bne.n	8002eae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ed4:	d94f      	bls.n	8002f76 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_SPI_Transmit+0xfa>
 8002ede:	8afb      	ldrh	r3, [r7, #22]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d142      	bne.n	8002f6a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f08:	e02f      	b.n	8002f6a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d112      	bne.n	8002f3e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f3c:	e015      	b.n	8002f6a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3e:	f7fd febf 	bl	8000cc0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d803      	bhi.n	8002f56 <HAL_SPI_Transmit+0x16c>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d102      	bne.n	8002f5c <HAL_SPI_Transmit+0x172>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f68:	e0ab      	b.n	80030c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ca      	bne.n	8002f0a <HAL_SPI_Transmit+0x120>
 8002f74:	e080      	b.n	8003078 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Transmit+0x19a>
 8002f7e:	8afb      	ldrh	r3, [r7, #22]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d174      	bne.n	800306e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d912      	bls.n	8002fb4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b02      	subs	r3, #2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fb2:	e05c      	b.n	800306e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	7812      	ldrb	r2, [r2, #0]
 8002fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002fda:	e048      	b.n	800306e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d12b      	bne.n	8003042 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d912      	bls.n	800301a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b02      	subs	r3, #2
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003018:	e029      	b.n	800306e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003040:	e015      	b.n	800306e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003042:	f7fd fe3d 	bl	8000cc0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d803      	bhi.n	800305a <HAL_SPI_Transmit+0x270>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d102      	bne.n	8003060 <HAL_SPI_Transmit+0x276>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800306c:	e029      	b.n	80030c2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1b1      	bne.n	8002fdc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	6839      	ldr	r1, [r7, #0]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fcf9 	bl	8003a74 <SPI_EndRxTxTransaction>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e003      	b.n	80030c2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d002      	beq.n	80030fa <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030f8:	e11a      	b.n	8003330 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003102:	d112      	bne.n	800312a <HAL_SPI_Receive+0x56>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2204      	movs	r2, #4
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f90e 	bl	8003342 <HAL_SPI_TransmitReceive>
 8003126:	4603      	mov	r3, r0
 8003128:	e107      	b.n	800333a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_SPI_Receive+0x64>
 8003134:	2302      	movs	r3, #2
 8003136:	e100      	b.n	800333a <HAL_SPI_Receive+0x266>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003140:	f7fd fdbe 	bl	8000cc0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_SPI_Receive+0x7e>
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003156:	e0eb      	b.n	8003330 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2204      	movs	r2, #4
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031a2:	d908      	bls.n	80031b6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	e007      	b.n	80031c6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031c4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ce:	d10f      	bne.n	80031f0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d007      	beq.n	800320e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003216:	d86f      	bhi.n	80032f8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003218:	e034      	b.n	8003284 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d117      	bne.n	8003258 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f103 020c 	add.w	r2, r3, #12
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003256:	e015      	b.n	8003284 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003258:	f7fd fd32 	bl	8000cc0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d803      	bhi.n	8003270 <HAL_SPI_Receive+0x19c>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d102      	bne.n	8003276 <HAL_SPI_Receive+0x1a2>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003282:	e055      	b.n	8003330 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1c4      	bne.n	800321a <HAL_SPI_Receive+0x146>
 8003290:	e038      	b.n	8003304 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d115      	bne.n	80032cc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	b292      	uxth	r2, r2
 80032ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032ca:	e015      	b.n	80032f8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032cc:	f7fd fcf8 	bl	8000cc0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d803      	bhi.n	80032e4 <HAL_SPI_Receive+0x210>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d102      	bne.n	80032ea <HAL_SPI_Receive+0x216>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032f6:	e01b      	b.n	8003330 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1c6      	bne.n	8003292 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fb5b 	bl	80039c4 <SPI_EndRxTransaction>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
 8003326:	e003      	b.n	8003330 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003338:	7dfb      	ldrb	r3, [r7, #23]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08a      	sub	sp, #40	@ 0x28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003350:	2301      	movs	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x26>
 8003364:	2302      	movs	r3, #2
 8003366:	e20a      	b.n	800377e <HAL_SPI_TransmitReceive+0x43c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003370:	f7fd fca6 	bl	8000cc0 <HAL_GetTick>
 8003374:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800337c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800338c:	7efb      	ldrb	r3, [r7, #27]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d00e      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x6e>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003398:	d106      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x66>
 80033a2:	7efb      	ldrb	r3, [r7, #27]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d003      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
 80033aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033ae:	e1e0      	b.n	8003772 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x80>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x80>
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033c8:	e1d3      	b.n	8003772 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d003      	beq.n	80033de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	887a      	ldrh	r2, [r7, #2]
 800340a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003420:	d802      	bhi.n	8003428 <HAL_SPI_TransmitReceive+0xe6>
 8003422:	8a3b      	ldrh	r3, [r7, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d908      	bls.n	800343a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e007      	b.n	800344a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d007      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003470:	f240 8081 	bls.w	8003576 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x140>
 800347c:	8a7b      	ldrh	r3, [r7, #18]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d16d      	bne.n	800355e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a6:	e05a      	b.n	800355e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11b      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x1ac>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x1ac>
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d11c      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x1f4>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	b292      	uxth	r2, r2
 8003514:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003532:	2301      	movs	r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003536:	f7fd fbc3 	bl	8000cc0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003542:	429a      	cmp	r2, r3
 8003544:	d80b      	bhi.n	800355e <HAL_SPI_TransmitReceive+0x21c>
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d007      	beq.n	800355e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800355c:	e109      	b.n	8003772 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d19f      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x166>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d199      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x166>
 8003574:	e0e3      	b.n	800373e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x244>
 800357e:	8a7b      	ldrh	r3, [r7, #18]
 8003580:	2b01      	cmp	r3, #1
 8003582:	f040 80cf 	bne.w	8003724 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d912      	bls.n	80035b6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	1c9a      	adds	r2, r3, #2
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b02      	subs	r3, #2
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035b4:	e0b6      	b.n	8003724 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035dc:	e0a2      	b.n	8003724 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d134      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x314>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02f      	beq.n	8003656 <HAL_SPI_TransmitReceive+0x314>
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d12c      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d912      	bls.n	800362c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360a:	881a      	ldrh	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	1c9a      	adds	r2, r3, #2
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b02      	subs	r3, #2
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800362a:	e012      	b.n	8003652 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d148      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x3b4>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d042      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d923      	bls.n	80036c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	b292      	uxth	r2, r2
 8003688:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b02      	subs	r3, #2
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d81f      	bhi.n	80036f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e016      	b.n	80036f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f103 020c 	add.w	r2, r3, #12
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036f2:	2301      	movs	r3, #1
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f6:	f7fd fae3 	bl	8000cc0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	429a      	cmp	r2, r3
 8003704:	d803      	bhi.n	800370e <HAL_SPI_TransmitReceive+0x3cc>
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d102      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x3d2>
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003722:	e026      	b.n	8003772 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f af57 	bne.w	80035de <HAL_SPI_TransmitReceive+0x29c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	f47f af50 	bne.w	80035de <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f996 	bl	8003a74 <SPI_EndRxTxTransaction>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003768:	e003      	b.n	8003772 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800377a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	@ 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003798:	f7fd fa92 	bl	8000cc0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	4413      	add	r3, r2
 80037a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037a8:	f7fd fa8a 	bl	8000cc0 <HAL_GetTick>
 80037ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ae:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	015b      	lsls	r3, r3, #5
 80037b4:	0d1b      	lsrs	r3, r3, #20
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037be:	e054      	b.n	800386a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d050      	beq.n	800386a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037c8:	f7fd fa7a 	bl	8000cc0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d902      	bls.n	80037de <SPI_WaitFlagStateUntilTimeout+0x56>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13d      	bne.n	800385a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f6:	d111      	bne.n	800381c <SPI_WaitFlagStateUntilTimeout+0x94>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003800:	d004      	beq.n	800380c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380a:	d107      	bne.n	800381c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003824:	d10f      	bne.n	8003846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e017      	b.n	800388a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3b01      	subs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	429a      	cmp	r2, r3
 8003886:	d19b      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000

08003898 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038aa:	f7fd fa09 	bl	8000cc0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80038ba:	f7fd fa01 	bl	8000cc0 <HAL_GetTick>
 80038be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	330c      	adds	r3, #12
 80038c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038c8:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00da      	lsls	r2, r3, #3
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	0d1b      	lsrs	r3, r3, #20
 80038d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038e0:	e060      	b.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038e8:	d107      	bne.n	80038fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d050      	beq.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003902:	f7fd f9dd 	bl	8000cc0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	429a      	cmp	r2, r3
 8003910:	d902      	bls.n	8003918 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d13d      	bne.n	8003994 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003926:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003930:	d111      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393a:	d004      	beq.n	8003946 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003944:	d107      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003954:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395e:	d10f      	bne.n	8003980 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800397e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e010      	b.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d196      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3728      	adds	r7, #40	@ 0x28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000000 	.word	0x20000000

080039c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d8:	d111      	bne.n	80039fe <SPI_EndRxTransaction+0x3a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e2:	d004      	beq.n	80039ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ec:	d107      	bne.n	80039fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2180      	movs	r1, #128	@ 0x80
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff febd 	bl	8003788 <SPI_WaitFlagStateUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e023      	b.n	8003a6c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2c:	d11d      	bne.n	8003a6a <SPI_EndRxTransaction+0xa6>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a36:	d004      	beq.n	8003a42 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a40:	d113      	bne.n	8003a6a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff ff22 	bl	8003898 <SPI_WaitFifoStateUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e000      	b.n	8003a6c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff ff03 	bl	8003898 <SPI_WaitFifoStateUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e027      	b.n	8003af8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fe68 	bl	8003788 <SPI_WaitFlagStateUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e014      	b.n	8003af8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f7ff fedc 	bl	8003898 <SPI_WaitFifoStateUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e000      	b.n	8003af8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <memset>:
 8003b00:	4402      	add	r2, r0
 8003b02:	4603      	mov	r3, r0
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d100      	bne.n	8003b0a <memset+0xa>
 8003b08:	4770      	bx	lr
 8003b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0e:	e7f9      	b.n	8003b04 <memset+0x4>

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4d0d      	ldr	r5, [pc, #52]	@ (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	@ (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4d0b      	ldr	r5, [pc, #44]	@ (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	@ (8003b54 <__libc_init_array+0x44>)
 8003b24:	f000 f818 	bl	8003b58 <_init>
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08003ba8 	.word	0x08003ba8
 8003b4c:	08003ba8 	.word	0x08003ba8
 8003b50:	08003ba8 	.word	0x08003ba8
 8003b54:	08003bac 	.word	0x08003bac

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
