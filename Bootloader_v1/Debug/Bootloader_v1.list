
Bootloader_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b7c  08003b7c  00004b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb4  08003bb4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb4  08003bb4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb4  08003bb4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  08003bc8  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000a00  200001c8  08003bc8  000051c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000785d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b25  00000000  00000000  0000c899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0000e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b4  00000000  00000000  0000eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da49  00000000  00000000  0000f124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f30  00000000  00000000  0002cb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af522  00000000  00000000  00036a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5fbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d70  00000000  00000000  000e6004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e7d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b64 	.word	0x08003b64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003b64 	.word	0x08003b64

080001d4 <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	81fb      	strh	r3, [r7, #14]
 80001e4:	e007      	b.n	80001f6 <clearBuffer+0x22>
		pBuff[i] = 0x00;
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	3301      	adds	r3, #1
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	89fa      	ldrh	r2, [r7, #14]
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f3      	bcc.n	80001e6 <clearBuffer+0x12>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <softDelay>:
void softDelay(uint32_t count){
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8000214:	e002      	b.n	800021c <softDelay+0x10>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3b01      	subs	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f9      	bne.n	8000216 <softDelay+0xa>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	4613      	mov	r3, r2
 800023c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	82fb      	strh	r3, [r7, #22]
 8000242:	e00a      	b.n	800025a <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8000244:	8afb      	ldrh	r3, [r7, #22]
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	441a      	add	r2, r3
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afa      	ldrh	r2, [r7, #22]
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3f0      	bcc.n	8000244 <flashDataCopy+0x14>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	371c      	adds	r7, #28
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <extFlashHardReset>:
void extFlashHardReset(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2108      	movs	r1, #8
 8000278:	4818      	ldr	r0, [pc, #96]	@ (80002dc <extFlashHardReset+0x6c>)
 800027a:	f001 fa97 	bl	80017ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f001 fa90 	bl	80017ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2104      	movs	r1, #4
 8000290:	4813      	ldr	r0, [pc, #76]	@ (80002e0 <extFlashHardReset+0x70>)
 8000292:	f001 fa8b 	bl	80017ac <HAL_GPIO_WritePin>
	  softDelay(100);
 8000296:	2064      	movs	r0, #100	@ 0x64
 8000298:	f7ff ffb8 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 fa81 	bl	80017ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <extFlashHardReset+0x70>)
 80002b0:	f001 fa7c 	bl	80017ac <HAL_GPIO_WritePin>
	  softDelay(100);
 80002b4:	2064      	movs	r0, #100	@ 0x64
 80002b6:	f7ff ffa9 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c4:	f001 fa72 	bl	80017ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2104      	movs	r1, #4
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <extFlashHardReset+0x70>)
 80002ce:	f001 fa6d 	bl	80017ac <HAL_GPIO_WritePin>
	  softDelay(200);
 80002d2:	20c8      	movs	r0, #200	@ 0xc8
 80002d4:	f7ff ff9a 	bl	800020c <softDelay>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	48000400 	.word	0x48000400
 80002e0:	48000c00 	.word	0x48000c00

080002e4 <extFlashGetDeviceId>:
void extFlashGetDeviceId(uint8_t *pDeviceIdRxData){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint8_t manufacturerId[] = {0x90,0x00,0x00,0x00};
 80002ec:	2390      	movs	r3, #144	@ 0x90
 80002ee:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Init(&hspi3);				//
 80002f0:	4812      	ldr	r0, [pc, #72]	@ (800033c <extFlashGetDeviceId+0x58>)
 80002f2:	f002 fcad 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2104      	movs	r1, #4
 80002fa:	4811      	ldr	r0, [pc, #68]	@ (8000340 <extFlashGetDeviceId+0x5c>)
 80002fc:	f001 fa56 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&manufacturerId, 4, 1);
 8000300:	f107 010c 	add.w	r1, r7, #12
 8000304:	2301      	movs	r3, #1
 8000306:	2204      	movs	r2, #4
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <extFlashGetDeviceId+0x58>)
 800030a:	f002 fd74 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
 800030e:	2364      	movs	r3, #100	@ 0x64
 8000310:	2202      	movs	r2, #2
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <extFlashGetDeviceId+0x58>)
 8000316:	f002 fee3 	bl	80030e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2104      	movs	r1, #4
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <extFlashGetDeviceId+0x5c>)
 8000320:	f001 fa44 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Init(&hspi3);
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <extFlashGetDeviceId+0x58>)
 8000326:	f002 fc93 	bl	8002c50 <HAL_SPI_Init>
	softDelay(500);
 800032a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800032e:	f7ff ff6d 	bl	800020c <softDelay>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000140 	.word	0x20000140
 8000340:	48000c00 	.word	0x48000c00

08000344 <extFlashGetStatusReg1>:
uint8_t extFlashGetStatusReg1(){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 800034a:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <extFlashGetStatusReg1+0x54>)
 800034c:	2205      	movs	r2, #5
 800034e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8000354:	4811      	ldr	r0, [pc, #68]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000356:	f002 fc7b 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2104      	movs	r1, #4
 800035e:	4810      	ldr	r0, [pc, #64]	@ (80003a0 <extFlashGetStatusReg1+0x5c>)
 8000360:	f001 fa24 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	490b      	ldr	r1, [pc, #44]	@ (8000398 <extFlashGetStatusReg1+0x54>)
 800036a:	480c      	ldr	r0, [pc, #48]	@ (800039c <extFlashGetStatusReg1+0x58>)
 800036c:	f002 fd43 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8000370:	1df9      	adds	r1, r7, #7
 8000372:	2301      	movs	r3, #1
 8000374:	2201      	movs	r2, #1
 8000376:	4809      	ldr	r0, [pc, #36]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000378:	f002 feb2 	bl	80030e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2104      	movs	r1, #4
 8000380:	4807      	ldr	r0, [pc, #28]	@ (80003a0 <extFlashGetStatusReg1+0x5c>)
 8000382:	f001 fa13 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000388:	f002 fd0d 	bl	8002da6 <HAL_SPI_DeInit>
	return status;
 800038c:	79fb      	ldrb	r3, [r7, #7]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000002c 	.word	0x2000002c
 800039c:	20000140 	.word	0x20000140
 80003a0:	48000c00 	.word	0x48000c00

080003a4 <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 80003ae:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003b0:	f002 fc4e 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2104      	movs	r1, #4
 80003b8:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <extFlashSendCommand+0x44>)
 80003ba:	f001 f9f7 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 80003be:	1df9      	adds	r1, r7, #7
 80003c0:	2301      	movs	r3, #1
 80003c2:	2201      	movs	r2, #1
 80003c4:	4807      	ldr	r0, [pc, #28]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003c6:	f002 fd16 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2104      	movs	r1, #4
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <extFlashSendCommand+0x44>)
 80003d0:	f001 f9ec 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80003d4:	4803      	ldr	r0, [pc, #12]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003d6:	f002 fce6 	bl	8002da6 <HAL_SPI_DeInit>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000140 	.word	0x20000140
 80003e8:	48000c00 	.word	0x48000c00

080003ec <extFlashPageRead>:
void extFlashPageRead(uint32_t address, uint8_t* pData, uint8_t dataLength){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	4613      	mov	r3, r2
 80003f8:	71fb      	strb	r3, [r7, #7]
	flashInstruction[0] = READ_DATA;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <extFlashPageRead+0x80>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 8000400:	2303      	movs	r3, #3
 8000402:	75fb      	strb	r3, [r7, #23]
 8000404:	e00a      	b.n	800041c <extFlashPageRead+0x30>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	b2d1      	uxtb	r1, r2
 800040c:	4a17      	ldr	r2, [pc, #92]	@ (800046c <extFlashPageRead+0x80>)
 800040e:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 8000416:	7dfb      	ldrb	r3, [r7, #23]
 8000418:	3b01      	subs	r3, #1
 800041a:	75fb      	strb	r3, [r7, #23]
 800041c:	7dfb      	ldrb	r3, [r7, #23]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1f1      	bne.n	8000406 <extFlashPageRead+0x1a>
	}
	HAL_SPI_Init(&hspi3);
 8000422:	4813      	ldr	r0, [pc, #76]	@ (8000470 <extFlashPageRead+0x84>)
 8000424:	f002 fc14 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4811      	ldr	r0, [pc, #68]	@ (8000474 <extFlashPageRead+0x88>)
 800042e:	f001 f9bd 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000432:	2301      	movs	r3, #1
 8000434:	2204      	movs	r2, #4
 8000436:	490d      	ldr	r1, [pc, #52]	@ (800046c <extFlashPageRead+0x80>)
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <extFlashPageRead+0x84>)
 800043a:	f002 fcdc 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	b29a      	uxth	r2, r3
 8000442:	230a      	movs	r3, #10
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	480a      	ldr	r0, [pc, #40]	@ (8000470 <extFlashPageRead+0x84>)
 8000448:	f002 fe4a 	bl	80030e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	4808      	ldr	r0, [pc, #32]	@ (8000474 <extFlashPageRead+0x88>)
 8000452:	f001 f9ab 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000456:	4806      	ldr	r0, [pc, #24]	@ (8000470 <extFlashPageRead+0x84>)
 8000458:	f002 fca5 	bl	8002da6 <HAL_SPI_DeInit>
	HAL_Delay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fc41 	bl	8000ce4 <HAL_Delay>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000002c 	.word	0x2000002c
 8000470:	20000140 	.word	0x20000140
 8000474:	48000c00 	.word	0x48000c00

08000478 <extFlashPageWrite>:
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	4613      	mov	r3, r2
 8000484:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	extFlashSendCommand(WRITE_ENABLE);
 8000486:	2006      	movs	r0, #6
 8000488:	f7ff ff8c 	bl	80003a4 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800048c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000490:	4822      	ldr	r0, [pc, #136]	@ (800051c <extFlashPageWrite+0xa4>)
 8000492:	f7ff fe9f 	bl	80001d4 <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 8000496:	4b21      	ldr	r3, [pc, #132]	@ (800051c <extFlashPageWrite+0xa4>)
 8000498:	2202      	movs	r2, #2
 800049a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 800049c:	2303      	movs	r3, #3
 800049e:	75fb      	strb	r3, [r7, #23]
 80004a0:	e00a      	b.n	80004b8 <extFlashPageWrite+0x40>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 80004a2:	7dfb      	ldrb	r3, [r7, #23]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	b2d1      	uxtb	r1, r2
 80004a8:	4a1c      	ldr	r2, [pc, #112]	@ (800051c <extFlashPageWrite+0xa4>)
 80004aa:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	75fb      	strb	r3, [r7, #23]
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1f1      	bne.n	80004a2 <extFlashPageWrite+0x2a>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 80004be:	4818      	ldr	r0, [pc, #96]	@ (8000520 <extFlashPageWrite+0xa8>)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	461a      	mov	r2, r3
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	f7ff feb3 	bl	8000230 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 80004ca:	4816      	ldr	r0, [pc, #88]	@ (8000524 <extFlashPageWrite+0xac>)
 80004cc:	f002 fbc0 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4814      	ldr	r0, [pc, #80]	@ (8000528 <extFlashPageWrite+0xb0>)
 80004d6:	f001 f969 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	3304      	adds	r3, #4
 80004de:	b29a      	uxth	r2, r3
 80004e0:	230a      	movs	r3, #10
 80004e2:	490e      	ldr	r1, [pc, #56]	@ (800051c <extFlashPageWrite+0xa4>)
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <extFlashPageWrite+0xac>)
 80004e6:	f002 fc86 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2104      	movs	r1, #4
 80004ee:	480e      	ldr	r0, [pc, #56]	@ (8000528 <extFlashPageWrite+0xb0>)
 80004f0:	f001 f95c 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80004f4:	480b      	ldr	r0, [pc, #44]	@ (8000524 <extFlashPageWrite+0xac>)
 80004f6:	f002 fc56 	bl	8002da6 <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 fbf2 	bl	8000ce4 <HAL_Delay>
		status = extFlashGetStatusReg1();
 8000500:	f7ff ff20 	bl	8000344 <extFlashGetStatusReg1>
 8000504:	4603      	mov	r3, r0
 8000506:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 8000508:	7dbb      	ldrb	r3, [r7, #22]
 800050a:	f003 0303 	and.w	r3, r3, #3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1f3      	bne.n	80004fa <extFlashPageWrite+0x82>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000002c 	.word	0x2000002c
 8000520:	20000030 	.word	0x20000030
 8000524:	20000140 	.word	0x20000140
 8000528:	48000c00 	.word	0x48000c00

0800052c <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(WRITE_ENABLE);
 8000538:	2006      	movs	r0, #6
 800053a:	f7ff ff33 	bl	80003a4 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800053e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000542:	481f      	ldr	r0, [pc, #124]	@ (80005c0 <extFlashErase+0x94>)
 8000544:	f7ff fe46 	bl	80001d4 <clearBuffer>
	flashInstruction[0]	= cmd;
 8000548:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <extFlashErase+0x94>)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 3; i>0; i--){
 800054e:	2303      	movs	r3, #3
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e00a      	b.n	800056a <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	b2d1      	uxtb	r1, r2
 800055a:	4a19      	ldr	r2, [pc, #100]	@ (80005c0 <extFlashErase+0x94>)
 800055c:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	3b01      	subs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f1      	bne.n	8000554 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 8000570:	4814      	ldr	r0, [pc, #80]	@ (80005c4 <extFlashErase+0x98>)
 8000572:	f002 fb6d 	bl	8002c50 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2104      	movs	r1, #4
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <extFlashErase+0x9c>)
 800057c:	f001 f916 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000580:	2301      	movs	r3, #1
 8000582:	2204      	movs	r2, #4
 8000584:	490e      	ldr	r1, [pc, #56]	@ (80005c0 <extFlashErase+0x94>)
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <extFlashErase+0x98>)
 8000588:	f002 fc35 	bl	8002df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2104      	movs	r1, #4
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <extFlashErase+0x9c>)
 8000592:	f001 f90b 	bl	80017ac <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <extFlashErase+0x98>)
 8000598:	f002 fc05 	bl	8002da6 <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fba1 	bl	8000ce4 <HAL_Delay>
		status = extFlashGetStatusReg1();
 80005a2:	f7ff fecf 	bl	8000344 <extFlashGetStatusReg1>
 80005a6:	4603      	mov	r3, r0
 80005a8:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f3      	bne.n	800059c <extFlashErase+0x70>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	20000140 	.word	0x20000140
 80005c8:	48000c00 	.word	0x48000c00

080005cc <resetFotaFlag>:
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);

}


void resetFotaFlag(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 80005d2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80005d6:	2020      	movs	r0, #32
 80005d8:	f7ff ffa8 	bl	800052c <extFlashErase>
	uint8_t header[3] = {0};
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <resetFotaFlag+0x34>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	80bb      	strh	r3, [r7, #4]
 80005e2:	2300      	movs	r3, #0
 80005e4:	71bb      	strb	r3, [r7, #6]
	header[0] = 0xAA;
 80005e6:	23aa      	movs	r3, #170	@ 0xaa
 80005e8:	713b      	strb	r3, [r7, #4]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2203      	movs	r2, #3
 80005ee:	4619      	mov	r1, r3
 80005f0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80005f4:	f7ff ff40 	bl	8000478 <extFlashPageWrite>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08003b7c 	.word	0x08003b7c

08000604 <intFlashWrite1>:
 */

#include "int_flash.h"


uint32_t intFlashWrite1(uint32_t *pData, uint16_t numberOfWordsTowrite){
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	static uint8_t erasePageCount = 0;
	uint32_t PAGEError;
	uint16_t sofar=0;
 8000610:	2300      	movs	r3, #0
 8000612:	82fb      	strh	r3, [r7, #22]
	uint32_t flashBaseAddress = (USER_APP_BASE_ADDRESS + (erasePageCount*0x800));
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <intFlashWrite1+0xa8>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800061c:	330a      	adds	r3, #10
 800061e:	02db      	lsls	r3, r3, #11
 8000620:	613b      	str	r3, [r7, #16]
	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000622:	f000 fcd9 	bl	8000fd8 <HAL_FLASH_Unlock>
	    * the interface expects pData to an array of maximum 2K of data
	    * since page size = 2K
	    * We will erase and program an entire page in a go!!
	    */
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <intFlashWrite1+0xac>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = flashBaseAddress;
 800062c:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <intFlashWrite1+0xac>)
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	6053      	str	r3, [r2, #4]
	   EraseInitStruct.NbPages     = 1;
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <intFlashWrite1+0xac>)
 8000634:	2201      	movs	r2, #1
 8000636:	609a      	str	r2, [r3, #8]
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK){
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <intFlashWrite1+0xac>)
 8000640:	f000 fd9a 	bl	8001178 <HAL_FLASHEx_Erase>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d01f      	beq.n	800068a <intFlashWrite1+0x86>
		 /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800064a:	f000 fcfb 	bl	8001044 <HAL_FLASH_GetError>
 800064e:	4603      	mov	r3, r0
 8000650:	e028      	b.n	80006a4 <intFlashWrite1+0xa0>
	   }
	   /* Program the user Flash area word by word*/

	   while (sofar<numberOfWordsTowrite){
		   if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashBaseAddress, pData[sofar]) == HAL_OK){
 8000652:	8afb      	ldrh	r3, [r7, #22]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	461c      	mov	r4, r3
 8000660:	4615      	mov	r5, r2
 8000662:	4622      	mov	r2, r4
 8000664:	462b      	mov	r3, r5
 8000666:	6939      	ldr	r1, [r7, #16]
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fc45 	bl	8000ef8 <HAL_FLASH_Program>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <intFlashWrite1+0x7e>
			   flashBaseAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	3304      	adds	r3, #4
 8000678:	613b      	str	r3, [r7, #16]
			   sofar++;
 800067a:	8afb      	ldrh	r3, [r7, #22]
 800067c:	3301      	adds	r3, #1
 800067e:	82fb      	strh	r3, [r7, #22]
 8000680:	e003      	b.n	800068a <intFlashWrite1+0x86>
		   }
		   else{
			   /* Error occurred while writing data in Flash memory*/
			   return HAL_FLASH_GetError ();
 8000682:	f000 fcdf 	bl	8001044 <HAL_FLASH_GetError>
 8000686:	4603      	mov	r3, r0
 8000688:	e00c      	b.n	80006a4 <intFlashWrite1+0xa0>
	   while (sofar<numberOfWordsTowrite){
 800068a:	8afa      	ldrh	r2, [r7, #22]
 800068c:	887b      	ldrh	r3, [r7, #2]
 800068e:	429a      	cmp	r2, r3
 8000690:	d3df      	bcc.n	8000652 <intFlashWrite1+0x4e>
		   }
	   }
	   /* Lock the Flash to disable the flash control register access
	    * (recommended to protect the FLASH memory against possible unwanted operation)
	    */
	   HAL_FLASH_Lock();
 8000692:	f000 fcc7 	bl	8001024 <HAL_FLASH_Lock>
	   erasePageCount++;
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <intFlashWrite1+0xa8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <intFlashWrite1+0xa8>)
 80006a0:	701a      	strb	r2, [r3, #0]

	   return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bdb0      	pop	{r4, r5, r7, pc}
 80006ac:	20000130 	.word	0x20000130
 80006b0:	20000134 	.word	0x20000134

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t	flashReadData[512] 		= {0};
 80006bc:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006c0:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80006c4:	4618      	mov	r0, r3
 80006c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f003 fa1d 	bl	8003b0c <memset>
	uint32_t	extFlashReadAddress 	= FLASH_PAGE0_BASE_ADDRESS;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
//	uint32_t	intFlashWriteAddress 	= 0x50000;
//	uint32_t	extFlashWriteAddress 	= 0x0;
//	uint16_t	totalFirmwareBytes		= 0;
	uint16_t	totalWordsToRead 		= 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	uint16_t	wordsToRead 			= 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
	uint16_t	wordsRead				= 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
	uint8_t		device_Id[2]			= {0};
 80006ea:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006ee:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80006f2:	2200      	movs	r2, #0
 80006f4:	801a      	strh	r2, [r3, #0]
	uint8_t		savedFlagData[3]		= {0};
 80006f6:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006fa:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 80006fe:	4a44      	ldr	r2, [pc, #272]	@ (8000810 <main+0x15c>)
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	2200      	movs	r2, #0
 8000706:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fa86 	bl	8000c18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f882 	bl	8000814 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f8fa 	bl	8000908 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000714:	f000 f8ba 	bl	800088c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  extFlashHardReset();
 8000718:	f7ff fdaa 	bl	8000270 <extFlashHardReset>
  extFlashSendCommand(ENABLE_RESET);
 800071c:	2066      	movs	r0, #102	@ 0x66
 800071e:	f7ff fe41 	bl	80003a4 <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 8000722:	2099      	movs	r0, #153	@ 0x99
 8000724:	f7ff fe3e 	bl	80003a4 <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 8000728:	2098      	movs	r0, #152	@ 0x98
 800072a:	f7ff fe3b 	bl	80003a4 <extFlashSendCommand>
  extFlashGetDeviceId(device_Id);
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fdd6 	bl	80002e4 <extFlashGetDeviceId>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  extFlashPageRead(FLASH_FLAG_SAVE_ADDRESS,savedFlagData, 3);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2203      	movs	r2, #3
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000742:	f7ff fe53 	bl	80003ec <extFlashPageRead>
  if(savedFlagData[0] == 0xBB){
 8000746:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800074a:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2bbb      	cmp	r3, #187	@ 0xbb
 8000752:	d15a      	bne.n	800080a <main+0x156>
	  totalWordsToRead = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	  totalWordsToRead = savedFlagData[1];
 800075a:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800075e:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
	  totalWordsToRead = (totalWordsToRead << 8) | savedFlagData[2];
 8000768:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21a      	sxth	r2, r3
 8000770:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000774:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	b21b      	sxth	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b21b      	sxth	r3, r3
 8000780:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
//	  totalWordsToRead = totalFirmwareBytes/4;
	  do{
		  if(totalWordsToRead >= 512)
 8000784:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8000788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800078c:	d304      	bcc.n	8000798 <main+0xe4>
			  wordsToRead = 512;
 800078e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000792:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 8000796:	e003      	b.n	80007a0 <main+0xec>
		  else
			  wordsToRead = totalWordsToRead;
 8000798:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 800079c:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
		  for(wordsRead = 0; wordsRead < wordsToRead; wordsRead++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 80007a6:	e015      	b.n	80007d4 <main+0x120>
	  		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&flashReadData[wordsRead], 4);
 80007a8:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80007ac:	f107 020c 	add.w	r2, r7, #12
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	2204      	movs	r2, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 80007bc:	f7ff fe16 	bl	80003ec <extFlashPageRead>
	  		  extFlashReadAddress += 4;
 80007c0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80007c4:	3304      	adds	r3, #4
 80007c6:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
		  for(wordsRead = 0; wordsRead < wordsToRead; wordsRead++){
 80007ca:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 80007ce:	3301      	adds	r3, #1
 80007d0:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 80007d4:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 80007d8:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 80007dc:	429a      	cmp	r2, r3
 80007de:	d3e3      	bcc.n	80007a8 <main+0xf4>
//	  		changeWordEndian((uint8_t*)&flashReadData[wordsRead]);
	  	  }
		  totalWordsToRead -= wordsToRead;
 80007e0:	f8b7 2812 	ldrh.w	r2, [r7, #2066]	@ 0x812
 80007e4:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	f8a7 3812 	strh.w	r3, [r7, #2066]	@ 0x812
		  intFlashWrite1(flashReadData, wordsRead);
 80007ee:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	@ 0x80e
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff03 	bl	8000604 <intFlashWrite1>
	  }while(totalWordsToRead != 0);
 80007fe:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	@ 0x812
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1be      	bne.n	8000784 <main+0xd0>
	  resetFotaFlag();
 8000806:	f7ff fee1 	bl	80005cc <resetFotaFlag>
  while (1)
  {
//	  for(unsigned char i = 0; i<=20; i++ ){
//		  HAL_Delay(100);
//	  }
	  	  goto_application();
 800080a:	f000 f8ff 	bl	8000a0c <goto_application>
 800080e:	e7fc      	b.n	800080a <main+0x156>
 8000810:	08003b80 	.word	0x08003b80

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b090      	sub	sp, #64	@ 0x40
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2228      	movs	r2, #40	@ 0x28
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f972 	bl	8003b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	2310      	movs	r3, #16
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ffc6 	bl	80017dc <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000856:	f000 f8e7 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 f806 	bl	8002884 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800087e:	f000 f8d3 	bl	8000a28 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3740      	adds	r7, #64	@ 0x40
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_SPI3_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <MX_SPI3_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_SPI3_Init+0x74>)
 8000898:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008da:	2207      	movs	r2, #7
 80008dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_SPI3_Init+0x74>)
 80008ec:	f002 f9b0 	bl	8002c50 <HAL_SPI_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f897 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000140 	.word	0x20000140
 8000904:	40003c00 	.word	0x40003c00

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b38      	ldr	r3, [pc, #224]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a37      	ldr	r2, [pc, #220]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b32      	ldr	r3, [pc, #200]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a31      	ldr	r2, [pc, #196]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 800093c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b29      	ldr	r3, [pc, #164]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 800096c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_GPIO_Init+0xf8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f000 ff10 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000992:	f000 ff0b 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	481b      	ldr	r0, [pc, #108]	@ (8000a08 <MX_GPIO_Init+0x100>)
 800099c:	f000 ff06 	bl	80017ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : F_RST_Pin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 80009a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009bc:	f000 fc80 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_nCS_Pin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 80009c0:	2304      	movs	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 80009d8:	f000 fc72 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_WP_Pin */
  GPIO_InitStruct.Pin = F_WP_Pin;
 80009dc:	2308      	movs	r3, #8
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_WP_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_GPIO_Init+0x100>)
 80009f4:	f000 fc64 	bl	80012c0 <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	@ 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000c00 	.word	0x48000c00
 8000a08:	48000400 	.word	0x48000400

08000a0c <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application( void )
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
//  printf("Going to Jump to Application...\n");
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(0x08005000 + 4U)));
 8000a12:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <goto_application+0x18>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	607b      	str	r3, [r7, #4]
  app_reset_handler();
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4798      	blx	r3
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08005004 	.word	0x08005004

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x44>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <HAL_SPI_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ace:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_SPI_MspInit+0x84>)
 8000aec:	f000 fbe8 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40003c00 	.word	0x40003c00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000800 	.word	0x48000800

08000b04 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_SPI_MspDeInit+0x30>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10a      	bne.n	8000b2c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_SPI_MspDeInit+0x34>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_SPI_MspDeInit+0x34>)
 8000b1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b20:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8000b22:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <HAL_SPI_MspDeInit+0x38>)
 8000b28:	f000 fd54 	bl	80015d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40003c00 	.word	0x40003c00
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000800 	.word	0x48000800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f885 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 ff93 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fd5d 	bl	80006b4 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bfc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c08:	08003bbc 	.word	0x08003bbc
  ldr r2, =_sbss
 8000c0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c10:	200001c8 	.word	0x200001c8

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_Init+0x28>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_Init+0x28>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f931 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fefe 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200001a4 	.word	0x200001a4

08000ccc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200001a4 	.word	0x200001a4

08000ce4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000f14:	7e1b      	ldrb	r3, [r3, #24]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d101      	bne.n	8000f1e <HAL_FLASH_Program+0x26>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e054      	b.n	8000fc8 <HAL_FLASH_Program+0xd0>
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f28:	f000 f8b4 	bl	8001094 <FLASH_WaitForLastOperation>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d144      	bne.n	8000fc0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	757b      	strb	r3, [r7, #21]
 8000f40:	e007      	b.n	8000f52 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d102      	bne.n	8000f4e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	757b      	strb	r3, [r7, #21]
 8000f4c:	e001      	b.n	8000f52 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	75bb      	strb	r3, [r7, #22]
 8000f56:	e02d      	b.n	8000fb4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f58:	7dbb      	ldrb	r3, [r7, #22]
 8000f5a:	005a      	lsls	r2, r3, #1
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	eb02 0c03 	add.w	ip, r2, r3
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	0119      	lsls	r1, r3, #4
 8000f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6a:	f1c1 0620 	rsb	r6, r1, #32
 8000f6e:	f1a1 0020 	sub.w	r0, r1, #32
 8000f72:	fa22 f401 	lsr.w	r4, r2, r1
 8000f76:	fa03 f606 	lsl.w	r6, r3, r6
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	fa23 f000 	lsr.w	r0, r3, r0
 8000f80:	4304      	orrs	r4, r0
 8000f82:	fa23 f501 	lsr.w	r5, r3, r1
 8000f86:	b2a3      	uxth	r3, r4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4660      	mov	r0, ip
 8000f8c:	f000 f866 	bl	800105c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f94:	f000 f87e 	bl	8001094 <FLASH_WaitForLastOperation>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_FLASH_Program+0xdc>)
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <HAL_FLASH_Program+0xdc>)
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d107      	bne.n	8000fbe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75bb      	strb	r3, [r7, #22]
 8000fb4:	7dba      	ldrb	r2, [r7, #22]
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3cd      	bcc.n	8000f58 <HAL_FLASH_Program+0x60>
 8000fbc:	e000      	b.n	8000fc0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000fbe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	761a      	strb	r2, [r3, #24]

  return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	200001a8 	.word	0x200001a8
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <HAL_FLASH_Unlock+0x40>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00d      	beq.n	800100a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_FLASH_Unlock+0x44>)
 8000ff2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_FLASH_Unlock+0x48>)
 8000ff8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40022000 	.word	0x40022000
 800101c:	45670123 	.word	0x45670123
 8001020:	cdef89ab 	.word	0xcdef89ab

08001024 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <HAL_FLASH_Lock+0x1c>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_FLASH_Lock+0x1c>)
 800102e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001032:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_FLASH_GetError+0x14>)
 800104a:	69db      	ldr	r3, [r3, #28]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001a8 	.word	0x200001a8

0800105c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <FLASH_Program_HalfWord+0x30>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <FLASH_Program_HalfWord+0x34>)
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <FLASH_Program_HalfWord+0x34>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	887a      	ldrh	r2, [r7, #2]
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200001a8 	.word	0x200001a8
 8001090:	40022000 	.word	0x40022000

08001094 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff fe16 	bl	8000ccc <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010a2:	e010      	b.n	80010c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d00c      	beq.n	80010c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <FLASH_WaitForLastOperation+0x2e>
 80010b2:	f7ff fe0b 	bl	8000ccc <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d201      	bcs.n	80010c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e01f      	b.n	8001106 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d0e8      	beq.n	80010a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b20      	cmp	r3, #32
 80010dc:	d102      	bne.n	80010e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010e0:	2220      	movs	r2, #32
 80010e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d005      	beq.n	80010fc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d103      	bne.n	8001104 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010fc:	f000 f80a 	bl	8001114 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40022000 	.word	0x40022000

08001114 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <FLASH_SetErrorCode+0x5c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2b10      	cmp	r3, #16
 8001128:	d109      	bne.n	800113e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <FLASH_SetErrorCode+0x60>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <FLASH_SetErrorCode+0x60>)
 8001134:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <FLASH_SetErrorCode+0x5c>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	2b04      	cmp	r3, #4
 8001148:	d109      	bne.n	800115e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <FLASH_SetErrorCode+0x60>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <FLASH_SetErrorCode+0x60>)
 8001154:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <FLASH_SetErrorCode+0x5c>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60d3      	str	r3, [r2, #12]
}  
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	40022000 	.word	0x40022000
 8001174:	200001a8 	.word	0x200001a8

08001178 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <HAL_FLASHEx_Erase+0xcc>)
 800118c:	7e1b      	ldrb	r3, [r3, #24]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_FLASHEx_Erase+0x1e>
 8001192:	2302      	movs	r3, #2
 8001194:	e052      	b.n	800123c <HAL_FLASHEx_Erase+0xc4>
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <HAL_FLASHEx_Erase+0xcc>)
 8001198:	2201      	movs	r2, #1
 800119a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d115      	bne.n	80011d0 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011a4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011a8:	f7ff ff74 	bl	8001094 <FLASH_WaitForLastOperation>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d140      	bne.n	8001234 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80011b2:	f000 f84b 	bl	800124c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011ba:	f7ff ff6b 	bl	8001094 <FLASH_WaitForLastOperation>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <HAL_FLASHEx_Erase+0xd0>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_FLASHEx_Erase+0xd0>)
 80011c8:	f023 0304 	bic.w	r3, r3, #4
 80011cc:	6113      	str	r3, [r2, #16]
 80011ce:	e031      	b.n	8001234 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011d4:	f7ff ff5e 	bl	8001094 <FLASH_WaitForLastOperation>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12a      	bne.n	8001234 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	e019      	b.n	8001222 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f000 f846 	bl	8001280 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011f8:	f7ff ff4c 	bl	8001094 <FLASH_WaitForLastOperation>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_FLASHEx_Erase+0xd0>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_FLASHEx_Erase+0xd0>)
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	601a      	str	r2, [r3, #0]
            break;
 8001218:	e00c      	b.n	8001234 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001220:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	02da      	lsls	r2, r3, #11
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	4413      	add	r3, r2
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d3dc      	bcc.n	80011ee <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_FLASHEx_Erase+0xcc>)
 8001236:	2200      	movs	r2, #0
 8001238:	761a      	strb	r2, [r3, #24]

  return status;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001a8 	.word	0x200001a8
 8001248:	40022000 	.word	0x40022000

0800124c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <FLASH_MassErase+0x2c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <FLASH_MassErase+0x30>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	4a08      	ldr	r2, [pc, #32]	@ (800127c <FLASH_MassErase+0x30>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <FLASH_MassErase+0x30>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4a05      	ldr	r2, [pc, #20]	@ (800127c <FLASH_MassErase+0x30>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126c:	6113      	str	r3, [r2, #16]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	200001a8 	.word	0x200001a8
 800127c:	40022000 	.word	0x40022000

08001280 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <FLASH_PageErase+0x38>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <FLASH_PageErase+0x3c>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <FLASH_PageErase+0x3c>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <FLASH_PageErase+0x3c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <FLASH_PageErase+0x3c>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <FLASH_PageErase+0x3c>)
 80012a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012aa:	6113      	str	r3, [r2, #16]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200001a8 	.word	0x200001a8
 80012bc:	40022000 	.word	0x40022000

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e160      	b.n	8001592 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8152 	beq.w	800158c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <HAL_GPIO_Init+0x40>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d130      	bne.n	8001362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001336:	2201      	movs	r2, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f003 0201 	and.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b03      	cmp	r3, #3
 800136c:	d017      	beq.n	800139e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d123      	bne.n	80013f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0203 	and.w	r2, r3, #3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80ac 	beq.w	800158c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b5e      	ldr	r3, [pc, #376]	@ (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a5d      	ldr	r2, [pc, #372]	@ (80015b0 <HAL_GPIO_Init+0x2f0>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b5b      	ldr	r3, [pc, #364]	@ (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144c:	4a59      	ldr	r2, [pc, #356]	@ (80015b4 <HAL_GPIO_Init+0x2f4>)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001476:	d025      	beq.n	80014c4 <HAL_GPIO_Init+0x204>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a4f      	ldr	r2, [pc, #316]	@ (80015b8 <HAL_GPIO_Init+0x2f8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d01f      	beq.n	80014c0 <HAL_GPIO_Init+0x200>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <HAL_GPIO_Init+0x2fc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d019      	beq.n	80014bc <HAL_GPIO_Init+0x1fc>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_GPIO_Init+0x300>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_GPIO_Init+0x1f8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a4c      	ldr	r2, [pc, #304]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1f4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4b      	ldr	r2, [pc, #300]	@ (80015c8 <HAL_GPIO_Init+0x308>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1f0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a4a      	ldr	r2, [pc, #296]	@ (80015cc <HAL_GPIO_Init+0x30c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1ec>
 80014a8:	2306      	movs	r3, #6
 80014aa:	e00c      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014ac:	2307      	movs	r3, #7
 80014ae:	e00a      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014b0:	2305      	movs	r3, #5
 80014b2:	e008      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014b8:	2303      	movs	r3, #3
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x206>
 80014c4:	2300      	movs	r3, #0
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d6:	4937      	ldr	r1, [pc, #220]	@ (80015b4 <HAL_GPIO_Init+0x2f4>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001508:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001532:	4a27      	ldr	r2, [pc, #156]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001538:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001562:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_GPIO_Init+0x310>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f ae97 	bne.w	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000c00 	.word	0x48000c00
 80015c4:	48001000 	.word	0x48001000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	48001800 	.word	0x48001800
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80015e2:	e0c4      	b.n	800176e <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015e4:	2201      	movs	r2, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80b7 	beq.w	8001768 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80015fa:	4a64      	ldr	r2, [pc, #400]	@ (800178c <HAL_GPIO_DeInit+0x1b8>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001622:	d025      	beq.n	8001670 <HAL_GPIO_DeInit+0x9c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a5a      	ldr	r2, [pc, #360]	@ (8001790 <HAL_GPIO_DeInit+0x1bc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d01f      	beq.n	800166c <HAL_GPIO_DeInit+0x98>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a59      	ldr	r2, [pc, #356]	@ (8001794 <HAL_GPIO_DeInit+0x1c0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d019      	beq.n	8001668 <HAL_GPIO_DeInit+0x94>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <HAL_GPIO_DeInit+0x1c4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_GPIO_DeInit+0x90>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <HAL_GPIO_DeInit+0x1c8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_DeInit+0x8c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a56      	ldr	r2, [pc, #344]	@ (80017a0 <HAL_GPIO_DeInit+0x1cc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_DeInit+0x88>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a55      	ldr	r2, [pc, #340]	@ (80017a4 <HAL_GPIO_DeInit+0x1d0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_DeInit+0x84>
 8001654:	2306      	movs	r3, #6
 8001656:	e00c      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 8001658:	2307      	movs	r3, #7
 800165a:	e00a      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 800165c:	2305      	movs	r3, #5
 800165e:	e008      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 8001660:	2304      	movs	r3, #4
 8001662:	e006      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 8001664:	2303      	movs	r3, #3
 8001666:	e004      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_DeInit+0x9e>
 8001670:	2300      	movs	r3, #0
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	429a      	cmp	r2, r3
 8001680:	d132      	bne.n	80016e8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001682:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	4947      	ldr	r1, [pc, #284]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 800168c:	4013      	ands	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001690:	4b45      	ldr	r3, [pc, #276]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	4943      	ldr	r1, [pc, #268]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 800169a:	4013      	ands	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800169e:	4b42      	ldr	r3, [pc, #264]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4940      	ldr	r1, [pc, #256]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80016ac:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	493c      	ldr	r1, [pc, #240]	@ (80017a8 <HAL_GPIO_DeInit+0x1d4>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80016ca:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_GPIO_DeInit+0x1b8>)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	482c      	ldr	r0, [pc, #176]	@ (800178c <HAL_GPIO_DeInit+0x1b8>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	400a      	ands	r2, r1
 80016e2:	3302      	adds	r3, #2
 80016e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2103      	movs	r1, #3
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	08d2      	lsrs	r2, r2, #3
 800171e:	4019      	ands	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2103      	movs	r1, #3
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	401a      	ands	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2101      	movs	r1, #1
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2103      	movs	r1, #3
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f af34 	bne.w	80015e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40010000 	.word	0x40010000
 8001790:	48000400 	.word	0x48000400
 8001794:	48000800 	.word	0x48000800
 8001798:	48000c00 	.word	0x48000c00
 800179c:	48001000 	.word	0x48001000
 80017a0:	48001400 	.word	0x48001400
 80017a4:	48001800 	.word	0x48001800
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f001 b83a 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001806:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 816f 	beq.w	8001af6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001818:	4bb5      	ldr	r3, [pc, #724]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4bb2      	ldr	r3, [pc, #712]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d15c      	bne.n	80018ea <HAL_RCC_OscConfig+0x10e>
 8001830:	4baf      	ldr	r3, [pc, #700]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183c:	d155      	bne.n	80018ea <HAL_RCC_OscConfig+0x10e>
 800183e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001842:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001852:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <HAL_RCC_OscConfig+0x94>
 800186a:	4ba1      	ldr	r3, [pc, #644]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	e015      	b.n	800189c <HAL_RCC_OscConfig+0xc0>
 8001870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001874:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001884:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001888:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800188c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001898:	4b95      	ldr	r3, [pc, #596]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80018a4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80018a8:	fa92 f2a2 	rbit	r2, r2
 80018ac:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80018b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8111 	beq.w	8001af4 <HAL_RCC_OscConfig+0x318>
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 8108 	bne.w	8001af4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f000 bfc6 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x12e>
 80018fc:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a7b      	ldr	r2, [pc, #492]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e036      	b.n	8001978 <HAL_RCC_OscConfig+0x19c>
 800190a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x158>
 800191a:	4b75      	ldr	r3, [pc, #468]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a74      	ldr	r2, [pc, #464]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800192c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e021      	b.n	8001978 <HAL_RCC_OscConfig+0x19c>
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x184>
 8001946:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a69      	ldr	r2, [pc, #420]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b67      	ldr	r3, [pc, #412]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a66      	ldr	r2, [pc, #408]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x19c>
 8001960:	4b63      	ldr	r3, [pc, #396]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a62      	ldr	r2, [pc, #392]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b60      	ldr	r3, [pc, #384]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5f      	ldr	r2, [pc, #380]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001976:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d059      	beq.n	8001a3c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f9a0 	bl	8000ccc <HAL_GetTick>
 800198c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff f99b 	bl	8000ccc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d902      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f000 bf67 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 80019a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019ac:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80019bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0x1fe>
 80019d4:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x22a>
 80019da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019de:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80019ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80019f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001a02:	4b3b      	ldr	r3, [pc, #236]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a0a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001a0e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001a12:	fa92 f2a2 	rbit	r2, r2
 8001a16:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001a1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f042 0220 	orr.w	r2, r2, #32
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f002 021f 	and.w	r2, r2, #31
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0ab      	beq.n	8001992 <HAL_RCC_OscConfig+0x1b6>
 8001a3a:	e05c      	b.n	8001af6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f946 	bl	8000ccc <HAL_GetTick>
 8001a40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a46:	f7ff f941 	bl	8000ccc <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	@ 0x64
 8001a54:	d902      	bls.n	8001a5c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f000 bf0d 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 8001a5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001a70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2b2>
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x2de>
 8001a8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a92:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001aa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001aaa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <HAL_RCC_OscConfig+0x314>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001abe:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001ac2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001ac6:	fa92 f2a2 	rbit	r2, r2
 8001aca:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001ace:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f002 021f 	and.w	r2, r2, #31
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ab      	bne.n	8001a46 <HAL_RCC_OscConfig+0x26a>
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_OscConfig+0x31a>
 8001af0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 817f 	beq.w	8001e0a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b0c:	4ba7      	ldr	r3, [pc, #668]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b18:	4ba4      	ldr	r3, [pc, #656]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d173      	bne.n	8001c0c <HAL_RCC_OscConfig+0x430>
 8001b24:	4ba1      	ldr	r3, [pc, #644]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b30:	d16c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x430>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001b44:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x386>
 8001b5c:	4b93      	ldr	r3, [pc, #588]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x3ae>
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001b7a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001b86:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001b90:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001b9c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ba0:	fab2 f282 	clz	r2, r2
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	f002 021f 	and.w	r2, r2, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3f6>
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d002      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f000 be52 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b76      	ldr	r3, [pc, #472]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	21f8      	movs	r1, #248	@ 0xf8
 8001be8:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001bf0:	fa91 f1a1 	rbit	r1, r1
 8001bf4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001bf8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001bfc:	fab1 f181 	clz	r1, r1
 8001c00:	b2c9      	uxtb	r1, r1
 8001c02:	408b      	lsls	r3, r1
 8001c04:	4969      	ldr	r1, [pc, #420]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e0fe      	b.n	8001e0a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8088 	beq.w	8001d2e <HAL_RCC_OscConfig+0x552>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001c30:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c3e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	461a      	mov	r2, r3
 8001c46:	2301      	movs	r3, #1
 8001c48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f83f 	bl	8000ccc <HAL_GetTick>
 8001c4e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff f83a 	bl	8000ccc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d902      	bls.n	8001c6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f000 be06 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001c7c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_OscConfig+0x4be>
 8001c94:	4b45      	ldr	r3, [pc, #276]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	e013      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4e6>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001cb2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cc8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001ccc:	fa92 f2a2 	rbit	r2, r2
 8001cd0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001cd4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001cd8:	fab2 f282 	clz	r2, r2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f042 0220 	orr.w	r2, r2, #32
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	f002 021f 	and.w	r2, r2, #31
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f202 	lsl.w	r2, r1, r2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0af      	beq.n	8001c54 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	21f8      	movs	r1, #248	@ 0xf8
 8001d0a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001d12:	fa91 f1a1 	rbit	r1, r1
 8001d16:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001d1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001d1e:	fab1 f181 	clz	r1, r1
 8001d22:	b2c9      	uxtb	r1, r1
 8001d24:	408b      	lsls	r3, r1
 8001d26:	4921      	ldr	r1, [pc, #132]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e06d      	b.n	8001e0a <HAL_RCC_OscConfig+0x62e>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001d40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe ffb7 	bl	8000ccc <HAL_GetTick>
 8001d5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d64:	f7fe ffb2 	bl	8000ccc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d902      	bls.n	8001d7a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f000 bd7e 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5d4>
 8001da4:	4b01      	ldr	r3, [pc, #4]	@ (8001dac <HAL_RCC_OscConfig+0x5d0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e016      	b.n	8001dd8 <HAL_RCC_OscConfig+0x5fc>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	2302      	movs	r3, #2
 8001db2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001dc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001dd4:	4bbf      	ldr	r3, [pc, #764]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001dde:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001dea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f042 0220 	orr.w	r2, r2, #32
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f002 021f 	and.w	r2, r2, #31
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ac      	bne.n	8001d64 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8113 	beq.w	8002046 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d07c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x74e>
 8001e30:	2301      	movs	r3, #1
 8001e32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001e42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4ba2      	ldr	r3, [pc, #648]	@ (80020d8 <HAL_RCC_OscConfig+0x8fc>)
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	461a      	mov	r2, r3
 8001e56:	2301      	movs	r3, #1
 8001e58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe ff37 	bl	8000ccc <HAL_GetTick>
 8001e5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e64:	f7fe ff32 	bl	8000ccc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d902      	bls.n	8001e7a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f000 bcfe 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ed8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b7e      	ldr	r3, [pc, #504]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8001edc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	6019      	str	r1, [r3, #0]
 8001eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f1a3 	rbit	r1, r3
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f00:	6019      	str	r1, [r3, #0]
  return result;
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d09d      	beq.n	8001e64 <HAL_RCC_OscConfig+0x688>
 8001f28:	e08d      	b.n	8002046 <HAL_RCC_OscConfig+0x86a>
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f4c:	601a      	str	r2, [r3, #0]
  return result;
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b5d      	ldr	r3, [pc, #372]	@ (80020d8 <HAL_RCC_OscConfig+0x8fc>)
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7fe feae 	bl	8000ccc <HAL_GetTick>
 8001f70:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f76:	f7fe fea9 	bl	8000ccc <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d902      	bls.n	8001f8c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f000 bc75 	b.w	8002876 <HAL_RCC_OscConfig+0x109a>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001ff6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b36      	ldr	r3, [pc, #216]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8001ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002004:	2102      	movs	r1, #2
 8002006:	6019      	str	r1, [r3, #0]
 8002008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f1a3 	rbit	r1, r3
 8002016:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800201a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800201e:	6019      	str	r1, [r3, #0]
  return result;
 8002020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002024:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d197      	bne.n	8001f76 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 81a5 	beq.w	80023a6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d116      	bne.n	800209c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a18      	ldr	r2, [pc, #96]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <HAL_RCC_OscConfig+0x8f8>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002094:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_RCC_OscConfig+0x900>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d121      	bne.n	80020ec <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCC_OscConfig+0x900>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_RCC_OscConfig+0x900>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b4:	f7fe fe0a 	bl	8000ccc <HAL_GetTick>
 80020b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e010      	b.n	80020e0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7fe fe05 	bl	8000ccc <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d908      	bls.n	80020e0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e3d1      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	10908120 	.word	0x10908120
 80020dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002318 <HAL_RCC_OscConfig+0xb3c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0e8      	beq.n	80020be <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x92e>
 80020fc:	4b87      	ldr	r3, [pc, #540]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a86      	ldr	r2, [pc, #536]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e035      	b.n	8002176 <HAL_RCC_OscConfig+0x99a>
 800210a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x958>
 800211a:	4b80      	ldr	r3, [pc, #512]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a7f      	ldr	r2, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b7d      	ldr	r3, [pc, #500]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a7c      	ldr	r2, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	e020      	b.n	8002176 <HAL_RCC_OscConfig+0x99a>
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x982>
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a74      	ldr	r2, [pc, #464]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	4b72      	ldr	r3, [pc, #456]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a71      	ldr	r2, [pc, #452]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e00b      	b.n	8002176 <HAL_RCC_OscConfig+0x99a>
 800215e:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b6c      	ldr	r3, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a6b      	ldr	r2, [pc, #428]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8081 	beq.w	800228a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe fda0 	bl	8000ccc <HAL_GetTick>
 800218c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fd9b 	bl	8000ccc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e365      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 80021aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fa93 f2a3 	rbit	r2, r3
 80021c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021f0:	601a      	str	r2, [r3, #0]
  return result;
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d102      	bne.n	8002216 <HAL_RCC_OscConfig+0xa3a>
 8002210:	4b42      	ldr	r3, [pc, #264]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	e013      	b.n	800223e <HAL_RCC_OscConfig+0xa62>
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	4b38      	ldr	r3, [pc, #224]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002242:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002246:	2102      	movs	r1, #2
 8002248:	6011      	str	r1, [r2, #0]
 800224a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800224e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	fa92 f1a2 	rbit	r1, r2
 8002258:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800225c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002260:	6011      	str	r1, [r2, #0]
  return result;
 8002262:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002266:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d084      	beq.n	8002192 <HAL_RCC_OscConfig+0x9b6>
 8002288:	e083      	b.n	8002392 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe fd1f 	bl	8000ccc <HAL_GetTick>
 800228e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002294:	f7fe fd1a 	bl	8000ccc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e2e4      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022b4:	2202      	movs	r2, #2
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022f2:	601a      	str	r2, [r3, #0]
  return result;
 80022f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0xb44>
 8002312:	4b02      	ldr	r3, [pc, #8]	@ (800231c <HAL_RCC_OscConfig+0xb40>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	e017      	b.n	8002348 <HAL_RCC_OscConfig+0xb6c>
 8002318:	40007000 	.word	0x40007000
 800231c:	40021000 	.word	0x40021000
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002328:	2202      	movs	r2, #2
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002330:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	4bb3      	ldr	r3, [pc, #716]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800234c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002350:	2102      	movs	r1, #2
 8002352:	6011      	str	r1, [r2, #0]
 8002354:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002358:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	fa92 f1a2 	rbit	r1, r2
 8002362:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002366:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800236a:	6011      	str	r1, [r2, #0]
  return result;
 800236c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002370:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d180      	bne.n	8002294 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002392:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b9e      	ldr	r3, [pc, #632]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a9d      	ldr	r2, [pc, #628]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 825e 	beq.w	8002874 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b8:	4b96      	ldr	r3, [pc, #600]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	f000 821f 	beq.w	8002804 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	f040 8170 	bne.w	80026b8 <HAL_RCC_OscConfig+0xedc>
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f2a3 	rbit	r2, r3
 80023f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023fc:	601a      	str	r2, [r3, #0]
  return result;
 80023fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002402:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002406:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002412:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	461a      	mov	r2, r3
 800241a:	2300      	movs	r3, #0
 800241c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe fc55 	bl	8000ccc <HAL_GetTick>
 8002422:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e009      	b.n	800243c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fc50 	bl	8000ccc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e21c      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 800243c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002440:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002444:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	fa93 f2a3 	rbit	r2, r3
 8002458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002460:	601a      	str	r2, [r3, #0]
  return result;
 8002462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002466:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800246a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	fab3 f383 	clz	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <HAL_RCC_OscConfig+0xcaa>
 8002480:	4b64      	ldr	r3, [pc, #400]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	e027      	b.n	80024d6 <HAL_RCC_OscConfig+0xcfa>
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800248e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002498:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f2a3 	rbit	r2, r3
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024cc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4b50      	ldr	r3, [pc, #320]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024da:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024e2:	6011      	str	r1, [r2, #0]
 80024e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024e8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	fa92 f1a2 	rbit	r1, r2
 80024f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024f6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80024fa:	6011      	str	r1, [r2, #0]
  return result;
 80024fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002500:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	fab2 f282 	clz	r2, r2
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	f042 0220 	orr.w	r2, r2, #32
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f002 021f 	and.w	r2, r2, #31
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d182      	bne.n	8002428 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002522:	4b3c      	ldr	r3, [pc, #240]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	f023 020f 	bic.w	r2, r3, #15
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	4937      	ldr	r1, [pc, #220]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 8002538:	4313      	orrs	r3, r2
 800253a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800253c:	4b35      	ldr	r3, [pc, #212]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002548:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	430b      	orrs	r3, r1
 800255e:	492d      	ldr	r1, [pc, #180]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800256c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002588:	601a      	str	r2, [r3, #0]
  return result;
 800258a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002592:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800259e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	2301      	movs	r3, #1
 80025a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fb8f 	bl	8000ccc <HAL_GetTick>
 80025ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b2:	e009      	b.n	80025c8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fb8a 	bl	8000ccc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e156      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 80025c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025da:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025ec:	601a      	str	r2, [r3, #0]
  return result;
 80025ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80025f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0xe3c>
 800260c:	4b01      	ldr	r3, [pc, #4]	@ (8002614 <HAL_RCC_OscConfig+0xe38>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	e02a      	b.n	8002668 <HAL_RCC_OscConfig+0xe8c>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002620:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f2a3 	rbit	r2, r3
 8002634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002638:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002642:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002650:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	4b86      	ldr	r3, [pc, #536]	@ (8002880 <HAL_RCC_OscConfig+0x10a4>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002670:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002674:	6011      	str	r1, [r2, #0]
 8002676:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800267a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fa92 f1a2 	rbit	r1, r2
 8002684:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002688:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800268c:	6011      	str	r1, [r2, #0]
  return result;
 800268e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002692:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fab2 f282 	clz	r2, r2
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f002 021f 	and.w	r2, r2, #31
 80026a8:	2101      	movs	r1, #1
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f43f af7f 	beq.w	80025b4 <HAL_RCC_OscConfig+0xdd8>
 80026b6:	e0dd      	b.n	8002874 <HAL_RCC_OscConfig+0x1098>
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f2a3 	rbit	r2, r3
 80026d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026dc:	601a      	str	r2, [r3, #0]
  return result;
 80026de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80026e6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	461a      	mov	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe fae5 	bl	8000ccc <HAL_GetTick>
 8002702:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002706:	e009      	b.n	800271c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe fae0 	bl	8000ccc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0ac      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
 800271c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002720:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002724:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800272e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f2a3 	rbit	r2, r3
 8002738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002740:	601a      	str	r2, [r3, #0]
  return result;
 8002742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002746:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800274a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_RCC_OscConfig+0xf8a>
 8002760:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_OscConfig+0x10a4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e027      	b.n	80027b6 <HAL_RCC_OscConfig+0xfda>
 8002766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800276e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002778:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002786:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002790:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002794:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ac:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_OscConfig+0x10a4>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027be:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027c2:	6011      	str	r1, [r2, #0]
 80027c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027c8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	fa92 f1a2 	rbit	r1, r2
 80027d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027d6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027da:	6011      	str	r1, [r2, #0]
  return result;
 80027dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80027e0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	f042 0220 	orr.w	r2, r2, #32
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f002 021f 	and.w	r2, r2, #31
 80027f6:	2101      	movs	r1, #1
 80027f8:	fa01 f202 	lsl.w	r2, r1, r2
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d182      	bne.n	8002708 <HAL_RCC_OscConfig+0xf2c>
 8002802:	e037      	b.n	8002874 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002808:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e02e      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_RCC_OscConfig+0x10a4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002820:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_RCC_OscConfig+0x10a4>)
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002828:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800282c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002834:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	d117      	bne.n	8002870 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002840:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002844:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002854:	429a      	cmp	r2, r3
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b09e      	sub	sp, #120	@ 0x78
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e162      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b90      	ldr	r3, [pc, #576]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d910      	bls.n	80028cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	498b      	ldr	r1, [pc, #556]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b89      	ldr	r3, [pc, #548]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e14a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b82      	ldr	r3, [pc, #520]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	497f      	ldr	r1, [pc, #508]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80dc 	beq.w	8002ab0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d13c      	bne.n	800297a <HAL_RCC_ClockConfig+0xf6>
 8002900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002904:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800290e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_RCC_ClockConfig+0xa6>
 8002924:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	e00f      	b.n	800294a <HAL_RCC_ClockConfig+0xc6>
 800292a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800292e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	667b      	str	r3, [r7, #100]	@ 0x64
 8002938:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800293c:	663b      	str	r3, [r7, #96]	@ 0x60
 800293e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002946:	4b67      	ldr	r3, [pc, #412]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800294e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002952:	fa92 f2a2 	rbit	r2, r2
 8002956:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002958:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800295a:	fab2 f282 	clz	r2, r2
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f002 021f 	and.w	r2, r2, #31
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d17b      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0f3      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d13c      	bne.n	80029fc <HAL_RCC_ClockConfig+0x178>
 8002982:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002986:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_ClockConfig+0x128>
 80029a6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e00f      	b.n	80029cc <HAL_RCC_ClockConfig+0x148>
 80029ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029be:	643b      	str	r3, [r7, #64]	@ 0x40
 80029c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c8:	4b46      	ldr	r3, [pc, #280]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80029d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029d4:	fa92 f2a2 	rbit	r2, r2
 80029d8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80029da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f002 021f 	and.w	r2, r2, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d13a      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b2      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
 80029fc:	2302      	movs	r3, #2
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x1a0>
 8002a1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	e00d      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1bc>
 8002a24:	2302      	movs	r3, #2
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	61fb      	str	r3, [r7, #28]
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	2202      	movs	r2, #2
 8002a42:	61ba      	str	r2, [r7, #24]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	fa92 f2a2 	rbit	r2, r2
 8002a4a:	617a      	str	r2, [r7, #20]
  return result;
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	fab2 f282 	clz	r2, r2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f042 0220 	orr.w	r2, r2, #32
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f002 021f 	and.w	r2, r2, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e079      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	491a      	ldr	r1, [pc, #104]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe f924 	bl	8000ccc <HAL_GetTick>
 8002a84:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe f920 	bl	8000ccc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e061      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d214      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4906      	ldr	r1, [pc, #24]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e040      	b.n	8002b62 <HAL_RCC_ClockConfig+0x2de>
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_RCC_ClockConfig+0x2e8>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	491a      	ldr	r1, [pc, #104]	@ (8002b6c <HAL_RCC_ClockConfig+0x2e8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b12:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <HAL_RCC_ClockConfig+0x2e8>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4912      	ldr	r1, [pc, #72]	@ (8002b6c <HAL_RCC_ClockConfig+0x2e8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b26:	f000 f829 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_RCC_ClockConfig+0x2e8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b34:	22f0      	movs	r2, #240	@ 0xf0
 8002b36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	fa92 f2a2 	rbit	r2, r2
 8002b3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	fab2 f282 	clz	r2, r2
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	40d3      	lsrs	r3, r2
 8002b4a:	4a09      	ldr	r2, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x2ec>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_RCC_ClockConfig+0x2f0>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_RCC_ClockConfig+0x2f4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f872 	bl	8000c44 <HAL_InitTick>
  
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3778      	adds	r7, #120	@ 0x78
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08003b84 	.word	0x08003b84
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b08b      	sub	sp, #44	@ 0x2c
 8002b80:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x30>
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8002baa:	e03f      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bac:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bae:	623b      	str	r3, [r7, #32]
      break;
 8002bb0:	e03f      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002bb8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002bbc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	607a      	str	r2, [r7, #4]
  return result;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	40d3      	lsrs	r3, r2
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	220f      	movs	r2, #15
 8002be0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	fa92 f2a2 	rbit	r2, r2
 8002be8:	60fa      	str	r2, [r7, #12]
  return result;
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	40d3      	lsrs	r3, r2
 8002bf4:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c04:	4a0f      	ldr	r2, [pc, #60]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c14:	e007      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c16:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	623b      	str	r3, [r7, #32]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	372c      	adds	r7, #44	@ 0x2c
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40021000 	.word	0x40021000
 8002c44:	007a1200 	.word	0x007a1200
 8002c48:	08003b94 	.word	0x08003b94
 8002c4c:	08003ba4 	.word	0x08003ba4

08002c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e09d      	b.n	8002d9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c72:	d009      	beq.n	8002c88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
 8002c7a:	e005      	b.n	8002c88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd feea 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc8:	d902      	bls.n	8002cd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e002      	b.n	8002cd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_Init+0xa0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	ea42 0103 	orr.w	r1, r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	f003 0204 	and.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d6c:	ea42 0103 	orr.w	r1, r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69da      	ldr	r2, [r3, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e01a      	b.n	8002dee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fd fe97 	bl	8000b04 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b088      	sub	sp, #32
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	4613      	mov	r3, r2
 8002e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_SPI_Transmit+0x22>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e15f      	b.n	80030d8 <HAL_SPI_Transmit+0x2e2>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e20:	f7fd ff54 	bl	8000ccc <HAL_GetTick>
 8002e24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e3a:	e148      	b.n	80030ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0x52>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e4c:	e13f      	b.n	80030ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e98:	d10f      	bne.n	8002eba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d007      	beq.n	8002ed8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ee0:	d94f      	bls.n	8002f82 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Transmit+0xfa>
 8002eea:	8afb      	ldrh	r3, [r7, #22]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d142      	bne.n	8002f76 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f14:	e02f      	b.n	8002f76 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d112      	bne.n	8002f4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f48:	e015      	b.n	8002f76 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4a:	f7fd febf 	bl	8000ccc <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d803      	bhi.n	8002f62 <HAL_SPI_Transmit+0x16c>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d102      	bne.n	8002f68 <HAL_SPI_Transmit+0x172>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f74:	e0ab      	b.n	80030ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ca      	bne.n	8002f16 <HAL_SPI_Transmit+0x120>
 8002f80:	e080      	b.n	8003084 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0x19a>
 8002f8a:	8afb      	ldrh	r3, [r7, #22]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d174      	bne.n	800307a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d912      	bls.n	8002fc0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	1c9a      	adds	r2, r3, #2
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b02      	subs	r3, #2
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fbe:	e05c      	b.n	800307a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002fe6:	e048      	b.n	800307a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d12b      	bne.n	800304e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d912      	bls.n	8003026 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b02      	subs	r3, #2
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003024:	e029      	b.n	800307a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800304c:	e015      	b.n	800307a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304e:	f7fd fe3d 	bl	8000ccc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d803      	bhi.n	8003066 <HAL_SPI_Transmit+0x270>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d102      	bne.n	800306c <HAL_SPI_Transmit+0x276>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003078:	e029      	b.n	80030ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1b1      	bne.n	8002fe8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fcf9 	bl	8003a80 <SPI_EndRxTxTransaction>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e003      	b.n	80030ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003104:	e11a      	b.n	800333c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310e:	d112      	bne.n	8003136 <HAL_SPI_Receive+0x56>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10e      	bne.n	8003136 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2204      	movs	r2, #4
 800311c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f90e 	bl	800334e <HAL_SPI_TransmitReceive>
 8003132:	4603      	mov	r3, r0
 8003134:	e107      	b.n	8003346 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_SPI_Receive+0x64>
 8003140:	2302      	movs	r3, #2
 8003142:	e100      	b.n	8003346 <HAL_SPI_Receive+0x266>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314c:	f7fd fdbe 	bl	8000ccc <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_Receive+0x7e>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d102      	bne.n	8003164 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003162:	e0eb      	b.n	800333c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2204      	movs	r2, #4
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ae:	d908      	bls.n	80031c2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e007      	b.n	80031d2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031da:	d10f      	bne.n	80031fc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d007      	beq.n	800321a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003222:	d86f      	bhi.n	8003304 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003224:	e034      	b.n	8003290 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d117      	bne.n	8003264 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f103 020c 	add.w	r2, r3, #12
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	7812      	ldrb	r2, [r2, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003262:	e015      	b.n	8003290 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003264:	f7fd fd32 	bl	8000ccc <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d803      	bhi.n	800327c <HAL_SPI_Receive+0x19c>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Receive+0x1a2>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800328e:	e055      	b.n	800333c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1c4      	bne.n	8003226 <HAL_SPI_Receive+0x146>
 800329c:	e038      	b.n	8003310 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d115      	bne.n	80032d8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	b292      	uxth	r2, r2
 80032b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032d6:	e015      	b.n	8003304 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d8:	f7fd fcf8 	bl	8000ccc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d803      	bhi.n	80032f0 <HAL_SPI_Receive+0x210>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_Receive+0x216>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003302:	e01b      	b.n	800333c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1c6      	bne.n	800329e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fb5b 	bl	80039d0 <SPI_EndRxTransaction>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	e003      	b.n	800333c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b08a      	sub	sp, #40	@ 0x28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800335c:	2301      	movs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x26>
 8003370:	2302      	movs	r3, #2
 8003372:	e20a      	b.n	800378a <HAL_SPI_TransmitReceive+0x43c>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800337c:	f7fd fca6 	bl	8000ccc <HAL_GetTick>
 8003380:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003388:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003398:	7efb      	ldrb	r3, [r7, #27]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d00e      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x6e>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a4:	d106      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x66>
 80033ae:	7efb      	ldrb	r3, [r7, #27]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d003      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033ba:	e1e0      	b.n	800377e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x80>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_SPI_TransmitReceive+0x80>
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80033d4:	e1d3      	b.n	800377e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2205      	movs	r2, #5
 80033e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	887a      	ldrh	r2, [r7, #2]
 80033fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	887a      	ldrh	r2, [r7, #2]
 8003402:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	887a      	ldrh	r2, [r7, #2]
 8003416:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800342c:	d802      	bhi.n	8003434 <HAL_SPI_TransmitReceive+0xe6>
 800342e:	8a3b      	ldrh	r3, [r7, #16]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d908      	bls.n	8003446 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e007      	b.n	8003456 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d007      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800347c:	f240 8081 	bls.w	8003582 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_SPI_TransmitReceive+0x140>
 8003488:	8a7b      	ldrh	r3, [r7, #18]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d16d      	bne.n	800356a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b2:	e05a      	b.n	800356a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d11b      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x1ac>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d016      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x1ac>
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d113      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d11c      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x1f4>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d016      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	b292      	uxth	r2, r2
 8003520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003542:	f7fd fbc3 	bl	8000ccc <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800354e:	429a      	cmp	r2, r3
 8003550:	d80b      	bhi.n	800356a <HAL_SPI_TransmitReceive+0x21c>
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d007      	beq.n	800356a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003568:	e109      	b.n	800377e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d19f      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x166>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d199      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x166>
 8003580:	e0e3      	b.n	800374a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_SPI_TransmitReceive+0x244>
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 80cf 	bne.w	8003730 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d912      	bls.n	80035c2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b02      	subs	r3, #2
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035c0:	e0b6      	b.n	8003730 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	7812      	ldrb	r2, [r2, #0]
 80035ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e8:	e0a2      	b.n	8003730 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d134      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x314>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02f      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x314>
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	2b01      	cmp	r3, #1
 8003606:	d12c      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d912      	bls.n	8003638 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b02      	subs	r3, #2
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003636:	e012      	b.n	800365e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d148      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x3b4>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d042      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d923      	bls.n	80036d0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	b292      	uxth	r2, r2
 8003694:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b02      	subs	r3, #2
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d81f      	bhi.n	80036fe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e016      	b.n	80036fe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f103 020c 	add.w	r2, r3, #12
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003702:	f7fd fae3 	bl	8000ccc <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_TransmitReceive+0x3cc>
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x3d2>
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800372e:	e026      	b.n	800377e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f47f af57 	bne.w	80035ea <HAL_SPI_TransmitReceive+0x29c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af50 	bne.w	80035ea <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f996 	bl	8003a80 <SPI_EndRxTxTransaction>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003774:	e003      	b.n	800377e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003786:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800378a:	4618      	mov	r0, r3
 800378c:	3728      	adds	r7, #40	@ 0x28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037a4:	f7fd fa92 	bl	8000ccc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037b4:	f7fd fa8a 	bl	8000ccc <HAL_GetTick>
 80037b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ba:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	015b      	lsls	r3, r3, #5
 80037c0:	0d1b      	lsrs	r3, r3, #20
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ca:	e054      	b.n	8003876 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d050      	beq.n	8003876 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d4:	f7fd fa7a 	bl	8000ccc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d902      	bls.n	80037ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d13d      	bne.n	8003866 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003802:	d111      	bne.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800380c:	d004      	beq.n	8003818 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003816:	d107      	bne.n	8003828 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003826:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003830:	d10f      	bne.n	8003852 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e017      	b.n	8003896 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3b01      	subs	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d19b      	bne.n	80037cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000000 	.word	0x20000000

080038a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038b6:	f7fd fa09 	bl	8000ccc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4413      	add	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80038c6:	f7fd fa01 	bl	8000ccc <HAL_GetTick>
 80038ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038d4:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00da      	lsls	r2, r3, #3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	0d1b      	lsrs	r3, r3, #20
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038ec:	e060      	b.n	80039b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038f4:	d107      	bne.n	8003906 <SPI_WaitFifoStateUntilTimeout+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003904:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d050      	beq.n	80039b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800390e:	f7fd f9dd 	bl	8000ccc <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391a:	429a      	cmp	r2, r3
 800391c:	d902      	bls.n	8003924 <SPI_WaitFifoStateUntilTimeout+0x80>
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d13d      	bne.n	80039a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393c:	d111      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003946:	d004      	beq.n	8003952 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003950:	d107      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	d10f      	bne.n	800398c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800398a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e010      	b.n	80039c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d196      	bne.n	80038ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3728      	adds	r7, #40	@ 0x28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000000 	.word	0x20000000

080039d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039e4:	d111      	bne.n	8003a0a <SPI_EndRxTransaction+0x3a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ee:	d004      	beq.n	80039fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f8:	d107      	bne.n	8003a0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	@ 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff febd 	bl	8003794 <SPI_WaitFlagStateUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e023      	b.n	8003a78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a38:	d11d      	bne.n	8003a76 <SPI_EndRxTransaction+0xa6>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a42:	d004      	beq.n	8003a4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4c:	d113      	bne.n	8003a76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff ff22 	bl	80038a4 <SPI_WaitFifoStateUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e000      	b.n	8003a78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff03 	bl	80038a4 <SPI_WaitFifoStateUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e027      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff fe68 	bl	8003794 <SPI_WaitFlagStateUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e014      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff fedc 	bl	80038a4 <SPI_WaitFifoStateUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e000      	b.n	8003b04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <memset>:
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	@ (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f818 	bl	8003b64 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003bb4 	.word	0x08003bb4
 8003b58:	08003bb4 	.word	0x08003bb4
 8003b5c:	08003bb4 	.word	0x08003bb4
 8003b60:	08003bb8 	.word	0x08003bb8

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
