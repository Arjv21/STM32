
JsonTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f94  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08002130  08002130  00003130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a0  080023a0  00004004  2**0
                  CONTENTS
  4 .ARM          00000008  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023a8  080023a8  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023a8  080023a8  000033a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023ac  080023ac  000033ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080023b0  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000004  080023b4  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  080023b4  000045d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000214b  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a16  00000000  00000000  0000617f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00006b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000023f  00000000  00000000  00006eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d486  00000000  00000000  000070f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000390d  00000000  00000000  0002457d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af905  00000000  00000000  00027e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d778f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d00  00000000  00000000  000d77d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d84d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002114 	.word	0x08002114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08002114 	.word	0x08002114

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_d2uiz>:
 8000918:	004a      	lsls	r2, r1, #1
 800091a:	d211      	bcs.n	8000940 <__aeabi_d2uiz+0x28>
 800091c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000920:	d211      	bcs.n	8000946 <__aeabi_d2uiz+0x2e>
 8000922:	d50d      	bpl.n	8000940 <__aeabi_d2uiz+0x28>
 8000924:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800092c:	d40e      	bmi.n	800094c <__aeabi_d2uiz+0x34>
 800092e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093a:	fa23 f002 	lsr.w	r0, r3, r2
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d102      	bne.n	8000952 <__aeabi_d2uiz+0x3a>
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	4770      	bx	lr
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	4770      	bx	lr

08000958 <HashCal>:

//- Calculates Hash Value and returns Unsigned long type Hash Value
//- Which can further help us search the data from the Memory

static unsigned long HashCal(char *str) // This is a local function
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 8000960:	f241 5305 	movw	r3, #5381	@ 0x1505
 8000964:	60fb      	str	r3, [r7, #12]
    unsigned short int c ;
    while(c = *str++)
 8000966:	e006      	b.n	8000976 <HashCal+0x1e>
        hash = ((hash << 5) + hash) + c;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	015a      	lsls	r2, r3, #5
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	441a      	add	r2, r3
 8000970:	897b      	ldrh	r3, [r7, #10]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
    while(c = *str++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	817b      	strh	r3, [r7, #10]
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f0      	bne.n	8000968 <HashCal+0x10>
    return hash;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <strcopy>:

static int strcopy(char *buffer, char *start, char end, const int maxLen, unsigned short int length)
{
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71fb      	strb	r3, [r7, #7]
	unsigned short int charCount=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	82fb      	strh	r3, [r7, #22]
  if(length==0)
 80009a8:	8c3b      	ldrh	r3, [r7, #32]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d121      	bne.n	80009f2 <strcopy+0x5e>
  {
       do
       {
		   *buffer++ = *start++;
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	1c53      	adds	r3, r2, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	1c59      	adds	r1, r3, #1
 80009b8:	60f9      	str	r1, [r7, #12]
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	701a      	strb	r2, [r3, #0]
		   charCount++;
 80009be:	8afb      	ldrh	r3, [r7, #22]
 80009c0:	3301      	adds	r3, #1
 80009c2:	82fb      	strh	r3, [r7, #22]
		   if(charCount >=maxLen)
 80009c4:	8afb      	ldrh	r3, [r7, #22]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dc01      	bgt.n	80009d0 <strcopy+0x3c>
			   return 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e01f      	b.n	8000a10 <strcopy+0x7c>
       }while(*start != end);
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d1e9      	bne.n	80009ae <strcopy+0x1a>
 80009da:	e00f      	b.n	80009fc <strcopy+0x68>
  }
 else
 {
     while(length !=0)
     {
         *buffer++ = *start++;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	1c53      	adds	r3, r2, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	60f9      	str	r1, [r7, #12]
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	701a      	strb	r2, [r3, #0]
//         *start++;
//         *buffer++;
         length--;
 80009ec:	8c3b      	ldrh	r3, [r7, #32]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	843b      	strh	r3, [r7, #32]
     while(length !=0)
 80009f2:	8c3b      	ldrh	r3, [r7, #32]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f1      	bne.n	80009dc <strcopy+0x48>
     }
     return 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e009      	b.n	8000a10 <strcopy+0x7c>
 }
   *buffer++ = *start;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60fa      	str	r2, [r7, #12]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	701a      	strb	r2, [r3, #0]
//   *buffer++;
   *buffer ='\0';
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
   return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	371c      	adds	r7, #28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <JSONStructInit>:
//----------------
//- Initializes the JSON Structure for parsing
//- returns error code

unsigned char JSONStructInit(struct jsonParser *jParser, char *buffer)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    unsigned short int charCount = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	82fb      	strh	r3, [r7, #22]
    unsigned char err = JDATA_OK;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
    char *start = NULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]

    start = buffer;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	613b      	str	r3, [r7, #16]

    while((*start!='{')&&(*start!='['))
 8000a36:	e00f      	b.n	8000a58 <JSONStructInit+0x3c>
	{
    	start++;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
    	charCount++;
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	3301      	adds	r3, #1
 8000a42:	82fb      	strh	r3, [r7, #22]
    	if(charCount == MAXJSONBYTES )
 8000a44:	8afb      	ldrh	r3, [r7, #22]
 8000a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a4a:	d105      	bne.n	8000a58 <JSONStructInit+0x3c>
    	{
    		charCount = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	82fb      	strh	r3, [r7, #22]
    		err = JDATA_NOK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	73fb      	strb	r3, [r7, #15]
    		return err;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	e029      	b.n	8000aac <JSONStructInit+0x90>
    while((*start!='{')&&(*start!='['))
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b7b      	cmp	r3, #123	@ 0x7b
 8000a5e:	d003      	beq.n	8000a68 <JSONStructInit+0x4c>
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a66:	d1e7      	bne.n	8000a38 <JSONStructInit+0x1c>
    	}
	}
    jParser->buffer = start;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	601a      	str	r2, [r3, #0]
    jParser->currP = start;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	609a      	str	r2, [r3, #8]
    jParser->numTokens = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
    jParser->currentPos = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
    jParser->stackPos = 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
    if(*start == '{')
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b7b      	cmp	r3, #123	@ 0x7b
 8000a8c:	d103      	bne.n	8000a96 <JSONStructInit+0x7a>
    	jParser->rootType = JDATA_OBJECT;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	761a      	strb	r2, [r3, #24]
 8000a94:	e006      	b.n	8000aa4 <JSONStructInit+0x88>
    else if(*start == '[')
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8000a9c:	d102      	bne.n	8000aa4 <JSONStructInit+0x88>
    	jParser->rootType = JDATA_ARRAY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	761a      	strb	r2, [r3, #24]
    jParser->parserStatus = JSON_START;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	731a      	strb	r2, [r3, #12]
    return (err);
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	371c      	adds	r7, #28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <JSONParseData>:
//- Takes the jsonParser and jsonReadData as input to parse the JSON data
//- returns error


unsigned char JSONParseData(struct jsonParser *jParser)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	@ 0x2c
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	6078      	str	r0, [r7, #4]
    char *start;
    char *end;
    char *tempStr;
    unsigned short int charCount=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	827b      	strh	r3, [r7, #18]
    unsigned short int charFound = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	823b      	strh	r3, [r7, #16]
    char c;
    unsigned short int err = JDATA_OK;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	81bb      	strh	r3, [r7, #12]
    unsigned short int currentPos=0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	817b      	strh	r3, [r7, #10]
    unsigned short int success = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	813b      	strh	r3, [r7, #8]

    tempStr = jParser->currP;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	617b      	str	r3, [r7, #20]

    if(jParser->rootType == JDATA_OBJECT)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7e1b      	ldrb	r3, [r3, #24]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	f040 8244 	bne.w	8000f6c <JSONParseData+0x4b4>
    {
        while(*++tempStr!='\"')
 8000ae4:	e00c      	b.n	8000b00 <JSONParseData+0x48>
        {
            charCount++;
 8000ae6:	8a7b      	ldrh	r3, [r7, #18]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	827b      	strh	r3, [r7, #18]
            if(charCount>=MAXTOKENBYTES)
 8000aec:	8a7b      	ldrh	r3, [r7, #18]
 8000aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af0:	d906      	bls.n	8000b00 <JSONParseData+0x48>
            {
                charCount=0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	827b      	strh	r3, [r7, #18]
                err = JDATA_NOK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	81bb      	strh	r3, [r7, #12]
//                exit(1);
                return(1);
 8000afa:	2301      	movs	r3, #1
 8000afc:	f000 bc25 	b.w	800134a <JSONParseData+0x892>
        while(*++tempStr!='\"')
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b22      	cmp	r3, #34	@ 0x22
 8000b0c:	d1eb      	bne.n	8000ae6 <JSONParseData+0x2e>
            }
        }                                       //Find the first \" after the '{' to find the start of json KEY
        start = tempStr;                        // start pointer is made equal to the address of first \"
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	61fb      	str	r3, [r7, #28]

        while(*++tempStr!=':')
 8000b12:	e00c      	b.n	8000b2e <JSONParseData+0x76>
        {
            charCount++;
 8000b14:	8a7b      	ldrh	r3, [r7, #18]
 8000b16:	3301      	adds	r3, #1
 8000b18:	827b      	strh	r3, [r7, #18]
            if(charCount >=MAXTOKENBYTES)
 8000b1a:	8a7b      	ldrh	r3, [r7, #18]
 8000b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b1e:	d906      	bls.n	8000b2e <JSONParseData+0x76>
            {
                charCount=0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	827b      	strh	r3, [r7, #18]
                err = JDATA_NOK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	81bb      	strh	r3, [r7, #12]
//                exit(1);
                return(1);
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f000 bc0e 	b.w	800134a <JSONParseData+0x892>
        while(*++tempStr!=':')
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b3a      	cmp	r3, #58	@ 0x3a
 8000b3a:	d1eb      	bne.n	8000b14 <JSONParseData+0x5c>
            }
        }                                       //Find the address of the ":" after the json key
        end = tempStr;                          //end pointer is made equal to the ":" before the value of the json key
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	61bb      	str	r3, [r7, #24]
        currentPos = jParser->numTokens;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	817b      	strh	r3, [r7, #10]
        success = strcopy(jParser->jData[currentPos].keyValue, start, '\"', 128, 0); // the value is stored in key value buffer of struct
 8000b46:	897a      	ldrh	r2, [r7, #10]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	015b      	lsls	r3, r3, #5
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	3318      	adds	r3, #24
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	1d18      	adds	r0, r3, #4
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	2222      	movs	r2, #34	@ 0x22
 8000b60:	69f9      	ldr	r1, [r7, #28]
 8000b62:	f7ff ff17 	bl	8000994 <strcopy>
 8000b66:	4603      	mov	r3, r0
 8000b68:	813b      	strh	r3, [r7, #8]
        if(success!=1)
 8000b6a:	893b      	ldrh	r3, [r7, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d001      	beq.n	8000b74 <JSONParseData+0xbc>
        {
//            exit(0);
            return(0);
 8000b70:	2300      	movs	r3, #0
 8000b72:	e3ea      	b.n	800134a <JSONParseData+0x892>
        }
        else
        jParser->jData[currentPos].hashValue = HashCal(jParser->jData[currentPos].keyValue);
 8000b74:	897a      	ldrh	r2, [r7, #10]
 8000b76:	4613      	mov	r3, r2
 8000b78:	015b      	lsls	r3, r3, #5
 8000b7a:	4413      	add	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	3318      	adds	r3, #24
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	3304      	adds	r3, #4
 8000b86:	897c      	ldrh	r4, [r7, #10]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fee5 	bl	8000958 <HashCal>
 8000b8e:	4601      	mov	r1, r0
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4623      	mov	r3, r4
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	4423      	add	r3, r4
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	339c      	adds	r3, #156	@ 0x9c
 8000b9e:	6019      	str	r1, [r3, #0]
        // on successful storage into the struct the hash value
        // is calculated and stored in the respective struct
      start = end; // Address of the start pointer is made equal to the end pointer.
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	61fb      	str	r3, [r7, #28]
      c = *++end;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	73fb      	strb	r3, [r7, #15]
      charCount =0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	827b      	strh	r3, [r7, #18]
      while(c)
 8000bb4:	e136      	b.n	8000e24 <JSONParseData+0x36c>
      {
          charFound=0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	823b      	strh	r3, [r7, #16]
          switch(c)
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	3b22      	subs	r3, #34	@ 0x22
 8000bbe:	2b59      	cmp	r3, #89	@ 0x59
 8000bc0:	f200 8116 	bhi.w	8000df0 <JSONParseData+0x338>
 8000bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bcc <JSONParseData+0x114>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000d81 	.word	0x08000d81
 8000bd0:	08000df1 	.word	0x08000df1
 8000bd4:	08000df1 	.word	0x08000df1
 8000bd8:	08000df1 	.word	0x08000df1
 8000bdc:	08000df1 	.word	0x08000df1
 8000be0:	08000df1 	.word	0x08000df1
 8000be4:	08000df1 	.word	0x08000df1
 8000be8:	08000df1 	.word	0x08000df1
 8000bec:	08000df1 	.word	0x08000df1
 8000bf0:	08000df1 	.word	0x08000df1
 8000bf4:	08000df1 	.word	0x08000df1
 8000bf8:	08000dd5 	.word	0x08000dd5
 8000bfc:	08000dd5 	.word	0x08000dd5
 8000c00:	08000df1 	.word	0x08000df1
 8000c04:	08000dd5 	.word	0x08000dd5
 8000c08:	08000dd5 	.word	0x08000dd5
 8000c0c:	08000dd5 	.word	0x08000dd5
 8000c10:	08000dd5 	.word	0x08000dd5
 8000c14:	08000dd5 	.word	0x08000dd5
 8000c18:	08000dd5 	.word	0x08000dd5
 8000c1c:	08000dd5 	.word	0x08000dd5
 8000c20:	08000dd5 	.word	0x08000dd5
 8000c24:	08000dd5 	.word	0x08000dd5
 8000c28:	08000dd5 	.word	0x08000dd5
 8000c2c:	08000df1 	.word	0x08000df1
 8000c30:	08000df1 	.word	0x08000df1
 8000c34:	08000df1 	.word	0x08000df1
 8000c38:	08000df1 	.word	0x08000df1
 8000c3c:	08000df1 	.word	0x08000df1
 8000c40:	08000df1 	.word	0x08000df1
 8000c44:	08000df1 	.word	0x08000df1
 8000c48:	08000df1 	.word	0x08000df1
 8000c4c:	08000df1 	.word	0x08000df1
 8000c50:	08000df1 	.word	0x08000df1
 8000c54:	08000df1 	.word	0x08000df1
 8000c58:	08000df1 	.word	0x08000df1
 8000c5c:	08000db9 	.word	0x08000db9
 8000c60:	08000df1 	.word	0x08000df1
 8000c64:	08000df1 	.word	0x08000df1
 8000c68:	08000df1 	.word	0x08000df1
 8000c6c:	08000df1 	.word	0x08000df1
 8000c70:	08000df1 	.word	0x08000df1
 8000c74:	08000df1 	.word	0x08000df1
 8000c78:	08000df1 	.word	0x08000df1
 8000c7c:	08000d9d 	.word	0x08000d9d
 8000c80:	08000df1 	.word	0x08000df1
 8000c84:	08000df1 	.word	0x08000df1
 8000c88:	08000df1 	.word	0x08000df1
 8000c8c:	08000df1 	.word	0x08000df1
 8000c90:	08000df1 	.word	0x08000df1
 8000c94:	08000db9 	.word	0x08000db9
 8000c98:	08000df1 	.word	0x08000df1
 8000c9c:	08000df1 	.word	0x08000df1
 8000ca0:	08000df1 	.word	0x08000df1
 8000ca4:	08000df1 	.word	0x08000df1
 8000ca8:	08000df1 	.word	0x08000df1
 8000cac:	08000df1 	.word	0x08000df1
 8000cb0:	08000d35 	.word	0x08000d35
 8000cb4:	08000df1 	.word	0x08000df1
 8000cb8:	08000df1 	.word	0x08000df1
 8000cbc:	08000df1 	.word	0x08000df1
 8000cc0:	08000df1 	.word	0x08000df1
 8000cc4:	08000df1 	.word	0x08000df1
 8000cc8:	08000df1 	.word	0x08000df1
 8000ccc:	08000df1 	.word	0x08000df1
 8000cd0:	08000df1 	.word	0x08000df1
 8000cd4:	08000df1 	.word	0x08000df1
 8000cd8:	08000df1 	.word	0x08000df1
 8000cdc:	08000db9 	.word	0x08000db9
 8000ce0:	08000df1 	.word	0x08000df1
 8000ce4:	08000df1 	.word	0x08000df1
 8000ce8:	08000df1 	.word	0x08000df1
 8000cec:	08000df1 	.word	0x08000df1
 8000cf0:	08000df1 	.word	0x08000df1
 8000cf4:	08000df1 	.word	0x08000df1
 8000cf8:	08000df1 	.word	0x08000df1
 8000cfc:	08000d9d 	.word	0x08000d9d
 8000d00:	08000df1 	.word	0x08000df1
 8000d04:	08000df1 	.word	0x08000df1
 8000d08:	08000df1 	.word	0x08000df1
 8000d0c:	08000df1 	.word	0x08000df1
 8000d10:	08000df1 	.word	0x08000df1
 8000d14:	08000db9 	.word	0x08000db9
 8000d18:	08000df1 	.word	0x08000df1
 8000d1c:	08000df1 	.word	0x08000df1
 8000d20:	08000df1 	.word	0x08000df1
 8000d24:	08000df1 	.word	0x08000df1
 8000d28:	08000df1 	.word	0x08000df1
 8000d2c:	08000df1 	.word	0x08000df1
 8000d30:	08000d5b 	.word	0x08000d5b
          {
          case '[' :
            jParser->jData[currentPos].readDataType = JARRAY;    //if the '[' is encountered the DataType is marked as ARRAY type and
 8000d34:	897a      	ldrh	r2, [r7, #10]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	015b      	lsls	r3, r3, #5
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;                    //stackPos variable in the structure is incremented
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
            charFound = 1;                          //charFound variable is set as 1
 8000d54:	2301      	movs	r3, #1
 8000d56:	823b      	strh	r3, [r7, #16]
            break;
 8000d58:	e04d      	b.n	8000df6 <JSONParseData+0x33e>
          case '{' :
            jParser->jData[currentPos].readDataType = JOBJECT;   //if the '{' is encountered the DataType is marked as OBJECT type and
 8000d5a:	897a      	ldrh	r2, [r7, #10]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	015b      	lsls	r3, r3, #5
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;                    //stackPos variable in the buffer structure is incremented
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	611a      	str	r2, [r3, #16]
            charFound =1;                           //charFound variable is set as 1
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	823b      	strh	r3, [r7, #16]
            break;
 8000d7e:	e03a      	b.n	8000df6 <JSONParseData+0x33e>
          case '\"' :
            jParser->jData[currentPos].readDataType = JSTRING;   //if the '\"' is encountered the DataType is marked as STRING type and
 8000d80:	897a      	ldrh	r2, [r7, #10]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	015b      	lsls	r3, r3, #5
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
            charFound =1;                           // charFound variable is set to 1
 8000d96:	2301      	movs	r3, #1
 8000d98:	823b      	strh	r3, [r7, #16]
            break;
 8000d9a:	e02c      	b.n	8000df6 <JSONParseData+0x33e>
          case 'n': case 'N':                       //if 'n' or 'N' is encountered the DataType is marked as NULL type and
            jParser->jData[currentPos].readDataType = JNULL;     // charFound variable is set to 1
 8000d9c:	897a      	ldrh	r2, [r7, #10]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000dae:	2204      	movs	r2, #4
 8000db0:	701a      	strb	r2, [r3, #0]
            charFound =1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	823b      	strh	r3, [r7, #16]
            break;
 8000db6:	e01e      	b.n	8000df6 <JSONParseData+0x33e>
          case 't': case 'T': case 'f': case 'F':   //if 't' or 'T' or 'f' or 'F' is encountered the DataType  is marked as
            jParser->jData[currentPos].readDataType = JBOOLEAN;  //BOOLEAN and charFound variable is set to 1
 8000db8:	897a      	ldrh	r2, [r7, #10]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
            charFound =1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	823b      	strh	r3, [r7, #16]
            break;
 8000dd2:	e010      	b.n	8000df6 <JSONParseData+0x33e>
          case '-': case '.': case '0': case '1': case '2': case '3': case '4':
          case '5': case '6': case '7': case '8': case'9':   //if any of the numbers or negative sign or decimal point is
            jParser->jData[currentPos].readDataType = JNUMBER;            //encountered the DataType is marked as NUMBER variable and
 8000dd4:	897a      	ldrh	r2, [r7, #10]
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	015b      	lsls	r3, r3, #5
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000de6:	2205      	movs	r2, #5
 8000de8:	701a      	strb	r2, [r3, #0]
            charFound =1;                                    // charFound variable is set to 1
 8000dea:	2301      	movs	r3, #1
 8000dec:	823b      	strh	r3, [r7, #16]
            break;
 8000dee:	e002      	b.n	8000df6 <JSONParseData+0x33e>

          default:
              err = JDATA_TOK_ERR;
 8000df0:	2303      	movs	r3, #3
 8000df2:	81bb      	strh	r3, [r7, #12]
            break;
 8000df4:	bf00      	nop

          }
          charCount++;
 8000df6:	8a7b      	ldrh	r3, [r7, #18]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	827b      	strh	r3, [r7, #18]
       if(charFound)
 8000dfc:	8a3b      	ldrh	r3, [r7, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <JSONParseData+0x350>
       {
        charFound =0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	823b      	strh	r3, [r7, #16]
        break;
 8000e06:	e011      	b.n	8000e2c <JSONParseData+0x374>
       }
       else
        if(charCount>=MAXTOKENBYTES)
 8000e08:	8a7b      	ldrh	r3, [r7, #18]
 8000e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e0c:	d904      	bls.n	8000e18 <JSONParseData+0x360>
       {
           charFound =0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	823b      	strh	r3, [r7, #16]
           return err;
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	e298      	b.n	800134a <JSONParseData+0x892>
       }
       c = *++end;        // Increment the end pointer in the buffer
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	73fb      	strb	r3, [r7, #15]
      while(c)
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f aec5 	bne.w	8000bb6 <JSONParseData+0xfe>
    }                     // End of While loop to find the start of json Value
    start = end;          //The address of the start Variable is made equal to the address of the end pointer
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	61fb      	str	r3, [r7, #28]
    c = *++end;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	3301      	adds	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	73fb      	strb	r3, [r7, #15]
    charCount = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	827b      	strh	r3, [r7, #18]
    while((jParser->stackPos>0)||((c !=',')&&(c!='}')&&(c!=']')))
 8000e40:	e041      	b.n	8000ec6 <JSONParseData+0x40e>
    {
        switch(c)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e46:	d016      	beq.n	8000e76 <JSONParseData+0x3be>
 8000e48:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e4a:	dc28      	bgt.n	8000e9e <JSONParseData+0x3e6>
 8000e4c:	2b7b      	cmp	r3, #123	@ 0x7b
 8000e4e:	d006      	beq.n	8000e5e <JSONParseData+0x3a6>
 8000e50:	2b7b      	cmp	r3, #123	@ 0x7b
 8000e52:	dc24      	bgt.n	8000e9e <JSONParseData+0x3e6>
 8000e54:	2b5b      	cmp	r3, #91	@ 0x5b
 8000e56:	d008      	beq.n	8000e6a <JSONParseData+0x3b2>
 8000e58:	2b5d      	cmp	r3, #93	@ 0x5d
 8000e5a:	d016      	beq.n	8000e8a <JSONParseData+0x3d2>
            if(jParser->stackPos>0)
               jParser->stackPos--;
            //printf("Hit a closed square brackets\n");
            break;
        default:
            break;
 8000e5c:	e01f      	b.n	8000e9e <JSONParseData+0x3e6>
            jParser->stackPos++;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	611a      	str	r2, [r3, #16]
            break;
 8000e68:	e01e      	b.n	8000ea8 <JSONParseData+0x3f0>
            jParser->stackPos++;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
            break;
 8000e74:	e018      	b.n	8000ea8 <JSONParseData+0x3f0>
            if(jParser->stackPos>0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d011      	beq.n	8000ea2 <JSONParseData+0x3ea>
                jParser->stackPos--;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	611a      	str	r2, [r3, #16]
            break;
 8000e88:	e00b      	b.n	8000ea2 <JSONParseData+0x3ea>
            if(jParser->stackPos>0)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <JSONParseData+0x3ee>
               jParser->stackPos--;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
            break;
 8000e9c:	e003      	b.n	8000ea6 <JSONParseData+0x3ee>
            break;
 8000e9e:	bf00      	nop
 8000ea0:	e002      	b.n	8000ea8 <JSONParseData+0x3f0>
            break;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <JSONParseData+0x3f0>
            break;
 8000ea6:	bf00      	nop

        }   //the end pointer is incremented until the stackPos is 0 and ',' or '}' is found
        charCount++;
 8000ea8:	8a7b      	ldrh	r3, [r7, #18]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	827b      	strh	r3, [r7, #18]
        if(charCount>=MAXJSONBYTES)
 8000eae:	8a7b      	ldrh	r3, [r7, #18]
 8000eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eb4:	d301      	bcc.n	8000eba <JSONParseData+0x402>
            return JDATA_TOK_ERR;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e247      	b.n	800134a <JSONParseData+0x892>

      c=*++end;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	73fb      	strb	r3, [r7, #15]
    while((jParser->stackPos>0)||((c !=',')&&(c!='}')&&(c!=']')))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1b9      	bne.n	8000e42 <JSONParseData+0x38a>
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ed2:	d005      	beq.n	8000ee0 <JSONParseData+0x428>
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b7d      	cmp	r3, #125	@ 0x7d
 8000ed8:	d002      	beq.n	8000ee0 <JSONParseData+0x428>
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b5d      	cmp	r3, #93	@ 0x5d
 8000ede:	d1b0      	bne.n	8000e42 <JSONParseData+0x38a>
     }   // End of While loop to find the first ',' or '}' or ']' after value of the json object
     success = strcopy(jParser->jData[currentPos].jsonValue, start , *end, 256, charCount+2); // the value stored from start pointer to end pointer
 8000ee0:	897a      	ldrh	r2, [r7, #10]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	015b      	lsls	r3, r3, #5
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	3398      	adds	r3, #152	@ 0x98
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	f103 0008 	add.w	r0, r3, #8
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	8a7b      	ldrh	r3, [r7, #18]
 8000efa:	3302      	adds	r3, #2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f04:	69f9      	ldr	r1, [r7, #28]
 8000f06:	f7ff fd45 	bl	8000994 <strcopy>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	813b      	strh	r3, [r7, #8]
    jParser->currentPos = end - jParser->buffer;                           //is copied to the json struct jsonValue variable
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	605a      	str	r2, [r3, #4]
    jParser->currP= jParser->buffer + jParser->currentPos;                // the current position pointer is updated
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6852      	ldr	r2, [r2, #4]
 8000f22:	441a      	add	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
    jParser->numTokens++;// the number of tokens parsed are incremented
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	615a      	str	r2, [r3, #20]
    charCount =0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	827b      	strh	r3, [r7, #18]
    if(jParser->stackPos==0)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 8204 	bne.w	8001348 <JSONParseData+0x890>
    {
        if(*end=='}')
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f46:	d104      	bne.n	8000f52 <JSONParseData+0x49a>
        {
            jParser->parserStatus = JSON_END;                         // if '}' is encountered and the stackPos is 0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	731a      	strb	r2, [r3, #12]
            return JDATA_OK;                                          // the parser status is updated to JSON_END
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1fb      	b.n	800134a <JSONParseData+0x892>
        }                                                              // and JDATA_OK is returned
        else if(*end == ',')
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b2c      	cmp	r3, #44	@ 0x2c
 8000f58:	d101      	bne.n	8000f5e <JSONParseData+0x4a6>
            return JDATA_OK;                                           // else if stackPos is 0 and ',' is encountered
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1f5      	b.n	800134a <JSONParseData+0x892>
          else if (*end == ']')                                        // the parserStatus is unchanged from JSON_START
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b5d      	cmp	r3, #93	@ 0x5d
 8000f64:	f040 81f0 	bne.w	8001348 <JSONParseData+0x890>
              return JDATA_INVALID;                                    // JDATA_OK is returned.
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e1ee      	b.n	800134a <JSONParseData+0x892>
    }
//    printf("Object Parsing\n");
  } else if(jParser->rootType == JDATA_ARRAY)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7e1b      	ldrb	r3, [r3, #24]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	f040 81e9 	bne.w	8001348 <JSONParseData+0x890>
  {
      start = tempStr;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	61fb      	str	r3, [r7, #28]
      end = tempStr;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	61bb      	str	r3, [r7, #24]
      charFound = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	823b      	strh	r3, [r7, #16]
      charCount = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	827b      	strh	r3, [r7, #18]
      err = JDATA_OK;
 8000f86:	2301      	movs	r3, #1
 8000f88:	81bb      	strh	r3, [r7, #12]
    currentPos = jParser->numTokens;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	817b      	strh	r3, [r7, #10]
     c= *++start;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	73fb      	strb	r3, [r7, #15]
     while(c)
 8000f9c:	e131      	b.n	8001202 <JSONParseData+0x74a>
      {

          switch(c)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3b22      	subs	r3, #34	@ 0x22
 8000fa2:	2b59      	cmp	r3, #89	@ 0x59
 8000fa4:	f200 8115 	bhi.w	80011d2 <JSONParseData+0x71a>
 8000fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <JSONParseData+0x4f8>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	0800119d 	.word	0x0800119d
 8000fb4:	080011d3 	.word	0x080011d3
 8000fb8:	080011d3 	.word	0x080011d3
 8000fbc:	080011d3 	.word	0x080011d3
 8000fc0:	080011d3 	.word	0x080011d3
 8000fc4:	080011d3 	.word	0x080011d3
 8000fc8:	080011d3 	.word	0x080011d3
 8000fcc:	080011d3 	.word	0x080011d3
 8000fd0:	080011d3 	.word	0x080011d3
 8000fd4:	080011d3 	.word	0x080011d3
 8000fd8:	080011d3 	.word	0x080011d3
 8000fdc:	080011b9 	.word	0x080011b9
 8000fe0:	080011b9 	.word	0x080011b9
 8000fe4:	080011d3 	.word	0x080011d3
 8000fe8:	080011d3 	.word	0x080011d3
 8000fec:	080011b9 	.word	0x080011b9
 8000ff0:	080011b9 	.word	0x080011b9
 8000ff4:	080011b9 	.word	0x080011b9
 8000ff8:	080011b9 	.word	0x080011b9
 8000ffc:	080011b9 	.word	0x080011b9
 8001000:	080011b9 	.word	0x080011b9
 8001004:	080011b9 	.word	0x080011b9
 8001008:	080011b9 	.word	0x080011b9
 800100c:	080011b9 	.word	0x080011b9
 8001010:	080011d3 	.word	0x080011d3
 8001014:	080011d3 	.word	0x080011d3
 8001018:	080011d3 	.word	0x080011d3
 800101c:	080011d3 	.word	0x080011d3
 8001020:	080011d3 	.word	0x080011d3
 8001024:	080011d3 	.word	0x080011d3
 8001028:	080011d3 	.word	0x080011d3
 800102c:	080011d3 	.word	0x080011d3
 8001030:	080011d3 	.word	0x080011d3
 8001034:	080011d3 	.word	0x080011d3
 8001038:	080011d3 	.word	0x080011d3
 800103c:	080011d3 	.word	0x080011d3
 8001040:	08001181 	.word	0x08001181
 8001044:	080011d3 	.word	0x080011d3
 8001048:	080011d3 	.word	0x080011d3
 800104c:	080011d3 	.word	0x080011d3
 8001050:	080011d3 	.word	0x080011d3
 8001054:	080011d3 	.word	0x080011d3
 8001058:	080011d3 	.word	0x080011d3
 800105c:	080011d3 	.word	0x080011d3
 8001060:	08001165 	.word	0x08001165
 8001064:	080011d3 	.word	0x080011d3
 8001068:	080011d3 	.word	0x080011d3
 800106c:	080011d3 	.word	0x080011d3
 8001070:	080011d3 	.word	0x080011d3
 8001074:	080011d3 	.word	0x080011d3
 8001078:	08001181 	.word	0x08001181
 800107c:	080011d3 	.word	0x080011d3
 8001080:	080011d3 	.word	0x080011d3
 8001084:	080011d3 	.word	0x080011d3
 8001088:	080011d3 	.word	0x080011d3
 800108c:	080011d3 	.word	0x080011d3
 8001090:	080011d3 	.word	0x080011d3
 8001094:	0800113f 	.word	0x0800113f
 8001098:	080011d3 	.word	0x080011d3
 800109c:	080011d3 	.word	0x080011d3
 80010a0:	080011d3 	.word	0x080011d3
 80010a4:	080011d3 	.word	0x080011d3
 80010a8:	080011d3 	.word	0x080011d3
 80010ac:	080011d3 	.word	0x080011d3
 80010b0:	080011d3 	.word	0x080011d3
 80010b4:	080011d3 	.word	0x080011d3
 80010b8:	080011d3 	.word	0x080011d3
 80010bc:	080011d3 	.word	0x080011d3
 80010c0:	08001181 	.word	0x08001181
 80010c4:	080011d3 	.word	0x080011d3
 80010c8:	080011d3 	.word	0x080011d3
 80010cc:	080011d3 	.word	0x080011d3
 80010d0:	080011d3 	.word	0x080011d3
 80010d4:	080011d3 	.word	0x080011d3
 80010d8:	080011d3 	.word	0x080011d3
 80010dc:	080011d3 	.word	0x080011d3
 80010e0:	08001165 	.word	0x08001165
 80010e4:	080011d3 	.word	0x080011d3
 80010e8:	080011d3 	.word	0x080011d3
 80010ec:	080011d3 	.word	0x080011d3
 80010f0:	080011d3 	.word	0x080011d3
 80010f4:	080011d3 	.word	0x080011d3
 80010f8:	08001181 	.word	0x08001181
 80010fc:	080011d3 	.word	0x080011d3
 8001100:	080011d3 	.word	0x080011d3
 8001104:	080011d3 	.word	0x080011d3
 8001108:	080011d3 	.word	0x080011d3
 800110c:	080011d3 	.word	0x080011d3
 8001110:	080011d3 	.word	0x080011d3
 8001114:	08001119 	.word	0x08001119
          {
          case '{':
            jParser->jData[currentPos].readDataType = JOBJECT;
 8001118:	897a      	ldrh	r2, [r7, #10]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
            charFound = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	823b      	strh	r3, [r7, #16]
            break;
 800113c:	e04c      	b.n	80011d8 <JSONParseData+0x720>
          case '[':
            jParser->jData[currentPos].readDataType = JARRAY;
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	015b      	lsls	r3, r3, #5
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
            charFound =1;
 800115e:	2301      	movs	r3, #1
 8001160:	823b      	strh	r3, [r7, #16]
            break;
 8001162:	e039      	b.n	80011d8 <JSONParseData+0x720>
          case 'n': case 'N':
            jParser->jData[currentPos].readDataType = JNULL;
 8001164:	897a      	ldrh	r2, [r7, #10]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001176:	2204      	movs	r2, #4
 8001178:	701a      	strb	r2, [r3, #0]
            charFound = 1;
 800117a:	2301      	movs	r3, #1
 800117c:	823b      	strh	r3, [r7, #16]
            break;
 800117e:	e02b      	b.n	80011d8 <JSONParseData+0x720>
          case 't': case 'T': case 'f': case 'F':
            jParser->jData[currentPos].readDataType = JBOOLEAN;
 8001180:	897a      	ldrh	r2, [r7, #10]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
            charFound =1;
 8001196:	2301      	movs	r3, #1
 8001198:	823b      	strh	r3, [r7, #16]
            break;
 800119a:	e01d      	b.n	80011d8 <JSONParseData+0x720>
          case '\"':
            jParser->jData[currentPos].readDataType = JSTRING;
 800119c:	897a      	ldrh	r2, [r7, #10]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	440b      	add	r3, r1
 80011aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80011ae:	2202      	movs	r2, #2
 80011b0:	701a      	strb	r2, [r3, #0]
            charFound =1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	823b      	strh	r3, [r7, #16]
            break;
 80011b6:	e00f      	b.n	80011d8 <JSONParseData+0x720>
          case '-': case'.': case '1': case '2': case '3':
          case '4': case '5': case '6': case '7': case '8':
          case '9':
            jParser->jData[currentPos].readDataType = JNUMBER;
 80011b8:	897a      	ldrh	r2, [r7, #10]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80011ca:	2205      	movs	r2, #5
 80011cc:	701a      	strb	r2, [r3, #0]
            charFound = 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	823b      	strh	r3, [r7, #16]
          default:
            err = JDATA_TOK_ERR;
 80011d2:	2303      	movs	r3, #3
 80011d4:	81bb      	strh	r3, [r7, #12]
            break;
 80011d6:	bf00      	nop
          }
          charCount++;
 80011d8:	8a7b      	ldrh	r3, [r7, #18]
 80011da:	3301      	adds	r3, #1
 80011dc:	827b      	strh	r3, [r7, #18]
          if(charFound)
 80011de:	8a3b      	ldrh	r3, [r7, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <JSONParseData+0x732>
          {
              charFound=0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	823b      	strh	r3, [r7, #16]
              break;
 80011e8:	e00f      	b.n	800120a <JSONParseData+0x752>
          }
          if(charCount>=MAXTOKENBYTES)
 80011ea:	8a7b      	ldrh	r3, [r7, #18]
 80011ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ee:	d902      	bls.n	80011f6 <JSONParseData+0x73e>
            return err;
 80011f0:	89bb      	ldrh	r3, [r7, #12]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	e0a9      	b.n	800134a <JSONParseData+0x892>
           c = *++start;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3301      	adds	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	73fb      	strb	r3, [r7, #15]
     while(c)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f aeca 	bne.w	8000f9e <JSONParseData+0x4e6>
      }
      charFound =0;
 800120a:	2300      	movs	r3, #0
 800120c:	823b      	strh	r3, [r7, #16]
      end = start;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	61bb      	str	r3, [r7, #24]
      c= *++end;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	3301      	adds	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	73fb      	strb	r3, [r7, #15]
      charCount=0;
 800121e:	2300      	movs	r3, #0
 8001220:	827b      	strh	r3, [r7, #18]
       while((jParser->stackPos!=0)||((c !=',')&&(c!='}')&&(c!=']')))
 8001222:	e040      	b.n	80012a6 <JSONParseData+0x7ee>
       {

           switch(c)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b7d      	cmp	r3, #125	@ 0x7d
 8001228:	d016      	beq.n	8001258 <JSONParseData+0x7a0>
 800122a:	2b7d      	cmp	r3, #125	@ 0x7d
 800122c:	dc28      	bgt.n	8001280 <JSONParseData+0x7c8>
 800122e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001230:	d006      	beq.n	8001240 <JSONParseData+0x788>
 8001232:	2b7b      	cmp	r3, #123	@ 0x7b
 8001234:	dc24      	bgt.n	8001280 <JSONParseData+0x7c8>
 8001236:	2b5b      	cmp	r3, #91	@ 0x5b
 8001238:	d008      	beq.n	800124c <JSONParseData+0x794>
 800123a:	2b5d      	cmp	r3, #93	@ 0x5d
 800123c:	d016      	beq.n	800126c <JSONParseData+0x7b4>
               case ']':
                if(jParser->stackPos>0)
                    jParser->stackPos--;
                break;
               default:
                break;
 800123e:	e01f      	b.n	8001280 <JSONParseData+0x7c8>
                   jParser->stackPos++;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	611a      	str	r2, [r3, #16]
                   break;
 800124a:	e01e      	b.n	800128a <JSONParseData+0x7d2>
                jParser->stackPos++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	611a      	str	r2, [r3, #16]
                break;
 8001256:	e018      	b.n	800128a <JSONParseData+0x7d2>
                if(jParser->stackPos>0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d011      	beq.n	8001284 <JSONParseData+0x7cc>
                    jParser->stackPos--;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
                break;
 800126a:	e00b      	b.n	8001284 <JSONParseData+0x7cc>
                if(jParser->stackPos>0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <JSONParseData+0x7d0>
                    jParser->stackPos--;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	611a      	str	r2, [r3, #16]
                break;
 800127e:	e003      	b.n	8001288 <JSONParseData+0x7d0>
                break;
 8001280:	bf00      	nop
 8001282:	e002      	b.n	800128a <JSONParseData+0x7d2>
                break;
 8001284:	bf00      	nop
 8001286:	e000      	b.n	800128a <JSONParseData+0x7d2>
                break;
 8001288:	bf00      	nop
           }
           charCount++;
 800128a:	8a7b      	ldrh	r3, [r7, #18]
 800128c:	3301      	adds	r3, #1
 800128e:	827b      	strh	r3, [r7, #18]
           if(charCount>MAXTOKENBYTES)
 8001290:	8a7b      	ldrh	r3, [r7, #18]
 8001292:	2b80      	cmp	r3, #128	@ 0x80
 8001294:	d901      	bls.n	800129a <JSONParseData+0x7e2>
            return JDATA_TOK_ERR;
 8001296:	2303      	movs	r3, #3
 8001298:	e057      	b.n	800134a <JSONParseData+0x892>
          c = *++end;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
       while((jParser->stackPos!=0)||((c !=',')&&(c!='}')&&(c!=']')))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1ba      	bne.n	8001224 <JSONParseData+0x76c>
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80012b2:	d005      	beq.n	80012c0 <JSONParseData+0x808>
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012b8:	d002      	beq.n	80012c0 <JSONParseData+0x808>
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b5d      	cmp	r3, #93	@ 0x5d
 80012be:	d1b1      	bne.n	8001224 <JSONParseData+0x76c>
       }
    success = strcopy(jParser->jData[currentPos].jsonValue, start , *end, 256, charCount+2); // the value stored from start pointer to end pointer
 80012c0:	897a      	ldrh	r2, [r7, #10]
 80012c2:	4613      	mov	r3, r2
 80012c4:	015b      	lsls	r3, r3, #5
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	3398      	adds	r3, #152	@ 0x98
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	f103 0008 	add.w	r0, r3, #8
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	8a7b      	ldrh	r3, [r7, #18]
 80012da:	3302      	adds	r3, #2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e4:	69f9      	ldr	r1, [r7, #28]
 80012e6:	f7ff fb55 	bl	8000994 <strcopy>
 80012ea:	4603      	mov	r3, r0
 80012ec:	813b      	strh	r3, [r7, #8]
    jParser->currentPos = end - jParser->buffer;                           //is copied to the json struct jsonValue variable
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	1ad2      	subs	r2, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	605a      	str	r2, [r3, #4]
    jParser->currP = jParser->buffer + jParser->currentPos;                // the current position pointer is updated
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6852      	ldr	r2, [r2, #4]
 8001302:	441a      	add	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
    jParser->numTokens++;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	615a      	str	r2, [r3, #20]
    charCount =0;                                                           // the number of tokens parsed are incremented
 8001312:	2300      	movs	r3, #0
 8001314:	827b      	strh	r3, [r7, #18]
    if(jParser->stackPos==0)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d114      	bne.n	8001348 <JSONParseData+0x890>
    {
        if(*end==']')
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b5d      	cmp	r3, #93	@ 0x5d
 8001324:	d104      	bne.n	8001330 <JSONParseData+0x878>
        {
            jParser->parserStatus = JSON_END;                         // if '}' is encountered and the stackPos is 0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	731a      	strb	r2, [r3, #12]
            return JDATA_OK;                                          // the parser status is updated to JSON_END
 800132c:	2301      	movs	r3, #1
 800132e:	e00c      	b.n	800134a <JSONParseData+0x892>
        }                                                              // and JDATA_OK is returned
        else if(*end == ',')
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b2c      	cmp	r3, #44	@ 0x2c
 8001336:	d101      	bne.n	800133c <JSONParseData+0x884>
            return JDATA_OK;                                           // else if stackPos is 0 and ',' is encountered
 8001338:	2301      	movs	r3, #1
 800133a:	e006      	b.n	800134a <JSONParseData+0x892>
          else if (*end == '}')                                        // the parserStatus is unchanged from JSON_START
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b7d      	cmp	r3, #125	@ 0x7d
 8001342:	d101      	bne.n	8001348 <JSONParseData+0x890>
              return JDATA_INVALID;                                    // JDATA_OK is returned.
 8001344:	2304      	movs	r3, #4
 8001346:	e000      	b.n	800134a <JSONParseData+0x892>
    }
//    printf("Array Parsing!!!\n");
  }
return JDATA_OK;
 8001348:	2301      	movs	r3, #1

}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop

08001354 <SearchToken>:
//-------------
//- This function takes the key to be searched in the Parsed json Data
//- returns pointer to the structure containing the needed key

struct jsonReadToken* SearchToken(struct jsonParser *jParser, const char *searchString)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	unsigned short int i = 0, tokens =0;
 800135e:	2300      	movs	r3, #0
 8001360:	82fb      	strh	r3, [r7, #22]
 8001362:	2300      	movs	r3, #0
 8001364:	82bb      	strh	r3, [r7, #20]
    unsigned long hashValue=0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
    struct jsonReadToken *jData;

    tokens = jParser->numTokens;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	82bb      	strh	r3, [r7, #20]
    hashValue = HashCal((char*)searchString);
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff faf1 	bl	8000958 <HashCal>
 8001376:	6138      	str	r0, [r7, #16]
    for(i=0; i<tokens; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	82fb      	strh	r3, [r7, #22]
 800137c:	e02c      	b.n	80013d8 <SearchToken+0x84>
    {
        if(hashValue == jParser->jData[i].hashValue)
 800137e:	8afa      	ldrh	r2, [r7, #22]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	339c      	adds	r3, #156	@ 0x9c
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	429a      	cmp	r2, r3
 8001394:	d11d      	bne.n	80013d2 <SearchToken+0x7e>
        {
            if(strcmp(searchString,jParser->jData[i].keyValue)==0)
 8001396:	8afa      	ldrh	r2, [r7, #22]
 8001398:	4613      	mov	r3, r2
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	3318      	adds	r3, #24
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	3304      	adds	r3, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	6838      	ldr	r0, [r7, #0]
 80013ac:	f7fe ff14 	bl	80001d8 <strcmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10b      	bne.n	80013ce <SearchToken+0x7a>
            {jData = &jParser->jData[i];
 80013b6:	8afa      	ldrh	r2, [r7, #22]
 80013b8:	4613      	mov	r3, r2
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	3318      	adds	r3, #24
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	60fb      	str	r3, [r7, #12]
                return jData;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	e009      	b.n	80013e2 <SearchToken+0x8e>
            }
            else
                return NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e007      	b.n	80013e2 <SearchToken+0x8e>
    for(i=0; i<tokens; i++)
 80013d2:	8afb      	ldrh	r3, [r7, #22]
 80013d4:	3301      	adds	r3, #1
 80013d6:	82fb      	strh	r3, [r7, #22]
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3ce      	bcc.n	800137e <SearchToken+0x2a>
        }
    }
    return NULL;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <jwOpen>:
// - Open writing of JSON starting with rootType = JW_OBJECT
// - Initialize with user string buffer of length buflen
// - isPretty = JW_PRETTY adds \n and spaces to prettify output (else JW_COMPACT)
//
void jwOpen(JWC_DECL char *buffer, unsigned short int buflen, enum jwNodeType rootType, unsigned char isPretty)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	4611      	mov	r1, r2
 80013f6:	461a      	mov	r2, r3
 80013f8:	460b      	mov	r3, r1
 80013fa:	80fb      	strh	r3, [r7, #6]
 80013fc:	4613      	mov	r3, r2
 80013fe:	717b      	strb	r3, [r7, #5]
    memset(buffer, 0, buflen);      // zap the whole destination buffer
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	461a      	mov	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f000 fe58 	bl	80020bc <memset>
//	memorySet(buffer, 0, buflen);
    JWC(buffer) = buffer;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	601a      	str	r2, [r3, #0]
    JWC(buflen) = buflen;
 8001412:	88fa      	ldrh	r2, [r7, #6]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
    JWC(bufp) = buffer;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	609a      	str	r2, [r3, #8]
    if(rootType == JW_ARRAY)
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d017      	beq.n	8001454 <jwOpen+0x6a>
//        fprintf(stderr, "Wrong root Type, cannot open");
        return;
    }
    else
    {
        JWC(nodeStack)[0].nodeType = rootType;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        JWC(nodeStack)[0].elementNo = 0;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	639a      	str	r2, [r3, #56]	@ 0x38
        JWC(stackpos) = 0;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	65da      	str	r2, [r3, #92]	@ 0x5c
        JWC(error) = JWRITE_OK;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
        JWC(callNo) = 1;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
        JWC(isPretty) = isPretty;
 8001444:	7e3a      	ldrb	r2, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60
        jwPutch(JWC_PARAM '{');
 800144a:	217b      	movs	r1, #123	@ 0x7b
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fa18 	bl	8001882 <jwPutch>
 8001452:	e000      	b.n	8001456 <jwOpen+0x6c>
        return;
 8001454:	bf00      	nop
    }
}
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <jwClose>:
// - Closes the root JSON object started by jwOpen()
// - returns error code
//

int jwClose(JWC_DECL0)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    if(JWC(error) == JWRITE_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d113      	bne.n	8001494 <jwClose+0x38>
    {
        if(JWC(stackpos) == 0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10c      	bne.n	800148e <jwClose+0x32>
        {
//            enum jwNodeType node = JWC(nodeStack)[0].nodeType;  // commented since it not used
            if(JWC(isPretty))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <jwClose+0x28>
                jwPutch(JWC_PARAM '\n');
 800147c:	210a      	movs	r1, #10
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f9ff 	bl	8001882 <jwPutch>
            jwPutch(JWC_PARAM '}');
 8001484:	217d      	movs	r1, #125	@ 0x7d
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f9fb 	bl	8001882 <jwPutch>
 800148c:	e002      	b.n	8001494 <jwClose+0x38>
        } else {
           JWC(error) = JWRITE_NEST_ERROR; // Nesting error, not all objects closed when jwClose() called
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2206      	movs	r2, #6
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
    }
    return JWC(error);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <jwEnd>:
// jwEnd()
//---------
// - End the current object

int jwEnd( JWC_DECL0)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    if(JWC(error) == JWRITE_OK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11c      	bne.n	80014ea <jwEnd+0x4a>
    {
        enum jwNodeType node;
        int lastElemNo = JWC(nodeStack)[JWC(stackpos)].elementNo;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	3306      	adds	r3, #6
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	60fb      	str	r3, [r7, #12]
        node = jwPop(JWC_PARAM0);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f9be 	bl	8001842 <jwPop>
 80014c6:	4603      	mov	r3, r0
 80014c8:	72fb      	strb	r3, [r7, #11]
        if(lastElemNo > 0)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	dd02      	ble.n	80014d6 <jwEnd+0x36>
            jwPretty(JWC_PARAM0);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f96b 	bl	80017ac <jwPretty>
        jwPutch(JWC_PARAM(node == JW_OBJECT)? '}': ']');
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <jwEnd+0x40>
 80014dc:	237d      	movs	r3, #125	@ 0x7d
 80014de:	e000      	b.n	80014e2 <jwEnd+0x42>
 80014e0:	235d      	movs	r3, #93	@ 0x5d
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f9cc 	bl	8001882 <jwPutch>

    }
    return JWC(error);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <jwObj_raw>:
//jwObjraw()
//----------
//- put raw string to object (i.e. contents of raw text without quotes)
//
void jwObj_raw(JWC_DECL char *key, char *value)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fa12 	bl	800192e <_jwObj>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d103      	bne.n	8001518 <jwObj_raw+0x22>
        jwPutraw(JWC_PARAM value);
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9f4 	bl	8001900 <jwPutraw>
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <jwObj_string>:
//jwObj_string()
//--------------
// - put "quoted" string to object
//
void jwObj_string(JWC_DECL char *key, char *value)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f9fd 	bl	800192e <_jwObj>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <jwObj_string+0x22>
        jwPutstr(JWC_PARAM value);
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f9c1 	bl	80018c4 <jwPutstr>

}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <jwObj_int>:
//-----------
//- put integer value to the object
//

void jwObj_int(JWC_DECL char *key, int value)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
    modp_itoa10(value, JWC(tempbuf));
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	330c      	adds	r3, #12
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fa83 	bl	8001a68 <modp_itoa10>
    jwObj_raw(JWC_PARAM key, JWC(tempbuf));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	330c      	adds	r3, #12
 8001566:	461a      	mov	r2, r3
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff ffc3 	bl	80014f6 <jwObj_raw>

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <jwObj_double>:
//--------------
//- put double value to the object
//

void jwObj_double(JWC_DECL char *key, double value)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	ed87 0b00 	vstr	d0, [r7]
    modp_dtoa2(value, JWC(tempbuf), 6);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	330c      	adds	r3, #12
 800158a:	2106      	movs	r1, #6
 800158c:	4618      	mov	r0, r3
 800158e:	ed97 0b00 	vldr	d0, [r7]
 8001592:	f000 faa9 	bl	8001ae8 <modp_dtoa2>
    jwObj_raw(JWC_PARAM key, JWC(tempbuf));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	461a      	mov	r2, r3
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7ff ffa9 	bl	80014f6 <jwObj_raw>

}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <jwObj_bool>:
//------------
//- put true/false value to the object
//

void jwObj_bool(JWC_DECL char *key, int oneOrZero)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
    jwObj_raw(JWC_PARAM key, (oneOrZero)? "true" : "false");
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <jwObj_bool+0x16>
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <jwObj_bool+0x2c>)
 80015c0:	e000      	b.n	80015c4 <jwObj_bool+0x18>
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <jwObj_bool+0x30>)
 80015c4:	461a      	mov	r2, r3
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff ff94 	bl	80014f6 <jwObj_raw>
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08002130 	.word	0x08002130
 80015dc:	08002138 	.word	0x08002138

080015e0 <jwObj_null>:
//------------
//- put NULL value to the object
//

void jwObj_null(JWC_DECL char *key)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    jwObj_raw(JWC_PARAM key, "null");
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <jwObj_null+0x1c>)
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff81 	bl	80014f6 <jwObj_raw>

}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	08002140 	.word	0x08002140

08001600 <jwObj_object>:
//--------------
// - put object in Object
//

void jwObj_object(JWC_DECL char *key)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    if(_jwObj(JWC_PARAM key) == JWRITE_OK)
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f98e 	bl	800192e <_jwObj>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d107      	bne.n	8001628 <jwObj_object+0x28>
    {
        jwPutch(JWC_PARAM '{');
 8001618:	217b      	movs	r1, #123	@ 0x7b
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f931 	bl	8001882 <jwPutch>
        jwPush(JWC_PARAM JW_OBJECT);
 8001620:	2101      	movs	r1, #1
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8e4 	bl	80017f0 <jwPush>
    }
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <jwObj_array>:
//jwObj_array()
//-------------
//- Put Array in object
//
void jwObj_array(JWC_DECL char *key)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f976 	bl	800192e <_jwObj>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <jwObj_array+0x28>
    {
        jwPutch(JWC_PARAM '[');
 8001648:	215b      	movs	r1, #91	@ 0x5b
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f919 	bl	8001882 <jwPutch>
        jwPush(JWC_PARAM JW_ARRAY);
 8001650:	2102      	movs	r1, #2
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f8cc 	bl	80017f0 <jwPush>
    }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <jwArr_raw>:
//jwArr_raw()
//-----------
//- put raw string to array (i.e. contents of raw text without quotes)
//
void jwArr_raw(JWC_DECL char *rawtext)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    if(_jwArr(JWC_PARAM0)==JWRITE_OK)
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f9a6 	bl	80019bc <_jwArr>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <jwArr_raw+0x1e>
        jwPutraw(JWC_PARAM rawtext);
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f941 	bl	8001900 <jwPutraw>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <jwArr_string>:
//jwArr_string()
//-------------
//- put "quoted" string to array
//
void jwArr_string(JWC_DECL char *value)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
    if(_jwArr(JWC_PARAM0)==JWRITE_OK)
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f993 	bl	80019bc <_jwArr>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <jwArr_string+0x1e>
        jwPutstr(JWC_PARAM value);
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f910 	bl	80018c4 <jwPutstr>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <jwArr_int>:
//jwArr_int()
//-----------
//- inserts integer to the array
//
void jwArr_int(JWC_DECL int value)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    modp_itoa10(value, JWC(tempbuf));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	330c      	adds	r3, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f000 f9d3 	bl	8001a68 <modp_itoa10>
    jwArr_raw(JWC_PARAM JWC(tempbuf));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	330c      	adds	r3, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffc9 	bl	8001660 <jwArr_raw>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <jwArr_double>:
//jwArr_double()
//--------------
//- insert integer to the array
//
void jwArr_double(JWC_DECL double value)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	ed87 0b00 	vstr	d0, [r7]
    modp_dtoa2(value, JWC(tempbuf), 6);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	330c      	adds	r3, #12
 80016e6:	2106      	movs	r1, #6
 80016e8:	4618      	mov	r0, r3
 80016ea:	ed97 0b00 	vldr	d0, [r7]
 80016ee:	f000 f9fb 	bl	8001ae8 <modp_dtoa2>
    jwArr_raw(JWC_PARAM JWC(tempbuf));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	330c      	adds	r3, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff ffb1 	bl	8001660 <jwArr_raw>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <jwArr_bool>:
//jwArr_bool()
//------------
//- insert bool value into the array
//
void jwArr_bool(JWC_DECL int oneorZero)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    jwArr_raw(JWC_PARAM (oneorZero)? "true" : "false");
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <jwArr_bool+0x14>
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <jwArr_bool+0x28>)
 800171a:	e000      	b.n	800171e <jwArr_bool+0x16>
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <jwArr_bool+0x2c>)
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff9d 	bl	8001660 <jwArr_raw>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08002130 	.word	0x08002130
 8001734:	08002138 	.word	0x08002138

08001738 <jwArr_null>:
//jwArr_null()
//------------
//- insert null value into the array
//
void jwArr_null(JWC_DECL0)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    jwArr_raw(JWC_PARAM "null");
 8001740:	4903      	ldr	r1, [pc, #12]	@ (8001750 <jwArr_null+0x18>)
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff8c 	bl	8001660 <jwArr_raw>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08002140 	.word	0x08002140

08001754 <jwArr_object>:
//jwArr_object()
//--------------
//- insert object inside an array
//
void jwArr_object(JWC_DECL0)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    if(_jwArr(JWC_PARAM0)==JWRITE_OK)
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f92d 	bl	80019bc <_jwArr>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <jwArr_object+0x24>
    {
        jwPutch(JWC_PARAM '{');
 8001768:	217b      	movs	r1, #123	@ 0x7b
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f889 	bl	8001882 <jwPutch>
        jwPush(JWC_PARAM JW_OBJECT);
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f83c 	bl	80017f0 <jwPush>
    }
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <jwArr_array>:
//jwArr_array()
//-------------
//- insert array inside and Array
//
void jwArr_array(JWC_DECL0)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    if(_jwArr(JWC_PARAM0)==JWRITE_OK)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f917 	bl	80019bc <_jwArr>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <jwArr_array+0x24>
    {
        jwPutch(JWC_PARAM '[');
 8001794:	215b      	movs	r1, #91	@ 0x5b
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f873 	bl	8001882 <jwPutch>
        jwPush(JWC_PARAM JW_ARRAY);
 800179c:	2102      	movs	r1, #2
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f826 	bl	80017f0 <jwPush>
    }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <jwPretty>:
//jwPretty()
//---------
//-  this introduces indentation to the JSON data
//
void jwPretty(JWC_DECL0)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	unsigned short int i;
    if(JWC(isPretty))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d012      	beq.n	80017e2 <jwPretty+0x36>
    {
        jwPutch(JWC_PARAM '\n');
 80017bc:	210a      	movs	r1, #10
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f85f 	bl	8001882 <jwPutch>
        for(i=0; i<JWC(stackpos)+1; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	81fb      	strh	r3, [r7, #14]
 80017c8:	e006      	b.n	80017d8 <jwPretty+0x2c>
            jwPutraw(JWC_PARAM "    ");
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <jwPretty+0x40>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f897 	bl	8001900 <jwPutraw>
        for(i=0; i<JWC(stackpos)+1; i++)
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	3301      	adds	r3, #1
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017dc:	89fb      	ldrh	r3, [r7, #14]
 80017de:	429a      	cmp	r2, r3
 80017e0:	daf3      	bge.n	80017ca <jwPretty+0x1e>
    }
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08002254 	.word	0x08002254

080017f0 <jwPush>:
//--------
//- Push new object / array to the stack
//

void jwPush(JWC_DECL enum jwNodeType nodeType)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
    if((JWC(stackpos)+1)>= JWRITE_STACK_DEPTH)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	2b03      	cmp	r3, #3
 8001802:	dd03      	ble.n	800180c <jwPush+0x1c>
        JWC(error) = JWRITE_STACK_FULL;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
    else
    {
        JWC(nodeStack[++JWC(stackpos)]).nodeType = nodeType;
        JWC(nodeStack[JWC(stackpos)]).elementNo = 0;
    }
}
 800180a:	e014      	b.n	8001836 <jwPush+0x46>
        JWC(nodeStack[++JWC(stackpos)]).nodeType = nodeType;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	3306      	adds	r3, #6
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	711a      	strb	r2, [r3, #4]
        JWC(nodeStack[JWC(stackpos)]).elementNo = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	3306      	adds	r3, #6
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <jwPop>:
//jwPop()
// - Pops the latest node from the stack
//

enum jwNodeType jwPop(JWC_DECL0)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    enum jwNodeType retval = JWC(nodeStack[JWC(stackpos)]).nodeType;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	3306      	adds	r3, #6
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	791b      	ldrb	r3, [r3, #4]
 8001858:	73fb      	strb	r3, [r7, #15]
    if(JWC(stackpos)==0)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <jwPop+0x28>
        JWC(error) = JWRITE_STACK_EMPTY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2205      	movs	r2, #5
 8001866:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001868:	e004      	b.n	8001874 <jwPop+0x32>
    else
        JWC(stackpos)--;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186e:	1e5a      	subs	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	65da      	str	r2, [r3, #92]	@ 0x5c
    return retval;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <jwPutch>:
//jwPutch()
//---------
//- Insert character to the object
//
void jwPutch(JWC_DECL char c)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
    if((unsigned int)(JWC(bufp)-JWC(buffer))>=JWC(buflen))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d303      	bcc.n	80018aa <jwPutch+0x28>
    {
        JWC(error)= JWRITE_BUF_FULL;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    else
    {
        *JWC(bufp)++ = c;
    }
}
 80018a8:	e006      	b.n	80018b8 <jwPutch+0x36>
        *JWC(bufp)++ = c;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6091      	str	r1, [r2, #8]
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	701a      	strb	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <jwPutstr>:
//jwPutstr()
//----------
//- Put string enclosed in quotes
//
void jwPutstr(JWC_DECL char *str)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
    jwPutch(JWC_PARAM '\"');
 80018ce:	2122      	movs	r1, #34	@ 0x22
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffd6 	bl	8001882 <jwPutch>
    while(*str != '\0')
 80018d6:	e007      	b.n	80018e8 <jwPutstr+0x24>
    {
        jwPutch(JWC_PARAM *str++);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	603a      	str	r2, [r7, #0]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffcd 	bl	8001882 <jwPutch>
    while(*str != '\0')
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f3      	bne.n	80018d8 <jwPutstr+0x14>
    }
    jwPutch(JWC_PARAM '\"');
 80018f0:	2122      	movs	r1, #34	@ 0x22
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffc5 	bl	8001882 <jwPutch>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <jwPutraw>:
//jwPutraw()
//----------
//- put raw string in the data
//
void jwPutraw(JWC_DECL char *str)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    while(*str !='\0')
 800190a:	e007      	b.n	800191c <jwPutraw+0x1c>
            jwPutch(JWC_PARAM *str++);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	603a      	str	r2, [r7, #0]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb3 	bl	8001882 <jwPutch>
    while(*str !='\0')
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f3      	bne.n	800190c <jwPutraw+0xc>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_jwObj>:
//- checks current node is OBJECT
//- adds comma if required
//- adds "key":
//
int _jwObj(JWC_DECL char *key)
{
 800192e:	b590      	push	{r4, r7, lr}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
    if(JWC(error)==JWRITE_OK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d137      	bne.n	80019b0 <_jwObj+0x82>
    {
        JWC(callNo)++;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
        if(JWC(nodeStack)[JWC(stackpos)].nodeType != JW_OBJECT)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	3306      	adds	r3, #6
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	791b      	ldrb	r3, [r3, #4]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d003      	beq.n	8001964 <_jwObj+0x36>
            JWC(error) = JWRITE_NOT_OBJECT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001962:	e012      	b.n	800198a <_jwObj+0x5c>
        else if(JWC(nodeStack)[JWC(stackpos)].elementNo++ > 0)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	1d8b      	adds	r3, r1, #6
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	1c50      	adds	r0, r2, #1
 8001974:	687c      	ldr	r4, [r7, #4]
 8001976:	1d8b      	adds	r3, r1, #6
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4423      	add	r3, r4
 800197c:	6098      	str	r0, [r3, #8]
 800197e:	2a00      	cmp	r2, #0
 8001980:	dd03      	ble.n	800198a <_jwObj+0x5c>
            jwPutch(JWC_PARAM ',');
 8001982:	212c      	movs	r1, #44	@ 0x2c
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff7c 	bl	8001882 <jwPutch>
        jwPretty(JWC_PARAM0);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff0e 	bl	80017ac <jwPretty>
        jwPutstr(JWC_PARAM key);
 8001990:	6839      	ldr	r1, [r7, #0]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff96 	bl	80018c4 <jwPutstr>
        jwPutch(JWC_PARAM ':');
 8001998:	213a      	movs	r1, #58	@ 0x3a
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff71 	bl	8001882 <jwPutch>
        if(JWC(isPretty))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <_jwObj+0x82>
            jwPutch(JWC_PARAM ' ');
 80019a8:	2120      	movs	r1, #32
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff69 	bl	8001882 <jwPutch>
    }
    return JWC(error);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}

080019bc <_jwArr>:
//- checks current node is array
//- adds comma if required
//

int _jwArr(JWC_DECL0)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    if(JWC(error)==JWRITE_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d127      	bne.n	8001a1c <_jwArr+0x60>
    {
        JWC(callNo)++;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	631a      	str	r2, [r3, #48]	@ 0x30
        if(JWC(nodeStack)[JWC(stackpos)].nodeType != JW_ARRAY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	3306      	adds	r3, #6
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <_jwArr+0x34>
            JWC(error)= JWRITE_NOT_ARRAY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019ee:	e012      	b.n	8001a16 <_jwArr+0x5a>
        else if(JWC(nodeStack)[JWC(stackpos)].elementNo++>0)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	1d8b      	adds	r3, r1, #6
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	1c50      	adds	r0, r2, #1
 8001a00:	687c      	ldr	r4, [r7, #4]
 8001a02:	1d8b      	adds	r3, r1, #6
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4423      	add	r3, r4
 8001a08:	6098      	str	r0, [r3, #8]
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	dd03      	ble.n	8001a16 <_jwArr+0x5a>
            jwPutch(JWC_PARAM ',');
 8001a0e:	212c      	movs	r1, #44	@ 0x2c
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff36 	bl	8001882 <jwPutch>
        jwPretty(JWC_PARAM0);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff fec8 	bl	80017ac <jwPretty>
    }
    return JWC(error);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}

08001a28 <strreverse>:

//MODP Value to String Functions
//------------------------------
//
static void strreverse(char *begin, char *end)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
    char aux;
    while(end > begin)
 8001a32:	e00d      	b.n	8001a50 <strreverse+0x28>
    {
         aux = *end;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	73fb      	strb	r3, [r7, #15]
         *end-- = *begin;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	603a      	str	r2, [r7, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	701a      	strb	r2, [r3, #0]
         *begin++ = aux;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	701a      	strb	r2, [r3, #0]
    while(end > begin)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8ed      	bhi.n	8001a34 <strreverse+0xc>
    }

}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <modp_itoa10>:

//modp_itoa10()
//- converts integer values to string
//
void modp_itoa10(int32_t value, char *str)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
    char *wstr = str;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
    //Take care of the sign
    unsigned int uvalue = (value<0)? -value : value;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bfb8      	it	lt
 8001a7c:	425b      	neglt	r3, r3
 8001a7e:	60bb      	str	r3, [r7, #8]
    //Conversion , number is reversed
    do *wstr++ = (char)(48+(uvalue%10)); while(uvalue /= 10);
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <modp_itoa10+0x78>)
 8001a84:	fba3 2301 	umull	r2, r3, r3, r1
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	1aca      	subs	r2, r1, r3
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	60f9      	str	r1, [r7, #12]
 8001a9c:	3230      	adds	r2, #48	@ 0x30
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <modp_itoa10+0x78>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e5      	bne.n	8001a80 <modp_itoa10+0x18>
    if(value < 0) *wstr++ = '-';
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da04      	bge.n	8001ac4 <modp_itoa10+0x5c>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60fa      	str	r2, [r7, #12]
 8001ac0:	222d      	movs	r2, #45	@ 0x2d
 8001ac2:	701a      	strb	r2, [r3, #0]
    *wstr='\0';
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

    //Reverse string
    strreverse(str, wstr-1);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6838      	ldr	r0, [r7, #0]
 8001ad2:	f7ff ffa9 	bl	8001a28 <strreverse>
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <modp_dtoa2>:
// - convert a floating point number to char-buffer with a variable precision format
// - No trailing zeros
//

void modp_dtoa2(double value, char *str, int prec)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b08e      	sub	sp, #56	@ 0x38
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
    //if the input is larger than thres_max, revert to exponential
    const double thres_max = (double)(0x7FFFFFFF);
 8001af6:	a3b5      	add	r3, pc, #724	@ (adr r3, 8001dcc <modp_dtoa2+0x2e4>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    unsigned short int count;
    double diff = 0.0;
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char *wstr = str;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
    unsigned short int neg=0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    unsigned short int whole;
    double tmp;
    uint32_t frac;

    //Hacky test for NaN
    if(!(value==value))
 8001b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1c:	f7fe fea2 	bl	8000864 <__aeabi_dcmpeq>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <modp_dtoa2+0x5e>
    {
        str[0]='n'; str[1]='a'; str[2]='n';str[3]='\0';
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	226e      	movs	r2, #110	@ 0x6e
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	2261      	movs	r2, #97	@ 0x61
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3302      	adds	r3, #2
 8001b38:	226e      	movs	r2, #110	@ 0x6e
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
        return;
 8001b44:	e138      	b.n	8001db8 <modp_dtoa2+0x2d0>
    }

    if(prec < 0){
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da02      	bge.n	8001b52 <modp_dtoa2+0x6a>
        prec = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	e004      	b.n	8001b5c <modp_dtoa2+0x74>

    }else if(prec > 9)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	dd01      	ble.n	8001b5c <modp_dtoa2+0x74>
    {
        //precision of >=10 can lead to overflow errors
        prec =9;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	603b      	str	r3, [r7, #0]
    }

    //We will work in positive values and deal with the negative sign issue later
    if(value < 0)
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b68:	f7fe fe86 	bl	8000878 <__aeabi_dcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <modp_dtoa2+0x9a>
    {
        neg =1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        value = -value;
 8001b76:	68bc      	ldr	r4, [r7, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001b7e:	e9c7 4502 	strd	r4, r5, [r7, #8]
    }

    whole = (int)value;
 8001b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b86:	f7fe fe9f 	bl	80008c8 <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    tmp = (value - whole)*pow10[prec];
 8001b8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fda7 	bl	80006e4 <__aeabi_i2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b9e:	f7fe fc53 	bl	8000448 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4a85      	ldr	r2, [pc, #532]	@ (8001dc0 <modp_dtoa2+0x2d8>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fb19 	bl	80001ec <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    frac = (uint32_t)(tmp);
 8001bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc6:	f7fe fea7 	bl	8000918 <__aeabi_d2uiz>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    diff = tmp - frac;
 8001bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bd0:	f7fe fd78 	bl	80006c4 <__aeabi_ui2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bdc:	f7fe fc34 	bl	8000448 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if(diff>0.5) {
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b75      	ldr	r3, [pc, #468]	@ (8001dc4 <modp_dtoa2+0x2dc>)
 8001bee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bf2:	f7fe fe5f 	bl	80008b4 <__aeabi_dcmpgt>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <modp_dtoa2+0x142>
        ++frac;
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	3301      	adds	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
        //Handle rollover , e.g. case 0.99 with prec 1 is 1.0
        if(frac >= pow10[prec]){
 8001c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c04:	f7fe fd5e 	bl	80006c4 <__aeabi_ui2d>
 8001c08:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc0 <modp_dtoa2+0x2d8>)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fe44 	bl	80008a0 <__aeabi_dcmpge>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d01a      	beq.n	8001c54 <modp_dtoa2+0x16c>
            frac =0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
            ++whole;
 8001c22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c24:	3301      	adds	r3, #1
 8001c26:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001c28:	e014      	b.n	8001c54 <modp_dtoa2+0x16c>
        }
    }else if(diff == 0.5 &&((frac==0)||(frac & 1))){
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <modp_dtoa2+0x2dc>)
 8001c30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c34:	f7fe fe16 	bl	8000864 <__aeabi_dcmpeq>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <modp_dtoa2+0x16c>
 8001c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <modp_dtoa2+0x166>
 8001c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <modp_dtoa2+0x16c>
      ++frac;    // if halfway, round up if odd, OR if last digit is 0
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	3301      	adds	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
    //- For very large numbers switch back to native sprintf for exponentials
    //- Anyone who wants to write code for this can do so
    //- Normal printf behavior is to print every whole number digit which can be 100s of
    //- characters overflowing your buffers == bad

    if(value > thres_max)
 8001c54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c5c:	f7fe fe2a 	bl	80008b4 <__aeabi_dcmpgt>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80a7 	bne.w	8001db6 <modp_dtoa2+0x2ce>
    {
//        sprintf(str, "%e", neg ? -value : value);
        return;
    }

    if(prec==0)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12e      	bne.n	8001ccc <modp_dtoa2+0x1e4>
    {
        diff = value - whole;
 8001c6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fd37 	bl	80006e4 <__aeabi_i2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c7e:	f7fe fbe3 	bl	8000448 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if(diff > 0.5)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <modp_dtoa2+0x2dc>)
 8001c90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c94:	f7fe fe0e 	bl	80008b4 <__aeabi_dcmpgt>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <modp_dtoa2+0x1be>
        {
            //- greater than 0.5, round up
            ++whole;
 8001c9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001ca4:	e05a      	b.n	8001d5c <modp_dtoa2+0x274>
        }else if ((diff==0.5)&&(whole&1))
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <modp_dtoa2+0x2dc>)
 8001cac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb0:	f7fe fdd8 	bl	8000864 <__aeabi_dcmpeq>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d050      	beq.n	8001d5c <modp_dtoa2+0x274>
 8001cba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d04b      	beq.n	8001d5c <modp_dtoa2+0x274>
        {
            // exactly 0.5 and ODD then round up
            ++whole;
 8001cc4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001cca:	e047      	b.n	8001d5c <modp_dtoa2+0x274>
        }
    }else if(frac)
 8001ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <modp_dtoa2+0x274>
    {
        count = prec;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        //now do the fractional part, as an unsigned number
        // we know it is not 0 but we can have leading zeros, these
        // should be removed
        while(!(frac%10))
 8001cd6:	e008      	b.n	8001cea <modp_dtoa2+0x202>
        {
            --count;
 8001cd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            frac /=10;
 8001cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce0:	4a39      	ldr	r2, [pc, #228]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
        while(!(frac%10))
 8001cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cec:	4b36      	ldr	r3, [pc, #216]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001cee:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	1aca      	subs	r2, r1, r3
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d0ea      	beq.n	8001cd8 <modp_dtoa2+0x1f0>
        }

   // - Now do the fractional part, as an unsigned number
   do {
    --count;
 8001d02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d04:	3b01      	subs	r3, #1
 8001d06:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *wstr++ = (char)(48+(frac %10));
 8001d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001d0c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	1aca      	subs	r2, r1, r3
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d24:	3230      	adds	r2, #48	@ 0x30
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
   } while(frac /=10);
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e2      	bne.n	8001d02 <modp_dtoa2+0x21a>

   //add extra 0s
   while(count-- > 0)
 8001d3c:	e004      	b.n	8001d48 <modp_dtoa2+0x260>
        *wstr++ = '0';
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d44:	2230      	movs	r2, #48	@ 0x30
 8001d46:	701a      	strb	r2, [r3, #0]
   while(count-- > 0)
 8001d48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f5      	bne.n	8001d3e <modp_dtoa2+0x256>
   //- add decimal
   *wstr++ = '.';
 8001d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d58:	222e      	movs	r2, #46	@ 0x2e
 8001d5a:	701a      	strb	r2, [r3, #0]

    //- do whole part
    //- Take care of the sign
    //- Conversion, Number is reversed
    //
    do *wstr++ = (char)(48 + (whole%10)); while(whole/=10);
 8001d5c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001d60:	fba3 1302 	umull	r1, r3, r3, r2
 8001d64:	08d9      	lsrs	r1, r3, #3
 8001d66:	460b      	mov	r3, r1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d76:	1c59      	adds	r1, r3, #1
 8001d78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001d7a:	3230      	adds	r2, #48	@ 0x30
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d82:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <modp_dtoa2+0x2e0>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001d8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e4      	bne.n	8001d5c <modp_dtoa2+0x274>
    if(neg){
 8001d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <modp_dtoa2+0x2ba>
        *wstr++ = '-';
 8001d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d9e:	222d      	movs	r2, #45	@ 0x2d
 8001da0:	701a      	strb	r2, [r3, #0]
    }
    *wstr ='\0';
 8001da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
//    printf(wstr);
    strreverse(str, wstr-1);
 8001da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fe3a 	bl	8001a28 <strreverse>
 8001db4:	e000      	b.n	8001db8 <modp_dtoa2+0x2d0>
        return;
 8001db6:	bf00      	nop
}
 8001db8:	3738      	adds	r7, #56	@ 0x38
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08002350 	.word	0x08002350
 8001dc4:	3fe00000 	.word	0x3fe00000
 8001dc8:	cccccccd 	.word	0xcccccccd
 8001dcc:	ffc00000 	.word	0xffc00000
 8001dd0:	41dfffff 	.word	0x41dfffff

08001dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  jWriteTest();
 8001dd8:	f000 f802 	bl	8001de0 <jWriteTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <main+0x8>

08001de0 <jWriteTest>:
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void jWriteTest(void){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8001de6:	af02      	add	r7, sp, #8
    char buffer[1024];
    unsigned int buflen = 1024;
 8001de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dec:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    //i;
//    char buffer1[1024]= "[\"array1\", 0.12345, 345, true, null, {\"key1\":\"value1\", \"int\":10}]";

//    printf("A JSON object example :\n\n");

    jwOpen(&testJSON, buffer, buflen, JW_OBJECT, JW_COMPACT);
 8001df0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	4639      	mov	r1, r7
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	4856      	ldr	r0, [pc, #344]	@ (8001f58 <jWriteTest+0x178>)
 8001e00:	f7ff faf3 	bl	80013ea <jwOpen>

    jwObj_string(&testJSON, "key", "value");
 8001e04:	4a55      	ldr	r2, [pc, #340]	@ (8001f5c <jWriteTest+0x17c>)
 8001e06:	4956      	ldr	r1, [pc, #344]	@ (8001f60 <jWriteTest+0x180>)
 8001e08:	4853      	ldr	r0, [pc, #332]	@ (8001f58 <jWriteTest+0x178>)
 8001e0a:	f7ff fb89 	bl	8001520 <jwObj_string>
    jwObj_int(&testJSON, "int", 10);
 8001e0e:	220a      	movs	r2, #10
 8001e10:	4954      	ldr	r1, [pc, #336]	@ (8001f64 <jWriteTest+0x184>)
 8001e12:	4851      	ldr	r0, [pc, #324]	@ (8001f58 <jWriteTest+0x178>)
 8001e14:	f7ff fb99 	bl	800154a <jwObj_int>
    jwObj_double(&testJSON, "double", 1.265487);
 8001e18:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 8001f48 <jWriteTest+0x168>
 8001e1c:	4952      	ldr	r1, [pc, #328]	@ (8001f68 <jWriteTest+0x188>)
 8001e1e:	484e      	ldr	r0, [pc, #312]	@ (8001f58 <jWriteTest+0x178>)
 8001e20:	f7ff fbaa 	bl	8001578 <jwObj_double>
    jwObj_null(&testJSON, "null Thing");
 8001e24:	4951      	ldr	r1, [pc, #324]	@ (8001f6c <jWriteTest+0x18c>)
 8001e26:	484c      	ldr	r0, [pc, #304]	@ (8001f58 <jWriteTest+0x178>)
 8001e28:	f7ff fbda 	bl	80015e0 <jwObj_null>
    jwObj_bool(&testJSON, "boolean", 1);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4950      	ldr	r1, [pc, #320]	@ (8001f70 <jWriteTest+0x190>)
 8001e30:	4849      	ldr	r0, [pc, #292]	@ (8001f58 <jWriteTest+0x178>)
 8001e32:	f7ff fbbb 	bl	80015ac <jwObj_bool>
    jwObj_array(&testJSON, "EmptyArray");
 8001e36:	494f      	ldr	r1, [pc, #316]	@ (8001f74 <jWriteTest+0x194>)
 8001e38:	4847      	ldr	r0, [pc, #284]	@ (8001f58 <jWriteTest+0x178>)
 8001e3a:	f7ff fbf9 	bl	8001630 <jwObj_array>
    jwEnd(&testJSON);
 8001e3e:	4846      	ldr	r0, [pc, #280]	@ (8001f58 <jWriteTest+0x178>)
 8001e40:	f7ff fb2e 	bl	80014a0 <jwEnd>
    jwObj_array(&testJSON, "anArray");
 8001e44:	494c      	ldr	r1, [pc, #304]	@ (8001f78 <jWriteTest+0x198>)
 8001e46:	4844      	ldr	r0, [pc, #272]	@ (8001f58 <jWriteTest+0x178>)
 8001e48:	f7ff fbf2 	bl	8001630 <jwObj_array>
    jwArr_string(&testJSON, "array one");
 8001e4c:	494b      	ldr	r1, [pc, #300]	@ (8001f7c <jWriteTest+0x19c>)
 8001e4e:	4842      	ldr	r0, [pc, #264]	@ (8001f58 <jWriteTest+0x178>)
 8001e50:	f7ff fc19 	bl	8001686 <jwArr_string>
    jwArr_int(&testJSON, -1);
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	483f      	ldr	r0, [pc, #252]	@ (8001f58 <jWriteTest+0x178>)
 8001e5a:	f7ff fc27 	bl	80016ac <jwArr_int>
    jwArr_double(&testJSON, 12.568970);
 8001e5e:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8001f50 <jWriteTest+0x170>
 8001e62:	483d      	ldr	r0, [pc, #244]	@ (8001f58 <jWriteTest+0x178>)
 8001e64:	f7ff fc37 	bl	80016d6 <jwArr_double>
    jwArr_null(&testJSON);
 8001e68:	483b      	ldr	r0, [pc, #236]	@ (8001f58 <jWriteTest+0x178>)
 8001e6a:	f7ff fc65 	bl	8001738 <jwArr_null>
    jwArr_bool(&testJSON, 0);
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4839      	ldr	r0, [pc, #228]	@ (8001f58 <jWriteTest+0x178>)
 8001e72:	f7ff fc49 	bl	8001708 <jwArr_bool>
    jwArr_object(&testJSON);
 8001e76:	4838      	ldr	r0, [pc, #224]	@ (8001f58 <jWriteTest+0x178>)
 8001e78:	f7ff fc6c 	bl	8001754 <jwArr_object>
        jwObj_string(&testJSON, "objArr1", "value1");
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <jWriteTest+0x1a0>)
 8001e7e:	4941      	ldr	r1, [pc, #260]	@ (8001f84 <jWriteTest+0x1a4>)
 8001e80:	4835      	ldr	r0, [pc, #212]	@ (8001f58 <jWriteTest+0x178>)
 8001e82:	f7ff fb4d 	bl	8001520 <jwObj_string>
        jwObj_string(&testJSON, "objArr2", "value2");
 8001e86:	4a40      	ldr	r2, [pc, #256]	@ (8001f88 <jWriteTest+0x1a8>)
 8001e88:	4940      	ldr	r1, [pc, #256]	@ (8001f8c <jWriteTest+0x1ac>)
 8001e8a:	4833      	ldr	r0, [pc, #204]	@ (8001f58 <jWriteTest+0x178>)
 8001e8c:	f7ff fb48 	bl	8001520 <jwObj_string>
        jwEnd(&testJSON);
 8001e90:	4831      	ldr	r0, [pc, #196]	@ (8001f58 <jWriteTest+0x178>)
 8001e92:	f7ff fb05 	bl	80014a0 <jwEnd>
    jwArr_array(&testJSON);
 8001e96:	4830      	ldr	r0, [pc, #192]	@ (8001f58 <jWriteTest+0x178>)
 8001e98:	f7ff fc72 	bl	8001780 <jwArr_array>
        jwArr_int(&testJSON, 1);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	482e      	ldr	r0, [pc, #184]	@ (8001f58 <jWriteTest+0x178>)
 8001ea0:	f7ff fc04 	bl	80016ac <jwArr_int>
        jwArr_int(&testJSON, 2);
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	482c      	ldr	r0, [pc, #176]	@ (8001f58 <jWriteTest+0x178>)
 8001ea8:	f7ff fc00 	bl	80016ac <jwArr_int>
        jwArr_int(&testJSON, 3);
 8001eac:	2103      	movs	r1, #3
 8001eae:	482a      	ldr	r0, [pc, #168]	@ (8001f58 <jWriteTest+0x178>)
 8001eb0:	f7ff fbfc 	bl	80016ac <jwArr_int>
    jwEnd(&testJSON);
 8001eb4:	4828      	ldr	r0, [pc, #160]	@ (8001f58 <jWriteTest+0x178>)
 8001eb6:	f7ff faf3 	bl	80014a0 <jwEnd>
    jwEnd(&testJSON);
 8001eba:	4827      	ldr	r0, [pc, #156]	@ (8001f58 <jWriteTest+0x178>)
 8001ebc:	f7ff faf0 	bl	80014a0 <jwEnd>
    jwObj_object(&testJSON, "Empty Object");
 8001ec0:	4933      	ldr	r1, [pc, #204]	@ (8001f90 <jWriteTest+0x1b0>)
 8001ec2:	4825      	ldr	r0, [pc, #148]	@ (8001f58 <jWriteTest+0x178>)
 8001ec4:	f7ff fb9c 	bl	8001600 <jwObj_object>
    jwEnd(&testJSON);
 8001ec8:	4823      	ldr	r0, [pc, #140]	@ (8001f58 <jWriteTest+0x178>)
 8001eca:	f7ff fae9 	bl	80014a0 <jwEnd>
    jwObj_object(&testJSON, "anObject");
 8001ece:	4931      	ldr	r1, [pc, #196]	@ (8001f94 <jWriteTest+0x1b4>)
 8001ed0:	4821      	ldr	r0, [pc, #132]	@ (8001f58 <jWriteTest+0x178>)
 8001ed2:	f7ff fb95 	bl	8001600 <jwObj_object>
    jwObj_string(&testJSON, "msg", "Object in Object");
 8001ed6:	4a30      	ldr	r2, [pc, #192]	@ (8001f98 <jWriteTest+0x1b8>)
 8001ed8:	4930      	ldr	r1, [pc, #192]	@ (8001f9c <jWriteTest+0x1bc>)
 8001eda:	481f      	ldr	r0, [pc, #124]	@ (8001f58 <jWriteTest+0x178>)
 8001edc:	f7ff fb20 	bl	8001520 <jwObj_string>
    jwObj_string(&testJSON, "msg2", "Object in object 2nd");
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa0 <jWriteTest+0x1c0>)
 8001ee2:	4930      	ldr	r1, [pc, #192]	@ (8001fa4 <jWriteTest+0x1c4>)
 8001ee4:	481c      	ldr	r0, [pc, #112]	@ (8001f58 <jWriteTest+0x178>)
 8001ee6:	f7ff fb1b 	bl	8001520 <jwObj_string>
    jwEnd(&testJSON);
 8001eea:	481b      	ldr	r0, [pc, #108]	@ (8001f58 <jWriteTest+0x178>)
 8001eec:	f7ff fad8 	bl	80014a0 <jwEnd>
    jwObj_string(&testJSON, "ObjectEntry", "This is the last one");
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <jWriteTest+0x1c8>)
 8001ef2:	492e      	ldr	r1, [pc, #184]	@ (8001fac <jWriteTest+0x1cc>)
 8001ef4:	4818      	ldr	r0, [pc, #96]	@ (8001f58 <jWriteTest+0x178>)
 8001ef6:	f7ff fb13 	bl	8001520 <jwObj_string>
    jwClose(&testJSON);
 8001efa:	4817      	ldr	r0, [pc, #92]	@ (8001f58 <jWriteTest+0x178>)
 8001efc:	f7ff faae 	bl	800145c <jwClose>

//   printf(buffer);
//   printf(buffer1);

    err= JSONStructInit(&testReadJSON, buffer);
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	482a      	ldr	r0, [pc, #168]	@ (8001fb0 <jWriteTest+0x1d0>)
 8001f06:	f7fe fd89 	bl	8000a1c <JSONStructInit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 3403 	strb.w	r3, [r7, #1027]	@ 0x403
//    printf("\nThe number of tokens parsed %d \n", testReadJSON.numTokens);
//    printf("Buffer initialized for reading \n ");
//    printf("The value of error is %d \n", err);
    if(err != JDATA_NOK)
 8001f10:	f897 3403 	ldrb.w	r3, [r7, #1027]	@ 0x403
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d011      	beq.n	8001f3c <jWriteTest+0x15c>
    {
        while(testReadJSON.parserStatus!=JSON_END)
 8001f18:	e005      	b.n	8001f26 <jWriteTest+0x146>
        err = JSONParseData(&testReadJSON);
 8001f1a:	4825      	ldr	r0, [pc, #148]	@ (8001fb0 <jWriteTest+0x1d0>)
 8001f1c:	f7fe fdcc 	bl	8000ab8 <JSONParseData>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3403 	strb.w	r3, [r7, #1027]	@ 0x403
        while(testReadJSON.parserStatus!=JSON_END)
 8001f26:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <jWriteTest+0x1d0>)
 8001f28:	7b1b      	ldrb	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d1f5      	bne.n	8001f1a <jWriteTest+0x13a>
//        printf("The Error code is %d\n", err);
//        printf("The Number of Tokens parsed are %d\n", testReadJSON.numTokens);
//        printf("The value of key parsed is %s\n", testReadJSON.jData[2].keyValue);
//        printf("The value of data parsed is %s\n", testReadJSON.jData[5].jsonValue);
//        printf("The Value of Stack Position is %d", testReadJSON.parserStatus);
       jsonPacket = SearchToken(&testReadJSON, "\"anObject\"");
 8001f2e:	4921      	ldr	r1, [pc, #132]	@ (8001fb4 <jWriteTest+0x1d4>)
 8001f30:	481f      	ldr	r0, [pc, #124]	@ (8001fb0 <jWriteTest+0x1d0>)
 8001f32:	f7ff fa0f 	bl	8001354 <SearchToken>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <jWriteTest+0x1d8>)
 8001f3a:	6013      	str	r3, [r2, #0]
//           printf("The Value of the entered key is %s\n", jsonPacket->jsonValue);
       }

    }

}
 8001f3c:	bf00      	nop
 8001f3e:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	4be835df 	.word	0x4be835df
 8001f4c:	3ff43f6f 	.word	0x3ff43f6f
 8001f50:	092ccf6c 	.word	0x092ccf6c
 8001f54:	40292350 	.word	0x40292350
 8001f58:	20000020 	.word	0x20000020
 8001f5c:	0800225c 	.word	0x0800225c
 8001f60:	08002264 	.word	0x08002264
 8001f64:	08002268 	.word	0x08002268
 8001f68:	0800226c 	.word	0x0800226c
 8001f6c:	08002274 	.word	0x08002274
 8001f70:	08002280 	.word	0x08002280
 8001f74:	08002288 	.word	0x08002288
 8001f78:	08002294 	.word	0x08002294
 8001f7c:	0800229c 	.word	0x0800229c
 8001f80:	080022a8 	.word	0x080022a8
 8001f84:	080022b0 	.word	0x080022b0
 8001f88:	080022b8 	.word	0x080022b8
 8001f8c:	080022c0 	.word	0x080022c0
 8001f90:	080022c8 	.word	0x080022c8
 8001f94:	080022d8 	.word	0x080022d8
 8001f98:	080022e4 	.word	0x080022e4
 8001f9c:	080022f8 	.word	0x080022f8
 8001fa0:	080022fc 	.word	0x080022fc
 8001fa4:	08002314 	.word	0x08002314
 8001fa8:	0800231c 	.word	0x0800231c
 8001fac:	08002334 	.word	0x08002334
 8001fb0:	20000084 	.word	0x20000084
 8001fb4:	08002340 	.word	0x08002340
 8001fb8:	200005c8 	.word	0x200005c8

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002012:	f000 f83f 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002078 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002044:	f7ff ffea 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f000 f82d 	bl	80020cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002072:	f7ff feaf 	bl	8001dd4 <main>

08002076 <LoopForever>:

LoopForever:
    b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002078:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002084:	080023b0 	.word	0x080023b0
  ldr r2, =_sbss
 8002088:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800208c:	200005d0 	.word	0x200005d0

08002090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_2_IRQHandler>
	...

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000
 80020b8:	200005cc 	.word	0x200005cc

080020bc <memset>:
 80020bc:	4402      	add	r2, r0
 80020be:	4603      	mov	r3, r0
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d100      	bne.n	80020c6 <memset+0xa>
 80020c4:	4770      	bx	lr
 80020c6:	f803 1b01 	strb.w	r1, [r3], #1
 80020ca:	e7f9      	b.n	80020c0 <memset+0x4>

080020cc <__libc_init_array>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002104 <__libc_init_array+0x38>)
 80020d0:	4c0d      	ldr	r4, [pc, #52]	@ (8002108 <__libc_init_array+0x3c>)
 80020d2:	1b64      	subs	r4, r4, r5
 80020d4:	10a4      	asrs	r4, r4, #2
 80020d6:	2600      	movs	r6, #0
 80020d8:	42a6      	cmp	r6, r4
 80020da:	d109      	bne.n	80020f0 <__libc_init_array+0x24>
 80020dc:	4d0b      	ldr	r5, [pc, #44]	@ (800210c <__libc_init_array+0x40>)
 80020de:	4c0c      	ldr	r4, [pc, #48]	@ (8002110 <__libc_init_array+0x44>)
 80020e0:	f000 f818 	bl	8002114 <_init>
 80020e4:	1b64      	subs	r4, r4, r5
 80020e6:	10a4      	asrs	r4, r4, #2
 80020e8:	2600      	movs	r6, #0
 80020ea:	42a6      	cmp	r6, r4
 80020ec:	d105      	bne.n	80020fa <__libc_init_array+0x2e>
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f4:	4798      	blx	r3
 80020f6:	3601      	adds	r6, #1
 80020f8:	e7ee      	b.n	80020d8 <__libc_init_array+0xc>
 80020fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fe:	4798      	blx	r3
 8002100:	3601      	adds	r6, #1
 8002102:	e7f2      	b.n	80020ea <__libc_init_array+0x1e>
 8002104:	080023a8 	.word	0x080023a8
 8002108:	080023a8 	.word	0x080023a8
 800210c:	080023a8 	.word	0x080023a8
 8002110:	080023ac 	.word	0x080023ac

08002114 <_init>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr

08002120 <_fini>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	bf00      	nop
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr
