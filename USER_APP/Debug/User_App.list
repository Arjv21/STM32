
User_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08050000  08050000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  08050188  08050188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08052a10  08052a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052a48  08052a48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08052a48  08052a48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08052a48  08052a48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052a48  08052a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08052a4c  08052a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08052a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c9a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001439  00000000  00000000  00028cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  0002a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d0  00000000  00000000  0002a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1f0  00000000  00000000  0002ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c78  00000000  00000000  00049f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b933e  00000000  00000000  00052b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010bece  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001844  00000000  00000000  0010bf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08050188 <__do_global_dtors_aux>:
 8050188:	b510      	push	{r4, lr}
 805018a:	4c05      	ldr	r4, [pc, #20]	; (80501a0 <__do_global_dtors_aux+0x18>)
 805018c:	7823      	ldrb	r3, [r4, #0]
 805018e:	b933      	cbnz	r3, 805019e <__do_global_dtors_aux+0x16>
 8050190:	4b04      	ldr	r3, [pc, #16]	; (80501a4 <__do_global_dtors_aux+0x1c>)
 8050192:	b113      	cbz	r3, 805019a <__do_global_dtors_aux+0x12>
 8050194:	4804      	ldr	r0, [pc, #16]	; (80501a8 <__do_global_dtors_aux+0x20>)
 8050196:	f3af 8000 	nop.w
 805019a:	2301      	movs	r3, #1
 805019c:	7023      	strb	r3, [r4, #0]
 805019e:	bd10      	pop	{r4, pc}
 80501a0:	2000000c 	.word	0x2000000c
 80501a4:	00000000 	.word	0x00000000
 80501a8:	080529f8 	.word	0x080529f8

080501ac <frame_dummy>:
 80501ac:	b508      	push	{r3, lr}
 80501ae:	4b03      	ldr	r3, [pc, #12]	; (80501bc <frame_dummy+0x10>)
 80501b0:	b11b      	cbz	r3, 80501ba <frame_dummy+0xe>
 80501b2:	4903      	ldr	r1, [pc, #12]	; (80501c0 <frame_dummy+0x14>)
 80501b4:	4803      	ldr	r0, [pc, #12]	; (80501c4 <frame_dummy+0x18>)
 80501b6:	f3af 8000 	nop.w
 80501ba:	bd08      	pop	{r3, pc}
 80501bc:	00000000 	.word	0x00000000
 80501c0:	20000010 	.word	0x20000010
 80501c4:	080529f8 	.word	0x080529f8

080501c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80501c8:	b580      	push	{r7, lr}
 80501ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80501cc:	f000 f9ce 	bl	805056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80501d0:	f000 f805 	bl	80501de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80501d4:	f000 f88c 	bl	80502f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80501d8:	f000 f85a 	bl	8050290 <MX_USART1_UART_Init>
//  printf("Application started...\nBlinking...");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80501dc:	e7fe      	b.n	80501dc <main+0x14>

080501de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80501de:	b580      	push	{r7, lr}
 80501e0:	b096      	sub	sp, #88	; 0x58
 80501e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80501e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80501e8:	2228      	movs	r2, #40	; 0x28
 80501ea:	2100      	movs	r1, #0
 80501ec:	4618      	mov	r0, r3
 80501ee:	f002 fbfb 	bl	80529e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80501f2:	f107 031c 	add.w	r3, r7, #28
 80501f6:	2200      	movs	r2, #0
 80501f8:	601a      	str	r2, [r3, #0]
 80501fa:	605a      	str	r2, [r3, #4]
 80501fc:	609a      	str	r2, [r3, #8]
 80501fe:	60da      	str	r2, [r3, #12]
 8050200:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8050202:	463b      	mov	r3, r7
 8050204:	2200      	movs	r2, #0
 8050206:	601a      	str	r2, [r3, #0]
 8050208:	605a      	str	r2, [r3, #4]
 805020a:	609a      	str	r2, [r3, #8]
 805020c:	60da      	str	r2, [r3, #12]
 805020e:	611a      	str	r2, [r3, #16]
 8050210:	615a      	str	r2, [r3, #20]
 8050212:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8050214:	2302      	movs	r3, #2
 8050216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8050218:	2301      	movs	r3, #1
 805021a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 805021c:	2310      	movs	r3, #16
 805021e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8050220:	2302      	movs	r3, #2
 8050222:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8050224:	2300      	movs	r3, #0
 8050226:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8050228:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 805022c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 805022e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8050232:	4618      	mov	r0, r3
 8050234:	f000 fc70 	bl	8050b18 <HAL_RCC_OscConfig>
 8050238:	4603      	mov	r3, r0
 805023a:	2b00      	cmp	r3, #0
 805023c:	d001      	beq.n	8050242 <SystemClock_Config+0x64>
  {
    Error_Handler();
 805023e:	f000 f8bd 	bl	80503bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8050242:	230f      	movs	r3, #15
 8050244:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8050246:	2302      	movs	r3, #2
 8050248:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 805024a:	2300      	movs	r3, #0
 805024c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 805024e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8050252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8050254:	2300      	movs	r3, #0
 8050256:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8050258:	f107 031c 	add.w	r3, r7, #28
 805025c:	2102      	movs	r1, #2
 805025e:	4618      	mov	r0, r3
 8050260:	f001 fc98 	bl	8051b94 <HAL_RCC_ClockConfig>
 8050264:	4603      	mov	r3, r0
 8050266:	2b00      	cmp	r3, #0
 8050268:	d001      	beq.n	805026e <SystemClock_Config+0x90>
  {
    Error_Handler();
 805026a:	f000 f8a7 	bl	80503bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 805026e:	2301      	movs	r3, #1
 8050270:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8050272:	2300      	movs	r3, #0
 8050274:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8050276:	463b      	mov	r3, r7
 8050278:	4618      	mov	r0, r3
 805027a:	f001 fec1 	bl	8052000 <HAL_RCCEx_PeriphCLKConfig>
 805027e:	4603      	mov	r3, r0
 8050280:	2b00      	cmp	r3, #0
 8050282:	d001      	beq.n	8050288 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8050284:	f000 f89a 	bl	80503bc <Error_Handler>
  }
}
 8050288:	bf00      	nop
 805028a:	3758      	adds	r7, #88	; 0x58
 805028c:	46bd      	mov	sp, r7
 805028e:	bd80      	pop	{r7, pc}

08050290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8050290:	b580      	push	{r7, lr}
 8050292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8050294:	4b14      	ldr	r3, [pc, #80]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 8050296:	4a15      	ldr	r2, [pc, #84]	; (80502ec <MX_USART1_UART_Init+0x5c>)
 8050298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 805029a:	4b13      	ldr	r3, [pc, #76]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 805029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80502a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80502a2:	4b11      	ldr	r3, [pc, #68]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502a4:	2200      	movs	r2, #0
 80502a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80502a8:	4b0f      	ldr	r3, [pc, #60]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502aa:	2200      	movs	r2, #0
 80502ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80502ae:	4b0e      	ldr	r3, [pc, #56]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502b0:	2200      	movs	r2, #0
 80502b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80502b4:	4b0c      	ldr	r3, [pc, #48]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502b6:	220c      	movs	r2, #12
 80502b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80502ba:	4b0b      	ldr	r3, [pc, #44]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502bc:	2200      	movs	r2, #0
 80502be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80502c0:	4b09      	ldr	r3, [pc, #36]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502c2:	2200      	movs	r2, #0
 80502c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80502c6:	4b08      	ldr	r3, [pc, #32]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502c8:	2200      	movs	r2, #0
 80502ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80502cc:	4b06      	ldr	r3, [pc, #24]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502ce:	2200      	movs	r2, #0
 80502d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80502d2:	4805      	ldr	r0, [pc, #20]	; (80502e8 <MX_USART1_UART_Init+0x58>)
 80502d4:	f001 ffca 	bl	805226c <HAL_UART_Init>
 80502d8:	4603      	mov	r3, r0
 80502da:	2b00      	cmp	r3, #0
 80502dc:	d001      	beq.n	80502e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80502de:	f000 f86d 	bl	80503bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80502e2:	bf00      	nop
 80502e4:	bd80      	pop	{r7, pc}
 80502e6:	bf00      	nop
 80502e8:	20000028 	.word	0x20000028
 80502ec:	40013800 	.word	0x40013800

080502f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80502f0:	b580      	push	{r7, lr}
 80502f2:	b08a      	sub	sp, #40	; 0x28
 80502f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80502f6:	f107 0314 	add.w	r3, r7, #20
 80502fa:	2200      	movs	r2, #0
 80502fc:	601a      	str	r2, [r3, #0]
 80502fe:	605a      	str	r2, [r3, #4]
 8050300:	609a      	str	r2, [r3, #8]
 8050302:	60da      	str	r2, [r3, #12]
 8050304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8050306:	4b2b      	ldr	r3, [pc, #172]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050308:	695b      	ldr	r3, [r3, #20]
 805030a:	4a2a      	ldr	r2, [pc, #168]	; (80503b4 <MX_GPIO_Init+0xc4>)
 805030c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8050310:	6153      	str	r3, [r2, #20]
 8050312:	4b28      	ldr	r3, [pc, #160]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050314:	695b      	ldr	r3, [r3, #20]
 8050316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 805031a:	613b      	str	r3, [r7, #16]
 805031c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 805031e:	4b25      	ldr	r3, [pc, #148]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050320:	695b      	ldr	r3, [r3, #20]
 8050322:	4a24      	ldr	r2, [pc, #144]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8050328:	6153      	str	r3, [r2, #20]
 805032a:	4b22      	ldr	r3, [pc, #136]	; (80503b4 <MX_GPIO_Init+0xc4>)
 805032c:	695b      	ldr	r3, [r3, #20]
 805032e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8050332:	60fb      	str	r3, [r7, #12]
 8050334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8050336:	4b1f      	ldr	r3, [pc, #124]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050338:	695b      	ldr	r3, [r3, #20]
 805033a:	4a1e      	ldr	r2, [pc, #120]	; (80503b4 <MX_GPIO_Init+0xc4>)
 805033c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8050340:	6153      	str	r3, [r2, #20]
 8050342:	4b1c      	ldr	r3, [pc, #112]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050344:	695b      	ldr	r3, [r3, #20]
 8050346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 805034a:	60bb      	str	r3, [r7, #8]
 805034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 805034e:	4b19      	ldr	r3, [pc, #100]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050350:	695b      	ldr	r3, [r3, #20]
 8050352:	4a18      	ldr	r2, [pc, #96]	; (80503b4 <MX_GPIO_Init+0xc4>)
 8050354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8050358:	6153      	str	r3, [r2, #20]
 805035a:	4b16      	ldr	r3, [pc, #88]	; (80503b4 <MX_GPIO_Init+0xc4>)
 805035c:	695b      	ldr	r3, [r3, #20]
 805035e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8050362:	607b      	str	r3, [r7, #4]
 8050364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8050366:	2200      	movs	r2, #0
 8050368:	2120      	movs	r1, #32
 805036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 805036e:	f000 fbbb 	bl	8050ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8050372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8050376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8050378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 805037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 805037e:	2300      	movs	r3, #0
 8050380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8050382:	f107 0314 	add.w	r3, r7, #20
 8050386:	4619      	mov	r1, r3
 8050388:	480b      	ldr	r0, [pc, #44]	; (80503b8 <MX_GPIO_Init+0xc8>)
 805038a:	f000 fa3b 	bl	8050804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 805038e:	2320      	movs	r3, #32
 8050390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8050392:	2301      	movs	r3, #1
 8050394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8050396:	2300      	movs	r3, #0
 8050398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 805039a:	2300      	movs	r3, #0
 805039c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 805039e:	f107 0314 	add.w	r3, r7, #20
 80503a2:	4619      	mov	r1, r3
 80503a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80503a8:	f000 fa2c 	bl	8050804 <HAL_GPIO_Init>

}
 80503ac:	bf00      	nop
 80503ae:	3728      	adds	r7, #40	; 0x28
 80503b0:	46bd      	mov	sp, r7
 80503b2:	bd80      	pop	{r7, pc}
 80503b4:	40021000 	.word	0x40021000
 80503b8:	48000800 	.word	0x48000800

080503bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80503bc:	b480      	push	{r7}
 80503be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80503c0:	b672      	cpsid	i
}
 80503c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80503c4:	e7fe      	b.n	80503c4 <Error_Handler+0x8>
	...

080503c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80503c8:	b580      	push	{r7, lr}
 80503ca:	b082      	sub	sp, #8
 80503cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80503ce:	4b0f      	ldr	r3, [pc, #60]	; (805040c <HAL_MspInit+0x44>)
 80503d0:	699b      	ldr	r3, [r3, #24]
 80503d2:	4a0e      	ldr	r2, [pc, #56]	; (805040c <HAL_MspInit+0x44>)
 80503d4:	f043 0301 	orr.w	r3, r3, #1
 80503d8:	6193      	str	r3, [r2, #24]
 80503da:	4b0c      	ldr	r3, [pc, #48]	; (805040c <HAL_MspInit+0x44>)
 80503dc:	699b      	ldr	r3, [r3, #24]
 80503de:	f003 0301 	and.w	r3, r3, #1
 80503e2:	607b      	str	r3, [r7, #4]
 80503e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80503e6:	4b09      	ldr	r3, [pc, #36]	; (805040c <HAL_MspInit+0x44>)
 80503e8:	69db      	ldr	r3, [r3, #28]
 80503ea:	4a08      	ldr	r2, [pc, #32]	; (805040c <HAL_MspInit+0x44>)
 80503ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80503f0:	61d3      	str	r3, [r2, #28]
 80503f2:	4b06      	ldr	r3, [pc, #24]	; (805040c <HAL_MspInit+0x44>)
 80503f4:	69db      	ldr	r3, [r3, #28]
 80503f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80503fa:	603b      	str	r3, [r7, #0]
 80503fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80503fe:	2007      	movs	r0, #7
 8050400:	f000 f9cc 	bl	805079c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8050404:	bf00      	nop
 8050406:	3708      	adds	r7, #8
 8050408:	46bd      	mov	sp, r7
 805040a:	bd80      	pop	{r7, pc}
 805040c:	40021000 	.word	0x40021000

08050410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8050410:	b580      	push	{r7, lr}
 8050412:	b08a      	sub	sp, #40	; 0x28
 8050414:	af00      	add	r7, sp, #0
 8050416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8050418:	f107 0314 	add.w	r3, r7, #20
 805041c:	2200      	movs	r2, #0
 805041e:	601a      	str	r2, [r3, #0]
 8050420:	605a      	str	r2, [r3, #4]
 8050422:	609a      	str	r2, [r3, #8]
 8050424:	60da      	str	r2, [r3, #12]
 8050426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8050428:	687b      	ldr	r3, [r7, #4]
 805042a:	681b      	ldr	r3, [r3, #0]
 805042c:	4a18      	ldr	r2, [pc, #96]	; (8050490 <HAL_UART_MspInit+0x80>)
 805042e:	4293      	cmp	r3, r2
 8050430:	d129      	bne.n	8050486 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8050432:	4b18      	ldr	r3, [pc, #96]	; (8050494 <HAL_UART_MspInit+0x84>)
 8050434:	699b      	ldr	r3, [r3, #24]
 8050436:	4a17      	ldr	r2, [pc, #92]	; (8050494 <HAL_UART_MspInit+0x84>)
 8050438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 805043c:	6193      	str	r3, [r2, #24]
 805043e:	4b15      	ldr	r3, [pc, #84]	; (8050494 <HAL_UART_MspInit+0x84>)
 8050440:	699b      	ldr	r3, [r3, #24]
 8050442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8050446:	613b      	str	r3, [r7, #16]
 8050448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 805044a:	4b12      	ldr	r3, [pc, #72]	; (8050494 <HAL_UART_MspInit+0x84>)
 805044c:	695b      	ldr	r3, [r3, #20]
 805044e:	4a11      	ldr	r2, [pc, #68]	; (8050494 <HAL_UART_MspInit+0x84>)
 8050450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8050454:	6153      	str	r3, [r2, #20]
 8050456:	4b0f      	ldr	r3, [pc, #60]	; (8050494 <HAL_UART_MspInit+0x84>)
 8050458:	695b      	ldr	r3, [r3, #20]
 805045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 805045e:	60fb      	str	r3, [r7, #12]
 8050460:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8050462:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8050466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8050468:	2302      	movs	r3, #2
 805046a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 805046c:	2300      	movs	r3, #0
 805046e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8050470:	2303      	movs	r3, #3
 8050472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8050474:	2307      	movs	r3, #7
 8050476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8050478:	f107 0314 	add.w	r3, r7, #20
 805047c:	4619      	mov	r1, r3
 805047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8050482:	f000 f9bf 	bl	8050804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8050486:	bf00      	nop
 8050488:	3728      	adds	r7, #40	; 0x28
 805048a:	46bd      	mov	sp, r7
 805048c:	bd80      	pop	{r7, pc}
 805048e:	bf00      	nop
 8050490:	40013800 	.word	0x40013800
 8050494:	40021000 	.word	0x40021000

08050498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8050498:	b480      	push	{r7}
 805049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 805049c:	e7fe      	b.n	805049c <NMI_Handler+0x4>

0805049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 805049e:	b480      	push	{r7}
 80504a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80504a2:	e7fe      	b.n	80504a2 <HardFault_Handler+0x4>

080504a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80504a4:	b480      	push	{r7}
 80504a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80504a8:	e7fe      	b.n	80504a8 <MemManage_Handler+0x4>

080504aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80504aa:	b480      	push	{r7}
 80504ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80504ae:	e7fe      	b.n	80504ae <BusFault_Handler+0x4>

080504b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80504b0:	b480      	push	{r7}
 80504b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80504b4:	e7fe      	b.n	80504b4 <UsageFault_Handler+0x4>

080504b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80504b6:	b480      	push	{r7}
 80504b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80504ba:	bf00      	nop
 80504bc:	46bd      	mov	sp, r7
 80504be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80504c2:	4770      	bx	lr

080504c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80504c4:	b480      	push	{r7}
 80504c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80504c8:	bf00      	nop
 80504ca:	46bd      	mov	sp, r7
 80504cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80504d0:	4770      	bx	lr

080504d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80504d2:	b480      	push	{r7}
 80504d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80504d6:	bf00      	nop
 80504d8:	46bd      	mov	sp, r7
 80504da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80504de:	4770      	bx	lr

080504e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80504e0:	b580      	push	{r7, lr}
 80504e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80504e4:	f000 f888 	bl	80505f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80504e8:	bf00      	nop
 80504ea:	bd80      	pop	{r7, pc}

080504ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80504ec:	b480      	push	{r7}
 80504ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80504f0:	4b07      	ldr	r3, [pc, #28]	; (8050510 <SystemInit+0x24>)
 80504f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80504f6:	4a06      	ldr	r2, [pc, #24]	; (8050510 <SystemInit+0x24>)
 80504f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80504fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8050500:	4b03      	ldr	r3, [pc, #12]	; (8050510 <SystemInit+0x24>)
 8050502:	4a04      	ldr	r2, [pc, #16]	; (8050514 <SystemInit+0x28>)
 8050504:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8050506:	bf00      	nop
 8050508:	46bd      	mov	sp, r7
 805050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 805050e:	4770      	bx	lr
 8050510:	e000ed00 	.word	0xe000ed00
 8050514:	08050000 	.word	0x08050000

08050518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8050518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8050550 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 805051c:	f7ff ffe6 	bl	80504ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8050520:	480c      	ldr	r0, [pc, #48]	; (8050554 <LoopForever+0x6>)
  ldr r1, =_edata
 8050522:	490d      	ldr	r1, [pc, #52]	; (8050558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8050524:	4a0d      	ldr	r2, [pc, #52]	; (805055c <LoopForever+0xe>)
  movs r3, #0
 8050526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8050528:	e002      	b.n	8050530 <LoopCopyDataInit>

0805052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 805052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 805052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 805052e:	3304      	adds	r3, #4

08050530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8050530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8050532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8050534:	d3f9      	bcc.n	805052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8050536:	4a0a      	ldr	r2, [pc, #40]	; (8050560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8050538:	4c0a      	ldr	r4, [pc, #40]	; (8050564 <LoopForever+0x16>)
  movs r3, #0
 805053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 805053c:	e001      	b.n	8050542 <LoopFillZerobss>

0805053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 805053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8050540:	3204      	adds	r2, #4

08050542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8050542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8050544:	d3fb      	bcc.n	805053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8050546:	f002 fa2b 	bl	80529a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 805054a:	f7ff fe3d 	bl	80501c8 <main>

0805054e <LoopForever>:

LoopForever:
    b LoopForever
 805054e:	e7fe      	b.n	805054e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8050550:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8050554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8050558:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 805055c:	08052a50 	.word	0x08052a50
  ldr r2, =_sbss
 8050560:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8050564:	200000b4 	.word	0x200000b4

08050568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8050568:	e7fe      	b.n	8050568 <ADC1_2_IRQHandler>
	...

0805056c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 805056c:	b580      	push	{r7, lr}
 805056e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8050570:	4b08      	ldr	r3, [pc, #32]	; (8050594 <HAL_Init+0x28>)
 8050572:	681b      	ldr	r3, [r3, #0]
 8050574:	4a07      	ldr	r2, [pc, #28]	; (8050594 <HAL_Init+0x28>)
 8050576:	f043 0310 	orr.w	r3, r3, #16
 805057a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 805057c:	2003      	movs	r0, #3
 805057e:	f000 f90d 	bl	805079c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8050582:	2000      	movs	r0, #0
 8050584:	f000 f808 	bl	8050598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8050588:	f7ff ff1e 	bl	80503c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 805058c:	2300      	movs	r3, #0
}
 805058e:	4618      	mov	r0, r3
 8050590:	bd80      	pop	{r7, pc}
 8050592:	bf00      	nop
 8050594:	40022000 	.word	0x40022000

08050598 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8050598:	b580      	push	{r7, lr}
 805059a:	b082      	sub	sp, #8
 805059c:	af00      	add	r7, sp, #0
 805059e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80505a0:	4b12      	ldr	r3, [pc, #72]	; (80505ec <HAL_InitTick+0x54>)
 80505a2:	681a      	ldr	r2, [r3, #0]
 80505a4:	4b12      	ldr	r3, [pc, #72]	; (80505f0 <HAL_InitTick+0x58>)
 80505a6:	781b      	ldrb	r3, [r3, #0]
 80505a8:	4619      	mov	r1, r3
 80505aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80505ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80505b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80505b6:	4618      	mov	r0, r3
 80505b8:	f000 f917 	bl	80507ea <HAL_SYSTICK_Config>
 80505bc:	4603      	mov	r3, r0
 80505be:	2b00      	cmp	r3, #0
 80505c0:	d001      	beq.n	80505c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80505c2:	2301      	movs	r3, #1
 80505c4:	e00e      	b.n	80505e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80505c6:	687b      	ldr	r3, [r7, #4]
 80505c8:	2b0f      	cmp	r3, #15
 80505ca:	d80a      	bhi.n	80505e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80505cc:	2200      	movs	r2, #0
 80505ce:	6879      	ldr	r1, [r7, #4]
 80505d0:	f04f 30ff 	mov.w	r0, #4294967295
 80505d4:	f000 f8ed 	bl	80507b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80505d8:	4a06      	ldr	r2, [pc, #24]	; (80505f4 <HAL_InitTick+0x5c>)
 80505da:	687b      	ldr	r3, [r7, #4]
 80505dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80505de:	2300      	movs	r3, #0
 80505e0:	e000      	b.n	80505e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80505e2:	2301      	movs	r3, #1
}
 80505e4:	4618      	mov	r0, r3
 80505e6:	3708      	adds	r7, #8
 80505e8:	46bd      	mov	sp, r7
 80505ea:	bd80      	pop	{r7, pc}
 80505ec:	20000000 	.word	0x20000000
 80505f0:	20000008 	.word	0x20000008
 80505f4:	20000004 	.word	0x20000004

080505f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80505f8:	b480      	push	{r7}
 80505fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80505fc:	4b06      	ldr	r3, [pc, #24]	; (8050618 <HAL_IncTick+0x20>)
 80505fe:	781b      	ldrb	r3, [r3, #0]
 8050600:	461a      	mov	r2, r3
 8050602:	4b06      	ldr	r3, [pc, #24]	; (805061c <HAL_IncTick+0x24>)
 8050604:	681b      	ldr	r3, [r3, #0]
 8050606:	4413      	add	r3, r2
 8050608:	4a04      	ldr	r2, [pc, #16]	; (805061c <HAL_IncTick+0x24>)
 805060a:	6013      	str	r3, [r2, #0]
}
 805060c:	bf00      	nop
 805060e:	46bd      	mov	sp, r7
 8050610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050614:	4770      	bx	lr
 8050616:	bf00      	nop
 8050618:	20000008 	.word	0x20000008
 805061c:	200000b0 	.word	0x200000b0

08050620 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8050620:	b480      	push	{r7}
 8050622:	af00      	add	r7, sp, #0
  return uwTick;  
 8050624:	4b03      	ldr	r3, [pc, #12]	; (8050634 <HAL_GetTick+0x14>)
 8050626:	681b      	ldr	r3, [r3, #0]
}
 8050628:	4618      	mov	r0, r3
 805062a:	46bd      	mov	sp, r7
 805062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050630:	4770      	bx	lr
 8050632:	bf00      	nop
 8050634:	200000b0 	.word	0x200000b0

08050638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8050638:	b480      	push	{r7}
 805063a:	b085      	sub	sp, #20
 805063c:	af00      	add	r7, sp, #0
 805063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8050640:	687b      	ldr	r3, [r7, #4]
 8050642:	f003 0307 	and.w	r3, r3, #7
 8050646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8050648:	4b0c      	ldr	r3, [pc, #48]	; (805067c <__NVIC_SetPriorityGrouping+0x44>)
 805064a:	68db      	ldr	r3, [r3, #12]
 805064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 805064e:	68ba      	ldr	r2, [r7, #8]
 8050650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8050654:	4013      	ands	r3, r2
 8050656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8050658:	68fb      	ldr	r3, [r7, #12]
 805065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 805065c:	68bb      	ldr	r3, [r7, #8]
 805065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8050660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8050664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8050668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 805066a:	4a04      	ldr	r2, [pc, #16]	; (805067c <__NVIC_SetPriorityGrouping+0x44>)
 805066c:	68bb      	ldr	r3, [r7, #8]
 805066e:	60d3      	str	r3, [r2, #12]
}
 8050670:	bf00      	nop
 8050672:	3714      	adds	r7, #20
 8050674:	46bd      	mov	sp, r7
 8050676:	f85d 7b04 	ldr.w	r7, [sp], #4
 805067a:	4770      	bx	lr
 805067c:	e000ed00 	.word	0xe000ed00

08050680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8050680:	b480      	push	{r7}
 8050682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8050684:	4b04      	ldr	r3, [pc, #16]	; (8050698 <__NVIC_GetPriorityGrouping+0x18>)
 8050686:	68db      	ldr	r3, [r3, #12]
 8050688:	0a1b      	lsrs	r3, r3, #8
 805068a:	f003 0307 	and.w	r3, r3, #7
}
 805068e:	4618      	mov	r0, r3
 8050690:	46bd      	mov	sp, r7
 8050692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050696:	4770      	bx	lr
 8050698:	e000ed00 	.word	0xe000ed00

0805069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 805069c:	b480      	push	{r7}
 805069e:	b083      	sub	sp, #12
 80506a0:	af00      	add	r7, sp, #0
 80506a2:	4603      	mov	r3, r0
 80506a4:	6039      	str	r1, [r7, #0]
 80506a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80506a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80506ac:	2b00      	cmp	r3, #0
 80506ae:	db0a      	blt.n	80506c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80506b0:	683b      	ldr	r3, [r7, #0]
 80506b2:	b2da      	uxtb	r2, r3
 80506b4:	490c      	ldr	r1, [pc, #48]	; (80506e8 <__NVIC_SetPriority+0x4c>)
 80506b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80506ba:	0112      	lsls	r2, r2, #4
 80506bc:	b2d2      	uxtb	r2, r2
 80506be:	440b      	add	r3, r1
 80506c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80506c4:	e00a      	b.n	80506dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80506c6:	683b      	ldr	r3, [r7, #0]
 80506c8:	b2da      	uxtb	r2, r3
 80506ca:	4908      	ldr	r1, [pc, #32]	; (80506ec <__NVIC_SetPriority+0x50>)
 80506cc:	79fb      	ldrb	r3, [r7, #7]
 80506ce:	f003 030f 	and.w	r3, r3, #15
 80506d2:	3b04      	subs	r3, #4
 80506d4:	0112      	lsls	r2, r2, #4
 80506d6:	b2d2      	uxtb	r2, r2
 80506d8:	440b      	add	r3, r1
 80506da:	761a      	strb	r2, [r3, #24]
}
 80506dc:	bf00      	nop
 80506de:	370c      	adds	r7, #12
 80506e0:	46bd      	mov	sp, r7
 80506e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80506e6:	4770      	bx	lr
 80506e8:	e000e100 	.word	0xe000e100
 80506ec:	e000ed00 	.word	0xe000ed00

080506f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80506f0:	b480      	push	{r7}
 80506f2:	b089      	sub	sp, #36	; 0x24
 80506f4:	af00      	add	r7, sp, #0
 80506f6:	60f8      	str	r0, [r7, #12]
 80506f8:	60b9      	str	r1, [r7, #8]
 80506fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80506fc:	68fb      	ldr	r3, [r7, #12]
 80506fe:	f003 0307 	and.w	r3, r3, #7
 8050702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8050704:	69fb      	ldr	r3, [r7, #28]
 8050706:	f1c3 0307 	rsb	r3, r3, #7
 805070a:	2b04      	cmp	r3, #4
 805070c:	bf28      	it	cs
 805070e:	2304      	movcs	r3, #4
 8050710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8050712:	69fb      	ldr	r3, [r7, #28]
 8050714:	3304      	adds	r3, #4
 8050716:	2b06      	cmp	r3, #6
 8050718:	d902      	bls.n	8050720 <NVIC_EncodePriority+0x30>
 805071a:	69fb      	ldr	r3, [r7, #28]
 805071c:	3b03      	subs	r3, #3
 805071e:	e000      	b.n	8050722 <NVIC_EncodePriority+0x32>
 8050720:	2300      	movs	r3, #0
 8050722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8050724:	f04f 32ff 	mov.w	r2, #4294967295
 8050728:	69bb      	ldr	r3, [r7, #24]
 805072a:	fa02 f303 	lsl.w	r3, r2, r3
 805072e:	43da      	mvns	r2, r3
 8050730:	68bb      	ldr	r3, [r7, #8]
 8050732:	401a      	ands	r2, r3
 8050734:	697b      	ldr	r3, [r7, #20]
 8050736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8050738:	f04f 31ff 	mov.w	r1, #4294967295
 805073c:	697b      	ldr	r3, [r7, #20]
 805073e:	fa01 f303 	lsl.w	r3, r1, r3
 8050742:	43d9      	mvns	r1, r3
 8050744:	687b      	ldr	r3, [r7, #4]
 8050746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8050748:	4313      	orrs	r3, r2
         );
}
 805074a:	4618      	mov	r0, r3
 805074c:	3724      	adds	r7, #36	; 0x24
 805074e:	46bd      	mov	sp, r7
 8050750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050754:	4770      	bx	lr
	...

08050758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8050758:	b580      	push	{r7, lr}
 805075a:	b082      	sub	sp, #8
 805075c:	af00      	add	r7, sp, #0
 805075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8050760:	687b      	ldr	r3, [r7, #4]
 8050762:	3b01      	subs	r3, #1
 8050764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8050768:	d301      	bcc.n	805076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 805076a:	2301      	movs	r3, #1
 805076c:	e00f      	b.n	805078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 805076e:	4a0a      	ldr	r2, [pc, #40]	; (8050798 <SysTick_Config+0x40>)
 8050770:	687b      	ldr	r3, [r7, #4]
 8050772:	3b01      	subs	r3, #1
 8050774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8050776:	210f      	movs	r1, #15
 8050778:	f04f 30ff 	mov.w	r0, #4294967295
 805077c:	f7ff ff8e 	bl	805069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8050780:	4b05      	ldr	r3, [pc, #20]	; (8050798 <SysTick_Config+0x40>)
 8050782:	2200      	movs	r2, #0
 8050784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8050786:	4b04      	ldr	r3, [pc, #16]	; (8050798 <SysTick_Config+0x40>)
 8050788:	2207      	movs	r2, #7
 805078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 805078c:	2300      	movs	r3, #0
}
 805078e:	4618      	mov	r0, r3
 8050790:	3708      	adds	r7, #8
 8050792:	46bd      	mov	sp, r7
 8050794:	bd80      	pop	{r7, pc}
 8050796:	bf00      	nop
 8050798:	e000e010 	.word	0xe000e010

0805079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 805079c:	b580      	push	{r7, lr}
 805079e:	b082      	sub	sp, #8
 80507a0:	af00      	add	r7, sp, #0
 80507a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80507a4:	6878      	ldr	r0, [r7, #4]
 80507a6:	f7ff ff47 	bl	8050638 <__NVIC_SetPriorityGrouping>
}
 80507aa:	bf00      	nop
 80507ac:	3708      	adds	r7, #8
 80507ae:	46bd      	mov	sp, r7
 80507b0:	bd80      	pop	{r7, pc}

080507b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80507b2:	b580      	push	{r7, lr}
 80507b4:	b086      	sub	sp, #24
 80507b6:	af00      	add	r7, sp, #0
 80507b8:	4603      	mov	r3, r0
 80507ba:	60b9      	str	r1, [r7, #8]
 80507bc:	607a      	str	r2, [r7, #4]
 80507be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80507c0:	2300      	movs	r3, #0
 80507c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80507c4:	f7ff ff5c 	bl	8050680 <__NVIC_GetPriorityGrouping>
 80507c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80507ca:	687a      	ldr	r2, [r7, #4]
 80507cc:	68b9      	ldr	r1, [r7, #8]
 80507ce:	6978      	ldr	r0, [r7, #20]
 80507d0:	f7ff ff8e 	bl	80506f0 <NVIC_EncodePriority>
 80507d4:	4602      	mov	r2, r0
 80507d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80507da:	4611      	mov	r1, r2
 80507dc:	4618      	mov	r0, r3
 80507de:	f7ff ff5d 	bl	805069c <__NVIC_SetPriority>
}
 80507e2:	bf00      	nop
 80507e4:	3718      	adds	r7, #24
 80507e6:	46bd      	mov	sp, r7
 80507e8:	bd80      	pop	{r7, pc}

080507ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80507ea:	b580      	push	{r7, lr}
 80507ec:	b082      	sub	sp, #8
 80507ee:	af00      	add	r7, sp, #0
 80507f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80507f2:	6878      	ldr	r0, [r7, #4]
 80507f4:	f7ff ffb0 	bl	8050758 <SysTick_Config>
 80507f8:	4603      	mov	r3, r0
}
 80507fa:	4618      	mov	r0, r3
 80507fc:	3708      	adds	r7, #8
 80507fe:	46bd      	mov	sp, r7
 8050800:	bd80      	pop	{r7, pc}
	...

08050804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8050804:	b480      	push	{r7}
 8050806:	b087      	sub	sp, #28
 8050808:	af00      	add	r7, sp, #0
 805080a:	6078      	str	r0, [r7, #4]
 805080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 805080e:	2300      	movs	r3, #0
 8050810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8050812:	e14e      	b.n	8050ab2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8050814:	683b      	ldr	r3, [r7, #0]
 8050816:	681a      	ldr	r2, [r3, #0]
 8050818:	2101      	movs	r1, #1
 805081a:	697b      	ldr	r3, [r7, #20]
 805081c:	fa01 f303 	lsl.w	r3, r1, r3
 8050820:	4013      	ands	r3, r2
 8050822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8050824:	68fb      	ldr	r3, [r7, #12]
 8050826:	2b00      	cmp	r3, #0
 8050828:	f000 8140 	beq.w	8050aac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 805082c:	683b      	ldr	r3, [r7, #0]
 805082e:	685b      	ldr	r3, [r3, #4]
 8050830:	f003 0303 	and.w	r3, r3, #3
 8050834:	2b01      	cmp	r3, #1
 8050836:	d005      	beq.n	8050844 <HAL_GPIO_Init+0x40>
 8050838:	683b      	ldr	r3, [r7, #0]
 805083a:	685b      	ldr	r3, [r3, #4]
 805083c:	f003 0303 	and.w	r3, r3, #3
 8050840:	2b02      	cmp	r3, #2
 8050842:	d130      	bne.n	80508a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8050844:	687b      	ldr	r3, [r7, #4]
 8050846:	689b      	ldr	r3, [r3, #8]
 8050848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 805084a:	697b      	ldr	r3, [r7, #20]
 805084c:	005b      	lsls	r3, r3, #1
 805084e:	2203      	movs	r2, #3
 8050850:	fa02 f303 	lsl.w	r3, r2, r3
 8050854:	43db      	mvns	r3, r3
 8050856:	693a      	ldr	r2, [r7, #16]
 8050858:	4013      	ands	r3, r2
 805085a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 805085c:	683b      	ldr	r3, [r7, #0]
 805085e:	68da      	ldr	r2, [r3, #12]
 8050860:	697b      	ldr	r3, [r7, #20]
 8050862:	005b      	lsls	r3, r3, #1
 8050864:	fa02 f303 	lsl.w	r3, r2, r3
 8050868:	693a      	ldr	r2, [r7, #16]
 805086a:	4313      	orrs	r3, r2
 805086c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 805086e:	687b      	ldr	r3, [r7, #4]
 8050870:	693a      	ldr	r2, [r7, #16]
 8050872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8050874:	687b      	ldr	r3, [r7, #4]
 8050876:	685b      	ldr	r3, [r3, #4]
 8050878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 805087a:	2201      	movs	r2, #1
 805087c:	697b      	ldr	r3, [r7, #20]
 805087e:	fa02 f303 	lsl.w	r3, r2, r3
 8050882:	43db      	mvns	r3, r3
 8050884:	693a      	ldr	r2, [r7, #16]
 8050886:	4013      	ands	r3, r2
 8050888:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 805088a:	683b      	ldr	r3, [r7, #0]
 805088c:	685b      	ldr	r3, [r3, #4]
 805088e:	091b      	lsrs	r3, r3, #4
 8050890:	f003 0201 	and.w	r2, r3, #1
 8050894:	697b      	ldr	r3, [r7, #20]
 8050896:	fa02 f303 	lsl.w	r3, r2, r3
 805089a:	693a      	ldr	r2, [r7, #16]
 805089c:	4313      	orrs	r3, r2
 805089e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80508a0:	687b      	ldr	r3, [r7, #4]
 80508a2:	693a      	ldr	r2, [r7, #16]
 80508a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80508a6:	683b      	ldr	r3, [r7, #0]
 80508a8:	685b      	ldr	r3, [r3, #4]
 80508aa:	f003 0303 	and.w	r3, r3, #3
 80508ae:	2b03      	cmp	r3, #3
 80508b0:	d017      	beq.n	80508e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80508b2:	687b      	ldr	r3, [r7, #4]
 80508b4:	68db      	ldr	r3, [r3, #12]
 80508b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80508b8:	697b      	ldr	r3, [r7, #20]
 80508ba:	005b      	lsls	r3, r3, #1
 80508bc:	2203      	movs	r2, #3
 80508be:	fa02 f303 	lsl.w	r3, r2, r3
 80508c2:	43db      	mvns	r3, r3
 80508c4:	693a      	ldr	r2, [r7, #16]
 80508c6:	4013      	ands	r3, r2
 80508c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80508ca:	683b      	ldr	r3, [r7, #0]
 80508cc:	689a      	ldr	r2, [r3, #8]
 80508ce:	697b      	ldr	r3, [r7, #20]
 80508d0:	005b      	lsls	r3, r3, #1
 80508d2:	fa02 f303 	lsl.w	r3, r2, r3
 80508d6:	693a      	ldr	r2, [r7, #16]
 80508d8:	4313      	orrs	r3, r2
 80508da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80508dc:	687b      	ldr	r3, [r7, #4]
 80508de:	693a      	ldr	r2, [r7, #16]
 80508e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80508e2:	683b      	ldr	r3, [r7, #0]
 80508e4:	685b      	ldr	r3, [r3, #4]
 80508e6:	f003 0303 	and.w	r3, r3, #3
 80508ea:	2b02      	cmp	r3, #2
 80508ec:	d123      	bne.n	8050936 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80508ee:	697b      	ldr	r3, [r7, #20]
 80508f0:	08da      	lsrs	r2, r3, #3
 80508f2:	687b      	ldr	r3, [r7, #4]
 80508f4:	3208      	adds	r2, #8
 80508f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80508fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80508fc:	697b      	ldr	r3, [r7, #20]
 80508fe:	f003 0307 	and.w	r3, r3, #7
 8050902:	009b      	lsls	r3, r3, #2
 8050904:	220f      	movs	r2, #15
 8050906:	fa02 f303 	lsl.w	r3, r2, r3
 805090a:	43db      	mvns	r3, r3
 805090c:	693a      	ldr	r2, [r7, #16]
 805090e:	4013      	ands	r3, r2
 8050910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8050912:	683b      	ldr	r3, [r7, #0]
 8050914:	691a      	ldr	r2, [r3, #16]
 8050916:	697b      	ldr	r3, [r7, #20]
 8050918:	f003 0307 	and.w	r3, r3, #7
 805091c:	009b      	lsls	r3, r3, #2
 805091e:	fa02 f303 	lsl.w	r3, r2, r3
 8050922:	693a      	ldr	r2, [r7, #16]
 8050924:	4313      	orrs	r3, r2
 8050926:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8050928:	697b      	ldr	r3, [r7, #20]
 805092a:	08da      	lsrs	r2, r3, #3
 805092c:	687b      	ldr	r3, [r7, #4]
 805092e:	3208      	adds	r2, #8
 8050930:	6939      	ldr	r1, [r7, #16]
 8050932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8050936:	687b      	ldr	r3, [r7, #4]
 8050938:	681b      	ldr	r3, [r3, #0]
 805093a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 805093c:	697b      	ldr	r3, [r7, #20]
 805093e:	005b      	lsls	r3, r3, #1
 8050940:	2203      	movs	r2, #3
 8050942:	fa02 f303 	lsl.w	r3, r2, r3
 8050946:	43db      	mvns	r3, r3
 8050948:	693a      	ldr	r2, [r7, #16]
 805094a:	4013      	ands	r3, r2
 805094c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 805094e:	683b      	ldr	r3, [r7, #0]
 8050950:	685b      	ldr	r3, [r3, #4]
 8050952:	f003 0203 	and.w	r2, r3, #3
 8050956:	697b      	ldr	r3, [r7, #20]
 8050958:	005b      	lsls	r3, r3, #1
 805095a:	fa02 f303 	lsl.w	r3, r2, r3
 805095e:	693a      	ldr	r2, [r7, #16]
 8050960:	4313      	orrs	r3, r2
 8050962:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8050964:	687b      	ldr	r3, [r7, #4]
 8050966:	693a      	ldr	r2, [r7, #16]
 8050968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 805096a:	683b      	ldr	r3, [r7, #0]
 805096c:	685b      	ldr	r3, [r3, #4]
 805096e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8050972:	2b00      	cmp	r3, #0
 8050974:	f000 809a 	beq.w	8050aac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8050978:	4b55      	ldr	r3, [pc, #340]	; (8050ad0 <HAL_GPIO_Init+0x2cc>)
 805097a:	699b      	ldr	r3, [r3, #24]
 805097c:	4a54      	ldr	r2, [pc, #336]	; (8050ad0 <HAL_GPIO_Init+0x2cc>)
 805097e:	f043 0301 	orr.w	r3, r3, #1
 8050982:	6193      	str	r3, [r2, #24]
 8050984:	4b52      	ldr	r3, [pc, #328]	; (8050ad0 <HAL_GPIO_Init+0x2cc>)
 8050986:	699b      	ldr	r3, [r3, #24]
 8050988:	f003 0301 	and.w	r3, r3, #1
 805098c:	60bb      	str	r3, [r7, #8]
 805098e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8050990:	4a50      	ldr	r2, [pc, #320]	; (8050ad4 <HAL_GPIO_Init+0x2d0>)
 8050992:	697b      	ldr	r3, [r7, #20]
 8050994:	089b      	lsrs	r3, r3, #2
 8050996:	3302      	adds	r3, #2
 8050998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 805099c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 805099e:	697b      	ldr	r3, [r7, #20]
 80509a0:	f003 0303 	and.w	r3, r3, #3
 80509a4:	009b      	lsls	r3, r3, #2
 80509a6:	220f      	movs	r2, #15
 80509a8:	fa02 f303 	lsl.w	r3, r2, r3
 80509ac:	43db      	mvns	r3, r3
 80509ae:	693a      	ldr	r2, [r7, #16]
 80509b0:	4013      	ands	r3, r2
 80509b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80509b4:	687b      	ldr	r3, [r7, #4]
 80509b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80509ba:	d013      	beq.n	80509e4 <HAL_GPIO_Init+0x1e0>
 80509bc:	687b      	ldr	r3, [r7, #4]
 80509be:	4a46      	ldr	r2, [pc, #280]	; (8050ad8 <HAL_GPIO_Init+0x2d4>)
 80509c0:	4293      	cmp	r3, r2
 80509c2:	d00d      	beq.n	80509e0 <HAL_GPIO_Init+0x1dc>
 80509c4:	687b      	ldr	r3, [r7, #4]
 80509c6:	4a45      	ldr	r2, [pc, #276]	; (8050adc <HAL_GPIO_Init+0x2d8>)
 80509c8:	4293      	cmp	r3, r2
 80509ca:	d007      	beq.n	80509dc <HAL_GPIO_Init+0x1d8>
 80509cc:	687b      	ldr	r3, [r7, #4]
 80509ce:	4a44      	ldr	r2, [pc, #272]	; (8050ae0 <HAL_GPIO_Init+0x2dc>)
 80509d0:	4293      	cmp	r3, r2
 80509d2:	d101      	bne.n	80509d8 <HAL_GPIO_Init+0x1d4>
 80509d4:	2303      	movs	r3, #3
 80509d6:	e006      	b.n	80509e6 <HAL_GPIO_Init+0x1e2>
 80509d8:	2305      	movs	r3, #5
 80509da:	e004      	b.n	80509e6 <HAL_GPIO_Init+0x1e2>
 80509dc:	2302      	movs	r3, #2
 80509de:	e002      	b.n	80509e6 <HAL_GPIO_Init+0x1e2>
 80509e0:	2301      	movs	r3, #1
 80509e2:	e000      	b.n	80509e6 <HAL_GPIO_Init+0x1e2>
 80509e4:	2300      	movs	r3, #0
 80509e6:	697a      	ldr	r2, [r7, #20]
 80509e8:	f002 0203 	and.w	r2, r2, #3
 80509ec:	0092      	lsls	r2, r2, #2
 80509ee:	4093      	lsls	r3, r2
 80509f0:	693a      	ldr	r2, [r7, #16]
 80509f2:	4313      	orrs	r3, r2
 80509f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80509f6:	4937      	ldr	r1, [pc, #220]	; (8050ad4 <HAL_GPIO_Init+0x2d0>)
 80509f8:	697b      	ldr	r3, [r7, #20]
 80509fa:	089b      	lsrs	r3, r3, #2
 80509fc:	3302      	adds	r3, #2
 80509fe:	693a      	ldr	r2, [r7, #16]
 8050a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8050a04:	4b37      	ldr	r3, [pc, #220]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a06:	689b      	ldr	r3, [r3, #8]
 8050a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8050a0a:	68fb      	ldr	r3, [r7, #12]
 8050a0c:	43db      	mvns	r3, r3
 8050a0e:	693a      	ldr	r2, [r7, #16]
 8050a10:	4013      	ands	r3, r2
 8050a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8050a14:	683b      	ldr	r3, [r7, #0]
 8050a16:	685b      	ldr	r3, [r3, #4]
 8050a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8050a1c:	2b00      	cmp	r3, #0
 8050a1e:	d003      	beq.n	8050a28 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8050a20:	693a      	ldr	r2, [r7, #16]
 8050a22:	68fb      	ldr	r3, [r7, #12]
 8050a24:	4313      	orrs	r3, r2
 8050a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8050a28:	4a2e      	ldr	r2, [pc, #184]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a2a:	693b      	ldr	r3, [r7, #16]
 8050a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8050a2e:	4b2d      	ldr	r3, [pc, #180]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a30:	68db      	ldr	r3, [r3, #12]
 8050a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8050a34:	68fb      	ldr	r3, [r7, #12]
 8050a36:	43db      	mvns	r3, r3
 8050a38:	693a      	ldr	r2, [r7, #16]
 8050a3a:	4013      	ands	r3, r2
 8050a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8050a3e:	683b      	ldr	r3, [r7, #0]
 8050a40:	685b      	ldr	r3, [r3, #4]
 8050a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8050a46:	2b00      	cmp	r3, #0
 8050a48:	d003      	beq.n	8050a52 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8050a4a:	693a      	ldr	r2, [r7, #16]
 8050a4c:	68fb      	ldr	r3, [r7, #12]
 8050a4e:	4313      	orrs	r3, r2
 8050a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8050a52:	4a24      	ldr	r2, [pc, #144]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a54:	693b      	ldr	r3, [r7, #16]
 8050a56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8050a58:	4b22      	ldr	r3, [pc, #136]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a5a:	685b      	ldr	r3, [r3, #4]
 8050a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8050a5e:	68fb      	ldr	r3, [r7, #12]
 8050a60:	43db      	mvns	r3, r3
 8050a62:	693a      	ldr	r2, [r7, #16]
 8050a64:	4013      	ands	r3, r2
 8050a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8050a68:	683b      	ldr	r3, [r7, #0]
 8050a6a:	685b      	ldr	r3, [r3, #4]
 8050a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8050a70:	2b00      	cmp	r3, #0
 8050a72:	d003      	beq.n	8050a7c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8050a74:	693a      	ldr	r2, [r7, #16]
 8050a76:	68fb      	ldr	r3, [r7, #12]
 8050a78:	4313      	orrs	r3, r2
 8050a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8050a7c:	4a19      	ldr	r2, [pc, #100]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a7e:	693b      	ldr	r3, [r7, #16]
 8050a80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8050a82:	4b18      	ldr	r3, [pc, #96]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050a84:	681b      	ldr	r3, [r3, #0]
 8050a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8050a88:	68fb      	ldr	r3, [r7, #12]
 8050a8a:	43db      	mvns	r3, r3
 8050a8c:	693a      	ldr	r2, [r7, #16]
 8050a8e:	4013      	ands	r3, r2
 8050a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8050a92:	683b      	ldr	r3, [r7, #0]
 8050a94:	685b      	ldr	r3, [r3, #4]
 8050a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8050a9a:	2b00      	cmp	r3, #0
 8050a9c:	d003      	beq.n	8050aa6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8050a9e:	693a      	ldr	r2, [r7, #16]
 8050aa0:	68fb      	ldr	r3, [r7, #12]
 8050aa2:	4313      	orrs	r3, r2
 8050aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8050aa6:	4a0f      	ldr	r2, [pc, #60]	; (8050ae4 <HAL_GPIO_Init+0x2e0>)
 8050aa8:	693b      	ldr	r3, [r7, #16]
 8050aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8050aac:	697b      	ldr	r3, [r7, #20]
 8050aae:	3301      	adds	r3, #1
 8050ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8050ab2:	683b      	ldr	r3, [r7, #0]
 8050ab4:	681a      	ldr	r2, [r3, #0]
 8050ab6:	697b      	ldr	r3, [r7, #20]
 8050ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8050abc:	2b00      	cmp	r3, #0
 8050abe:	f47f aea9 	bne.w	8050814 <HAL_GPIO_Init+0x10>
  }
}
 8050ac2:	bf00      	nop
 8050ac4:	bf00      	nop
 8050ac6:	371c      	adds	r7, #28
 8050ac8:	46bd      	mov	sp, r7
 8050aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050ace:	4770      	bx	lr
 8050ad0:	40021000 	.word	0x40021000
 8050ad4:	40010000 	.word	0x40010000
 8050ad8:	48000400 	.word	0x48000400
 8050adc:	48000800 	.word	0x48000800
 8050ae0:	48000c00 	.word	0x48000c00
 8050ae4:	40010400 	.word	0x40010400

08050ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8050ae8:	b480      	push	{r7}
 8050aea:	b083      	sub	sp, #12
 8050aec:	af00      	add	r7, sp, #0
 8050aee:	6078      	str	r0, [r7, #4]
 8050af0:	460b      	mov	r3, r1
 8050af2:	807b      	strh	r3, [r7, #2]
 8050af4:	4613      	mov	r3, r2
 8050af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8050af8:	787b      	ldrb	r3, [r7, #1]
 8050afa:	2b00      	cmp	r3, #0
 8050afc:	d003      	beq.n	8050b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8050afe:	887a      	ldrh	r2, [r7, #2]
 8050b00:	687b      	ldr	r3, [r7, #4]
 8050b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8050b04:	e002      	b.n	8050b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8050b06:	887a      	ldrh	r2, [r7, #2]
 8050b08:	687b      	ldr	r3, [r7, #4]
 8050b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8050b0c:	bf00      	nop
 8050b0e:	370c      	adds	r7, #12
 8050b10:	46bd      	mov	sp, r7
 8050b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050b16:	4770      	bx	lr

08050b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8050b18:	b580      	push	{r7, lr}
 8050b1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8050b1e:	af00      	add	r7, sp, #0
 8050b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050b28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8050b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050b32:	681b      	ldr	r3, [r3, #0]
 8050b34:	2b00      	cmp	r3, #0
 8050b36:	d102      	bne.n	8050b3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8050b38:	2301      	movs	r3, #1
 8050b3a:	f001 b823 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8050b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050b46:	681b      	ldr	r3, [r3, #0]
 8050b48:	681b      	ldr	r3, [r3, #0]
 8050b4a:	f003 0301 	and.w	r3, r3, #1
 8050b4e:	2b00      	cmp	r3, #0
 8050b50:	f000 817d 	beq.w	8050e4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8050b54:	4bbc      	ldr	r3, [pc, #752]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050b56:	685b      	ldr	r3, [r3, #4]
 8050b58:	f003 030c 	and.w	r3, r3, #12
 8050b5c:	2b04      	cmp	r3, #4
 8050b5e:	d00c      	beq.n	8050b7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8050b60:	4bb9      	ldr	r3, [pc, #740]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050b62:	685b      	ldr	r3, [r3, #4]
 8050b64:	f003 030c 	and.w	r3, r3, #12
 8050b68:	2b08      	cmp	r3, #8
 8050b6a:	d15c      	bne.n	8050c26 <HAL_RCC_OscConfig+0x10e>
 8050b6c:	4bb6      	ldr	r3, [pc, #728]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050b6e:	685b      	ldr	r3, [r3, #4]
 8050b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8050b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8050b78:	d155      	bne.n	8050c26 <HAL_RCC_OscConfig+0x10e>
 8050b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050b7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050b82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8050b86:	fa93 f3a3 	rbit	r3, r3
 8050b8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8050b8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8050b92:	fab3 f383 	clz	r3, r3
 8050b96:	b2db      	uxtb	r3, r3
 8050b98:	095b      	lsrs	r3, r3, #5
 8050b9a:	b2db      	uxtb	r3, r3
 8050b9c:	f043 0301 	orr.w	r3, r3, #1
 8050ba0:	b2db      	uxtb	r3, r3
 8050ba2:	2b01      	cmp	r3, #1
 8050ba4:	d102      	bne.n	8050bac <HAL_RCC_OscConfig+0x94>
 8050ba6:	4ba8      	ldr	r3, [pc, #672]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050ba8:	681b      	ldr	r3, [r3, #0]
 8050baa:	e015      	b.n	8050bd8 <HAL_RCC_OscConfig+0xc0>
 8050bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050bb0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050bb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8050bb8:	fa93 f3a3 	rbit	r3, r3
 8050bbc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8050bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050bc4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8050bc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8050bcc:	fa93 f3a3 	rbit	r3, r3
 8050bd0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8050bd4:	4b9c      	ldr	r3, [pc, #624]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8050bdc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8050be0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8050be4:	fa92 f2a2 	rbit	r2, r2
 8050be8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8050bec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8050bf0:	fab2 f282 	clz	r2, r2
 8050bf4:	b2d2      	uxtb	r2, r2
 8050bf6:	f042 0220 	orr.w	r2, r2, #32
 8050bfa:	b2d2      	uxtb	r2, r2
 8050bfc:	f002 021f 	and.w	r2, r2, #31
 8050c00:	2101      	movs	r1, #1
 8050c02:	fa01 f202 	lsl.w	r2, r1, r2
 8050c06:	4013      	ands	r3, r2
 8050c08:	2b00      	cmp	r3, #0
 8050c0a:	f000 811f 	beq.w	8050e4c <HAL_RCC_OscConfig+0x334>
 8050c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050c16:	681b      	ldr	r3, [r3, #0]
 8050c18:	685b      	ldr	r3, [r3, #4]
 8050c1a:	2b00      	cmp	r3, #0
 8050c1c:	f040 8116 	bne.w	8050e4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8050c20:	2301      	movs	r3, #1
 8050c22:	f000 bfaf 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8050c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050c2e:	681b      	ldr	r3, [r3, #0]
 8050c30:	685b      	ldr	r3, [r3, #4]
 8050c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8050c36:	d106      	bne.n	8050c46 <HAL_RCC_OscConfig+0x12e>
 8050c38:	4b83      	ldr	r3, [pc, #524]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c3a:	681b      	ldr	r3, [r3, #0]
 8050c3c:	4a82      	ldr	r2, [pc, #520]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8050c42:	6013      	str	r3, [r2, #0]
 8050c44:	e036      	b.n	8050cb4 <HAL_RCC_OscConfig+0x19c>
 8050c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050c4e:	681b      	ldr	r3, [r3, #0]
 8050c50:	685b      	ldr	r3, [r3, #4]
 8050c52:	2b00      	cmp	r3, #0
 8050c54:	d10c      	bne.n	8050c70 <HAL_RCC_OscConfig+0x158>
 8050c56:	4b7c      	ldr	r3, [pc, #496]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c58:	681b      	ldr	r3, [r3, #0]
 8050c5a:	4a7b      	ldr	r2, [pc, #492]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8050c60:	6013      	str	r3, [r2, #0]
 8050c62:	4b79      	ldr	r3, [pc, #484]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c64:	681b      	ldr	r3, [r3, #0]
 8050c66:	4a78      	ldr	r2, [pc, #480]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8050c6c:	6013      	str	r3, [r2, #0]
 8050c6e:	e021      	b.n	8050cb4 <HAL_RCC_OscConfig+0x19c>
 8050c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050c78:	681b      	ldr	r3, [r3, #0]
 8050c7a:	685b      	ldr	r3, [r3, #4]
 8050c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8050c80:	d10c      	bne.n	8050c9c <HAL_RCC_OscConfig+0x184>
 8050c82:	4b71      	ldr	r3, [pc, #452]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c84:	681b      	ldr	r3, [r3, #0]
 8050c86:	4a70      	ldr	r2, [pc, #448]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8050c8c:	6013      	str	r3, [r2, #0]
 8050c8e:	4b6e      	ldr	r3, [pc, #440]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c90:	681b      	ldr	r3, [r3, #0]
 8050c92:	4a6d      	ldr	r2, [pc, #436]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8050c98:	6013      	str	r3, [r2, #0]
 8050c9a:	e00b      	b.n	8050cb4 <HAL_RCC_OscConfig+0x19c>
 8050c9c:	4b6a      	ldr	r3, [pc, #424]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050c9e:	681b      	ldr	r3, [r3, #0]
 8050ca0:	4a69      	ldr	r2, [pc, #420]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8050ca6:	6013      	str	r3, [r2, #0]
 8050ca8:	4b67      	ldr	r3, [pc, #412]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050caa:	681b      	ldr	r3, [r3, #0]
 8050cac:	4a66      	ldr	r2, [pc, #408]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8050cb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8050cb4:	4b64      	ldr	r3, [pc, #400]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050cb8:	f023 020f 	bic.w	r2, r3, #15
 8050cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050cc4:	681b      	ldr	r3, [r3, #0]
 8050cc6:	689b      	ldr	r3, [r3, #8]
 8050cc8:	495f      	ldr	r1, [pc, #380]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050cca:	4313      	orrs	r3, r2
 8050ccc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8050cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050cd6:	681b      	ldr	r3, [r3, #0]
 8050cd8:	685b      	ldr	r3, [r3, #4]
 8050cda:	2b00      	cmp	r3, #0
 8050cdc:	d059      	beq.n	8050d92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8050cde:	f7ff fc9f 	bl	8050620 <HAL_GetTick>
 8050ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8050ce6:	e00a      	b.n	8050cfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8050ce8:	f7ff fc9a 	bl	8050620 <HAL_GetTick>
 8050cec:	4602      	mov	r2, r0
 8050cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8050cf2:	1ad3      	subs	r3, r2, r3
 8050cf4:	2b64      	cmp	r3, #100	; 0x64
 8050cf6:	d902      	bls.n	8050cfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8050cf8:	2303      	movs	r3, #3
 8050cfa:	f000 bf43 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 8050cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050d02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050d06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8050d0a:	fa93 f3a3 	rbit	r3, r3
 8050d0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8050d12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8050d16:	fab3 f383 	clz	r3, r3
 8050d1a:	b2db      	uxtb	r3, r3
 8050d1c:	095b      	lsrs	r3, r3, #5
 8050d1e:	b2db      	uxtb	r3, r3
 8050d20:	f043 0301 	orr.w	r3, r3, #1
 8050d24:	b2db      	uxtb	r3, r3
 8050d26:	2b01      	cmp	r3, #1
 8050d28:	d102      	bne.n	8050d30 <HAL_RCC_OscConfig+0x218>
 8050d2a:	4b47      	ldr	r3, [pc, #284]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050d2c:	681b      	ldr	r3, [r3, #0]
 8050d2e:	e015      	b.n	8050d5c <HAL_RCC_OscConfig+0x244>
 8050d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050d34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050d38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8050d3c:	fa93 f3a3 	rbit	r3, r3
 8050d40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8050d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050d48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8050d4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8050d50:	fa93 f3a3 	rbit	r3, r3
 8050d54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8050d58:	4b3b      	ldr	r3, [pc, #236]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8050d60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8050d64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8050d68:	fa92 f2a2 	rbit	r2, r2
 8050d6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8050d70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8050d74:	fab2 f282 	clz	r2, r2
 8050d78:	b2d2      	uxtb	r2, r2
 8050d7a:	f042 0220 	orr.w	r2, r2, #32
 8050d7e:	b2d2      	uxtb	r2, r2
 8050d80:	f002 021f 	and.w	r2, r2, #31
 8050d84:	2101      	movs	r1, #1
 8050d86:	fa01 f202 	lsl.w	r2, r1, r2
 8050d8a:	4013      	ands	r3, r2
 8050d8c:	2b00      	cmp	r3, #0
 8050d8e:	d0ab      	beq.n	8050ce8 <HAL_RCC_OscConfig+0x1d0>
 8050d90:	e05d      	b.n	8050e4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8050d92:	f7ff fc45 	bl	8050620 <HAL_GetTick>
 8050d96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8050d9a:	e00a      	b.n	8050db2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8050d9c:	f7ff fc40 	bl	8050620 <HAL_GetTick>
 8050da0:	4602      	mov	r2, r0
 8050da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8050da6:	1ad3      	subs	r3, r2, r3
 8050da8:	2b64      	cmp	r3, #100	; 0x64
 8050daa:	d902      	bls.n	8050db2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8050dac:	2303      	movs	r3, #3
 8050dae:	f000 bee9 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 8050db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050db6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050dba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8050dbe:	fa93 f3a3 	rbit	r3, r3
 8050dc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8050dc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8050dca:	fab3 f383 	clz	r3, r3
 8050dce:	b2db      	uxtb	r3, r3
 8050dd0:	095b      	lsrs	r3, r3, #5
 8050dd2:	b2db      	uxtb	r3, r3
 8050dd4:	f043 0301 	orr.w	r3, r3, #1
 8050dd8:	b2db      	uxtb	r3, r3
 8050dda:	2b01      	cmp	r3, #1
 8050ddc:	d102      	bne.n	8050de4 <HAL_RCC_OscConfig+0x2cc>
 8050dde:	4b1a      	ldr	r3, [pc, #104]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050de0:	681b      	ldr	r3, [r3, #0]
 8050de2:	e015      	b.n	8050e10 <HAL_RCC_OscConfig+0x2f8>
 8050de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050de8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050dec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8050df0:	fa93 f3a3 	rbit	r3, r3
 8050df4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8050df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8050dfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8050e00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8050e04:	fa93 f3a3 	rbit	r3, r3
 8050e08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8050e0c:	4b0e      	ldr	r3, [pc, #56]	; (8050e48 <HAL_RCC_OscConfig+0x330>)
 8050e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8050e14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8050e18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8050e1c:	fa92 f2a2 	rbit	r2, r2
 8050e20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8050e24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8050e28:	fab2 f282 	clz	r2, r2
 8050e2c:	b2d2      	uxtb	r2, r2
 8050e2e:	f042 0220 	orr.w	r2, r2, #32
 8050e32:	b2d2      	uxtb	r2, r2
 8050e34:	f002 021f 	and.w	r2, r2, #31
 8050e38:	2101      	movs	r1, #1
 8050e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8050e3e:	4013      	ands	r3, r2
 8050e40:	2b00      	cmp	r3, #0
 8050e42:	d1ab      	bne.n	8050d9c <HAL_RCC_OscConfig+0x284>
 8050e44:	e003      	b.n	8050e4e <HAL_RCC_OscConfig+0x336>
 8050e46:	bf00      	nop
 8050e48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8050e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8050e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050e56:	681b      	ldr	r3, [r3, #0]
 8050e58:	681b      	ldr	r3, [r3, #0]
 8050e5a:	f003 0302 	and.w	r3, r3, #2
 8050e5e:	2b00      	cmp	r3, #0
 8050e60:	f000 817d 	beq.w	805115e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8050e64:	4ba6      	ldr	r3, [pc, #664]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050e66:	685b      	ldr	r3, [r3, #4]
 8050e68:	f003 030c 	and.w	r3, r3, #12
 8050e6c:	2b00      	cmp	r3, #0
 8050e6e:	d00b      	beq.n	8050e88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8050e70:	4ba3      	ldr	r3, [pc, #652]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050e72:	685b      	ldr	r3, [r3, #4]
 8050e74:	f003 030c 	and.w	r3, r3, #12
 8050e78:	2b08      	cmp	r3, #8
 8050e7a:	d172      	bne.n	8050f62 <HAL_RCC_OscConfig+0x44a>
 8050e7c:	4ba0      	ldr	r3, [pc, #640]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050e7e:	685b      	ldr	r3, [r3, #4]
 8050e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8050e84:	2b00      	cmp	r3, #0
 8050e86:	d16c      	bne.n	8050f62 <HAL_RCC_OscConfig+0x44a>
 8050e88:	2302      	movs	r3, #2
 8050e8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050e8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8050e92:	fa93 f3a3 	rbit	r3, r3
 8050e96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8050e9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8050e9e:	fab3 f383 	clz	r3, r3
 8050ea2:	b2db      	uxtb	r3, r3
 8050ea4:	095b      	lsrs	r3, r3, #5
 8050ea6:	b2db      	uxtb	r3, r3
 8050ea8:	f043 0301 	orr.w	r3, r3, #1
 8050eac:	b2db      	uxtb	r3, r3
 8050eae:	2b01      	cmp	r3, #1
 8050eb0:	d102      	bne.n	8050eb8 <HAL_RCC_OscConfig+0x3a0>
 8050eb2:	4b93      	ldr	r3, [pc, #588]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050eb4:	681b      	ldr	r3, [r3, #0]
 8050eb6:	e013      	b.n	8050ee0 <HAL_RCC_OscConfig+0x3c8>
 8050eb8:	2302      	movs	r3, #2
 8050eba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050ebe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8050ec2:	fa93 f3a3 	rbit	r3, r3
 8050ec6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8050eca:	2302      	movs	r3, #2
 8050ecc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8050ed0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8050ed4:	fa93 f3a3 	rbit	r3, r3
 8050ed8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8050edc:	4b88      	ldr	r3, [pc, #544]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050ee0:	2202      	movs	r2, #2
 8050ee2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8050ee6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8050eea:	fa92 f2a2 	rbit	r2, r2
 8050eee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8050ef2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8050ef6:	fab2 f282 	clz	r2, r2
 8050efa:	b2d2      	uxtb	r2, r2
 8050efc:	f042 0220 	orr.w	r2, r2, #32
 8050f00:	b2d2      	uxtb	r2, r2
 8050f02:	f002 021f 	and.w	r2, r2, #31
 8050f06:	2101      	movs	r1, #1
 8050f08:	fa01 f202 	lsl.w	r2, r1, r2
 8050f0c:	4013      	ands	r3, r2
 8050f0e:	2b00      	cmp	r3, #0
 8050f10:	d00a      	beq.n	8050f28 <HAL_RCC_OscConfig+0x410>
 8050f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050f1a:	681b      	ldr	r3, [r3, #0]
 8050f1c:	691b      	ldr	r3, [r3, #16]
 8050f1e:	2b01      	cmp	r3, #1
 8050f20:	d002      	beq.n	8050f28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8050f22:	2301      	movs	r3, #1
 8050f24:	f000 be2e 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8050f28:	4b75      	ldr	r3, [pc, #468]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050f2a:	681b      	ldr	r3, [r3, #0]
 8050f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8050f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050f38:	681b      	ldr	r3, [r3, #0]
 8050f3a:	695b      	ldr	r3, [r3, #20]
 8050f3c:	21f8      	movs	r1, #248	; 0xf8
 8050f3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050f42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8050f46:	fa91 f1a1 	rbit	r1, r1
 8050f4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8050f4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8050f52:	fab1 f181 	clz	r1, r1
 8050f56:	b2c9      	uxtb	r1, r1
 8050f58:	408b      	lsls	r3, r1
 8050f5a:	4969      	ldr	r1, [pc, #420]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050f5c:	4313      	orrs	r3, r2
 8050f5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8050f60:	e0fd      	b.n	805115e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8050f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8050f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8050f6a:	681b      	ldr	r3, [r3, #0]
 8050f6c:	691b      	ldr	r3, [r3, #16]
 8050f6e:	2b00      	cmp	r3, #0
 8050f70:	f000 8088 	beq.w	8051084 <HAL_RCC_OscConfig+0x56c>
 8050f74:	2301      	movs	r3, #1
 8050f76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050f7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8050f7e:	fa93 f3a3 	rbit	r3, r3
 8050f82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8050f86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8050f8a:	fab3 f383 	clz	r3, r3
 8050f8e:	b2db      	uxtb	r3, r3
 8050f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8050f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8050f98:	009b      	lsls	r3, r3, #2
 8050f9a:	461a      	mov	r2, r3
 8050f9c:	2301      	movs	r3, #1
 8050f9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8050fa0:	f7ff fb3e 	bl	8050620 <HAL_GetTick>
 8050fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8050fa8:	e00a      	b.n	8050fc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8050faa:	f7ff fb39 	bl	8050620 <HAL_GetTick>
 8050fae:	4602      	mov	r2, r0
 8050fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8050fb4:	1ad3      	subs	r3, r2, r3
 8050fb6:	2b02      	cmp	r3, #2
 8050fb8:	d902      	bls.n	8050fc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8050fba:	2303      	movs	r3, #3
 8050fbc:	f000 bde2 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 8050fc0:	2302      	movs	r3, #2
 8050fc2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050fc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8050fca:	fa93 f3a3 	rbit	r3, r3
 8050fce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8050fd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8050fd6:	fab3 f383 	clz	r3, r3
 8050fda:	b2db      	uxtb	r3, r3
 8050fdc:	095b      	lsrs	r3, r3, #5
 8050fde:	b2db      	uxtb	r3, r3
 8050fe0:	f043 0301 	orr.w	r3, r3, #1
 8050fe4:	b2db      	uxtb	r3, r3
 8050fe6:	2b01      	cmp	r3, #1
 8050fe8:	d102      	bne.n	8050ff0 <HAL_RCC_OscConfig+0x4d8>
 8050fea:	4b45      	ldr	r3, [pc, #276]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8050fec:	681b      	ldr	r3, [r3, #0]
 8050fee:	e013      	b.n	8051018 <HAL_RCC_OscConfig+0x500>
 8050ff0:	2302      	movs	r3, #2
 8050ff2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8050ff6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8050ffa:	fa93 f3a3 	rbit	r3, r3
 8050ffe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8051002:	2302      	movs	r3, #2
 8051004:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8051008:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 805100c:	fa93 f3a3 	rbit	r3, r3
 8051010:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8051014:	4b3a      	ldr	r3, [pc, #232]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 8051016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051018:	2202      	movs	r2, #2
 805101a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 805101e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8051022:	fa92 f2a2 	rbit	r2, r2
 8051026:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 805102a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 805102e:	fab2 f282 	clz	r2, r2
 8051032:	b2d2      	uxtb	r2, r2
 8051034:	f042 0220 	orr.w	r2, r2, #32
 8051038:	b2d2      	uxtb	r2, r2
 805103a:	f002 021f 	and.w	r2, r2, #31
 805103e:	2101      	movs	r1, #1
 8051040:	fa01 f202 	lsl.w	r2, r1, r2
 8051044:	4013      	ands	r3, r2
 8051046:	2b00      	cmp	r3, #0
 8051048:	d0af      	beq.n	8050faa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 805104a:	4b2d      	ldr	r3, [pc, #180]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 805104c:	681b      	ldr	r3, [r3, #0]
 805104e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8051052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805105a:	681b      	ldr	r3, [r3, #0]
 805105c:	695b      	ldr	r3, [r3, #20]
 805105e:	21f8      	movs	r1, #248	; 0xf8
 8051060:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051064:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8051068:	fa91 f1a1 	rbit	r1, r1
 805106c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8051070:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8051074:	fab1 f181 	clz	r1, r1
 8051078:	b2c9      	uxtb	r1, r1
 805107a:	408b      	lsls	r3, r1
 805107c:	4920      	ldr	r1, [pc, #128]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 805107e:	4313      	orrs	r3, r2
 8051080:	600b      	str	r3, [r1, #0]
 8051082:	e06c      	b.n	805115e <HAL_RCC_OscConfig+0x646>
 8051084:	2301      	movs	r3, #1
 8051086:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 805108a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 805108e:	fa93 f3a3 	rbit	r3, r3
 8051092:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8051096:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 805109a:	fab3 f383 	clz	r3, r3
 805109e:	b2db      	uxtb	r3, r3
 80510a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80510a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80510a8:	009b      	lsls	r3, r3, #2
 80510aa:	461a      	mov	r2, r3
 80510ac:	2300      	movs	r3, #0
 80510ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80510b0:	f7ff fab6 	bl	8050620 <HAL_GetTick>
 80510b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80510b8:	e00a      	b.n	80510d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80510ba:	f7ff fab1 	bl	8050620 <HAL_GetTick>
 80510be:	4602      	mov	r2, r0
 80510c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80510c4:	1ad3      	subs	r3, r2, r3
 80510c6:	2b02      	cmp	r3, #2
 80510c8:	d902      	bls.n	80510d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80510ca:	2303      	movs	r3, #3
 80510cc:	f000 bd5a 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 80510d0:	2302      	movs	r3, #2
 80510d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80510d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80510da:	fa93 f3a3 	rbit	r3, r3
 80510de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80510e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80510e6:	fab3 f383 	clz	r3, r3
 80510ea:	b2db      	uxtb	r3, r3
 80510ec:	095b      	lsrs	r3, r3, #5
 80510ee:	b2db      	uxtb	r3, r3
 80510f0:	f043 0301 	orr.w	r3, r3, #1
 80510f4:	b2db      	uxtb	r3, r3
 80510f6:	2b01      	cmp	r3, #1
 80510f8:	d104      	bne.n	8051104 <HAL_RCC_OscConfig+0x5ec>
 80510fa:	4b01      	ldr	r3, [pc, #4]	; (8051100 <HAL_RCC_OscConfig+0x5e8>)
 80510fc:	681b      	ldr	r3, [r3, #0]
 80510fe:	e015      	b.n	805112c <HAL_RCC_OscConfig+0x614>
 8051100:	40021000 	.word	0x40021000
 8051104:	2302      	movs	r3, #2
 8051106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 805110a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 805110e:	fa93 f3a3 	rbit	r3, r3
 8051112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8051116:	2302      	movs	r3, #2
 8051118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 805111c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8051120:	fa93 f3a3 	rbit	r3, r3
 8051124:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8051128:	4bc8      	ldr	r3, [pc, #800]	; (805144c <HAL_RCC_OscConfig+0x934>)
 805112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805112c:	2202      	movs	r2, #2
 805112e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8051132:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8051136:	fa92 f2a2 	rbit	r2, r2
 805113a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 805113e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8051142:	fab2 f282 	clz	r2, r2
 8051146:	b2d2      	uxtb	r2, r2
 8051148:	f042 0220 	orr.w	r2, r2, #32
 805114c:	b2d2      	uxtb	r2, r2
 805114e:	f002 021f 	and.w	r2, r2, #31
 8051152:	2101      	movs	r1, #1
 8051154:	fa01 f202 	lsl.w	r2, r1, r2
 8051158:	4013      	ands	r3, r2
 805115a:	2b00      	cmp	r3, #0
 805115c:	d1ad      	bne.n	80510ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 805115e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051166:	681b      	ldr	r3, [r3, #0]
 8051168:	681b      	ldr	r3, [r3, #0]
 805116a:	f003 0308 	and.w	r3, r3, #8
 805116e:	2b00      	cmp	r3, #0
 8051170:	f000 8110 	beq.w	8051394 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8051174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805117c:	681b      	ldr	r3, [r3, #0]
 805117e:	699b      	ldr	r3, [r3, #24]
 8051180:	2b00      	cmp	r3, #0
 8051182:	d079      	beq.n	8051278 <HAL_RCC_OscConfig+0x760>
 8051184:	2301      	movs	r3, #1
 8051186:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 805118a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 805118e:	fa93 f3a3 	rbit	r3, r3
 8051192:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8051196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 805119a:	fab3 f383 	clz	r3, r3
 805119e:	b2db      	uxtb	r3, r3
 80511a0:	461a      	mov	r2, r3
 80511a2:	4bab      	ldr	r3, [pc, #684]	; (8051450 <HAL_RCC_OscConfig+0x938>)
 80511a4:	4413      	add	r3, r2
 80511a6:	009b      	lsls	r3, r3, #2
 80511a8:	461a      	mov	r2, r3
 80511aa:	2301      	movs	r3, #1
 80511ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80511ae:	f7ff fa37 	bl	8050620 <HAL_GetTick>
 80511b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80511b6:	e00a      	b.n	80511ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80511b8:	f7ff fa32 	bl	8050620 <HAL_GetTick>
 80511bc:	4602      	mov	r2, r0
 80511be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80511c2:	1ad3      	subs	r3, r2, r3
 80511c4:	2b02      	cmp	r3, #2
 80511c6:	d902      	bls.n	80511ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80511c8:	2303      	movs	r3, #3
 80511ca:	f000 bcdb 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 80511ce:	2302      	movs	r3, #2
 80511d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80511d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80511d8:	fa93 f3a3 	rbit	r3, r3
 80511dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80511e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80511e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80511e8:	2202      	movs	r2, #2
 80511ea:	601a      	str	r2, [r3, #0]
 80511ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80511f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80511f4:	681b      	ldr	r3, [r3, #0]
 80511f6:	fa93 f2a3 	rbit	r2, r3
 80511fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80511fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8051202:	601a      	str	r2, [r3, #0]
 8051204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 805120c:	2202      	movs	r2, #2
 805120e:	601a      	str	r2, [r3, #0]
 8051210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8051218:	681b      	ldr	r3, [r3, #0]
 805121a:	fa93 f2a3 	rbit	r2, r3
 805121e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8051226:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8051228:	4b88      	ldr	r3, [pc, #544]	; (805144c <HAL_RCC_OscConfig+0x934>)
 805122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051230:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8051234:	2102      	movs	r1, #2
 8051236:	6019      	str	r1, [r3, #0]
 8051238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805123c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8051240:	681b      	ldr	r3, [r3, #0]
 8051242:	fa93 f1a3 	rbit	r1, r3
 8051246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805124a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 805124e:	6019      	str	r1, [r3, #0]
  return result;
 8051250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051254:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8051258:	681b      	ldr	r3, [r3, #0]
 805125a:	fab3 f383 	clz	r3, r3
 805125e:	b2db      	uxtb	r3, r3
 8051260:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8051264:	b2db      	uxtb	r3, r3
 8051266:	f003 031f 	and.w	r3, r3, #31
 805126a:	2101      	movs	r1, #1
 805126c:	fa01 f303 	lsl.w	r3, r1, r3
 8051270:	4013      	ands	r3, r2
 8051272:	2b00      	cmp	r3, #0
 8051274:	d0a0      	beq.n	80511b8 <HAL_RCC_OscConfig+0x6a0>
 8051276:	e08d      	b.n	8051394 <HAL_RCC_OscConfig+0x87c>
 8051278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805127c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8051280:	2201      	movs	r2, #1
 8051282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051288:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 805128c:	681b      	ldr	r3, [r3, #0]
 805128e:	fa93 f2a3 	rbit	r2, r3
 8051292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051296:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 805129a:	601a      	str	r2, [r3, #0]
  return result;
 805129c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80512a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80512a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80512a6:	fab3 f383 	clz	r3, r3
 80512aa:	b2db      	uxtb	r3, r3
 80512ac:	461a      	mov	r2, r3
 80512ae:	4b68      	ldr	r3, [pc, #416]	; (8051450 <HAL_RCC_OscConfig+0x938>)
 80512b0:	4413      	add	r3, r2
 80512b2:	009b      	lsls	r3, r3, #2
 80512b4:	461a      	mov	r2, r3
 80512b6:	2300      	movs	r3, #0
 80512b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80512ba:	f7ff f9b1 	bl	8050620 <HAL_GetTick>
 80512be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80512c2:	e00a      	b.n	80512da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80512c4:	f7ff f9ac 	bl	8050620 <HAL_GetTick>
 80512c8:	4602      	mov	r2, r0
 80512ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80512ce:	1ad3      	subs	r3, r2, r3
 80512d0:	2b02      	cmp	r3, #2
 80512d2:	d902      	bls.n	80512da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80512d4:	2303      	movs	r3, #3
 80512d6:	f000 bc55 	b.w	8051b84 <HAL_RCC_OscConfig+0x106c>
 80512da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80512de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80512e2:	2202      	movs	r2, #2
 80512e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80512e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80512ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80512ee:	681b      	ldr	r3, [r3, #0]
 80512f0:	fa93 f2a3 	rbit	r2, r3
 80512f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80512f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80512fc:	601a      	str	r2, [r3, #0]
 80512fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051302:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8051306:	2202      	movs	r2, #2
 8051308:	601a      	str	r2, [r3, #0]
 805130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805130e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8051312:	681b      	ldr	r3, [r3, #0]
 8051314:	fa93 f2a3 	rbit	r2, r3
 8051318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805131c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8051320:	601a      	str	r2, [r3, #0]
 8051322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 805132a:	2202      	movs	r2, #2
 805132c:	601a      	str	r2, [r3, #0]
 805132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8051336:	681b      	ldr	r3, [r3, #0]
 8051338:	fa93 f2a3 	rbit	r2, r3
 805133c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051340:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8051344:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8051346:	4b41      	ldr	r3, [pc, #260]	; (805144c <HAL_RCC_OscConfig+0x934>)
 8051348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805134e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8051352:	2102      	movs	r1, #2
 8051354:	6019      	str	r1, [r3, #0]
 8051356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805135a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 805135e:	681b      	ldr	r3, [r3, #0]
 8051360:	fa93 f1a3 	rbit	r1, r3
 8051364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051368:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 805136c:	6019      	str	r1, [r3, #0]
  return result;
 805136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051372:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8051376:	681b      	ldr	r3, [r3, #0]
 8051378:	fab3 f383 	clz	r3, r3
 805137c:	b2db      	uxtb	r3, r3
 805137e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8051382:	b2db      	uxtb	r3, r3
 8051384:	f003 031f 	and.w	r3, r3, #31
 8051388:	2101      	movs	r1, #1
 805138a:	fa01 f303 	lsl.w	r3, r1, r3
 805138e:	4013      	ands	r3, r2
 8051390:	2b00      	cmp	r3, #0
 8051392:	d197      	bne.n	80512c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8051394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805139c:	681b      	ldr	r3, [r3, #0]
 805139e:	681b      	ldr	r3, [r3, #0]
 80513a0:	f003 0304 	and.w	r3, r3, #4
 80513a4:	2b00      	cmp	r3, #0
 80513a6:	f000 81a1 	beq.w	80516ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80513aa:	2300      	movs	r3, #0
 80513ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80513b0:	4b26      	ldr	r3, [pc, #152]	; (805144c <HAL_RCC_OscConfig+0x934>)
 80513b2:	69db      	ldr	r3, [r3, #28]
 80513b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80513b8:	2b00      	cmp	r3, #0
 80513ba:	d116      	bne.n	80513ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80513bc:	4b23      	ldr	r3, [pc, #140]	; (805144c <HAL_RCC_OscConfig+0x934>)
 80513be:	69db      	ldr	r3, [r3, #28]
 80513c0:	4a22      	ldr	r2, [pc, #136]	; (805144c <HAL_RCC_OscConfig+0x934>)
 80513c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80513c6:	61d3      	str	r3, [r2, #28]
 80513c8:	4b20      	ldr	r3, [pc, #128]	; (805144c <HAL_RCC_OscConfig+0x934>)
 80513ca:	69db      	ldr	r3, [r3, #28]
 80513cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80513d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80513d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80513d8:	601a      	str	r2, [r3, #0]
 80513da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80513de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80513e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80513e4:	2301      	movs	r3, #1
 80513e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80513ea:	4b1a      	ldr	r3, [pc, #104]	; (8051454 <HAL_RCC_OscConfig+0x93c>)
 80513ec:	681b      	ldr	r3, [r3, #0]
 80513ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80513f2:	2b00      	cmp	r3, #0
 80513f4:	d11a      	bne.n	805142c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80513f6:	4b17      	ldr	r3, [pc, #92]	; (8051454 <HAL_RCC_OscConfig+0x93c>)
 80513f8:	681b      	ldr	r3, [r3, #0]
 80513fa:	4a16      	ldr	r2, [pc, #88]	; (8051454 <HAL_RCC_OscConfig+0x93c>)
 80513fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8051400:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8051402:	f7ff f90d 	bl	8050620 <HAL_GetTick>
 8051406:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 805140a:	e009      	b.n	8051420 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 805140c:	f7ff f908 	bl	8050620 <HAL_GetTick>
 8051410:	4602      	mov	r2, r0
 8051412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8051416:	1ad3      	subs	r3, r2, r3
 8051418:	2b64      	cmp	r3, #100	; 0x64
 805141a:	d901      	bls.n	8051420 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 805141c:	2303      	movs	r3, #3
 805141e:	e3b1      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8051420:	4b0c      	ldr	r3, [pc, #48]	; (8051454 <HAL_RCC_OscConfig+0x93c>)
 8051422:	681b      	ldr	r3, [r3, #0]
 8051424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8051428:	2b00      	cmp	r3, #0
 805142a:	d0ef      	beq.n	805140c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 805142c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051434:	681b      	ldr	r3, [r3, #0]
 8051436:	68db      	ldr	r3, [r3, #12]
 8051438:	2b01      	cmp	r3, #1
 805143a:	d10d      	bne.n	8051458 <HAL_RCC_OscConfig+0x940>
 805143c:	4b03      	ldr	r3, [pc, #12]	; (805144c <HAL_RCC_OscConfig+0x934>)
 805143e:	6a1b      	ldr	r3, [r3, #32]
 8051440:	4a02      	ldr	r2, [pc, #8]	; (805144c <HAL_RCC_OscConfig+0x934>)
 8051442:	f043 0301 	orr.w	r3, r3, #1
 8051446:	6213      	str	r3, [r2, #32]
 8051448:	e03c      	b.n	80514c4 <HAL_RCC_OscConfig+0x9ac>
 805144a:	bf00      	nop
 805144c:	40021000 	.word	0x40021000
 8051450:	10908120 	.word	0x10908120
 8051454:	40007000 	.word	0x40007000
 8051458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805145c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051460:	681b      	ldr	r3, [r3, #0]
 8051462:	68db      	ldr	r3, [r3, #12]
 8051464:	2b00      	cmp	r3, #0
 8051466:	d10c      	bne.n	8051482 <HAL_RCC_OscConfig+0x96a>
 8051468:	4bc1      	ldr	r3, [pc, #772]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 805146a:	6a1b      	ldr	r3, [r3, #32]
 805146c:	4ac0      	ldr	r2, [pc, #768]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 805146e:	f023 0301 	bic.w	r3, r3, #1
 8051472:	6213      	str	r3, [r2, #32]
 8051474:	4bbe      	ldr	r3, [pc, #760]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051476:	6a1b      	ldr	r3, [r3, #32]
 8051478:	4abd      	ldr	r2, [pc, #756]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 805147a:	f023 0304 	bic.w	r3, r3, #4
 805147e:	6213      	str	r3, [r2, #32]
 8051480:	e020      	b.n	80514c4 <HAL_RCC_OscConfig+0x9ac>
 8051482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805148a:	681b      	ldr	r3, [r3, #0]
 805148c:	68db      	ldr	r3, [r3, #12]
 805148e:	2b05      	cmp	r3, #5
 8051490:	d10c      	bne.n	80514ac <HAL_RCC_OscConfig+0x994>
 8051492:	4bb7      	ldr	r3, [pc, #732]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051494:	6a1b      	ldr	r3, [r3, #32]
 8051496:	4ab6      	ldr	r2, [pc, #728]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051498:	f043 0304 	orr.w	r3, r3, #4
 805149c:	6213      	str	r3, [r2, #32]
 805149e:	4bb4      	ldr	r3, [pc, #720]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514a0:	6a1b      	ldr	r3, [r3, #32]
 80514a2:	4ab3      	ldr	r2, [pc, #716]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514a4:	f043 0301 	orr.w	r3, r3, #1
 80514a8:	6213      	str	r3, [r2, #32]
 80514aa:	e00b      	b.n	80514c4 <HAL_RCC_OscConfig+0x9ac>
 80514ac:	4bb0      	ldr	r3, [pc, #704]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514ae:	6a1b      	ldr	r3, [r3, #32]
 80514b0:	4aaf      	ldr	r2, [pc, #700]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514b2:	f023 0301 	bic.w	r3, r3, #1
 80514b6:	6213      	str	r3, [r2, #32]
 80514b8:	4bad      	ldr	r3, [pc, #692]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514ba:	6a1b      	ldr	r3, [r3, #32]
 80514bc:	4aac      	ldr	r2, [pc, #688]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80514be:	f023 0304 	bic.w	r3, r3, #4
 80514c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80514c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80514c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80514cc:	681b      	ldr	r3, [r3, #0]
 80514ce:	68db      	ldr	r3, [r3, #12]
 80514d0:	2b00      	cmp	r3, #0
 80514d2:	f000 8081 	beq.w	80515d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80514d6:	f7ff f8a3 	bl	8050620 <HAL_GetTick>
 80514da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80514de:	e00b      	b.n	80514f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80514e0:	f7ff f89e 	bl	8050620 <HAL_GetTick>
 80514e4:	4602      	mov	r2, r0
 80514e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80514ea:	1ad3      	subs	r3, r2, r3
 80514ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80514f0:	4293      	cmp	r3, r2
 80514f2:	d901      	bls.n	80514f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80514f4:	2303      	movs	r3, #3
 80514f6:	e345      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
 80514f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80514fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8051500:	2202      	movs	r2, #2
 8051502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051508:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 805150c:	681b      	ldr	r3, [r3, #0]
 805150e:	fa93 f2a3 	rbit	r2, r3
 8051512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051516:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 805151a:	601a      	str	r2, [r3, #0]
 805151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051520:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8051524:	2202      	movs	r2, #2
 8051526:	601a      	str	r2, [r3, #0]
 8051528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805152c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8051530:	681b      	ldr	r3, [r3, #0]
 8051532:	fa93 f2a3 	rbit	r2, r3
 8051536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805153a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 805153e:	601a      	str	r2, [r3, #0]
  return result;
 8051540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051544:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8051548:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 805154a:	fab3 f383 	clz	r3, r3
 805154e:	b2db      	uxtb	r3, r3
 8051550:	095b      	lsrs	r3, r3, #5
 8051552:	b2db      	uxtb	r3, r3
 8051554:	f043 0302 	orr.w	r3, r3, #2
 8051558:	b2db      	uxtb	r3, r3
 805155a:	2b02      	cmp	r3, #2
 805155c:	d102      	bne.n	8051564 <HAL_RCC_OscConfig+0xa4c>
 805155e:	4b84      	ldr	r3, [pc, #528]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051560:	6a1b      	ldr	r3, [r3, #32]
 8051562:	e013      	b.n	805158c <HAL_RCC_OscConfig+0xa74>
 8051564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051568:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 805156c:	2202      	movs	r2, #2
 805156e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051574:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8051578:	681b      	ldr	r3, [r3, #0]
 805157a:	fa93 f2a3 	rbit	r2, r3
 805157e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051582:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8051586:	601a      	str	r2, [r3, #0]
 8051588:	4b79      	ldr	r3, [pc, #484]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 805158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805158c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051590:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8051594:	2102      	movs	r1, #2
 8051596:	6011      	str	r1, [r2, #0]
 8051598:	f507 7200 	add.w	r2, r7, #512	; 0x200
 805159c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80515a0:	6812      	ldr	r2, [r2, #0]
 80515a2:	fa92 f1a2 	rbit	r1, r2
 80515a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80515aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80515ae:	6011      	str	r1, [r2, #0]
  return result;
 80515b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80515b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80515b8:	6812      	ldr	r2, [r2, #0]
 80515ba:	fab2 f282 	clz	r2, r2
 80515be:	b2d2      	uxtb	r2, r2
 80515c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80515c4:	b2d2      	uxtb	r2, r2
 80515c6:	f002 021f 	and.w	r2, r2, #31
 80515ca:	2101      	movs	r1, #1
 80515cc:	fa01 f202 	lsl.w	r2, r1, r2
 80515d0:	4013      	ands	r3, r2
 80515d2:	2b00      	cmp	r3, #0
 80515d4:	d084      	beq.n	80514e0 <HAL_RCC_OscConfig+0x9c8>
 80515d6:	e07f      	b.n	80516d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80515d8:	f7ff f822 	bl	8050620 <HAL_GetTick>
 80515dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80515e0:	e00b      	b.n	80515fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80515e2:	f7ff f81d 	bl	8050620 <HAL_GetTick>
 80515e6:	4602      	mov	r2, r0
 80515e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80515ec:	1ad3      	subs	r3, r2, r3
 80515ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80515f2:	4293      	cmp	r3, r2
 80515f4:	d901      	bls.n	80515fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80515f6:	2303      	movs	r3, #3
 80515f8:	e2c4      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
 80515fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80515fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8051602:	2202      	movs	r2, #2
 8051604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805160a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 805160e:	681b      	ldr	r3, [r3, #0]
 8051610:	fa93 f2a3 	rbit	r2, r3
 8051614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051618:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 805161c:	601a      	str	r2, [r3, #0]
 805161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051622:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8051626:	2202      	movs	r2, #2
 8051628:	601a      	str	r2, [r3, #0]
 805162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805162e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8051632:	681b      	ldr	r3, [r3, #0]
 8051634:	fa93 f2a3 	rbit	r2, r3
 8051638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805163c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8051640:	601a      	str	r2, [r3, #0]
  return result;
 8051642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051646:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 805164a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 805164c:	fab3 f383 	clz	r3, r3
 8051650:	b2db      	uxtb	r3, r3
 8051652:	095b      	lsrs	r3, r3, #5
 8051654:	b2db      	uxtb	r3, r3
 8051656:	f043 0302 	orr.w	r3, r3, #2
 805165a:	b2db      	uxtb	r3, r3
 805165c:	2b02      	cmp	r3, #2
 805165e:	d102      	bne.n	8051666 <HAL_RCC_OscConfig+0xb4e>
 8051660:	4b43      	ldr	r3, [pc, #268]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051662:	6a1b      	ldr	r3, [r3, #32]
 8051664:	e013      	b.n	805168e <HAL_RCC_OscConfig+0xb76>
 8051666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805166a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 805166e:	2202      	movs	r2, #2
 8051670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051676:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 805167a:	681b      	ldr	r3, [r3, #0]
 805167c:	fa93 f2a3 	rbit	r2, r3
 8051680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051684:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8051688:	601a      	str	r2, [r3, #0]
 805168a:	4b39      	ldr	r3, [pc, #228]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 805168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805168e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051692:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8051696:	2102      	movs	r1, #2
 8051698:	6011      	str	r1, [r2, #0]
 805169a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 805169e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80516a2:	6812      	ldr	r2, [r2, #0]
 80516a4:	fa92 f1a2 	rbit	r1, r2
 80516a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80516ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80516b0:	6011      	str	r1, [r2, #0]
  return result;
 80516b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80516b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80516ba:	6812      	ldr	r2, [r2, #0]
 80516bc:	fab2 f282 	clz	r2, r2
 80516c0:	b2d2      	uxtb	r2, r2
 80516c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80516c6:	b2d2      	uxtb	r2, r2
 80516c8:	f002 021f 	and.w	r2, r2, #31
 80516cc:	2101      	movs	r1, #1
 80516ce:	fa01 f202 	lsl.w	r2, r1, r2
 80516d2:	4013      	ands	r3, r2
 80516d4:	2b00      	cmp	r3, #0
 80516d6:	d184      	bne.n	80515e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80516d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80516dc:	2b01      	cmp	r3, #1
 80516de:	d105      	bne.n	80516ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80516e0:	4b23      	ldr	r3, [pc, #140]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80516e2:	69db      	ldr	r3, [r3, #28]
 80516e4:	4a22      	ldr	r2, [pc, #136]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 80516e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80516ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80516ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80516f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80516f4:	681b      	ldr	r3, [r3, #0]
 80516f6:	69db      	ldr	r3, [r3, #28]
 80516f8:	2b00      	cmp	r3, #0
 80516fa:	f000 8242 	beq.w	8051b82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80516fe:	4b1c      	ldr	r3, [pc, #112]	; (8051770 <HAL_RCC_OscConfig+0xc58>)
 8051700:	685b      	ldr	r3, [r3, #4]
 8051702:	f003 030c 	and.w	r3, r3, #12
 8051706:	2b08      	cmp	r3, #8
 8051708:	f000 8213 	beq.w	8051b32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 805170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051714:	681b      	ldr	r3, [r3, #0]
 8051716:	69db      	ldr	r3, [r3, #28]
 8051718:	2b02      	cmp	r3, #2
 805171a:	f040 8162 	bne.w	80519e2 <HAL_RCC_OscConfig+0xeca>
 805171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051722:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8051726:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 805172a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 805172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051730:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8051734:	681b      	ldr	r3, [r3, #0]
 8051736:	fa93 f2a3 	rbit	r2, r3
 805173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805173e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8051742:	601a      	str	r2, [r3, #0]
  return result;
 8051744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051748:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 805174c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 805174e:	fab3 f383 	clz	r3, r3
 8051752:	b2db      	uxtb	r3, r3
 8051754:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8051758:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 805175c:	009b      	lsls	r3, r3, #2
 805175e:	461a      	mov	r2, r3
 8051760:	2300      	movs	r3, #0
 8051762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8051764:	f7fe ff5c 	bl	8050620 <HAL_GetTick>
 8051768:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 805176c:	e00c      	b.n	8051788 <HAL_RCC_OscConfig+0xc70>
 805176e:	bf00      	nop
 8051770:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8051774:	f7fe ff54 	bl	8050620 <HAL_GetTick>
 8051778:	4602      	mov	r2, r0
 805177a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 805177e:	1ad3      	subs	r3, r2, r3
 8051780:	2b02      	cmp	r3, #2
 8051782:	d901      	bls.n	8051788 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8051784:	2303      	movs	r3, #3
 8051786:	e1fd      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
 8051788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805178c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8051790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805179a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 805179e:	681b      	ldr	r3, [r3, #0]
 80517a0:	fa93 f2a3 	rbit	r2, r3
 80517a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80517ac:	601a      	str	r2, [r3, #0]
  return result;
 80517ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80517b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80517b8:	fab3 f383 	clz	r3, r3
 80517bc:	b2db      	uxtb	r3, r3
 80517be:	095b      	lsrs	r3, r3, #5
 80517c0:	b2db      	uxtb	r3, r3
 80517c2:	f043 0301 	orr.w	r3, r3, #1
 80517c6:	b2db      	uxtb	r3, r3
 80517c8:	2b01      	cmp	r3, #1
 80517ca:	d102      	bne.n	80517d2 <HAL_RCC_OscConfig+0xcba>
 80517cc:	4bb0      	ldr	r3, [pc, #704]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 80517ce:	681b      	ldr	r3, [r3, #0]
 80517d0:	e027      	b.n	8051822 <HAL_RCC_OscConfig+0xd0a>
 80517d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80517da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80517de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80517e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80517e8:	681b      	ldr	r3, [r3, #0]
 80517ea:	fa93 f2a3 	rbit	r2, r3
 80517ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80517f6:	601a      	str	r2, [r3, #0]
 80517f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80517fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8051800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051804:	601a      	str	r2, [r3, #0]
 8051806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805180a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 805180e:	681b      	ldr	r3, [r3, #0]
 8051810:	fa93 f2a3 	rbit	r2, r3
 8051814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051818:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 805181c:	601a      	str	r2, [r3, #0]
 805181e:	4b9c      	ldr	r3, [pc, #624]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051826:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 805182a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 805182e:	6011      	str	r1, [r2, #0]
 8051830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051834:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8051838:	6812      	ldr	r2, [r2, #0]
 805183a:	fa92 f1a2 	rbit	r1, r2
 805183e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051842:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8051846:	6011      	str	r1, [r2, #0]
  return result;
 8051848:	f507 7200 	add.w	r2, r7, #512	; 0x200
 805184c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8051850:	6812      	ldr	r2, [r2, #0]
 8051852:	fab2 f282 	clz	r2, r2
 8051856:	b2d2      	uxtb	r2, r2
 8051858:	f042 0220 	orr.w	r2, r2, #32
 805185c:	b2d2      	uxtb	r2, r2
 805185e:	f002 021f 	and.w	r2, r2, #31
 8051862:	2101      	movs	r1, #1
 8051864:	fa01 f202 	lsl.w	r2, r1, r2
 8051868:	4013      	ands	r3, r2
 805186a:	2b00      	cmp	r3, #0
 805186c:	d182      	bne.n	8051774 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 805186e:	4b88      	ldr	r3, [pc, #544]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051870:	685b      	ldr	r3, [r3, #4]
 8051872:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8051876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805187e:	681b      	ldr	r3, [r3, #0]
 8051880:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8051882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 805188a:	681b      	ldr	r3, [r3, #0]
 805188c:	6a1b      	ldr	r3, [r3, #32]
 805188e:	430b      	orrs	r3, r1
 8051890:	497f      	ldr	r1, [pc, #508]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051892:	4313      	orrs	r3, r2
 8051894:	604b      	str	r3, [r1, #4]
 8051896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805189a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 805189e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80518a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80518a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80518a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80518ac:	681b      	ldr	r3, [r3, #0]
 80518ae:	fa93 f2a3 	rbit	r2, r3
 80518b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80518b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80518ba:	601a      	str	r2, [r3, #0]
  return result;
 80518bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80518c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80518c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80518c6:	fab3 f383 	clz	r3, r3
 80518ca:	b2db      	uxtb	r3, r3
 80518cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80518d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80518d4:	009b      	lsls	r3, r3, #2
 80518d6:	461a      	mov	r2, r3
 80518d8:	2301      	movs	r3, #1
 80518da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80518dc:	f7fe fea0 	bl	8050620 <HAL_GetTick>
 80518e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80518e4:	e009      	b.n	80518fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80518e6:	f7fe fe9b 	bl	8050620 <HAL_GetTick>
 80518ea:	4602      	mov	r2, r0
 80518ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80518f0:	1ad3      	subs	r3, r2, r3
 80518f2:	2b02      	cmp	r3, #2
 80518f4:	d901      	bls.n	80518fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80518f6:	2303      	movs	r3, #3
 80518f8:	e144      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
 80518fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80518fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8051902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805190c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8051910:	681b      	ldr	r3, [r3, #0]
 8051912:	fa93 f2a3 	rbit	r2, r3
 8051916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805191a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 805191e:	601a      	str	r2, [r3, #0]
  return result;
 8051920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051924:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8051928:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 805192a:	fab3 f383 	clz	r3, r3
 805192e:	b2db      	uxtb	r3, r3
 8051930:	095b      	lsrs	r3, r3, #5
 8051932:	b2db      	uxtb	r3, r3
 8051934:	f043 0301 	orr.w	r3, r3, #1
 8051938:	b2db      	uxtb	r3, r3
 805193a:	2b01      	cmp	r3, #1
 805193c:	d102      	bne.n	8051944 <HAL_RCC_OscConfig+0xe2c>
 805193e:	4b54      	ldr	r3, [pc, #336]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051940:	681b      	ldr	r3, [r3, #0]
 8051942:	e027      	b.n	8051994 <HAL_RCC_OscConfig+0xe7c>
 8051944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051948:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 805194c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051956:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 805195a:	681b      	ldr	r3, [r3, #0]
 805195c:	fa93 f2a3 	rbit	r2, r3
 8051960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051964:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8051968:	601a      	str	r2, [r3, #0]
 805196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805196e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8051972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051976:	601a      	str	r2, [r3, #0]
 8051978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805197c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8051980:	681b      	ldr	r3, [r3, #0]
 8051982:	fa93 f2a3 	rbit	r2, r3
 8051986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 805198a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 805198e:	601a      	str	r2, [r3, #0]
 8051990:	4b3f      	ldr	r3, [pc, #252]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051998:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 805199c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80519a0:	6011      	str	r1, [r2, #0]
 80519a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80519a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80519aa:	6812      	ldr	r2, [r2, #0]
 80519ac:	fa92 f1a2 	rbit	r1, r2
 80519b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80519b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80519b8:	6011      	str	r1, [r2, #0]
  return result;
 80519ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80519be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80519c2:	6812      	ldr	r2, [r2, #0]
 80519c4:	fab2 f282 	clz	r2, r2
 80519c8:	b2d2      	uxtb	r2, r2
 80519ca:	f042 0220 	orr.w	r2, r2, #32
 80519ce:	b2d2      	uxtb	r2, r2
 80519d0:	f002 021f 	and.w	r2, r2, #31
 80519d4:	2101      	movs	r1, #1
 80519d6:	fa01 f202 	lsl.w	r2, r1, r2
 80519da:	4013      	ands	r3, r2
 80519dc:	2b00      	cmp	r3, #0
 80519de:	d082      	beq.n	80518e6 <HAL_RCC_OscConfig+0xdce>
 80519e0:	e0cf      	b.n	8051b82 <HAL_RCC_OscConfig+0x106a>
 80519e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80519e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80519ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80519ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80519f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80519f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80519f8:	681b      	ldr	r3, [r3, #0]
 80519fa:	fa93 f2a3 	rbit	r2, r3
 80519fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a02:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8051a06:	601a      	str	r2, [r3, #0]
  return result;
 8051a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a0c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8051a10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8051a12:	fab3 f383 	clz	r3, r3
 8051a16:	b2db      	uxtb	r3, r3
 8051a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8051a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8051a20:	009b      	lsls	r3, r3, #2
 8051a22:	461a      	mov	r2, r3
 8051a24:	2300      	movs	r3, #0
 8051a26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8051a28:	f7fe fdfa 	bl	8050620 <HAL_GetTick>
 8051a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8051a30:	e009      	b.n	8051a46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8051a32:	f7fe fdf5 	bl	8050620 <HAL_GetTick>
 8051a36:	4602      	mov	r2, r0
 8051a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8051a3c:	1ad3      	subs	r3, r2, r3
 8051a3e:	2b02      	cmp	r3, #2
 8051a40:	d901      	bls.n	8051a46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8051a42:	2303      	movs	r3, #3
 8051a44:	e09e      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
 8051a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8051a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8051a5c:	681b      	ldr	r3, [r3, #0]
 8051a5e:	fa93 f2a3 	rbit	r2, r3
 8051a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a66:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8051a6a:	601a      	str	r2, [r3, #0]
  return result;
 8051a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a70:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8051a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8051a76:	fab3 f383 	clz	r3, r3
 8051a7a:	b2db      	uxtb	r3, r3
 8051a7c:	095b      	lsrs	r3, r3, #5
 8051a7e:	b2db      	uxtb	r3, r3
 8051a80:	f043 0301 	orr.w	r3, r3, #1
 8051a84:	b2db      	uxtb	r3, r3
 8051a86:	2b01      	cmp	r3, #1
 8051a88:	d104      	bne.n	8051a94 <HAL_RCC_OscConfig+0xf7c>
 8051a8a:	4b01      	ldr	r3, [pc, #4]	; (8051a90 <HAL_RCC_OscConfig+0xf78>)
 8051a8c:	681b      	ldr	r3, [r3, #0]
 8051a8e:	e029      	b.n	8051ae4 <HAL_RCC_OscConfig+0xfcc>
 8051a90:	40021000 	.word	0x40021000
 8051a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051a98:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8051a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051aa6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8051aaa:	681b      	ldr	r3, [r3, #0]
 8051aac:	fa93 f2a3 	rbit	r2, r3
 8051ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051ab4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8051ab8:	601a      	str	r2, [r3, #0]
 8051aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051abe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8051ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051ac6:	601a      	str	r2, [r3, #0]
 8051ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051acc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8051ad0:	681b      	ldr	r3, [r3, #0]
 8051ad2:	fa93 f2a3 	rbit	r2, r3
 8051ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051ada:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8051ade:	601a      	str	r2, [r3, #0]
 8051ae0:	4b2b      	ldr	r3, [pc, #172]	; (8051b90 <HAL_RCC_OscConfig+0x1078>)
 8051ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051ae8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8051aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8051af0:	6011      	str	r1, [r2, #0]
 8051af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051af6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8051afa:	6812      	ldr	r2, [r2, #0]
 8051afc:	fa92 f1a2 	rbit	r1, r2
 8051b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051b04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8051b08:	6011      	str	r1, [r2, #0]
  return result;
 8051b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8051b0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8051b12:	6812      	ldr	r2, [r2, #0]
 8051b14:	fab2 f282 	clz	r2, r2
 8051b18:	b2d2      	uxtb	r2, r2
 8051b1a:	f042 0220 	orr.w	r2, r2, #32
 8051b1e:	b2d2      	uxtb	r2, r2
 8051b20:	f002 021f 	and.w	r2, r2, #31
 8051b24:	2101      	movs	r1, #1
 8051b26:	fa01 f202 	lsl.w	r2, r1, r2
 8051b2a:	4013      	ands	r3, r2
 8051b2c:	2b00      	cmp	r3, #0
 8051b2e:	d180      	bne.n	8051a32 <HAL_RCC_OscConfig+0xf1a>
 8051b30:	e027      	b.n	8051b82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8051b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051b3a:	681b      	ldr	r3, [r3, #0]
 8051b3c:	69db      	ldr	r3, [r3, #28]
 8051b3e:	2b01      	cmp	r3, #1
 8051b40:	d101      	bne.n	8051b46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8051b42:	2301      	movs	r3, #1
 8051b44:	e01e      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8051b46:	4b12      	ldr	r3, [pc, #72]	; (8051b90 <HAL_RCC_OscConfig+0x1078>)
 8051b48:	685b      	ldr	r3, [r3, #4]
 8051b4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8051b4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8051b52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8051b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051b5e:	681b      	ldr	r3, [r3, #0]
 8051b60:	6a1b      	ldr	r3, [r3, #32]
 8051b62:	429a      	cmp	r2, r3
 8051b64:	d10b      	bne.n	8051b7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8051b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8051b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8051b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8051b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8051b76:	681b      	ldr	r3, [r3, #0]
 8051b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8051b7a:	429a      	cmp	r2, r3
 8051b7c:	d001      	beq.n	8051b82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8051b7e:	2301      	movs	r3, #1
 8051b80:	e000      	b.n	8051b84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8051b82:	2300      	movs	r3, #0
}
 8051b84:	4618      	mov	r0, r3
 8051b86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8051b8a:	46bd      	mov	sp, r7
 8051b8c:	bd80      	pop	{r7, pc}
 8051b8e:	bf00      	nop
 8051b90:	40021000 	.word	0x40021000

08051b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8051b94:	b580      	push	{r7, lr}
 8051b96:	b09e      	sub	sp, #120	; 0x78
 8051b98:	af00      	add	r7, sp, #0
 8051b9a:	6078      	str	r0, [r7, #4]
 8051b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8051b9e:	2300      	movs	r3, #0
 8051ba0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8051ba2:	687b      	ldr	r3, [r7, #4]
 8051ba4:	2b00      	cmp	r3, #0
 8051ba6:	d101      	bne.n	8051bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8051ba8:	2301      	movs	r3, #1
 8051baa:	e162      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8051bac:	4b90      	ldr	r3, [pc, #576]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051bae:	681b      	ldr	r3, [r3, #0]
 8051bb0:	f003 0307 	and.w	r3, r3, #7
 8051bb4:	683a      	ldr	r2, [r7, #0]
 8051bb6:	429a      	cmp	r2, r3
 8051bb8:	d910      	bls.n	8051bdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8051bba:	4b8d      	ldr	r3, [pc, #564]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051bbc:	681b      	ldr	r3, [r3, #0]
 8051bbe:	f023 0207 	bic.w	r2, r3, #7
 8051bc2:	498b      	ldr	r1, [pc, #556]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051bc4:	683b      	ldr	r3, [r7, #0]
 8051bc6:	4313      	orrs	r3, r2
 8051bc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8051bca:	4b89      	ldr	r3, [pc, #548]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051bcc:	681b      	ldr	r3, [r3, #0]
 8051bce:	f003 0307 	and.w	r3, r3, #7
 8051bd2:	683a      	ldr	r2, [r7, #0]
 8051bd4:	429a      	cmp	r2, r3
 8051bd6:	d001      	beq.n	8051bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8051bd8:	2301      	movs	r3, #1
 8051bda:	e14a      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8051bdc:	687b      	ldr	r3, [r7, #4]
 8051bde:	681b      	ldr	r3, [r3, #0]
 8051be0:	f003 0302 	and.w	r3, r3, #2
 8051be4:	2b00      	cmp	r3, #0
 8051be6:	d008      	beq.n	8051bfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8051be8:	4b82      	ldr	r3, [pc, #520]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051bea:	685b      	ldr	r3, [r3, #4]
 8051bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8051bf0:	687b      	ldr	r3, [r7, #4]
 8051bf2:	689b      	ldr	r3, [r3, #8]
 8051bf4:	497f      	ldr	r1, [pc, #508]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051bf6:	4313      	orrs	r3, r2
 8051bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8051bfa:	687b      	ldr	r3, [r7, #4]
 8051bfc:	681b      	ldr	r3, [r3, #0]
 8051bfe:	f003 0301 	and.w	r3, r3, #1
 8051c02:	2b00      	cmp	r3, #0
 8051c04:	f000 80dc 	beq.w	8051dc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8051c08:	687b      	ldr	r3, [r7, #4]
 8051c0a:	685b      	ldr	r3, [r3, #4]
 8051c0c:	2b01      	cmp	r3, #1
 8051c0e:	d13c      	bne.n	8051c8a <HAL_RCC_ClockConfig+0xf6>
 8051c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8051c14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8051c18:	fa93 f3a3 	rbit	r3, r3
 8051c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8051c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8051c20:	fab3 f383 	clz	r3, r3
 8051c24:	b2db      	uxtb	r3, r3
 8051c26:	095b      	lsrs	r3, r3, #5
 8051c28:	b2db      	uxtb	r3, r3
 8051c2a:	f043 0301 	orr.w	r3, r3, #1
 8051c2e:	b2db      	uxtb	r3, r3
 8051c30:	2b01      	cmp	r3, #1
 8051c32:	d102      	bne.n	8051c3a <HAL_RCC_ClockConfig+0xa6>
 8051c34:	4b6f      	ldr	r3, [pc, #444]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051c36:	681b      	ldr	r3, [r3, #0]
 8051c38:	e00f      	b.n	8051c5a <HAL_RCC_ClockConfig+0xc6>
 8051c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8051c3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8051c42:	fa93 f3a3 	rbit	r3, r3
 8051c46:	667b      	str	r3, [r7, #100]	; 0x64
 8051c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8051c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8051c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8051c50:	fa93 f3a3 	rbit	r3, r3
 8051c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8051c56:	4b67      	ldr	r3, [pc, #412]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8051c5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8051c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8051c62:	fa92 f2a2 	rbit	r2, r2
 8051c66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8051c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8051c6a:	fab2 f282 	clz	r2, r2
 8051c6e:	b2d2      	uxtb	r2, r2
 8051c70:	f042 0220 	orr.w	r2, r2, #32
 8051c74:	b2d2      	uxtb	r2, r2
 8051c76:	f002 021f 	and.w	r2, r2, #31
 8051c7a:	2101      	movs	r1, #1
 8051c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8051c80:	4013      	ands	r3, r2
 8051c82:	2b00      	cmp	r3, #0
 8051c84:	d17b      	bne.n	8051d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8051c86:	2301      	movs	r3, #1
 8051c88:	e0f3      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8051c8a:	687b      	ldr	r3, [r7, #4]
 8051c8c:	685b      	ldr	r3, [r3, #4]
 8051c8e:	2b02      	cmp	r3, #2
 8051c90:	d13c      	bne.n	8051d0c <HAL_RCC_ClockConfig+0x178>
 8051c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8051c96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8051c9a:	fa93 f3a3 	rbit	r3, r3
 8051c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8051ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8051ca2:	fab3 f383 	clz	r3, r3
 8051ca6:	b2db      	uxtb	r3, r3
 8051ca8:	095b      	lsrs	r3, r3, #5
 8051caa:	b2db      	uxtb	r3, r3
 8051cac:	f043 0301 	orr.w	r3, r3, #1
 8051cb0:	b2db      	uxtb	r3, r3
 8051cb2:	2b01      	cmp	r3, #1
 8051cb4:	d102      	bne.n	8051cbc <HAL_RCC_ClockConfig+0x128>
 8051cb6:	4b4f      	ldr	r3, [pc, #316]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051cb8:	681b      	ldr	r3, [r3, #0]
 8051cba:	e00f      	b.n	8051cdc <HAL_RCC_ClockConfig+0x148>
 8051cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8051cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8051cc4:	fa93 f3a3 	rbit	r3, r3
 8051cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8051cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8051cce:	643b      	str	r3, [r7, #64]	; 0x40
 8051cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8051cd2:	fa93 f3a3 	rbit	r3, r3
 8051cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8051cd8:	4b46      	ldr	r3, [pc, #280]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8051ce0:	63ba      	str	r2, [r7, #56]	; 0x38
 8051ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8051ce4:	fa92 f2a2 	rbit	r2, r2
 8051ce8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8051cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8051cec:	fab2 f282 	clz	r2, r2
 8051cf0:	b2d2      	uxtb	r2, r2
 8051cf2:	f042 0220 	orr.w	r2, r2, #32
 8051cf6:	b2d2      	uxtb	r2, r2
 8051cf8:	f002 021f 	and.w	r2, r2, #31
 8051cfc:	2101      	movs	r1, #1
 8051cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8051d02:	4013      	ands	r3, r2
 8051d04:	2b00      	cmp	r3, #0
 8051d06:	d13a      	bne.n	8051d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8051d08:	2301      	movs	r3, #1
 8051d0a:	e0b2      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
 8051d0c:	2302      	movs	r3, #2
 8051d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8051d12:	fa93 f3a3 	rbit	r3, r3
 8051d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8051d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8051d1a:	fab3 f383 	clz	r3, r3
 8051d1e:	b2db      	uxtb	r3, r3
 8051d20:	095b      	lsrs	r3, r3, #5
 8051d22:	b2db      	uxtb	r3, r3
 8051d24:	f043 0301 	orr.w	r3, r3, #1
 8051d28:	b2db      	uxtb	r3, r3
 8051d2a:	2b01      	cmp	r3, #1
 8051d2c:	d102      	bne.n	8051d34 <HAL_RCC_ClockConfig+0x1a0>
 8051d2e:	4b31      	ldr	r3, [pc, #196]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051d30:	681b      	ldr	r3, [r3, #0]
 8051d32:	e00d      	b.n	8051d50 <HAL_RCC_ClockConfig+0x1bc>
 8051d34:	2302      	movs	r3, #2
 8051d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8051d3a:	fa93 f3a3 	rbit	r3, r3
 8051d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8051d40:	2302      	movs	r3, #2
 8051d42:	623b      	str	r3, [r7, #32]
 8051d44:	6a3b      	ldr	r3, [r7, #32]
 8051d46:	fa93 f3a3 	rbit	r3, r3
 8051d4a:	61fb      	str	r3, [r7, #28]
 8051d4c:	4b29      	ldr	r3, [pc, #164]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051d50:	2202      	movs	r2, #2
 8051d52:	61ba      	str	r2, [r7, #24]
 8051d54:	69ba      	ldr	r2, [r7, #24]
 8051d56:	fa92 f2a2 	rbit	r2, r2
 8051d5a:	617a      	str	r2, [r7, #20]
  return result;
 8051d5c:	697a      	ldr	r2, [r7, #20]
 8051d5e:	fab2 f282 	clz	r2, r2
 8051d62:	b2d2      	uxtb	r2, r2
 8051d64:	f042 0220 	orr.w	r2, r2, #32
 8051d68:	b2d2      	uxtb	r2, r2
 8051d6a:	f002 021f 	and.w	r2, r2, #31
 8051d6e:	2101      	movs	r1, #1
 8051d70:	fa01 f202 	lsl.w	r2, r1, r2
 8051d74:	4013      	ands	r3, r2
 8051d76:	2b00      	cmp	r3, #0
 8051d78:	d101      	bne.n	8051d7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8051d7a:	2301      	movs	r3, #1
 8051d7c:	e079      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8051d7e:	4b1d      	ldr	r3, [pc, #116]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051d80:	685b      	ldr	r3, [r3, #4]
 8051d82:	f023 0203 	bic.w	r2, r3, #3
 8051d86:	687b      	ldr	r3, [r7, #4]
 8051d88:	685b      	ldr	r3, [r3, #4]
 8051d8a:	491a      	ldr	r1, [pc, #104]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051d8c:	4313      	orrs	r3, r2
 8051d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8051d90:	f7fe fc46 	bl	8050620 <HAL_GetTick>
 8051d94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8051d96:	e00a      	b.n	8051dae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8051d98:	f7fe fc42 	bl	8050620 <HAL_GetTick>
 8051d9c:	4602      	mov	r2, r0
 8051d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8051da0:	1ad3      	subs	r3, r2, r3
 8051da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8051da6:	4293      	cmp	r3, r2
 8051da8:	d901      	bls.n	8051dae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8051daa:	2303      	movs	r3, #3
 8051dac:	e061      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8051dae:	4b11      	ldr	r3, [pc, #68]	; (8051df4 <HAL_RCC_ClockConfig+0x260>)
 8051db0:	685b      	ldr	r3, [r3, #4]
 8051db2:	f003 020c 	and.w	r2, r3, #12
 8051db6:	687b      	ldr	r3, [r7, #4]
 8051db8:	685b      	ldr	r3, [r3, #4]
 8051dba:	009b      	lsls	r3, r3, #2
 8051dbc:	429a      	cmp	r2, r3
 8051dbe:	d1eb      	bne.n	8051d98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8051dc0:	4b0b      	ldr	r3, [pc, #44]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051dc2:	681b      	ldr	r3, [r3, #0]
 8051dc4:	f003 0307 	and.w	r3, r3, #7
 8051dc8:	683a      	ldr	r2, [r7, #0]
 8051dca:	429a      	cmp	r2, r3
 8051dcc:	d214      	bcs.n	8051df8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8051dce:	4b08      	ldr	r3, [pc, #32]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051dd0:	681b      	ldr	r3, [r3, #0]
 8051dd2:	f023 0207 	bic.w	r2, r3, #7
 8051dd6:	4906      	ldr	r1, [pc, #24]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051dd8:	683b      	ldr	r3, [r7, #0]
 8051dda:	4313      	orrs	r3, r2
 8051ddc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8051dde:	4b04      	ldr	r3, [pc, #16]	; (8051df0 <HAL_RCC_ClockConfig+0x25c>)
 8051de0:	681b      	ldr	r3, [r3, #0]
 8051de2:	f003 0307 	and.w	r3, r3, #7
 8051de6:	683a      	ldr	r2, [r7, #0]
 8051de8:	429a      	cmp	r2, r3
 8051dea:	d005      	beq.n	8051df8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8051dec:	2301      	movs	r3, #1
 8051dee:	e040      	b.n	8051e72 <HAL_RCC_ClockConfig+0x2de>
 8051df0:	40022000 	.word	0x40022000
 8051df4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8051df8:	687b      	ldr	r3, [r7, #4]
 8051dfa:	681b      	ldr	r3, [r3, #0]
 8051dfc:	f003 0304 	and.w	r3, r3, #4
 8051e00:	2b00      	cmp	r3, #0
 8051e02:	d008      	beq.n	8051e16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8051e04:	4b1d      	ldr	r3, [pc, #116]	; (8051e7c <HAL_RCC_ClockConfig+0x2e8>)
 8051e06:	685b      	ldr	r3, [r3, #4]
 8051e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8051e0c:	687b      	ldr	r3, [r7, #4]
 8051e0e:	68db      	ldr	r3, [r3, #12]
 8051e10:	491a      	ldr	r1, [pc, #104]	; (8051e7c <HAL_RCC_ClockConfig+0x2e8>)
 8051e12:	4313      	orrs	r3, r2
 8051e14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8051e16:	687b      	ldr	r3, [r7, #4]
 8051e18:	681b      	ldr	r3, [r3, #0]
 8051e1a:	f003 0308 	and.w	r3, r3, #8
 8051e1e:	2b00      	cmp	r3, #0
 8051e20:	d009      	beq.n	8051e36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8051e22:	4b16      	ldr	r3, [pc, #88]	; (8051e7c <HAL_RCC_ClockConfig+0x2e8>)
 8051e24:	685b      	ldr	r3, [r3, #4]
 8051e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8051e2a:	687b      	ldr	r3, [r7, #4]
 8051e2c:	691b      	ldr	r3, [r3, #16]
 8051e2e:	00db      	lsls	r3, r3, #3
 8051e30:	4912      	ldr	r1, [pc, #72]	; (8051e7c <HAL_RCC_ClockConfig+0x2e8>)
 8051e32:	4313      	orrs	r3, r2
 8051e34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8051e36:	f000 f829 	bl	8051e8c <HAL_RCC_GetSysClockFreq>
 8051e3a:	4601      	mov	r1, r0
 8051e3c:	4b0f      	ldr	r3, [pc, #60]	; (8051e7c <HAL_RCC_ClockConfig+0x2e8>)
 8051e3e:	685b      	ldr	r3, [r3, #4]
 8051e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8051e44:	22f0      	movs	r2, #240	; 0xf0
 8051e46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051e48:	693a      	ldr	r2, [r7, #16]
 8051e4a:	fa92 f2a2 	rbit	r2, r2
 8051e4e:	60fa      	str	r2, [r7, #12]
  return result;
 8051e50:	68fa      	ldr	r2, [r7, #12]
 8051e52:	fab2 f282 	clz	r2, r2
 8051e56:	b2d2      	uxtb	r2, r2
 8051e58:	40d3      	lsrs	r3, r2
 8051e5a:	4a09      	ldr	r2, [pc, #36]	; (8051e80 <HAL_RCC_ClockConfig+0x2ec>)
 8051e5c:	5cd3      	ldrb	r3, [r2, r3]
 8051e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8051e62:	4a08      	ldr	r2, [pc, #32]	; (8051e84 <HAL_RCC_ClockConfig+0x2f0>)
 8051e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8051e66:	4b08      	ldr	r3, [pc, #32]	; (8051e88 <HAL_RCC_ClockConfig+0x2f4>)
 8051e68:	681b      	ldr	r3, [r3, #0]
 8051e6a:	4618      	mov	r0, r3
 8051e6c:	f7fe fb94 	bl	8050598 <HAL_InitTick>
  
  return HAL_OK;
 8051e70:	2300      	movs	r3, #0
}
 8051e72:	4618      	mov	r0, r3
 8051e74:	3778      	adds	r7, #120	; 0x78
 8051e76:	46bd      	mov	sp, r7
 8051e78:	bd80      	pop	{r7, pc}
 8051e7a:	bf00      	nop
 8051e7c:	40021000 	.word	0x40021000
 8051e80:	08052a10 	.word	0x08052a10
 8051e84:	20000000 	.word	0x20000000
 8051e88:	20000004 	.word	0x20000004

08051e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8051e8c:	b480      	push	{r7}
 8051e8e:	b08b      	sub	sp, #44	; 0x2c
 8051e90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8051e92:	2300      	movs	r3, #0
 8051e94:	61fb      	str	r3, [r7, #28]
 8051e96:	2300      	movs	r3, #0
 8051e98:	61bb      	str	r3, [r7, #24]
 8051e9a:	2300      	movs	r3, #0
 8051e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8051e9e:	2300      	movs	r3, #0
 8051ea0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8051ea2:	2300      	movs	r3, #0
 8051ea4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8051ea6:	4b29      	ldr	r3, [pc, #164]	; (8051f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8051ea8:	685b      	ldr	r3, [r3, #4]
 8051eaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8051eac:	69fb      	ldr	r3, [r7, #28]
 8051eae:	f003 030c 	and.w	r3, r3, #12
 8051eb2:	2b04      	cmp	r3, #4
 8051eb4:	d002      	beq.n	8051ebc <HAL_RCC_GetSysClockFreq+0x30>
 8051eb6:	2b08      	cmp	r3, #8
 8051eb8:	d003      	beq.n	8051ec2 <HAL_RCC_GetSysClockFreq+0x36>
 8051eba:	e03c      	b.n	8051f36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8051ebc:	4b24      	ldr	r3, [pc, #144]	; (8051f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8051ebe:	623b      	str	r3, [r7, #32]
      break;
 8051ec0:	e03c      	b.n	8051f3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8051ec2:	69fb      	ldr	r3, [r7, #28]
 8051ec4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8051ec8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8051ecc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051ece:	68ba      	ldr	r2, [r7, #8]
 8051ed0:	fa92 f2a2 	rbit	r2, r2
 8051ed4:	607a      	str	r2, [r7, #4]
  return result;
 8051ed6:	687a      	ldr	r2, [r7, #4]
 8051ed8:	fab2 f282 	clz	r2, r2
 8051edc:	b2d2      	uxtb	r2, r2
 8051ede:	40d3      	lsrs	r3, r2
 8051ee0:	4a1c      	ldr	r2, [pc, #112]	; (8051f54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8051ee2:	5cd3      	ldrb	r3, [r2, r3]
 8051ee4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8051ee6:	4b19      	ldr	r3, [pc, #100]	; (8051f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8051ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8051eea:	f003 030f 	and.w	r3, r3, #15
 8051eee:	220f      	movs	r2, #15
 8051ef0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051ef2:	693a      	ldr	r2, [r7, #16]
 8051ef4:	fa92 f2a2 	rbit	r2, r2
 8051ef8:	60fa      	str	r2, [r7, #12]
  return result;
 8051efa:	68fa      	ldr	r2, [r7, #12]
 8051efc:	fab2 f282 	clz	r2, r2
 8051f00:	b2d2      	uxtb	r2, r2
 8051f02:	40d3      	lsrs	r3, r2
 8051f04:	4a14      	ldr	r2, [pc, #80]	; (8051f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8051f06:	5cd3      	ldrb	r3, [r2, r3]
 8051f08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8051f0a:	69fb      	ldr	r3, [r7, #28]
 8051f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8051f10:	2b00      	cmp	r3, #0
 8051f12:	d008      	beq.n	8051f26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8051f14:	4a0e      	ldr	r2, [pc, #56]	; (8051f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8051f16:	69bb      	ldr	r3, [r7, #24]
 8051f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8051f1c:	697b      	ldr	r3, [r7, #20]
 8051f1e:	fb02 f303 	mul.w	r3, r2, r3
 8051f22:	627b      	str	r3, [r7, #36]	; 0x24
 8051f24:	e004      	b.n	8051f30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8051f26:	697b      	ldr	r3, [r7, #20]
 8051f28:	4a0c      	ldr	r2, [pc, #48]	; (8051f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8051f2a:	fb02 f303 	mul.w	r3, r2, r3
 8051f2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8051f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051f32:	623b      	str	r3, [r7, #32]
      break;
 8051f34:	e002      	b.n	8051f3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8051f36:	4b06      	ldr	r3, [pc, #24]	; (8051f50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8051f38:	623b      	str	r3, [r7, #32]
      break;
 8051f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8051f3c:	6a3b      	ldr	r3, [r7, #32]
}
 8051f3e:	4618      	mov	r0, r3
 8051f40:	372c      	adds	r7, #44	; 0x2c
 8051f42:	46bd      	mov	sp, r7
 8051f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051f48:	4770      	bx	lr
 8051f4a:	bf00      	nop
 8051f4c:	40021000 	.word	0x40021000
 8051f50:	007a1200 	.word	0x007a1200
 8051f54:	08052a28 	.word	0x08052a28
 8051f58:	08052a38 	.word	0x08052a38
 8051f5c:	003d0900 	.word	0x003d0900

08051f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8051f60:	b480      	push	{r7}
 8051f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8051f64:	4b03      	ldr	r3, [pc, #12]	; (8051f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8051f66:	681b      	ldr	r3, [r3, #0]
}
 8051f68:	4618      	mov	r0, r3
 8051f6a:	46bd      	mov	sp, r7
 8051f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051f70:	4770      	bx	lr
 8051f72:	bf00      	nop
 8051f74:	20000000 	.word	0x20000000

08051f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8051f78:	b580      	push	{r7, lr}
 8051f7a:	b082      	sub	sp, #8
 8051f7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8051f7e:	f7ff ffef 	bl	8051f60 <HAL_RCC_GetHCLKFreq>
 8051f82:	4601      	mov	r1, r0
 8051f84:	4b0b      	ldr	r3, [pc, #44]	; (8051fb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8051f86:	685b      	ldr	r3, [r3, #4]
 8051f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8051f8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8051f90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051f92:	687a      	ldr	r2, [r7, #4]
 8051f94:	fa92 f2a2 	rbit	r2, r2
 8051f98:	603a      	str	r2, [r7, #0]
  return result;
 8051f9a:	683a      	ldr	r2, [r7, #0]
 8051f9c:	fab2 f282 	clz	r2, r2
 8051fa0:	b2d2      	uxtb	r2, r2
 8051fa2:	40d3      	lsrs	r3, r2
 8051fa4:	4a04      	ldr	r2, [pc, #16]	; (8051fb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8051fa6:	5cd3      	ldrb	r3, [r2, r3]
 8051fa8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8051fac:	4618      	mov	r0, r3
 8051fae:	3708      	adds	r7, #8
 8051fb0:	46bd      	mov	sp, r7
 8051fb2:	bd80      	pop	{r7, pc}
 8051fb4:	40021000 	.word	0x40021000
 8051fb8:	08052a20 	.word	0x08052a20

08051fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8051fbc:	b580      	push	{r7, lr}
 8051fbe:	b082      	sub	sp, #8
 8051fc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8051fc2:	f7ff ffcd 	bl	8051f60 <HAL_RCC_GetHCLKFreq>
 8051fc6:	4601      	mov	r1, r0
 8051fc8:	4b0b      	ldr	r3, [pc, #44]	; (8051ff8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8051fca:	685b      	ldr	r3, [r3, #4]
 8051fcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8051fd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8051fd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8051fd6:	687a      	ldr	r2, [r7, #4]
 8051fd8:	fa92 f2a2 	rbit	r2, r2
 8051fdc:	603a      	str	r2, [r7, #0]
  return result;
 8051fde:	683a      	ldr	r2, [r7, #0]
 8051fe0:	fab2 f282 	clz	r2, r2
 8051fe4:	b2d2      	uxtb	r2, r2
 8051fe6:	40d3      	lsrs	r3, r2
 8051fe8:	4a04      	ldr	r2, [pc, #16]	; (8051ffc <HAL_RCC_GetPCLK2Freq+0x40>)
 8051fea:	5cd3      	ldrb	r3, [r2, r3]
 8051fec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8051ff0:	4618      	mov	r0, r3
 8051ff2:	3708      	adds	r7, #8
 8051ff4:	46bd      	mov	sp, r7
 8051ff6:	bd80      	pop	{r7, pc}
 8051ff8:	40021000 	.word	0x40021000
 8051ffc:	08052a20 	.word	0x08052a20

08052000 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8052000:	b580      	push	{r7, lr}
 8052002:	b092      	sub	sp, #72	; 0x48
 8052004:	af00      	add	r7, sp, #0
 8052006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8052008:	2300      	movs	r3, #0
 805200a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 805200c:	2300      	movs	r3, #0
 805200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8052010:	2300      	movs	r3, #0
 8052012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8052016:	687b      	ldr	r3, [r7, #4]
 8052018:	681b      	ldr	r3, [r3, #0]
 805201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 805201e:	2b00      	cmp	r3, #0
 8052020:	f000 80cd 	beq.w	80521be <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8052024:	4b8e      	ldr	r3, [pc, #568]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052026:	69db      	ldr	r3, [r3, #28]
 8052028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 805202c:	2b00      	cmp	r3, #0
 805202e:	d10e      	bne.n	805204e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8052030:	4b8b      	ldr	r3, [pc, #556]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052032:	69db      	ldr	r3, [r3, #28]
 8052034:	4a8a      	ldr	r2, [pc, #552]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 805203a:	61d3      	str	r3, [r2, #28]
 805203c:	4b88      	ldr	r3, [pc, #544]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 805203e:	69db      	ldr	r3, [r3, #28]
 8052040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8052044:	60bb      	str	r3, [r7, #8]
 8052046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8052048:	2301      	movs	r3, #1
 805204a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 805204e:	4b85      	ldr	r3, [pc, #532]	; (8052264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8052050:	681b      	ldr	r3, [r3, #0]
 8052052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052056:	2b00      	cmp	r3, #0
 8052058:	d118      	bne.n	805208c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 805205a:	4b82      	ldr	r3, [pc, #520]	; (8052264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 805205c:	681b      	ldr	r3, [r3, #0]
 805205e:	4a81      	ldr	r2, [pc, #516]	; (8052264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8052060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8052064:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8052066:	f7fe fadb 	bl	8050620 <HAL_GetTick>
 805206a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 805206c:	e008      	b.n	8052080 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 805206e:	f7fe fad7 	bl	8050620 <HAL_GetTick>
 8052072:	4602      	mov	r2, r0
 8052074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8052076:	1ad3      	subs	r3, r2, r3
 8052078:	2b64      	cmp	r3, #100	; 0x64
 805207a:	d901      	bls.n	8052080 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 805207c:	2303      	movs	r3, #3
 805207e:	e0ea      	b.n	8052256 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8052080:	4b78      	ldr	r3, [pc, #480]	; (8052264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8052082:	681b      	ldr	r3, [r3, #0]
 8052084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8052088:	2b00      	cmp	r3, #0
 805208a:	d0f0      	beq.n	805206e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 805208c:	4b74      	ldr	r3, [pc, #464]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 805208e:	6a1b      	ldr	r3, [r3, #32]
 8052090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8052094:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8052096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8052098:	2b00      	cmp	r3, #0
 805209a:	d07d      	beq.n	8052198 <HAL_RCCEx_PeriphCLKConfig+0x198>
 805209c:	687b      	ldr	r3, [r7, #4]
 805209e:	685b      	ldr	r3, [r3, #4]
 80520a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80520a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80520a6:	429a      	cmp	r2, r3
 80520a8:	d076      	beq.n	8052198 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80520aa:	4b6d      	ldr	r3, [pc, #436]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80520ac:	6a1b      	ldr	r3, [r3, #32]
 80520ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80520b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80520b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80520b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80520ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80520bc:	fa93 f3a3 	rbit	r3, r3
 80520c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80520c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80520c4:	fab3 f383 	clz	r3, r3
 80520c8:	b2db      	uxtb	r3, r3
 80520ca:	461a      	mov	r2, r3
 80520cc:	4b66      	ldr	r3, [pc, #408]	; (8052268 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80520ce:	4413      	add	r3, r2
 80520d0:	009b      	lsls	r3, r3, #2
 80520d2:	461a      	mov	r2, r3
 80520d4:	2301      	movs	r3, #1
 80520d6:	6013      	str	r3, [r2, #0]
 80520d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80520dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80520de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80520e0:	fa93 f3a3 	rbit	r3, r3
 80520e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80520e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80520e8:	fab3 f383 	clz	r3, r3
 80520ec:	b2db      	uxtb	r3, r3
 80520ee:	461a      	mov	r2, r3
 80520f0:	4b5d      	ldr	r3, [pc, #372]	; (8052268 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80520f2:	4413      	add	r3, r2
 80520f4:	009b      	lsls	r3, r3, #2
 80520f6:	461a      	mov	r2, r3
 80520f8:	2300      	movs	r3, #0
 80520fa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80520fc:	4a58      	ldr	r2, [pc, #352]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80520fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8052100:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8052102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8052104:	f003 0301 	and.w	r3, r3, #1
 8052108:	2b00      	cmp	r3, #0
 805210a:	d045      	beq.n	8052198 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 805210c:	f7fe fa88 	bl	8050620 <HAL_GetTick>
 8052110:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8052112:	e00a      	b.n	805212a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8052114:	f7fe fa84 	bl	8050620 <HAL_GetTick>
 8052118:	4602      	mov	r2, r0
 805211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 805211c:	1ad3      	subs	r3, r2, r3
 805211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8052122:	4293      	cmp	r3, r2
 8052124:	d901      	bls.n	805212a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8052126:	2303      	movs	r3, #3
 8052128:	e095      	b.n	8052256 <HAL_RCCEx_PeriphCLKConfig+0x256>
 805212a:	2302      	movs	r3, #2
 805212c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 805212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8052130:	fa93 f3a3 	rbit	r3, r3
 8052134:	627b      	str	r3, [r7, #36]	; 0x24
 8052136:	2302      	movs	r3, #2
 8052138:	623b      	str	r3, [r7, #32]
 805213a:	6a3b      	ldr	r3, [r7, #32]
 805213c:	fa93 f3a3 	rbit	r3, r3
 8052140:	61fb      	str	r3, [r7, #28]
  return result;
 8052142:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8052144:	fab3 f383 	clz	r3, r3
 8052148:	b2db      	uxtb	r3, r3
 805214a:	095b      	lsrs	r3, r3, #5
 805214c:	b2db      	uxtb	r3, r3
 805214e:	f043 0302 	orr.w	r3, r3, #2
 8052152:	b2db      	uxtb	r3, r3
 8052154:	2b02      	cmp	r3, #2
 8052156:	d102      	bne.n	805215e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8052158:	4b41      	ldr	r3, [pc, #260]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 805215a:	6a1b      	ldr	r3, [r3, #32]
 805215c:	e007      	b.n	805216e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 805215e:	2302      	movs	r3, #2
 8052160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8052162:	69bb      	ldr	r3, [r7, #24]
 8052164:	fa93 f3a3 	rbit	r3, r3
 8052168:	617b      	str	r3, [r7, #20]
 805216a:	4b3d      	ldr	r3, [pc, #244]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 805216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805216e:	2202      	movs	r2, #2
 8052170:	613a      	str	r2, [r7, #16]
 8052172:	693a      	ldr	r2, [r7, #16]
 8052174:	fa92 f2a2 	rbit	r2, r2
 8052178:	60fa      	str	r2, [r7, #12]
  return result;
 805217a:	68fa      	ldr	r2, [r7, #12]
 805217c:	fab2 f282 	clz	r2, r2
 8052180:	b2d2      	uxtb	r2, r2
 8052182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8052186:	b2d2      	uxtb	r2, r2
 8052188:	f002 021f 	and.w	r2, r2, #31
 805218c:	2101      	movs	r1, #1
 805218e:	fa01 f202 	lsl.w	r2, r1, r2
 8052192:	4013      	ands	r3, r2
 8052194:	2b00      	cmp	r3, #0
 8052196:	d0bd      	beq.n	8052114 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8052198:	4b31      	ldr	r3, [pc, #196]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 805219a:	6a1b      	ldr	r3, [r3, #32]
 805219c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80521a0:	687b      	ldr	r3, [r7, #4]
 80521a2:	685b      	ldr	r3, [r3, #4]
 80521a4:	492e      	ldr	r1, [pc, #184]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521a6:	4313      	orrs	r3, r2
 80521a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80521aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80521ae:	2b01      	cmp	r3, #1
 80521b0:	d105      	bne.n	80521be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80521b2:	4b2b      	ldr	r3, [pc, #172]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521b4:	69db      	ldr	r3, [r3, #28]
 80521b6:	4a2a      	ldr	r2, [pc, #168]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80521bc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80521be:	687b      	ldr	r3, [r7, #4]
 80521c0:	681b      	ldr	r3, [r3, #0]
 80521c2:	f003 0301 	and.w	r3, r3, #1
 80521c6:	2b00      	cmp	r3, #0
 80521c8:	d008      	beq.n	80521dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80521ca:	4b25      	ldr	r3, [pc, #148]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80521ce:	f023 0203 	bic.w	r2, r3, #3
 80521d2:	687b      	ldr	r3, [r7, #4]
 80521d4:	689b      	ldr	r3, [r3, #8]
 80521d6:	4922      	ldr	r1, [pc, #136]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521d8:	4313      	orrs	r3, r2
 80521da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80521dc:	687b      	ldr	r3, [r7, #4]
 80521de:	681b      	ldr	r3, [r3, #0]
 80521e0:	f003 0320 	and.w	r3, r3, #32
 80521e4:	2b00      	cmp	r3, #0
 80521e6:	d008      	beq.n	80521fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80521e8:	4b1d      	ldr	r3, [pc, #116]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80521ec:	f023 0210 	bic.w	r2, r3, #16
 80521f0:	687b      	ldr	r3, [r7, #4]
 80521f2:	68db      	ldr	r3, [r3, #12]
 80521f4:	491a      	ldr	r1, [pc, #104]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80521f6:	4313      	orrs	r3, r2
 80521f8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80521fa:	687b      	ldr	r3, [r7, #4]
 80521fc:	681b      	ldr	r3, [r3, #0]
 80521fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8052202:	2b00      	cmp	r3, #0
 8052204:	d008      	beq.n	8052218 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8052206:	4b16      	ldr	r3, [pc, #88]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805220a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 805220e:	687b      	ldr	r3, [r7, #4]
 8052210:	691b      	ldr	r3, [r3, #16]
 8052212:	4913      	ldr	r1, [pc, #76]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052214:	4313      	orrs	r3, r2
 8052216:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8052218:	687b      	ldr	r3, [r7, #4]
 805221a:	681b      	ldr	r3, [r3, #0]
 805221c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8052220:	2b00      	cmp	r3, #0
 8052222:	d008      	beq.n	8052236 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8052224:	4b0e      	ldr	r3, [pc, #56]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 805222c:	687b      	ldr	r3, [r7, #4]
 805222e:	695b      	ldr	r3, [r3, #20]
 8052230:	490b      	ldr	r1, [pc, #44]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052232:	4313      	orrs	r3, r2
 8052234:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8052236:	687b      	ldr	r3, [r7, #4]
 8052238:	681b      	ldr	r3, [r3, #0]
 805223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 805223e:	2b00      	cmp	r3, #0
 8052240:	d008      	beq.n	8052254 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8052242:	4b07      	ldr	r3, [pc, #28]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 805224a:	687b      	ldr	r3, [r7, #4]
 805224c:	699b      	ldr	r3, [r3, #24]
 805224e:	4904      	ldr	r1, [pc, #16]	; (8052260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8052250:	4313      	orrs	r3, r2
 8052252:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8052254:	2300      	movs	r3, #0
}
 8052256:	4618      	mov	r0, r3
 8052258:	3748      	adds	r7, #72	; 0x48
 805225a:	46bd      	mov	sp, r7
 805225c:	bd80      	pop	{r7, pc}
 805225e:	bf00      	nop
 8052260:	40021000 	.word	0x40021000
 8052264:	40007000 	.word	0x40007000
 8052268:	10908100 	.word	0x10908100

0805226c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 805226c:	b580      	push	{r7, lr}
 805226e:	b082      	sub	sp, #8
 8052270:	af00      	add	r7, sp, #0
 8052272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8052274:	687b      	ldr	r3, [r7, #4]
 8052276:	2b00      	cmp	r3, #0
 8052278:	d101      	bne.n	805227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 805227a:	2301      	movs	r3, #1
 805227c:	e040      	b.n	8052300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 805227e:	687b      	ldr	r3, [r7, #4]
 8052280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8052282:	2b00      	cmp	r3, #0
 8052284:	d106      	bne.n	8052294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8052286:	687b      	ldr	r3, [r7, #4]
 8052288:	2200      	movs	r2, #0
 805228a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 805228e:	6878      	ldr	r0, [r7, #4]
 8052290:	f7fe f8be 	bl	8050410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8052294:	687b      	ldr	r3, [r7, #4]
 8052296:	2224      	movs	r2, #36	; 0x24
 8052298:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 805229a:	687b      	ldr	r3, [r7, #4]
 805229c:	681b      	ldr	r3, [r3, #0]
 805229e:	681a      	ldr	r2, [r3, #0]
 80522a0:	687b      	ldr	r3, [r7, #4]
 80522a2:	681b      	ldr	r3, [r3, #0]
 80522a4:	f022 0201 	bic.w	r2, r2, #1
 80522a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80522aa:	6878      	ldr	r0, [r7, #4]
 80522ac:	f000 f82c 	bl	8052308 <UART_SetConfig>
 80522b0:	4603      	mov	r3, r0
 80522b2:	2b01      	cmp	r3, #1
 80522b4:	d101      	bne.n	80522ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80522b6:	2301      	movs	r3, #1
 80522b8:	e022      	b.n	8052300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80522ba:	687b      	ldr	r3, [r7, #4]
 80522bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80522be:	2b00      	cmp	r3, #0
 80522c0:	d002      	beq.n	80522c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80522c2:	6878      	ldr	r0, [r7, #4]
 80522c4:	f000 f956 	bl	8052574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80522c8:	687b      	ldr	r3, [r7, #4]
 80522ca:	681b      	ldr	r3, [r3, #0]
 80522cc:	685a      	ldr	r2, [r3, #4]
 80522ce:	687b      	ldr	r3, [r7, #4]
 80522d0:	681b      	ldr	r3, [r3, #0]
 80522d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80522d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80522d8:	687b      	ldr	r3, [r7, #4]
 80522da:	681b      	ldr	r3, [r3, #0]
 80522dc:	689a      	ldr	r2, [r3, #8]
 80522de:	687b      	ldr	r3, [r7, #4]
 80522e0:	681b      	ldr	r3, [r3, #0]
 80522e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80522e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80522e8:	687b      	ldr	r3, [r7, #4]
 80522ea:	681b      	ldr	r3, [r3, #0]
 80522ec:	681a      	ldr	r2, [r3, #0]
 80522ee:	687b      	ldr	r3, [r7, #4]
 80522f0:	681b      	ldr	r3, [r3, #0]
 80522f2:	f042 0201 	orr.w	r2, r2, #1
 80522f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80522f8:	6878      	ldr	r0, [r7, #4]
 80522fa:	f000 f9dd 	bl	80526b8 <UART_CheckIdleState>
 80522fe:	4603      	mov	r3, r0
}
 8052300:	4618      	mov	r0, r3
 8052302:	3708      	adds	r7, #8
 8052304:	46bd      	mov	sp, r7
 8052306:	bd80      	pop	{r7, pc}

08052308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8052308:	b580      	push	{r7, lr}
 805230a:	b088      	sub	sp, #32
 805230c:	af00      	add	r7, sp, #0
 805230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8052310:	2300      	movs	r3, #0
 8052312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8052314:	687b      	ldr	r3, [r7, #4]
 8052316:	689a      	ldr	r2, [r3, #8]
 8052318:	687b      	ldr	r3, [r7, #4]
 805231a:	691b      	ldr	r3, [r3, #16]
 805231c:	431a      	orrs	r2, r3
 805231e:	687b      	ldr	r3, [r7, #4]
 8052320:	695b      	ldr	r3, [r3, #20]
 8052322:	431a      	orrs	r2, r3
 8052324:	687b      	ldr	r3, [r7, #4]
 8052326:	69db      	ldr	r3, [r3, #28]
 8052328:	4313      	orrs	r3, r2
 805232a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 805232c:	687b      	ldr	r3, [r7, #4]
 805232e:	681b      	ldr	r3, [r3, #0]
 8052330:	681a      	ldr	r2, [r3, #0]
 8052332:	4b8a      	ldr	r3, [pc, #552]	; (805255c <UART_SetConfig+0x254>)
 8052334:	4013      	ands	r3, r2
 8052336:	687a      	ldr	r2, [r7, #4]
 8052338:	6812      	ldr	r2, [r2, #0]
 805233a:	6979      	ldr	r1, [r7, #20]
 805233c:	430b      	orrs	r3, r1
 805233e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8052340:	687b      	ldr	r3, [r7, #4]
 8052342:	681b      	ldr	r3, [r3, #0]
 8052344:	685b      	ldr	r3, [r3, #4]
 8052346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 805234a:	687b      	ldr	r3, [r7, #4]
 805234c:	68da      	ldr	r2, [r3, #12]
 805234e:	687b      	ldr	r3, [r7, #4]
 8052350:	681b      	ldr	r3, [r3, #0]
 8052352:	430a      	orrs	r2, r1
 8052354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8052356:	687b      	ldr	r3, [r7, #4]
 8052358:	699b      	ldr	r3, [r3, #24]
 805235a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 805235c:	687b      	ldr	r3, [r7, #4]
 805235e:	6a1b      	ldr	r3, [r3, #32]
 8052360:	697a      	ldr	r2, [r7, #20]
 8052362:	4313      	orrs	r3, r2
 8052364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8052366:	687b      	ldr	r3, [r7, #4]
 8052368:	681b      	ldr	r3, [r3, #0]
 805236a:	689b      	ldr	r3, [r3, #8]
 805236c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8052370:	687b      	ldr	r3, [r7, #4]
 8052372:	681b      	ldr	r3, [r3, #0]
 8052374:	697a      	ldr	r2, [r7, #20]
 8052376:	430a      	orrs	r2, r1
 8052378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 805237a:	687b      	ldr	r3, [r7, #4]
 805237c:	681b      	ldr	r3, [r3, #0]
 805237e:	4a78      	ldr	r2, [pc, #480]	; (8052560 <UART_SetConfig+0x258>)
 8052380:	4293      	cmp	r3, r2
 8052382:	d120      	bne.n	80523c6 <UART_SetConfig+0xbe>
 8052384:	4b77      	ldr	r3, [pc, #476]	; (8052564 <UART_SetConfig+0x25c>)
 8052386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8052388:	f003 0303 	and.w	r3, r3, #3
 805238c:	2b03      	cmp	r3, #3
 805238e:	d817      	bhi.n	80523c0 <UART_SetConfig+0xb8>
 8052390:	a201      	add	r2, pc, #4	; (adr r2, 8052398 <UART_SetConfig+0x90>)
 8052392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8052396:	bf00      	nop
 8052398:	080523a9 	.word	0x080523a9
 805239c:	080523b5 	.word	0x080523b5
 80523a0:	080523bb 	.word	0x080523bb
 80523a4:	080523af 	.word	0x080523af
 80523a8:	2300      	movs	r3, #0
 80523aa:	77fb      	strb	r3, [r7, #31]
 80523ac:	e01d      	b.n	80523ea <UART_SetConfig+0xe2>
 80523ae:	2302      	movs	r3, #2
 80523b0:	77fb      	strb	r3, [r7, #31]
 80523b2:	e01a      	b.n	80523ea <UART_SetConfig+0xe2>
 80523b4:	2304      	movs	r3, #4
 80523b6:	77fb      	strb	r3, [r7, #31]
 80523b8:	e017      	b.n	80523ea <UART_SetConfig+0xe2>
 80523ba:	2308      	movs	r3, #8
 80523bc:	77fb      	strb	r3, [r7, #31]
 80523be:	e014      	b.n	80523ea <UART_SetConfig+0xe2>
 80523c0:	2310      	movs	r3, #16
 80523c2:	77fb      	strb	r3, [r7, #31]
 80523c4:	e011      	b.n	80523ea <UART_SetConfig+0xe2>
 80523c6:	687b      	ldr	r3, [r7, #4]
 80523c8:	681b      	ldr	r3, [r3, #0]
 80523ca:	4a67      	ldr	r2, [pc, #412]	; (8052568 <UART_SetConfig+0x260>)
 80523cc:	4293      	cmp	r3, r2
 80523ce:	d102      	bne.n	80523d6 <UART_SetConfig+0xce>
 80523d0:	2300      	movs	r3, #0
 80523d2:	77fb      	strb	r3, [r7, #31]
 80523d4:	e009      	b.n	80523ea <UART_SetConfig+0xe2>
 80523d6:	687b      	ldr	r3, [r7, #4]
 80523d8:	681b      	ldr	r3, [r3, #0]
 80523da:	4a64      	ldr	r2, [pc, #400]	; (805256c <UART_SetConfig+0x264>)
 80523dc:	4293      	cmp	r3, r2
 80523de:	d102      	bne.n	80523e6 <UART_SetConfig+0xde>
 80523e0:	2300      	movs	r3, #0
 80523e2:	77fb      	strb	r3, [r7, #31]
 80523e4:	e001      	b.n	80523ea <UART_SetConfig+0xe2>
 80523e6:	2310      	movs	r3, #16
 80523e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80523ea:	687b      	ldr	r3, [r7, #4]
 80523ec:	69db      	ldr	r3, [r3, #28]
 80523ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80523f2:	d15a      	bne.n	80524aa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80523f4:	7ffb      	ldrb	r3, [r7, #31]
 80523f6:	2b08      	cmp	r3, #8
 80523f8:	d827      	bhi.n	805244a <UART_SetConfig+0x142>
 80523fa:	a201      	add	r2, pc, #4	; (adr r2, 8052400 <UART_SetConfig+0xf8>)
 80523fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8052400:	08052425 	.word	0x08052425
 8052404:	0805242d 	.word	0x0805242d
 8052408:	08052435 	.word	0x08052435
 805240c:	0805244b 	.word	0x0805244b
 8052410:	0805243b 	.word	0x0805243b
 8052414:	0805244b 	.word	0x0805244b
 8052418:	0805244b 	.word	0x0805244b
 805241c:	0805244b 	.word	0x0805244b
 8052420:	08052443 	.word	0x08052443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8052424:	f7ff fda8 	bl	8051f78 <HAL_RCC_GetPCLK1Freq>
 8052428:	61b8      	str	r0, [r7, #24]
        break;
 805242a:	e013      	b.n	8052454 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 805242c:	f7ff fdc6 	bl	8051fbc <HAL_RCC_GetPCLK2Freq>
 8052430:	61b8      	str	r0, [r7, #24]
        break;
 8052432:	e00f      	b.n	8052454 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8052434:	4b4e      	ldr	r3, [pc, #312]	; (8052570 <UART_SetConfig+0x268>)
 8052436:	61bb      	str	r3, [r7, #24]
        break;
 8052438:	e00c      	b.n	8052454 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 805243a:	f7ff fd27 	bl	8051e8c <HAL_RCC_GetSysClockFreq>
 805243e:	61b8      	str	r0, [r7, #24]
        break;
 8052440:	e008      	b.n	8052454 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8052442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8052446:	61bb      	str	r3, [r7, #24]
        break;
 8052448:	e004      	b.n	8052454 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 805244a:	2300      	movs	r3, #0
 805244c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 805244e:	2301      	movs	r3, #1
 8052450:	77bb      	strb	r3, [r7, #30]
        break;
 8052452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8052454:	69bb      	ldr	r3, [r7, #24]
 8052456:	2b00      	cmp	r3, #0
 8052458:	d074      	beq.n	8052544 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 805245a:	69bb      	ldr	r3, [r7, #24]
 805245c:	005a      	lsls	r2, r3, #1
 805245e:	687b      	ldr	r3, [r7, #4]
 8052460:	685b      	ldr	r3, [r3, #4]
 8052462:	085b      	lsrs	r3, r3, #1
 8052464:	441a      	add	r2, r3
 8052466:	687b      	ldr	r3, [r7, #4]
 8052468:	685b      	ldr	r3, [r3, #4]
 805246a:	fbb2 f3f3 	udiv	r3, r2, r3
 805246e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8052470:	693b      	ldr	r3, [r7, #16]
 8052472:	2b0f      	cmp	r3, #15
 8052474:	d916      	bls.n	80524a4 <UART_SetConfig+0x19c>
 8052476:	693b      	ldr	r3, [r7, #16]
 8052478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 805247c:	d212      	bcs.n	80524a4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 805247e:	693b      	ldr	r3, [r7, #16]
 8052480:	b29b      	uxth	r3, r3
 8052482:	f023 030f 	bic.w	r3, r3, #15
 8052486:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8052488:	693b      	ldr	r3, [r7, #16]
 805248a:	085b      	lsrs	r3, r3, #1
 805248c:	b29b      	uxth	r3, r3
 805248e:	f003 0307 	and.w	r3, r3, #7
 8052492:	b29a      	uxth	r2, r3
 8052494:	89fb      	ldrh	r3, [r7, #14]
 8052496:	4313      	orrs	r3, r2
 8052498:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 805249a:	687b      	ldr	r3, [r7, #4]
 805249c:	681b      	ldr	r3, [r3, #0]
 805249e:	89fa      	ldrh	r2, [r7, #14]
 80524a0:	60da      	str	r2, [r3, #12]
 80524a2:	e04f      	b.n	8052544 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80524a4:	2301      	movs	r3, #1
 80524a6:	77bb      	strb	r3, [r7, #30]
 80524a8:	e04c      	b.n	8052544 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80524aa:	7ffb      	ldrb	r3, [r7, #31]
 80524ac:	2b08      	cmp	r3, #8
 80524ae:	d828      	bhi.n	8052502 <UART_SetConfig+0x1fa>
 80524b0:	a201      	add	r2, pc, #4	; (adr r2, 80524b8 <UART_SetConfig+0x1b0>)
 80524b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80524b6:	bf00      	nop
 80524b8:	080524dd 	.word	0x080524dd
 80524bc:	080524e5 	.word	0x080524e5
 80524c0:	080524ed 	.word	0x080524ed
 80524c4:	08052503 	.word	0x08052503
 80524c8:	080524f3 	.word	0x080524f3
 80524cc:	08052503 	.word	0x08052503
 80524d0:	08052503 	.word	0x08052503
 80524d4:	08052503 	.word	0x08052503
 80524d8:	080524fb 	.word	0x080524fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80524dc:	f7ff fd4c 	bl	8051f78 <HAL_RCC_GetPCLK1Freq>
 80524e0:	61b8      	str	r0, [r7, #24]
        break;
 80524e2:	e013      	b.n	805250c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80524e4:	f7ff fd6a 	bl	8051fbc <HAL_RCC_GetPCLK2Freq>
 80524e8:	61b8      	str	r0, [r7, #24]
        break;
 80524ea:	e00f      	b.n	805250c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80524ec:	4b20      	ldr	r3, [pc, #128]	; (8052570 <UART_SetConfig+0x268>)
 80524ee:	61bb      	str	r3, [r7, #24]
        break;
 80524f0:	e00c      	b.n	805250c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80524f2:	f7ff fccb 	bl	8051e8c <HAL_RCC_GetSysClockFreq>
 80524f6:	61b8      	str	r0, [r7, #24]
        break;
 80524f8:	e008      	b.n	805250c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80524fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80524fe:	61bb      	str	r3, [r7, #24]
        break;
 8052500:	e004      	b.n	805250c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8052502:	2300      	movs	r3, #0
 8052504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8052506:	2301      	movs	r3, #1
 8052508:	77bb      	strb	r3, [r7, #30]
        break;
 805250a:	bf00      	nop
    }

    if (pclk != 0U)
 805250c:	69bb      	ldr	r3, [r7, #24]
 805250e:	2b00      	cmp	r3, #0
 8052510:	d018      	beq.n	8052544 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8052512:	687b      	ldr	r3, [r7, #4]
 8052514:	685b      	ldr	r3, [r3, #4]
 8052516:	085a      	lsrs	r2, r3, #1
 8052518:	69bb      	ldr	r3, [r7, #24]
 805251a:	441a      	add	r2, r3
 805251c:	687b      	ldr	r3, [r7, #4]
 805251e:	685b      	ldr	r3, [r3, #4]
 8052520:	fbb2 f3f3 	udiv	r3, r2, r3
 8052524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8052526:	693b      	ldr	r3, [r7, #16]
 8052528:	2b0f      	cmp	r3, #15
 805252a:	d909      	bls.n	8052540 <UART_SetConfig+0x238>
 805252c:	693b      	ldr	r3, [r7, #16]
 805252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8052532:	d205      	bcs.n	8052540 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8052534:	693b      	ldr	r3, [r7, #16]
 8052536:	b29a      	uxth	r2, r3
 8052538:	687b      	ldr	r3, [r7, #4]
 805253a:	681b      	ldr	r3, [r3, #0]
 805253c:	60da      	str	r2, [r3, #12]
 805253e:	e001      	b.n	8052544 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8052540:	2301      	movs	r3, #1
 8052542:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8052544:	687b      	ldr	r3, [r7, #4]
 8052546:	2200      	movs	r2, #0
 8052548:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 805254a:	687b      	ldr	r3, [r7, #4]
 805254c:	2200      	movs	r2, #0
 805254e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8052550:	7fbb      	ldrb	r3, [r7, #30]
}
 8052552:	4618      	mov	r0, r3
 8052554:	3720      	adds	r7, #32
 8052556:	46bd      	mov	sp, r7
 8052558:	bd80      	pop	{r7, pc}
 805255a:	bf00      	nop
 805255c:	efff69f3 	.word	0xefff69f3
 8052560:	40013800 	.word	0x40013800
 8052564:	40021000 	.word	0x40021000
 8052568:	40004400 	.word	0x40004400
 805256c:	40004800 	.word	0x40004800
 8052570:	007a1200 	.word	0x007a1200

08052574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8052574:	b480      	push	{r7}
 8052576:	b083      	sub	sp, #12
 8052578:	af00      	add	r7, sp, #0
 805257a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 805257c:	687b      	ldr	r3, [r7, #4]
 805257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052580:	f003 0301 	and.w	r3, r3, #1
 8052584:	2b00      	cmp	r3, #0
 8052586:	d00a      	beq.n	805259e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8052588:	687b      	ldr	r3, [r7, #4]
 805258a:	681b      	ldr	r3, [r3, #0]
 805258c:	685b      	ldr	r3, [r3, #4]
 805258e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8052592:	687b      	ldr	r3, [r7, #4]
 8052594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8052596:	687b      	ldr	r3, [r7, #4]
 8052598:	681b      	ldr	r3, [r3, #0]
 805259a:	430a      	orrs	r2, r1
 805259c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 805259e:	687b      	ldr	r3, [r7, #4]
 80525a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80525a2:	f003 0302 	and.w	r3, r3, #2
 80525a6:	2b00      	cmp	r3, #0
 80525a8:	d00a      	beq.n	80525c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80525aa:	687b      	ldr	r3, [r7, #4]
 80525ac:	681b      	ldr	r3, [r3, #0]
 80525ae:	685b      	ldr	r3, [r3, #4]
 80525b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80525b4:	687b      	ldr	r3, [r7, #4]
 80525b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80525b8:	687b      	ldr	r3, [r7, #4]
 80525ba:	681b      	ldr	r3, [r3, #0]
 80525bc:	430a      	orrs	r2, r1
 80525be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80525c0:	687b      	ldr	r3, [r7, #4]
 80525c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80525c4:	f003 0304 	and.w	r3, r3, #4
 80525c8:	2b00      	cmp	r3, #0
 80525ca:	d00a      	beq.n	80525e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80525cc:	687b      	ldr	r3, [r7, #4]
 80525ce:	681b      	ldr	r3, [r3, #0]
 80525d0:	685b      	ldr	r3, [r3, #4]
 80525d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80525d6:	687b      	ldr	r3, [r7, #4]
 80525d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80525da:	687b      	ldr	r3, [r7, #4]
 80525dc:	681b      	ldr	r3, [r3, #0]
 80525de:	430a      	orrs	r2, r1
 80525e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80525e2:	687b      	ldr	r3, [r7, #4]
 80525e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80525e6:	f003 0308 	and.w	r3, r3, #8
 80525ea:	2b00      	cmp	r3, #0
 80525ec:	d00a      	beq.n	8052604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80525ee:	687b      	ldr	r3, [r7, #4]
 80525f0:	681b      	ldr	r3, [r3, #0]
 80525f2:	685b      	ldr	r3, [r3, #4]
 80525f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80525f8:	687b      	ldr	r3, [r7, #4]
 80525fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80525fc:	687b      	ldr	r3, [r7, #4]
 80525fe:	681b      	ldr	r3, [r3, #0]
 8052600:	430a      	orrs	r2, r1
 8052602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8052604:	687b      	ldr	r3, [r7, #4]
 8052606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052608:	f003 0310 	and.w	r3, r3, #16
 805260c:	2b00      	cmp	r3, #0
 805260e:	d00a      	beq.n	8052626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8052610:	687b      	ldr	r3, [r7, #4]
 8052612:	681b      	ldr	r3, [r3, #0]
 8052614:	689b      	ldr	r3, [r3, #8]
 8052616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 805261a:	687b      	ldr	r3, [r7, #4]
 805261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 805261e:	687b      	ldr	r3, [r7, #4]
 8052620:	681b      	ldr	r3, [r3, #0]
 8052622:	430a      	orrs	r2, r1
 8052624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8052626:	687b      	ldr	r3, [r7, #4]
 8052628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805262a:	f003 0320 	and.w	r3, r3, #32
 805262e:	2b00      	cmp	r3, #0
 8052630:	d00a      	beq.n	8052648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8052632:	687b      	ldr	r3, [r7, #4]
 8052634:	681b      	ldr	r3, [r3, #0]
 8052636:	689b      	ldr	r3, [r3, #8]
 8052638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 805263c:	687b      	ldr	r3, [r7, #4]
 805263e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8052640:	687b      	ldr	r3, [r7, #4]
 8052642:	681b      	ldr	r3, [r3, #0]
 8052644:	430a      	orrs	r2, r1
 8052646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8052648:	687b      	ldr	r3, [r7, #4]
 805264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8052650:	2b00      	cmp	r3, #0
 8052652:	d01a      	beq.n	805268a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8052654:	687b      	ldr	r3, [r7, #4]
 8052656:	681b      	ldr	r3, [r3, #0]
 8052658:	685b      	ldr	r3, [r3, #4]
 805265a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 805265e:	687b      	ldr	r3, [r7, #4]
 8052660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8052662:	687b      	ldr	r3, [r7, #4]
 8052664:	681b      	ldr	r3, [r3, #0]
 8052666:	430a      	orrs	r2, r1
 8052668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 805266a:	687b      	ldr	r3, [r7, #4]
 805266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 805266e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8052672:	d10a      	bne.n	805268a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8052674:	687b      	ldr	r3, [r7, #4]
 8052676:	681b      	ldr	r3, [r3, #0]
 8052678:	685b      	ldr	r3, [r3, #4]
 805267a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 805267e:	687b      	ldr	r3, [r7, #4]
 8052680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8052682:	687b      	ldr	r3, [r7, #4]
 8052684:	681b      	ldr	r3, [r3, #0]
 8052686:	430a      	orrs	r2, r1
 8052688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 805268a:	687b      	ldr	r3, [r7, #4]
 805268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8052692:	2b00      	cmp	r3, #0
 8052694:	d00a      	beq.n	80526ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8052696:	687b      	ldr	r3, [r7, #4]
 8052698:	681b      	ldr	r3, [r3, #0]
 805269a:	685b      	ldr	r3, [r3, #4]
 805269c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80526a0:	687b      	ldr	r3, [r7, #4]
 80526a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80526a4:	687b      	ldr	r3, [r7, #4]
 80526a6:	681b      	ldr	r3, [r3, #0]
 80526a8:	430a      	orrs	r2, r1
 80526aa:	605a      	str	r2, [r3, #4]
  }
}
 80526ac:	bf00      	nop
 80526ae:	370c      	adds	r7, #12
 80526b0:	46bd      	mov	sp, r7
 80526b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80526b6:	4770      	bx	lr

080526b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80526b8:	b580      	push	{r7, lr}
 80526ba:	b098      	sub	sp, #96	; 0x60
 80526bc:	af02      	add	r7, sp, #8
 80526be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80526c0:	687b      	ldr	r3, [r7, #4]
 80526c2:	2200      	movs	r2, #0
 80526c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80526c8:	f7fd ffaa 	bl	8050620 <HAL_GetTick>
 80526cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80526ce:	687b      	ldr	r3, [r7, #4]
 80526d0:	681b      	ldr	r3, [r3, #0]
 80526d2:	681b      	ldr	r3, [r3, #0]
 80526d4:	f003 0308 	and.w	r3, r3, #8
 80526d8:	2b08      	cmp	r3, #8
 80526da:	d12e      	bne.n	805273a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80526dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80526e0:	9300      	str	r3, [sp, #0]
 80526e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80526e4:	2200      	movs	r2, #0
 80526e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80526ea:	6878      	ldr	r0, [r7, #4]
 80526ec:	f000 f88c 	bl	8052808 <UART_WaitOnFlagUntilTimeout>
 80526f0:	4603      	mov	r3, r0
 80526f2:	2b00      	cmp	r3, #0
 80526f4:	d021      	beq.n	805273a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80526f6:	687b      	ldr	r3, [r7, #4]
 80526f8:	681b      	ldr	r3, [r3, #0]
 80526fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80526fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80526fe:	e853 3f00 	ldrex	r3, [r3]
 8052702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8052704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8052706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 805270a:	653b      	str	r3, [r7, #80]	; 0x50
 805270c:	687b      	ldr	r3, [r7, #4]
 805270e:	681b      	ldr	r3, [r3, #0]
 8052710:	461a      	mov	r2, r3
 8052712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8052714:	647b      	str	r3, [r7, #68]	; 0x44
 8052716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8052718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 805271a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 805271c:	e841 2300 	strex	r3, r2, [r1]
 8052720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8052722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8052724:	2b00      	cmp	r3, #0
 8052726:	d1e6      	bne.n	80526f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8052728:	687b      	ldr	r3, [r7, #4]
 805272a:	2220      	movs	r2, #32
 805272c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 805272e:	687b      	ldr	r3, [r7, #4]
 8052730:	2200      	movs	r2, #0
 8052732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8052736:	2303      	movs	r3, #3
 8052738:	e062      	b.n	8052800 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 805273a:	687b      	ldr	r3, [r7, #4]
 805273c:	681b      	ldr	r3, [r3, #0]
 805273e:	681b      	ldr	r3, [r3, #0]
 8052740:	f003 0304 	and.w	r3, r3, #4
 8052744:	2b04      	cmp	r3, #4
 8052746:	d149      	bne.n	80527dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8052748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 805274c:	9300      	str	r3, [sp, #0]
 805274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8052750:	2200      	movs	r2, #0
 8052752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8052756:	6878      	ldr	r0, [r7, #4]
 8052758:	f000 f856 	bl	8052808 <UART_WaitOnFlagUntilTimeout>
 805275c:	4603      	mov	r3, r0
 805275e:	2b00      	cmp	r3, #0
 8052760:	d03c      	beq.n	80527dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8052762:	687b      	ldr	r3, [r7, #4]
 8052764:	681b      	ldr	r3, [r3, #0]
 8052766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8052768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805276a:	e853 3f00 	ldrex	r3, [r3]
 805276e:	623b      	str	r3, [r7, #32]
   return(result);
 8052770:	6a3b      	ldr	r3, [r7, #32]
 8052772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8052776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8052778:	687b      	ldr	r3, [r7, #4]
 805277a:	681b      	ldr	r3, [r3, #0]
 805277c:	461a      	mov	r2, r3
 805277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8052780:	633b      	str	r3, [r7, #48]	; 0x30
 8052782:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8052784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8052786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8052788:	e841 2300 	strex	r3, r2, [r1]
 805278c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 805278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8052790:	2b00      	cmp	r3, #0
 8052792:	d1e6      	bne.n	8052762 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8052794:	687b      	ldr	r3, [r7, #4]
 8052796:	681b      	ldr	r3, [r3, #0]
 8052798:	3308      	adds	r3, #8
 805279a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 805279c:	693b      	ldr	r3, [r7, #16]
 805279e:	e853 3f00 	ldrex	r3, [r3]
 80527a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80527a4:	68fb      	ldr	r3, [r7, #12]
 80527a6:	f023 0301 	bic.w	r3, r3, #1
 80527aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80527ac:	687b      	ldr	r3, [r7, #4]
 80527ae:	681b      	ldr	r3, [r3, #0]
 80527b0:	3308      	adds	r3, #8
 80527b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80527b4:	61fa      	str	r2, [r7, #28]
 80527b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80527b8:	69b9      	ldr	r1, [r7, #24]
 80527ba:	69fa      	ldr	r2, [r7, #28]
 80527bc:	e841 2300 	strex	r3, r2, [r1]
 80527c0:	617b      	str	r3, [r7, #20]
   return(result);
 80527c2:	697b      	ldr	r3, [r7, #20]
 80527c4:	2b00      	cmp	r3, #0
 80527c6:	d1e5      	bne.n	8052794 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80527c8:	687b      	ldr	r3, [r7, #4]
 80527ca:	2220      	movs	r2, #32
 80527cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80527d0:	687b      	ldr	r3, [r7, #4]
 80527d2:	2200      	movs	r2, #0
 80527d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80527d8:	2303      	movs	r3, #3
 80527da:	e011      	b.n	8052800 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80527dc:	687b      	ldr	r3, [r7, #4]
 80527de:	2220      	movs	r2, #32
 80527e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80527e2:	687b      	ldr	r3, [r7, #4]
 80527e4:	2220      	movs	r2, #32
 80527e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80527ea:	687b      	ldr	r3, [r7, #4]
 80527ec:	2200      	movs	r2, #0
 80527ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80527f0:	687b      	ldr	r3, [r7, #4]
 80527f2:	2200      	movs	r2, #0
 80527f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80527f6:	687b      	ldr	r3, [r7, #4]
 80527f8:	2200      	movs	r2, #0
 80527fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80527fe:	2300      	movs	r3, #0
}
 8052800:	4618      	mov	r0, r3
 8052802:	3758      	adds	r7, #88	; 0x58
 8052804:	46bd      	mov	sp, r7
 8052806:	bd80      	pop	{r7, pc}

08052808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8052808:	b580      	push	{r7, lr}
 805280a:	b084      	sub	sp, #16
 805280c:	af00      	add	r7, sp, #0
 805280e:	60f8      	str	r0, [r7, #12]
 8052810:	60b9      	str	r1, [r7, #8]
 8052812:	603b      	str	r3, [r7, #0]
 8052814:	4613      	mov	r3, r2
 8052816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8052818:	e049      	b.n	80528ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 805281a:	69bb      	ldr	r3, [r7, #24]
 805281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8052820:	d045      	beq.n	80528ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8052822:	f7fd fefd 	bl	8050620 <HAL_GetTick>
 8052826:	4602      	mov	r2, r0
 8052828:	683b      	ldr	r3, [r7, #0]
 805282a:	1ad3      	subs	r3, r2, r3
 805282c:	69ba      	ldr	r2, [r7, #24]
 805282e:	429a      	cmp	r2, r3
 8052830:	d302      	bcc.n	8052838 <UART_WaitOnFlagUntilTimeout+0x30>
 8052832:	69bb      	ldr	r3, [r7, #24]
 8052834:	2b00      	cmp	r3, #0
 8052836:	d101      	bne.n	805283c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8052838:	2303      	movs	r3, #3
 805283a:	e048      	b.n	80528ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 805283c:	68fb      	ldr	r3, [r7, #12]
 805283e:	681b      	ldr	r3, [r3, #0]
 8052840:	681b      	ldr	r3, [r3, #0]
 8052842:	f003 0304 	and.w	r3, r3, #4
 8052846:	2b00      	cmp	r3, #0
 8052848:	d031      	beq.n	80528ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 805284a:	68fb      	ldr	r3, [r7, #12]
 805284c:	681b      	ldr	r3, [r3, #0]
 805284e:	69db      	ldr	r3, [r3, #28]
 8052850:	f003 0308 	and.w	r3, r3, #8
 8052854:	2b08      	cmp	r3, #8
 8052856:	d110      	bne.n	805287a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8052858:	68fb      	ldr	r3, [r7, #12]
 805285a:	681b      	ldr	r3, [r3, #0]
 805285c:	2208      	movs	r2, #8
 805285e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8052860:	68f8      	ldr	r0, [r7, #12]
 8052862:	f000 f838 	bl	80528d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8052866:	68fb      	ldr	r3, [r7, #12]
 8052868:	2208      	movs	r2, #8
 805286a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 805286e:	68fb      	ldr	r3, [r7, #12]
 8052870:	2200      	movs	r2, #0
 8052872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8052876:	2301      	movs	r3, #1
 8052878:	e029      	b.n	80528ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 805287a:	68fb      	ldr	r3, [r7, #12]
 805287c:	681b      	ldr	r3, [r3, #0]
 805287e:	69db      	ldr	r3, [r3, #28]
 8052880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8052884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8052888:	d111      	bne.n	80528ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 805288a:	68fb      	ldr	r3, [r7, #12]
 805288c:	681b      	ldr	r3, [r3, #0]
 805288e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8052892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8052894:	68f8      	ldr	r0, [r7, #12]
 8052896:	f000 f81e 	bl	80528d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 805289a:	68fb      	ldr	r3, [r7, #12]
 805289c:	2220      	movs	r2, #32
 805289e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80528a2:	68fb      	ldr	r3, [r7, #12]
 80528a4:	2200      	movs	r2, #0
 80528a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80528aa:	2303      	movs	r3, #3
 80528ac:	e00f      	b.n	80528ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80528ae:	68fb      	ldr	r3, [r7, #12]
 80528b0:	681b      	ldr	r3, [r3, #0]
 80528b2:	69da      	ldr	r2, [r3, #28]
 80528b4:	68bb      	ldr	r3, [r7, #8]
 80528b6:	4013      	ands	r3, r2
 80528b8:	68ba      	ldr	r2, [r7, #8]
 80528ba:	429a      	cmp	r2, r3
 80528bc:	bf0c      	ite	eq
 80528be:	2301      	moveq	r3, #1
 80528c0:	2300      	movne	r3, #0
 80528c2:	b2db      	uxtb	r3, r3
 80528c4:	461a      	mov	r2, r3
 80528c6:	79fb      	ldrb	r3, [r7, #7]
 80528c8:	429a      	cmp	r2, r3
 80528ca:	d0a6      	beq.n	805281a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80528cc:	2300      	movs	r3, #0
}
 80528ce:	4618      	mov	r0, r3
 80528d0:	3710      	adds	r7, #16
 80528d2:	46bd      	mov	sp, r7
 80528d4:	bd80      	pop	{r7, pc}

080528d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80528d6:	b480      	push	{r7}
 80528d8:	b095      	sub	sp, #84	; 0x54
 80528da:	af00      	add	r7, sp, #0
 80528dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80528de:	687b      	ldr	r3, [r7, #4]
 80528e0:	681b      	ldr	r3, [r3, #0]
 80528e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80528e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80528e6:	e853 3f00 	ldrex	r3, [r3]
 80528ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80528ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80528ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80528f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80528f4:	687b      	ldr	r3, [r7, #4]
 80528f6:	681b      	ldr	r3, [r3, #0]
 80528f8:	461a      	mov	r2, r3
 80528fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80528fc:	643b      	str	r3, [r7, #64]	; 0x40
 80528fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8052900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8052902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8052904:	e841 2300 	strex	r3, r2, [r1]
 8052908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 805290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805290c:	2b00      	cmp	r3, #0
 805290e:	d1e6      	bne.n	80528de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8052910:	687b      	ldr	r3, [r7, #4]
 8052912:	681b      	ldr	r3, [r3, #0]
 8052914:	3308      	adds	r3, #8
 8052916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8052918:	6a3b      	ldr	r3, [r7, #32]
 805291a:	e853 3f00 	ldrex	r3, [r3]
 805291e:	61fb      	str	r3, [r7, #28]
   return(result);
 8052920:	69fb      	ldr	r3, [r7, #28]
 8052922:	f023 0301 	bic.w	r3, r3, #1
 8052926:	64bb      	str	r3, [r7, #72]	; 0x48
 8052928:	687b      	ldr	r3, [r7, #4]
 805292a:	681b      	ldr	r3, [r3, #0]
 805292c:	3308      	adds	r3, #8
 805292e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8052930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8052932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8052934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8052936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8052938:	e841 2300 	strex	r3, r2, [r1]
 805293c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 805293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052940:	2b00      	cmp	r3, #0
 8052942:	d1e5      	bne.n	8052910 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8052944:	687b      	ldr	r3, [r7, #4]
 8052946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8052948:	2b01      	cmp	r3, #1
 805294a:	d118      	bne.n	805297e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 805294c:	687b      	ldr	r3, [r7, #4]
 805294e:	681b      	ldr	r3, [r3, #0]
 8052950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8052952:	68fb      	ldr	r3, [r7, #12]
 8052954:	e853 3f00 	ldrex	r3, [r3]
 8052958:	60bb      	str	r3, [r7, #8]
   return(result);
 805295a:	68bb      	ldr	r3, [r7, #8]
 805295c:	f023 0310 	bic.w	r3, r3, #16
 8052960:	647b      	str	r3, [r7, #68]	; 0x44
 8052962:	687b      	ldr	r3, [r7, #4]
 8052964:	681b      	ldr	r3, [r3, #0]
 8052966:	461a      	mov	r2, r3
 8052968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 805296a:	61bb      	str	r3, [r7, #24]
 805296c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 805296e:	6979      	ldr	r1, [r7, #20]
 8052970:	69ba      	ldr	r2, [r7, #24]
 8052972:	e841 2300 	strex	r3, r2, [r1]
 8052976:	613b      	str	r3, [r7, #16]
   return(result);
 8052978:	693b      	ldr	r3, [r7, #16]
 805297a:	2b00      	cmp	r3, #0
 805297c:	d1e6      	bne.n	805294c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 805297e:	687b      	ldr	r3, [r7, #4]
 8052980:	2220      	movs	r2, #32
 8052982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8052986:	687b      	ldr	r3, [r7, #4]
 8052988:	2200      	movs	r2, #0
 805298a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 805298c:	687b      	ldr	r3, [r7, #4]
 805298e:	2200      	movs	r2, #0
 8052990:	669a      	str	r2, [r3, #104]	; 0x68
}
 8052992:	bf00      	nop
 8052994:	3754      	adds	r7, #84	; 0x54
 8052996:	46bd      	mov	sp, r7
 8052998:	f85d 7b04 	ldr.w	r7, [sp], #4
 805299c:	4770      	bx	lr
	...

080529a0 <__libc_init_array>:
 80529a0:	b570      	push	{r4, r5, r6, lr}
 80529a2:	4d0d      	ldr	r5, [pc, #52]	; (80529d8 <__libc_init_array+0x38>)
 80529a4:	4c0d      	ldr	r4, [pc, #52]	; (80529dc <__libc_init_array+0x3c>)
 80529a6:	1b64      	subs	r4, r4, r5
 80529a8:	10a4      	asrs	r4, r4, #2
 80529aa:	2600      	movs	r6, #0
 80529ac:	42a6      	cmp	r6, r4
 80529ae:	d109      	bne.n	80529c4 <__libc_init_array+0x24>
 80529b0:	4d0b      	ldr	r5, [pc, #44]	; (80529e0 <__libc_init_array+0x40>)
 80529b2:	4c0c      	ldr	r4, [pc, #48]	; (80529e4 <__libc_init_array+0x44>)
 80529b4:	f000 f820 	bl	80529f8 <_init>
 80529b8:	1b64      	subs	r4, r4, r5
 80529ba:	10a4      	asrs	r4, r4, #2
 80529bc:	2600      	movs	r6, #0
 80529be:	42a6      	cmp	r6, r4
 80529c0:	d105      	bne.n	80529ce <__libc_init_array+0x2e>
 80529c2:	bd70      	pop	{r4, r5, r6, pc}
 80529c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80529c8:	4798      	blx	r3
 80529ca:	3601      	adds	r6, #1
 80529cc:	e7ee      	b.n	80529ac <__libc_init_array+0xc>
 80529ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80529d2:	4798      	blx	r3
 80529d4:	3601      	adds	r6, #1
 80529d6:	e7f2      	b.n	80529be <__libc_init_array+0x1e>
 80529d8:	08052a48 	.word	0x08052a48
 80529dc:	08052a48 	.word	0x08052a48
 80529e0:	08052a48 	.word	0x08052a48
 80529e4:	08052a4c 	.word	0x08052a4c

080529e8 <memset>:
 80529e8:	4402      	add	r2, r0
 80529ea:	4603      	mov	r3, r0
 80529ec:	4293      	cmp	r3, r2
 80529ee:	d100      	bne.n	80529f2 <memset+0xa>
 80529f0:	4770      	bx	lr
 80529f2:	f803 1b01 	strb.w	r1, [r3], #1
 80529f6:	e7f9      	b.n	80529ec <memset+0x4>

080529f8 <_init>:
 80529f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80529fa:	bf00      	nop
 80529fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80529fe:	bc08      	pop	{r3}
 8052a00:	469e      	mov	lr, r3
 8052a02:	4770      	bx	lr

08052a04 <_fini>:
 8052a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052a06:	bf00      	nop
 8052a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8052a0a:	bc08      	pop	{r3}
 8052a0c:	469e      	mov	lr, r3
 8052a0e:	4770      	bx	lr
