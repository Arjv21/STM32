
UserApp_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08005194  08005194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800a380  0800a380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800a3c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000001c  0800a3e0  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800a3e0  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcea  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  00014d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00017340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb86  00000000  00000000  00018587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fafd  00000000  00000000  0003710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4523  00000000  00000000  00046c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb12d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002864  00000000  00000000  000fb170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fd9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005194 <__do_global_dtors_aux>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4c05      	ldr	r4, [pc, #20]	@ (80051ac <__do_global_dtors_aux+0x18>)
 8005198:	7823      	ldrb	r3, [r4, #0]
 800519a:	b933      	cbnz	r3, 80051aa <__do_global_dtors_aux+0x16>
 800519c:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <__do_global_dtors_aux+0x1c>)
 800519e:	b113      	cbz	r3, 80051a6 <__do_global_dtors_aux+0x12>
 80051a0:	4804      	ldr	r0, [pc, #16]	@ (80051b4 <__do_global_dtors_aux+0x20>)
 80051a2:	f3af 8000 	nop.w
 80051a6:	2301      	movs	r3, #1
 80051a8:	7023      	strb	r3, [r4, #0]
 80051aa:	bd10      	pop	{r4, pc}
 80051ac:	2000001c 	.word	0x2000001c
 80051b0:	00000000 	.word	0x00000000
 80051b4:	0800a368 	.word	0x0800a368

080051b8 <frame_dummy>:
 80051b8:	b508      	push	{r3, lr}
 80051ba:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <frame_dummy+0x10>)
 80051bc:	b11b      	cbz	r3, 80051c6 <frame_dummy+0xe>
 80051be:	4903      	ldr	r1, [pc, #12]	@ (80051cc <frame_dummy+0x14>)
 80051c0:	4803      	ldr	r0, [pc, #12]	@ (80051d0 <frame_dummy+0x18>)
 80051c2:	f3af 8000 	nop.w
 80051c6:	bd08      	pop	{r3, pc}
 80051c8:	00000000 	.word	0x00000000
 80051cc:	20000020 	.word	0x20000020
 80051d0:	0800a368 	.word	0x0800a368

080051d4 <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	81fb      	strh	r3, [r7, #14]
 80051e4:	e007      	b.n	80051f6 <clearBuffer+0x22>
		pBuff[i] = 0x00;
 80051e6:	89fb      	ldrh	r3, [r7, #14]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 80051f0:	89fb      	ldrh	r3, [r7, #14]
 80051f2:	3301      	adds	r3, #1
 80051f4:	81fb      	strh	r3, [r7, #14]
 80051f6:	89fa      	ldrh	r2, [r7, #14]
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3f3      	bcc.n	80051e6 <clearBuffer+0x12>
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <softDelay>:
void softDelay(uint32_t count){
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8005214:	e002      	b.n	800521c <softDelay+0x10>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f9      	bne.n	8005216 <softDelay+0xa>
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	82fb      	strh	r3, [r7, #22]
 8005242:	e00a      	b.n	800525a <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	441a      	add	r2, r3
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	440b      	add	r3, r1
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	3301      	adds	r3, #1
 8005258:	82fb      	strh	r3, [r7, #22]
 800525a:	8afa      	ldrh	r2, [r7, #22]
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3f0      	bcc.n	8005244 <flashDataCopy+0x14>
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <extFlashHardReset>:
void extFlashHardReset(void){
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 8005274:	2201      	movs	r2, #1
 8005276:	2108      	movs	r1, #8
 8005278:	4818      	ldr	r0, [pc, #96]	@ (80052dc <extFlashHardReset+0x6c>)
 800527a:	f001 f98b 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 800527e:	2201      	movs	r2, #1
 8005280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005288:	f001 f984 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800528c:	2201      	movs	r2, #1
 800528e:	2104      	movs	r1, #4
 8005290:	4813      	ldr	r0, [pc, #76]	@ (80052e0 <extFlashHardReset+0x70>)
 8005292:	f001 f97f 	bl	8006594 <HAL_GPIO_WritePin>
	  softDelay(100);
 8005296:	2064      	movs	r0, #100	@ 0x64
 8005298:	f7ff ffb8 	bl	800520c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052a6:	f001 f975 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2104      	movs	r1, #4
 80052ae:	480c      	ldr	r0, [pc, #48]	@ (80052e0 <extFlashHardReset+0x70>)
 80052b0:	f001 f970 	bl	8006594 <HAL_GPIO_WritePin>
	  softDelay(100);
 80052b4:	2064      	movs	r0, #100	@ 0x64
 80052b6:	f7ff ffa9 	bl	800520c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 80052ba:	2201      	movs	r2, #1
 80052bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052c4:	f001 f966 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80052c8:	2201      	movs	r2, #1
 80052ca:	2104      	movs	r1, #4
 80052cc:	4804      	ldr	r0, [pc, #16]	@ (80052e0 <extFlashHardReset+0x70>)
 80052ce:	f001 f961 	bl	8006594 <HAL_GPIO_WritePin>
	  softDelay(200);
 80052d2:	20c8      	movs	r0, #200	@ 0xc8
 80052d4:	f7ff ff9a 	bl	800520c <softDelay>
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	48000400 	.word	0x48000400
 80052e0:	48000c00 	.word	0x48000c00

080052e4 <extFlashGetStatusReg1>:
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_Init(&hspi3);
	softDelay(500);
}
uint8_t extFlashGetStatusReg1(){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <extFlashGetStatusReg1+0x54>)
 80052ec:	2205      	movs	r2, #5
 80052ee:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 80052f4:	4811      	ldr	r0, [pc, #68]	@ (800533c <extFlashGetStatusReg1+0x58>)
 80052f6:	f002 fddb 	bl	8007eb0 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2104      	movs	r1, #4
 80052fe:	4810      	ldr	r0, [pc, #64]	@ (8005340 <extFlashGetStatusReg1+0x5c>)
 8005300:	f001 f948 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8005304:	2364      	movs	r3, #100	@ 0x64
 8005306:	2201      	movs	r2, #1
 8005308:	490b      	ldr	r1, [pc, #44]	@ (8005338 <extFlashGetStatusReg1+0x54>)
 800530a:	480c      	ldr	r0, [pc, #48]	@ (800533c <extFlashGetStatusReg1+0x58>)
 800530c:	f002 fea3 	bl	8008056 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8005310:	1df9      	adds	r1, r7, #7
 8005312:	2301      	movs	r3, #1
 8005314:	2201      	movs	r2, #1
 8005316:	4809      	ldr	r0, [pc, #36]	@ (800533c <extFlashGetStatusReg1+0x58>)
 8005318:	f003 f812 	bl	8008340 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800531c:	2201      	movs	r2, #1
 800531e:	2104      	movs	r1, #4
 8005320:	4807      	ldr	r0, [pc, #28]	@ (8005340 <extFlashGetStatusReg1+0x5c>)
 8005322:	f001 f937 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8005326:	4805      	ldr	r0, [pc, #20]	@ (800533c <extFlashGetStatusReg1+0x58>)
 8005328:	f002 fe6d 	bl	8008006 <HAL_SPI_DeInit>
	return status;
 800532c:	79fb      	ldrb	r3, [r7, #7]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000038 	.word	0x20000038
 800533c:	20000254 	.word	0x20000254
 8005340:	48000c00 	.word	0x48000c00

08005344 <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 800534e:	480d      	ldr	r0, [pc, #52]	@ (8005384 <extFlashSendCommand+0x40>)
 8005350:	f002 fdae 	bl	8007eb0 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8005354:	2200      	movs	r2, #0
 8005356:	2104      	movs	r1, #4
 8005358:	480b      	ldr	r0, [pc, #44]	@ (8005388 <extFlashSendCommand+0x44>)
 800535a:	f001 f91b 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 800535e:	1df9      	adds	r1, r7, #7
 8005360:	2301      	movs	r3, #1
 8005362:	2201      	movs	r2, #1
 8005364:	4807      	ldr	r0, [pc, #28]	@ (8005384 <extFlashSendCommand+0x40>)
 8005366:	f002 fe76 	bl	8008056 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800536a:	2201      	movs	r2, #1
 800536c:	2104      	movs	r1, #4
 800536e:	4806      	ldr	r0, [pc, #24]	@ (8005388 <extFlashSendCommand+0x44>)
 8005370:	f001 f910 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8005374:	4803      	ldr	r0, [pc, #12]	@ (8005384 <extFlashSendCommand+0x40>)
 8005376:	f002 fe46 	bl	8008006 <HAL_SPI_DeInit>
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000254 	.word	0x20000254
 8005388:	48000c00 	.word	0x48000c00

0800538c <extFlashPageWrite>:
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	HAL_Delay(1);
}
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	extFlashSendCommand(WRITE_ENABLE);
 800539a:	2006      	movs	r0, #6
 800539c:	f7ff ffd2 	bl	8005344 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 80053a0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80053a4:	4822      	ldr	r0, [pc, #136]	@ (8005430 <extFlashPageWrite+0xa4>)
 80053a6:	f7ff ff15 	bl	80051d4 <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 80053aa:	4b21      	ldr	r3, [pc, #132]	@ (8005430 <extFlashPageWrite+0xa4>)
 80053ac:	2202      	movs	r2, #2
 80053ae:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 80053b0:	2303      	movs	r3, #3
 80053b2:	75fb      	strb	r3, [r7, #23]
 80053b4:	e00a      	b.n	80053cc <extFlashPageWrite+0x40>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	b2d1      	uxtb	r1, r2
 80053bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <extFlashPageWrite+0xa4>)
 80053be:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	75fb      	strb	r3, [r7, #23]
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <extFlashPageWrite+0x2a>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 80053d2:	4818      	ldr	r0, [pc, #96]	@ (8005434 <extFlashPageWrite+0xa8>)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	f7ff ff29 	bl	8005230 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 80053de:	4816      	ldr	r0, [pc, #88]	@ (8005438 <extFlashPageWrite+0xac>)
 80053e0:	f002 fd66 	bl	8007eb0 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2104      	movs	r1, #4
 80053e8:	4814      	ldr	r0, [pc, #80]	@ (800543c <extFlashPageWrite+0xb0>)
 80053ea:	f001 f8d3 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	3304      	adds	r3, #4
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	230a      	movs	r3, #10
 80053f6:	490e      	ldr	r1, [pc, #56]	@ (8005430 <extFlashPageWrite+0xa4>)
 80053f8:	480f      	ldr	r0, [pc, #60]	@ (8005438 <extFlashPageWrite+0xac>)
 80053fa:	f002 fe2c 	bl	8008056 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80053fe:	2201      	movs	r2, #1
 8005400:	2104      	movs	r1, #4
 8005402:	480e      	ldr	r0, [pc, #56]	@ (800543c <extFlashPageWrite+0xb0>)
 8005404:	f001 f8c6 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8005408:	480b      	ldr	r0, [pc, #44]	@ (8005438 <extFlashPageWrite+0xac>)
 800540a:	f002 fdfc 	bl	8008006 <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 800540e:	2001      	movs	r0, #1
 8005410:	f000 fc9e 	bl	8005d50 <HAL_Delay>
		status = extFlashGetStatusReg1();
 8005414:	f7ff ff66 	bl	80052e4 <extFlashGetStatusReg1>
 8005418:	4603      	mov	r3, r0
 800541a:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 800541c:	7dbb      	ldrb	r3, [r7, #22]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f3      	bne.n	800540e <extFlashPageWrite+0x82>
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000038 	.word	0x20000038
 8005434:	2000003c 	.word	0x2000003c
 8005438:	20000254 	.word	0x20000254
 800543c:	48000c00 	.word	0x48000c00

08005440 <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	4603      	mov	r3, r0
 8005448:	6039      	str	r1, [r7, #0]
 800544a:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(WRITE_ENABLE);
 800544c:	2006      	movs	r0, #6
 800544e:	f7ff ff79 	bl	8005344 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 8005452:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005456:	481f      	ldr	r0, [pc, #124]	@ (80054d4 <extFlashErase+0x94>)
 8005458:	f7ff febc 	bl	80051d4 <clearBuffer>
	flashInstruction[0]	= cmd;
 800545c:	4a1d      	ldr	r2, [pc, #116]	@ (80054d4 <extFlashErase+0x94>)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 3; i>0; i--){
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
 8005466:	e00a      	b.n	800547e <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	b2d1      	uxtb	r1, r2
 800546e:	4a19      	ldr	r2, [pc, #100]	@ (80054d4 <extFlashErase+0x94>)
 8005470:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	0a1b      	lsrs	r3, r3, #8
 8005476:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	3b01      	subs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f1      	bne.n	8005468 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 8005484:	4814      	ldr	r0, [pc, #80]	@ (80054d8 <extFlashErase+0x98>)
 8005486:	f002 fd13 	bl	8007eb0 <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800548a:	2200      	movs	r2, #0
 800548c:	2104      	movs	r1, #4
 800548e:	4813      	ldr	r0, [pc, #76]	@ (80054dc <extFlashErase+0x9c>)
 8005490:	f001 f880 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8005494:	2301      	movs	r3, #1
 8005496:	2204      	movs	r2, #4
 8005498:	490e      	ldr	r1, [pc, #56]	@ (80054d4 <extFlashErase+0x94>)
 800549a:	480f      	ldr	r0, [pc, #60]	@ (80054d8 <extFlashErase+0x98>)
 800549c:	f002 fddb 	bl	8008056 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80054a0:	2201      	movs	r2, #1
 80054a2:	2104      	movs	r1, #4
 80054a4:	480d      	ldr	r0, [pc, #52]	@ (80054dc <extFlashErase+0x9c>)
 80054a6:	f001 f875 	bl	8006594 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80054aa:	480b      	ldr	r0, [pc, #44]	@ (80054d8 <extFlashErase+0x98>)
 80054ac:	f002 fdab 	bl	8008006 <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 80054b0:	2001      	movs	r0, #1
 80054b2:	f000 fc4d 	bl	8005d50 <HAL_Delay>
		status = extFlashGetStatusReg1();
 80054b6:	f7ff ff15 	bl	80052e4 <extFlashGetStatusReg1>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f3      	bne.n	80054b0 <extFlashErase+0x70>
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000038 	.word	0x20000038
 80054d8:	20000254 	.word	0x20000254
 80054dc:	48000c00 	.word	0x48000c00

080054e0 <extFlashEraseFotaSector>:
void extFlashEraseFotaSector(void){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
	extFlashSendCommand(WRITE_ENABLE);
 80054e4:	2006      	movs	r0, #6
 80054e6:	f7ff ff2d 	bl	8005344 <extFlashSendCommand>
	extFlashSendCommand(GLOBAL_UNLOCK);
 80054ea:	2098      	movs	r0, #152	@ 0x98
 80054ec:	f7ff ff2a 	bl	8005344 <extFlashSendCommand>
	extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
 80054f0:	2100      	movs	r1, #0
 80054f2:	20d8      	movs	r0, #216	@ 0xd8
 80054f4:	f7ff ffa4 	bl	8005440 <extFlashErase>
	extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
 80054f8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80054fc:	20d8      	movs	r0, #216	@ 0xd8
 80054fe:	f7ff ff9f 	bl	8005440 <extFlashErase>
}
 8005502:	bf00      	nop
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <extFlashWriteHeader>:

void extFlashWriteHeader(uint8_t *pData){
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 8005510:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8005514:	2020      	movs	r0, #32
 8005516:	f7ff ff93 	bl	8005440 <extFlashErase>

	uint8_t header[3] = {0};
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <extFlashWriteHeader+0x44>)
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	81bb      	strh	r3, [r7, #12]
 8005520:	2300      	movs	r3, #0
 8005522:	73bb      	strb	r3, [r7, #14]
	header[0] = 0xBB;
 8005524:	23bb      	movs	r3, #187	@ 0xbb
 8005526:	733b      	strb	r3, [r7, #12]
	header[1] = *pData;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	737b      	strb	r3, [r7, #13]
	header[2] = *(pData+1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	73bb      	strb	r3, [r7, #14]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 8005534:	f107 030c 	add.w	r3, r7, #12
 8005538:	2203      	movs	r2, #3
 800553a:	4619      	mov	r1, r3
 800553c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005540:	f7ff ff24 	bl	800538c <extFlashPageWrite>

}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	0800a380 	.word	0x0800a380

08005550 <resetFotaFlag>:


void resetFotaFlag(void){
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 8005556:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800555a:	2020      	movs	r0, #32
 800555c:	f7ff ff70 	bl	8005440 <extFlashErase>
	uint8_t header[3] = {0};
 8005560:	4b08      	ldr	r3, [pc, #32]	@ (8005584 <resetFotaFlag+0x34>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	80bb      	strh	r3, [r7, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	71bb      	strb	r3, [r7, #6]
	header[0] = 0xAA;
 800556a:	23aa      	movs	r3, #170	@ 0xaa
 800556c:	713b      	strb	r3, [r7, #4]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 800556e:	1d3b      	adds	r3, r7, #4
 8005570:	2203      	movs	r2, #3
 8005572:	4619      	mov	r1, r3
 8005574:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005578:	f7ff ff08 	bl	800538c <extFlashPageWrite>
}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0800a380 	.word	0x0800a380

08005588 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	609a      	str	r2, [r3, #8]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800559e:	4b39      	ldr	r3, [pc, #228]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4a38      	ldr	r2, [pc, #224]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a8:	6153      	str	r3, [r2, #20]
 80055aa:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b6:	4b33      	ldr	r3, [pc, #204]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4a32      	ldr	r2, [pc, #200]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055c0:	6153      	str	r3, [r2, #20]
 80055c2:	4b30      	ldr	r3, [pc, #192]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055d8:	6153      	str	r3, [r2, #20]
 80055da:	4b2a      	ldr	r3, [pc, #168]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e6:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f0:	6153      	str	r3, [r2, #20]
 80055f2:	4b24      	ldr	r3, [pc, #144]	@ (8005684 <MX_GPIO_Init+0xfc>)
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055fa:	607b      	str	r3, [r7, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Green_Pin|F_WP_Pin, GPIO_PIN_RESET);
 80055fe:	2200      	movs	r2, #0
 8005600:	f241 0108 	movw	r1, #4104	@ 0x1008
 8005604:	4820      	ldr	r0, [pc, #128]	@ (8005688 <MX_GPIO_Init+0x100>)
 8005606:	f000 ffc5 	bl	8006594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800560a:	2200      	movs	r2, #0
 800560c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005614:	f000 ffbe 	bl	8006594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8005618:	2200      	movs	r2, #0
 800561a:	2104      	movs	r1, #4
 800561c:	481b      	ldr	r0, [pc, #108]	@ (800568c <MX_GPIO_Init+0x104>)
 800561e:	f000 ffb9 	bl	8006594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led_Green_Pin|F_WP_Pin;
 8005622:	f241 0308 	movw	r3, #4104	@ 0x1008
 8005626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005628:	2301      	movs	r3, #1
 800562a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	4619      	mov	r1, r3
 800563a:	4813      	ldr	r0, [pc, #76]	@ (8005688 <MX_GPIO_Init+0x100>)
 800563c:	f000 fd34 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 8005640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564e:	2300      	movs	r3, #0
 8005650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	4619      	mov	r1, r3
 8005658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800565c:	f000 fd24 	bl	80060a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 8005660:	2304      	movs	r3, #4
 8005662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005664:	2301      	movs	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566c:	2300      	movs	r3, #0
 800566e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4619      	mov	r1, r3
 8005676:	4805      	ldr	r0, [pc, #20]	@ (800568c <MX_GPIO_Init+0x104>)
 8005678:	f000 fd16 	bl	80060a8 <HAL_GPIO_Init>

}
 800567c:	bf00      	nop
 800567e:	3728      	adds	r7, #40	@ 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000
 8005688:	48000400 	.word	0x48000400
 800568c:	48000c00 	.word	0x48000c00

08005690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005694:	f000 faf6 	bl	8005c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005698:	f000 f846 	bl	8005728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800569c:	f7ff ff74 	bl	8005588 <MX_GPIO_Init>
  MX_SPI3_Init();
 80056a0:	f000 f938 	bl	8005914 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80056a4:	f000 fa4a 	bl	8005b3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  extFlashHardReset();
 80056a8:	f7ff fde2 	bl	8005270 <extFlashHardReset>
  HAL_Delay(1);
 80056ac:	2001      	movs	r0, #1
 80056ae:	f000 fb4f 	bl	8005d50 <HAL_Delay>
  extFlashSendCommand(ENABLE_RESET);
 80056b2:	2066      	movs	r0, #102	@ 0x66
 80056b4:	f7ff fe46 	bl	8005344 <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 80056b8:	2099      	movs	r0, #153	@ 0x99
 80056ba:	f7ff fe43 	bl	8005344 <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 80056be:	2098      	movs	r0, #152	@ 0x98
 80056c0:	f7ff fe40 	bl	8005344 <extFlashSendCommand>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, uartRxData, 512);
 80056c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c8:	4912      	ldr	r1, [pc, #72]	@ (8005714 <main+0x84>)
 80056ca:	4813      	ldr	r0, [pc, #76]	@ (8005718 <main+0x88>)
 80056cc:	f004 fdcc 	bl	800a268 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(packetReceived){
 80056d0:	4b12      	ldr	r3, [pc, #72]	@ (800571c <main+0x8c>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <main+0x5a>
		  packetReceived = 0;
 80056d8:	4b10      	ldr	r3, [pc, #64]	@ (800571c <main+0x8c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
		  processPacketTest(uartRxData, receivedPacketSize);
 80056de:	4b10      	ldr	r3, [pc, #64]	@ (8005720 <main+0x90>)
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	480b      	ldr	r0, [pc, #44]	@ (8005714 <main+0x84>)
 80056e6:	f000 f8b3 	bl	8005850 <processPacketTest>
	  }
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_SET);
 80056ea:	2201      	movs	r2, #1
 80056ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056f0:	480c      	ldr	r0, [pc, #48]	@ (8005724 <main+0x94>)
 80056f2:	f000 ff4f 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80056f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80056fa:	f000 fb29 	bl	8005d50 <HAL_Delay>
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_RESET);
 80056fe:	2200      	movs	r2, #0
 8005700:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005704:	4807      	ldr	r0, [pc, #28]	@ (8005724 <main+0x94>)
 8005706:	f000 ff45 	bl	8006594 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800570a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800570e:	f000 fb1f 	bl	8005d50 <HAL_Delay>
	  if(packetReceived){
 8005712:	e7dd      	b.n	80056d0 <main+0x40>
 8005714:	20000140 	.word	0x20000140
 8005718:	200002b8 	.word	0x200002b8
 800571c:	2000024e 	.word	0x2000024e
 8005720:	2000013c 	.word	0x2000013c
 8005724:	48000400 	.word	0x48000400

08005728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b0a2      	sub	sp, #136	@ 0x88
 800572c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800572e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005732:	2228      	movs	r2, #40	@ 0x28
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f004 fdea 	bl	800a310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800573c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800574c:	463b      	mov	r3, r7
 800574e:	224c      	movs	r2, #76	@ 0x4c
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f004 fddc 	bl	800a310 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005758:	2302      	movs	r3, #2
 800575a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800575c:	2301      	movs	r3, #1
 800575e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005760:	2310      	movs	r3, #16
 8005762:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005764:	2302      	movs	r3, #2
 8005766:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005768:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800576e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800577c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005780:	4618      	mov	r0, r3
 8005782:	f000 ff1f 	bl	80065c4 <HAL_RCC_OscConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800578c:	f000 f844 	bl	8005818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005790:	230f      	movs	r3, #15
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005794:	2302      	movs	r3, #2
 8005796:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005798:	2300      	movs	r3, #0
 800579a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800579c:	2300      	movs	r3, #0
 800579e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057a0:	2300      	movs	r3, #0
 80057a2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80057a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80057a8:	2101      	movs	r1, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 ff5e 	bl	800766c <HAL_RCC_ClockConfig>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80057b6:	f000 f82f 	bl	8005818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057ba:	2302      	movs	r3, #2
 80057bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057c2:	463b      	mov	r3, r7
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 f987 	bl	8007ad8 <HAL_RCCEx_PeriphCLKConfig>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80057d0:	f000 f822 	bl	8005818 <Error_Handler>
  }
}
 80057d4:	bf00      	nop
 80057d6:	3788      	adds	r7, #136	@ 0x88
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
	packetReceived = 1;
 80057e8:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <HAL_UARTEx_RxEventCallback+0x2c>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
	receivedPacketSize = Size;
 80057ee:	4a07      	ldr	r2, [pc, #28]	@ (800580c <HAL_UARTEx_RxEventCallback+0x30>)
 80057f0:	887b      	ldrh	r3, [r7, #2]
 80057f2:	8013      	strh	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, uartRxData, 512);
 80057f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f8:	4905      	ldr	r1, [pc, #20]	@ (8005810 <HAL_UARTEx_RxEventCallback+0x34>)
 80057fa:	4806      	ldr	r0, [pc, #24]	@ (8005814 <HAL_UARTEx_RxEventCallback+0x38>)
 80057fc:	f004 fd34 	bl	800a268 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	2000024e 	.word	0x2000024e
 800580c:	2000013c 	.word	0x2000013c
 8005810:	20000140 	.word	0x20000140
 8005814:	200002b8 	.word	0x200002b8

08005818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800581c:	b672      	cpsid	i
}
 800581e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <Error_Handler+0x8>

08005824 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005828:	f3bf 8f4f 	dsb	sy
}
 800582c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800582e:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <__NVIC_SystemReset+0x24>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005836:	4904      	ldr	r1, [pc, #16]	@ (8005848 <__NVIC_SystemReset+0x24>)
 8005838:	4b04      	ldr	r3, [pc, #16]	@ (800584c <__NVIC_SystemReset+0x28>)
 800583a:	4313      	orrs	r3, r2
 800583c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800583e:	f3bf 8f4f 	dsb	sy
}
 8005842:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <__NVIC_SystemReset+0x20>
 8005848:	e000ed00 	.word	0xe000ed00
 800584c:	05fa0004 	.word	0x05fa0004

08005850 <processPacketTest>:
uint8_t 	isFirmwareVerified	= 0;
uint32_t 	firmwareSize		= 0;

uint8_t		msg[]				= "Erase Done...\n";

void processPacketTest(uint8_t *pFrame, uint16_t pktLen){
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	807b      	strh	r3, [r7, #2]
	/*check if Frame Start and Frame End is Properly received*/
	if(*pFrame == 0x00)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <processPacketTest+0x28>
		savePacketToExtFlash((pFrame+1),pktLen-1);// assuing FRAME= FRAME_TYPE+DATA_BYTES(1+N DATA_BYTES)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	3b01      	subs	r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 f82b 	bl	80058cc <savePacketToExtFlash>
		HAL_Delay(10);
		NVIC_SystemReset();
	}
	else if(*pFrame == 0x03)
		resetFotaFlag();
}
 8005876:	e020      	b.n	80058ba <processPacketTest+0x6a>
	else if(*pFrame == 0x01){
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d108      	bne.n	8005892 <processPacketTest+0x42>
		extFlashEraseFotaSector();
 8005880:	f7ff fe2e 	bl	80054e0 <extFlashEraseFotaSector>
		HAL_UART_Transmit(&huart2, msg, 14, 10);
 8005884:	230a      	movs	r3, #10
 8005886:	220e      	movs	r2, #14
 8005888:	490e      	ldr	r1, [pc, #56]	@ (80058c4 <processPacketTest+0x74>)
 800588a:	480f      	ldr	r0, [pc, #60]	@ (80058c8 <processPacketTest+0x78>)
 800588c:	f003 fabc 	bl	8008e08 <HAL_UART_Transmit>
}
 8005890:	e013      	b.n	80058ba <processPacketTest+0x6a>
	else if(*pFrame == 0x02){
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d109      	bne.n	80058ae <processPacketTest+0x5e>
		extFlashWriteHeader(pFrame+1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3301      	adds	r3, #1
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fe32 	bl	8005508 <extFlashWriteHeader>
		HAL_Delay(10);
 80058a4:	200a      	movs	r0, #10
 80058a6:	f000 fa53 	bl	8005d50 <HAL_Delay>
		NVIC_SystemReset();
 80058aa:	f7ff ffbb 	bl	8005824 <__NVIC_SystemReset>
	else if(*pFrame == 0x03)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d101      	bne.n	80058ba <processPacketTest+0x6a>
		resetFotaFlag();
 80058b6:	f7ff fe4b 	bl	8005550 <resetFotaFlag>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000000 	.word	0x20000000
 80058c8:	200002b8 	.word	0x200002b8

080058cc <savePacketToExtFlash>:

void savePacketToExtFlash(uint8_t *pData, uint16_t dataLen){
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	807b      	strh	r3, [r7, #2]
	uint8_t responseString[2] = {0x05,0x00};
 80058d8:	2305      	movs	r3, #5
 80058da:	81bb      	strh	r3, [r7, #12]

	static uint32_t extFlashAddress = FLASH_PAGE0_BASE_ADDRESS;
//	uint8_t compareFlag = 0;
	extFlashPageWrite(extFlashAddress, pData, dataLen);
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <savePacketToExtFlash+0x40>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fd51 	bl	800538c <extFlashPageWrite>
//		extFlashAddress += dataLen;
//	}
//	else {
//		responseString[1] = 0xAA;
//	}
	extFlashAddress += dataLen;
 80058ea:	887a      	ldrh	r2, [r7, #2]
 80058ec:	4b07      	ldr	r3, [pc, #28]	@ (800590c <savePacketToExtFlash+0x40>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4413      	add	r3, r2
 80058f2:	4a06      	ldr	r2, [pc, #24]	@ (800590c <savePacketToExtFlash+0x40>)
 80058f4:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, responseString, 2, 5);
 80058f6:	f107 010c 	add.w	r1, r7, #12
 80058fa:	2305      	movs	r3, #5
 80058fc:	2202      	movs	r2, #2
 80058fe:	4804      	ldr	r0, [pc, #16]	@ (8005910 <savePacketToExtFlash+0x44>)
 8005900:	f003 fa82 	bl	8008e08 <HAL_UART_Transmit>
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000250 	.word	0x20000250
 8005910:	200002b8 	.word	0x200002b8

08005914 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005918:	4b1b      	ldr	r3, [pc, #108]	@ (8005988 <MX_SPI3_Init+0x74>)
 800591a:	4a1c      	ldr	r2, [pc, #112]	@ (800598c <MX_SPI3_Init+0x78>)
 800591c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800591e:	4b1a      	ldr	r3, [pc, #104]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005924:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005926:	4b18      	ldr	r3, [pc, #96]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800592c:	4b16      	ldr	r3, [pc, #88]	@ (8005988 <MX_SPI3_Init+0x74>)
 800592e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005932:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005934:	4b14      	ldr	r3, [pc, #80]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005936:	2200      	movs	r2, #0
 8005938:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800593a:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <MX_SPI3_Init+0x74>)
 800593c:	2200      	movs	r2, #0
 800593e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005940:	4b11      	ldr	r3, [pc, #68]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005946:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005948:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <MX_SPI3_Init+0x74>)
 800594a:	2218      	movs	r2, #24
 800594c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005950:	2200      	movs	r2, #0
 8005952:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005954:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005956:	2200      	movs	r2, #0
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <MX_SPI3_Init+0x74>)
 800595c:	2200      	movs	r2, #0
 800595e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005960:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005962:	2207      	movs	r2, #7
 8005964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005966:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800596c:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <MX_SPI3_Init+0x74>)
 800596e:	2200      	movs	r2, #0
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005972:	4805      	ldr	r0, [pc, #20]	@ (8005988 <MX_SPI3_Init+0x74>)
 8005974:	f002 fa9c 	bl	8007eb0 <HAL_SPI_Init>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800597e:	f7ff ff4b 	bl	8005818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000254 	.word	0x20000254
 800598c:	40003c00 	.word	0x40003c00

08005990 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	605a      	str	r2, [r3, #4]
 80059a2:	609a      	str	r2, [r3, #8]
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a17      	ldr	r2, [pc, #92]	@ (8005a0c <HAL_SPI_MspInit+0x7c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d128      	bne.n	8005a04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80059b2:	4b17      	ldr	r3, [pc, #92]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4a16      	ldr	r2, [pc, #88]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059bc:	61d3      	str	r3, [r2, #28]
 80059be:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059ca:	4b11      	ldr	r3, [pc, #68]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059d4:	6153      	str	r3, [r2, #20]
 80059d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <HAL_SPI_MspInit+0x80>)
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80059e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80059e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2302      	movs	r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059f0:	2303      	movs	r3, #3
 80059f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059f4:	2306      	movs	r3, #6
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4619      	mov	r1, r3
 80059fe:	4805      	ldr	r0, [pc, #20]	@ (8005a14 <HAL_SPI_MspInit+0x84>)
 8005a00:	f000 fb52 	bl	80060a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005a04:	bf00      	nop
 8005a06:	3728      	adds	r7, #40	@ 0x28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40003c00 	.word	0x40003c00
 8005a10:	40021000 	.word	0x40021000
 8005a14:	48000800 	.word	0x48000800

08005a18 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a08      	ldr	r2, [pc, #32]	@ (8005a48 <HAL_SPI_MspDeInit+0x30>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10a      	bne.n	8005a40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005a2a:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_SPI_MspDeInit+0x34>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4a07      	ldr	r2, [pc, #28]	@ (8005a4c <HAL_SPI_MspDeInit+0x34>)
 8005a30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a34:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005a36:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8005a3a:	4805      	ldr	r0, [pc, #20]	@ (8005a50 <HAL_SPI_MspDeInit+0x38>)
 8005a3c:	f000 fcbe 	bl	80063bc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40003c00 	.word	0x40003c00
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	48000800 	.word	0x48000800

08005a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	6193      	str	r3, [r2, #24]
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4a08      	ldr	r2, [pc, #32]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	61d3      	str	r3, [r2, #28]
 8005a7e:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <HAL_MspInit+0x44>)
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000

08005a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005aa0:	bf00      	nop
 8005aa2:	e7fd      	b.n	8005aa0 <NMI_Handler+0x4>

08005aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <HardFault_Handler+0x4>

08005aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <MemManage_Handler+0x4>

08005ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <BusFault_Handler+0x4>

08005abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <UsageFault_Handler+0x4>

08005ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005af2:	f000 f90d 	bl	8005d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b00:	4802      	ldr	r0, [pc, #8]	@ (8005b0c <USART2_IRQHandler+0x10>)
 8005b02:	f003 fa0b 	bl	8008f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200002b8 	.word	0x200002b8

08005b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b14:	4b07      	ldr	r3, [pc, #28]	@ (8005b34 <SystemInit+0x24>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	4a06      	ldr	r2, [pc, #24]	@ (8005b34 <SystemInit+0x24>)
 8005b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8005b24:	4b03      	ldr	r3, [pc, #12]	@ (8005b34 <SystemInit+0x24>)
 8005b26:	4a04      	ldr	r2, [pc, #16]	@ (8005b38 <SystemInit+0x28>)
 8005b28:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b2a:	bf00      	nop
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	08005000 	.word	0x08005000

08005b3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005b40:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b42:	4a15      	ldr	r2, [pc, #84]	@ (8005b98 <MX_USART2_UART_Init+0x5c>)
 8005b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005b46:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005b4e:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b54:	4b0f      	ldr	r3, [pc, #60]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b60:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b62:	220c      	movs	r2, #12
 8005b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b66:	4b0b      	ldr	r3, [pc, #44]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b6c:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b72:	4b08      	ldr	r3, [pc, #32]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b78:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b7e:	4805      	ldr	r0, [pc, #20]	@ (8005b94 <MX_USART2_UART_Init+0x58>)
 8005b80:	f003 f8f4 	bl	8008d6c <HAL_UART_Init>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005b8a:	f7ff fe45 	bl	8005818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b8e:	bf00      	nop
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200002b8 	.word	0x200002b8
 8005b98:	40004400 	.word	0x40004400

08005b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	@ 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba4:	f107 0314 	add.w	r3, r7, #20
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <HAL_UART_MspInit+0x8c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc8:	61d3      	str	r3, [r2, #28]
 8005bca:	4b18      	ldr	r3, [pc, #96]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bd6:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be0:	6153      	str	r3, [r2, #20]
 8005be2:	4b12      	ldr	r3, [pc, #72]	@ (8005c2c <HAL_UART_MspInit+0x90>)
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bee:	230c      	movs	r3, #12
 8005bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bfe:	2307      	movs	r3, #7
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c0c:	f000 fa4c 	bl	80060a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	2026      	movs	r0, #38	@ 0x26
 8005c16:	f000 f99a 	bl	8005f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c1a:	2026      	movs	r0, #38	@ 0x26
 8005c1c:	f000 f9b3 	bl	8005f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005c20:	bf00      	nop
 8005c22:	3728      	adds	r7, #40	@ 0x28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40021000 	.word	0x40021000

08005c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005c34:	f7ff ff6c 	bl	8005b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c38:	480c      	ldr	r0, [pc, #48]	@ (8005c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8005c3a:	490d      	ldr	r1, [pc, #52]	@ (8005c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <LoopForever+0xe>)
  movs r3, #0
 8005c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c40:	e002      	b.n	8005c48 <LoopCopyDataInit>

08005c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c46:	3304      	adds	r3, #4

08005c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c4c:	d3f9      	bcc.n	8005c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c50:	4c0a      	ldr	r4, [pc, #40]	@ (8005c7c <LoopForever+0x16>)
  movs r3, #0
 8005c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c54:	e001      	b.n	8005c5a <LoopFillZerobss>

08005c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c58:	3204      	adds	r2, #4

08005c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c5c:	d3fb      	bcc.n	8005c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c5e:	f004 fb5f 	bl	800a320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c62:	f7ff fd15 	bl	8005690 <main>

08005c66 <LoopForever>:

LoopForever:
    b LoopForever
 8005c66:	e7fe      	b.n	8005c66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c70:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005c74:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 8005c78:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8005c7c:	20000344 	.word	0x20000344

08005c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c80:	e7fe      	b.n	8005c80 <ADC1_2_IRQHandler>
	...

08005c84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c88:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <HAL_Init+0x28>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a07      	ldr	r2, [pc, #28]	@ (8005cac <HAL_Init+0x28>)
 8005c8e:	f043 0310 	orr.w	r3, r3, #16
 8005c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c94:	2003      	movs	r0, #3
 8005c96:	f000 f94f 	bl	8005f38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c9a:	200f      	movs	r0, #15
 8005c9c:	f000 f808 	bl	8005cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ca0:	f7ff fed8 	bl	8005a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40022000 	.word	0x40022000

08005cb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cb8:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <HAL_InitTick+0x54>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4b12      	ldr	r3, [pc, #72]	@ (8005d08 <HAL_InitTick+0x58>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f967 	bl	8005fa2 <HAL_SYSTICK_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e00e      	b.n	8005cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b0f      	cmp	r3, #15
 8005ce2:	d80a      	bhi.n	8005cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	f000 f92f 	bl	8005f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cf0:	4a06      	ldr	r2, [pc, #24]	@ (8005d0c <HAL_InitTick+0x5c>)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000010 	.word	0x20000010
 8005d08:	20000018 	.word	0x20000018
 8005d0c:	20000014 	.word	0x20000014

08005d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <HAL_IncTick+0x20>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <HAL_IncTick+0x24>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a04      	ldr	r2, [pc, #16]	@ (8005d34 <HAL_IncTick+0x24>)
 8005d22:	6013      	str	r3, [r2, #0]
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	20000018 	.word	0x20000018
 8005d34:	20000340 	.word	0x20000340

08005d38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8005d3c:	4b03      	ldr	r3, [pc, #12]	@ (8005d4c <HAL_GetTick+0x14>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000340 	.word	0x20000340

08005d50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7ff ffee 	bl	8005d38 <HAL_GetTick>
 8005d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d005      	beq.n	8005d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d94 <HAL_Delay+0x44>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005d76:	bf00      	nop
 8005d78:	f7ff ffde 	bl	8005d38 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d8f7      	bhi.n	8005d78 <HAL_Delay+0x28>
  {
  }
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000018 	.word	0x20000018

08005d98 <__NVIC_SetPriorityGrouping>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005da8:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005db4:	4013      	ands	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dca:	4a04      	ldr	r2, [pc, #16]	@ (8005ddc <__NVIC_SetPriorityGrouping+0x44>)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60d3      	str	r3, [r2, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <__NVIC_GetPriorityGrouping>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <__NVIC_GetPriorityGrouping+0x18>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 0307 	and.w	r3, r3, #7
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	e000ed00 	.word	0xe000ed00

08005dfc <__NVIC_EnableIRQ>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	db0b      	blt.n	8005e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	f003 021f 	and.w	r2, r3, #31
 8005e14:	4907      	ldr	r1, [pc, #28]	@ (8005e34 <__NVIC_EnableIRQ+0x38>)
 8005e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000e100 	.word	0xe000e100

08005e38 <__NVIC_SetPriority>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	@ (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	@ (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	@ 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	@ 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f04:	d301      	bcc.n	8005f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f06:	2301      	movs	r3, #1
 8005f08:	e00f      	b.n	8005f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f34 <SysTick_Config+0x40>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f12:	210f      	movs	r1, #15
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	f7ff ff8e 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <SysTick_Config+0x40>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f22:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <SysTick_Config+0x40>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	e000e010 	.word	0xe000e010

08005f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff29 	bl	8005d98 <__NVIC_SetPriorityGrouping>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f60:	f7ff ff3e 	bl	8005de0 <__NVIC_GetPriorityGrouping>
 8005f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff8e 	bl	8005e8c <NVIC_EncodePriority>
 8005f70:	4602      	mov	r2, r0
 8005f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff ff5d 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ff31 	bl	8005dfc <__NVIC_EnableIRQ>
}
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa2 	bl	8005ef4 <SysTick_Config>
 8005fb0:	4603      	mov	r3, r0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d008      	beq.n	8005fde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e020      	b.n	8006020 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 020e 	bic.w	r2, r2, #14
 8005fec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006006:	2101      	movs	r1, #1
 8006008:	fa01 f202 	lsl.w	r2, r1, r2
 800600c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800603e:	2b02      	cmp	r3, #2
 8006040:	d005      	beq.n	800604e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2204      	movs	r2, #4
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
 800604c:	e027      	b.n	800609e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 020e 	bic.w	r2, r2, #14
 800605c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	2101      	movs	r1, #1
 8006078:	fa01 f202 	lsl.w	r2, r1, r2
 800607c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
    } 
  }
  return status;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060b6:	e160      	b.n	800637a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8152 	beq.w	8006374 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d005      	beq.n	80060e8 <HAL_GPIO_Init+0x40>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d130      	bne.n	800614a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2203      	movs	r2, #3
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800611e:	2201      	movs	r2, #1
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 0201 	and.w	r2, r3, #1
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d017      	beq.n	8006186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	2203      	movs	r2, #3
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43db      	mvns	r3, r3
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d123      	bne.n	80061da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	08da      	lsrs	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3208      	adds	r2, #8
 800619a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	220f      	movs	r2, #15
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4013      	ands	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	08da      	lsrs	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3208      	adds	r2, #8
 80061d4:	6939      	ldr	r1, [r7, #16]
 80061d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	2203      	movs	r2, #3
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 0203 	and.w	r2, r3, #3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80ac 	beq.w	8006374 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621c:	4b5e      	ldr	r3, [pc, #376]	@ (8006398 <HAL_GPIO_Init+0x2f0>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4a5d      	ldr	r2, [pc, #372]	@ (8006398 <HAL_GPIO_Init+0x2f0>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6193      	str	r3, [r2, #24]
 8006228:	4b5b      	ldr	r3, [pc, #364]	@ (8006398 <HAL_GPIO_Init+0x2f0>)
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006234:	4a59      	ldr	r2, [pc, #356]	@ (800639c <HAL_GPIO_Init+0x2f4>)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	3302      	adds	r3, #2
 800623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	220f      	movs	r2, #15
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4013      	ands	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800625e:	d025      	beq.n	80062ac <HAL_GPIO_Init+0x204>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a4f      	ldr	r2, [pc, #316]	@ (80063a0 <HAL_GPIO_Init+0x2f8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01f      	beq.n	80062a8 <HAL_GPIO_Init+0x200>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a4e      	ldr	r2, [pc, #312]	@ (80063a4 <HAL_GPIO_Init+0x2fc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d019      	beq.n	80062a4 <HAL_GPIO_Init+0x1fc>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a4d      	ldr	r2, [pc, #308]	@ (80063a8 <HAL_GPIO_Init+0x300>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_GPIO_Init+0x1f8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a4c      	ldr	r2, [pc, #304]	@ (80063ac <HAL_GPIO_Init+0x304>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00d      	beq.n	800629c <HAL_GPIO_Init+0x1f4>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a4b      	ldr	r2, [pc, #300]	@ (80063b0 <HAL_GPIO_Init+0x308>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d007      	beq.n	8006298 <HAL_GPIO_Init+0x1f0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a4a      	ldr	r2, [pc, #296]	@ (80063b4 <HAL_GPIO_Init+0x30c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_GPIO_Init+0x1ec>
 8006290:	2306      	movs	r3, #6
 8006292:	e00c      	b.n	80062ae <HAL_GPIO_Init+0x206>
 8006294:	2307      	movs	r3, #7
 8006296:	e00a      	b.n	80062ae <HAL_GPIO_Init+0x206>
 8006298:	2305      	movs	r3, #5
 800629a:	e008      	b.n	80062ae <HAL_GPIO_Init+0x206>
 800629c:	2304      	movs	r3, #4
 800629e:	e006      	b.n	80062ae <HAL_GPIO_Init+0x206>
 80062a0:	2303      	movs	r3, #3
 80062a2:	e004      	b.n	80062ae <HAL_GPIO_Init+0x206>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e002      	b.n	80062ae <HAL_GPIO_Init+0x206>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_GPIO_Init+0x206>
 80062ac:	2300      	movs	r3, #0
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	f002 0203 	and.w	r2, r2, #3
 80062b4:	0092      	lsls	r2, r2, #2
 80062b6:	4093      	lsls	r3, r2
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062be:	4937      	ldr	r1, [pc, #220]	@ (800639c <HAL_GPIO_Init+0x2f4>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	3302      	adds	r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062cc:	4b3a      	ldr	r3, [pc, #232]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4013      	ands	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80062f0:	4a31      	ldr	r2, [pc, #196]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062f6:	4b30      	ldr	r3, [pc, #192]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	43db      	mvns	r3, r3
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4013      	ands	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800631a:	4a27      	ldr	r2, [pc, #156]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006320:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	43db      	mvns	r3, r3
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006344:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800634a:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	43db      	mvns	r3, r3
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4013      	ands	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800636e:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <HAL_GPIO_Init+0x310>)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	f47f ae97 	bne.w	80060b8 <HAL_GPIO_Init+0x10>
  }
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	40021000 	.word	0x40021000
 800639c:	40010000 	.word	0x40010000
 80063a0:	48000400 	.word	0x48000400
 80063a4:	48000800 	.word	0x48000800
 80063a8:	48000c00 	.word	0x48000c00
 80063ac:	48001000 	.word	0x48001000
 80063b0:	48001400 	.word	0x48001400
 80063b4:	48001800 	.word	0x48001800
 80063b8:	40010400 	.word	0x40010400

080063bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80063ca:	e0c4      	b.n	8006556 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80063cc:	2201      	movs	r2, #1
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80b7 	beq.w	8006550 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80063e2:	4a64      	ldr	r2, [pc, #400]	@ (8006574 <HAL_GPIO_DeInit+0x1b8>)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	3302      	adds	r3, #2
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	220f      	movs	r2, #15
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800640a:	d025      	beq.n	8006458 <HAL_GPIO_DeInit+0x9c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a5a      	ldr	r2, [pc, #360]	@ (8006578 <HAL_GPIO_DeInit+0x1bc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d01f      	beq.n	8006454 <HAL_GPIO_DeInit+0x98>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a59      	ldr	r2, [pc, #356]	@ (800657c <HAL_GPIO_DeInit+0x1c0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d019      	beq.n	8006450 <HAL_GPIO_DeInit+0x94>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a58      	ldr	r2, [pc, #352]	@ (8006580 <HAL_GPIO_DeInit+0x1c4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <HAL_GPIO_DeInit+0x90>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a57      	ldr	r2, [pc, #348]	@ (8006584 <HAL_GPIO_DeInit+0x1c8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00d      	beq.n	8006448 <HAL_GPIO_DeInit+0x8c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a56      	ldr	r2, [pc, #344]	@ (8006588 <HAL_GPIO_DeInit+0x1cc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <HAL_GPIO_DeInit+0x88>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a55      	ldr	r2, [pc, #340]	@ (800658c <HAL_GPIO_DeInit+0x1d0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d101      	bne.n	8006440 <HAL_GPIO_DeInit+0x84>
 800643c:	2306      	movs	r3, #6
 800643e:	e00c      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006440:	2307      	movs	r3, #7
 8006442:	e00a      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006444:	2305      	movs	r3, #5
 8006446:	e008      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006448:	2304      	movs	r3, #4
 800644a:	e006      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 800644c:	2303      	movs	r3, #3
 800644e:	e004      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006450:	2302      	movs	r3, #2
 8006452:	e002      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <HAL_GPIO_DeInit+0x9e>
 8006458:	2300      	movs	r3, #0
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	f002 0203 	and.w	r2, r2, #3
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	4093      	lsls	r3, r2
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	429a      	cmp	r2, r3
 8006468:	d132      	bne.n	80064d0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800646a:	4b49      	ldr	r3, [pc, #292]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	43db      	mvns	r3, r3
 8006472:	4947      	ldr	r1, [pc, #284]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 8006474:	4013      	ands	r3, r2
 8006476:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006478:	4b45      	ldr	r3, [pc, #276]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	43db      	mvns	r3, r3
 8006480:	4943      	ldr	r1, [pc, #268]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 8006482:	4013      	ands	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006486:	4b42      	ldr	r3, [pc, #264]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	43db      	mvns	r3, r3
 800648e:	4940      	ldr	r1, [pc, #256]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 8006490:	4013      	ands	r3, r2
 8006492:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006494:	4b3e      	ldr	r3, [pc, #248]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	43db      	mvns	r3, r3
 800649c:	493c      	ldr	r1, [pc, #240]	@ (8006590 <HAL_GPIO_DeInit+0x1d4>)
 800649e:	4013      	ands	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	220f      	movs	r2, #15
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80064b2:	4a30      	ldr	r2, [pc, #192]	@ (8006574 <HAL_GPIO_DeInit+0x1b8>)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	089b      	lsrs	r3, r3, #2
 80064b8:	3302      	adds	r3, #2
 80064ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	482c      	ldr	r0, [pc, #176]	@ (8006574 <HAL_GPIO_DeInit+0x1b8>)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	400a      	ands	r2, r1
 80064ca:	3302      	adds	r3, #2
 80064cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	2103      	movs	r1, #3
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	401a      	ands	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	08da      	lsrs	r2, r3, #3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3208      	adds	r2, #8
 80064ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	220f      	movs	r2, #15
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	08d2      	lsrs	r2, r2, #3
 8006506:	4019      	ands	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3208      	adds	r2, #8
 800650c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	2103      	movs	r1, #3
 800651a:	fa01 f303 	lsl.w	r3, r1, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	401a      	ands	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	2101      	movs	r1, #1
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	401a      	ands	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	2103      	movs	r1, #3
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	401a      	ands	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3301      	adds	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	f47f af34 	bne.w	80063cc <HAL_GPIO_DeInit+0x10>
  }
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	48000400 	.word	0x48000400
 800657c:	48000800 	.word	0x48000800
 8006580:	48000c00 	.word	0x48000c00
 8006584:	48001000 	.word	0x48001000
 8006588:	48001400 	.word	0x48001400
 800658c:	48001800 	.word	0x48001800
 8006590:	40010400 	.word	0x40010400

08006594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
 80065a0:	4613      	mov	r3, r2
 80065a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065a4:	787b      	ldrb	r3, [r7, #1]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065aa:	887a      	ldrh	r2, [r7, #2]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065b0:	e002      	b.n	80065b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065b2:	887a      	ldrh	r2, [r7, #2]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f001 b83a 	b.w	800765e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80065ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 816f 	beq.w	80068de <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006600:	4bb5      	ldr	r3, [pc, #724]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 030c 	and.w	r3, r3, #12
 8006608:	2b04      	cmp	r3, #4
 800660a:	d00c      	beq.n	8006626 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800660c:	4bb2      	ldr	r3, [pc, #712]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d15c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x10e>
 8006618:	4baf      	ldr	r3, [pc, #700]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006624:	d155      	bne.n	80066d2 <HAL_RCC_OscConfig+0x10e>
 8006626:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800662a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006632:	fa93 f3a3 	rbit	r3, r3
 8006636:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800663a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800663e:	fab3 f383 	clz	r3, r3
 8006642:	b2db      	uxtb	r3, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	b2db      	uxtb	r3, r3
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d102      	bne.n	8006658 <HAL_RCC_OscConfig+0x94>
 8006652:	4ba1      	ldr	r3, [pc, #644]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	e015      	b.n	8006684 <HAL_RCC_OscConfig+0xc0>
 8006658:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800665c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006660:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8006664:	fa93 f3a3 	rbit	r3, r3
 8006668:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800666c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006670:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006674:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006680:	4b95      	ldr	r3, [pc, #596]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006688:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800668c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8006690:	fa92 f2a2 	rbit	r2, r2
 8006694:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8006698:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800669c:	fab2 f282 	clz	r2, r2
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	f042 0220 	orr.w	r2, r2, #32
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	f002 021f 	and.w	r2, r2, #31
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f202 	lsl.w	r2, r1, r2
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8111 	beq.w	80068dc <HAL_RCC_OscConfig+0x318>
 80066ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8108 	bne.w	80068dc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f000 bfc6 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e2:	d106      	bne.n	80066f2 <HAL_RCC_OscConfig+0x12e>
 80066e4:	4b7c      	ldr	r3, [pc, #496]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7b      	ldr	r2, [pc, #492]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 80066ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	e036      	b.n	8006760 <HAL_RCC_OscConfig+0x19c>
 80066f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80066f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <HAL_RCC_OscConfig+0x158>
 8006702:	4b75      	ldr	r3, [pc, #468]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a74      	ldr	r2, [pc, #464]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b72      	ldr	r3, [pc, #456]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a71      	ldr	r2, [pc, #452]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e021      	b.n	8006760 <HAL_RCC_OscConfig+0x19c>
 800671c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006720:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800672c:	d10c      	bne.n	8006748 <HAL_RCC_OscConfig+0x184>
 800672e:	4b6a      	ldr	r3, [pc, #424]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a69      	ldr	r2, [pc, #420]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4b67      	ldr	r3, [pc, #412]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a66      	ldr	r2, [pc, #408]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e00b      	b.n	8006760 <HAL_RCC_OscConfig+0x19c>
 8006748:	4b63      	ldr	r3, [pc, #396]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a62      	ldr	r2, [pc, #392]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800674e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	4b60      	ldr	r3, [pc, #384]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5f      	ldr	r2, [pc, #380]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 800675a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800675e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006764:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d059      	beq.n	8006824 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7ff fae2 	bl	8005d38 <HAL_GetTick>
 8006774:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800677a:	f7ff fadd 	bl	8005d38 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	@ 0x64
 8006788:	d902      	bls.n	8006790 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	f000 bf67 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006794:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006798:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800679c:	fa93 f3a3 	rbit	r3, r3
 80067a0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80067a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a8:	fab3 f383 	clz	r3, r3
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d102      	bne.n	80067c2 <HAL_RCC_OscConfig+0x1fe>
 80067bc:	4b46      	ldr	r3, [pc, #280]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	e015      	b.n	80067ee <HAL_RCC_OscConfig+0x22a>
 80067c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067c6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80067ce:	fa93 f3a3 	rbit	r3, r3
 80067d2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80067d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067da:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80067de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80067e2:	fa93 f3a3 	rbit	r3, r3
 80067e6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80067ea:	4b3b      	ldr	r3, [pc, #236]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80067f2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80067f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80067fa:	fa92 f2a2 	rbit	r2, r2
 80067fe:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8006802:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006806:	fab2 f282 	clz	r2, r2
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	f042 0220 	orr.w	r2, r2, #32
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	f002 021f 	and.w	r2, r2, #31
 8006816:	2101      	movs	r1, #1
 8006818:	fa01 f202 	lsl.w	r2, r1, r2
 800681c:	4013      	ands	r3, r2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0ab      	beq.n	800677a <HAL_RCC_OscConfig+0x1b6>
 8006822:	e05c      	b.n	80068de <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7ff fa88 	bl	8005d38 <HAL_GetTick>
 8006828:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800682c:	e00a      	b.n	8006844 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800682e:	f7ff fa83 	bl	8005d38 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b64      	cmp	r3, #100	@ 0x64
 800683c:	d902      	bls.n	8006844 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	f000 bf0d 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006844:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006848:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8006850:	fa93 f3a3 	rbit	r3, r3
 8006854:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8006858:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d102      	bne.n	8006876 <HAL_RCC_OscConfig+0x2b2>
 8006870:	4b19      	ldr	r3, [pc, #100]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	e015      	b.n	80068a2 <HAL_RCC_OscConfig+0x2de>
 8006876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800687a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8006882:	fa93 f3a3 	rbit	r3, r3
 8006886:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800688a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800688e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006892:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006896:	fa93 f3a3 	rbit	r3, r3
 800689a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800689e:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <HAL_RCC_OscConfig+0x314>)
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80068a6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80068aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80068ae:	fa92 f2a2 	rbit	r2, r2
 80068b2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80068b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80068ba:	fab2 f282 	clz	r2, r2
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	f042 0220 	orr.w	r2, r2, #32
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	f002 021f 	and.w	r2, r2, #31
 80068ca:	2101      	movs	r1, #1
 80068cc:	fa01 f202 	lsl.w	r2, r1, r2
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1ab      	bne.n	800682e <HAL_RCC_OscConfig+0x26a>
 80068d6:	e002      	b.n	80068de <HAL_RCC_OscConfig+0x31a>
 80068d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 817f 	beq.w	8006bf2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80068f4:	4ba7      	ldr	r3, [pc, #668]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 030c 	and.w	r3, r3, #12
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00c      	beq.n	800691a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006900:	4ba4      	ldr	r3, [pc, #656]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 030c 	and.w	r3, r3, #12
 8006908:	2b08      	cmp	r3, #8
 800690a:	d173      	bne.n	80069f4 <HAL_RCC_OscConfig+0x430>
 800690c:	4ba1      	ldr	r3, [pc, #644]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006918:	d16c      	bne.n	80069f4 <HAL_RCC_OscConfig+0x430>
 800691a:	2302      	movs	r3, #2
 800691c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006920:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006924:	fa93 f3a3 	rbit	r3, r3
 8006928:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800692c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006930:	fab3 f383 	clz	r3, r3
 8006934:	b2db      	uxtb	r3, r3
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d102      	bne.n	800694a <HAL_RCC_OscConfig+0x386>
 8006944:	4b93      	ldr	r3, [pc, #588]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	e013      	b.n	8006972 <HAL_RCC_OscConfig+0x3ae>
 800694a:	2302      	movs	r3, #2
 800694c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8006954:	fa93 f3a3 	rbit	r3, r3
 8006958:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800695c:	2302      	movs	r3, #2
 800695e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8006962:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006966:	fa93 f3a3 	rbit	r3, r3
 800696a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800696e:	4b89      	ldr	r3, [pc, #548]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	2202      	movs	r2, #2
 8006974:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8006978:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800697c:	fa92 f2a2 	rbit	r2, r2
 8006980:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8006984:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006988:	fab2 f282 	clz	r2, r2
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	f042 0220 	orr.w	r2, r2, #32
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	f002 021f 	and.w	r2, r2, #31
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f202 	lsl.w	r2, r1, r2
 800699e:	4013      	ands	r3, r2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCC_OscConfig+0x3f6>
 80069a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d002      	beq.n	80069ba <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f000 be52 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	4b76      	ldr	r3, [pc, #472]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	21f8      	movs	r1, #248	@ 0xf8
 80069d0:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80069d8:	fa91 f1a1 	rbit	r1, r1
 80069dc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80069e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80069e4:	fab1 f181 	clz	r1, r1
 80069e8:	b2c9      	uxtb	r1, r1
 80069ea:	408b      	lsls	r3, r1
 80069ec:	4969      	ldr	r1, [pc, #420]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069f2:	e0fe      	b.n	8006bf2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8088 	beq.w	8006b16 <HAL_RCC_OscConfig+0x552>
 8006a06:	2301      	movs	r3, #1
 8006a08:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8006a10:	fa93 f3a3 	rbit	r3, r3
 8006a14:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8006a18:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a1c:	fab3 f383 	clz	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006a26:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2301      	movs	r3, #1
 8006a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7ff f981 	bl	8005d38 <HAL_GetTick>
 8006a36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a3c:	f7ff f97c 	bl	8005d38 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d902      	bls.n	8006a52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f000 be06 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006a52:	2302      	movs	r3, #2
 8006a54:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006a5c:	fa93 f3a3 	rbit	r3, r3
 8006a60:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8006a64:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a68:	fab3 f383 	clz	r3, r3
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d102      	bne.n	8006a82 <HAL_RCC_OscConfig+0x4be>
 8006a7c:	4b45      	ldr	r3, [pc, #276]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	e013      	b.n	8006aaa <HAL_RCC_OscConfig+0x4e6>
 8006a82:	2302      	movs	r3, #2
 8006a84:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a88:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a8c:	fa93 f3a3 	rbit	r3, r3
 8006a90:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006a94:	2302      	movs	r3, #2
 8006a96:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006a9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006a9e:	fa93 f3a3 	rbit	r3, r3
 8006aa2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8006ab0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006ab4:	fa92 f2a2 	rbit	r2, r2
 8006ab8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8006abc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006ac0:	fab2 f282 	clz	r2, r2
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	f042 0220 	orr.w	r2, r2, #32
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	f002 021f 	and.w	r2, r2, #31
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0af      	beq.n	8006a3c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006adc:	4b2d      	ldr	r3, [pc, #180]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	21f8      	movs	r1, #248	@ 0xf8
 8006af2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8006afa:	fa91 f1a1 	rbit	r1, r1
 8006afe:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8006b02:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006b06:	fab1 f181 	clz	r1, r1
 8006b0a:	b2c9      	uxtb	r1, r1
 8006b0c:	408b      	lsls	r3, r1
 8006b0e:	4921      	ldr	r1, [pc, #132]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]
 8006b14:	e06d      	b.n	8006bf2 <HAL_RCC_OscConfig+0x62e>
 8006b16:	2301      	movs	r3, #1
 8006b18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006b20:	fa93 f3a3 	rbit	r3, r3
 8006b24:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8006b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2c:	fab3 f383 	clz	r3, r3
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b42:	f7ff f8f9 	bl	8005d38 <HAL_GetTick>
 8006b46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b4c:	f7ff f8f4 	bl	8005d38 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d902      	bls.n	8006b62 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	f000 bd7e 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006b62:	2302      	movs	r3, #2
 8006b64:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8006b74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b78:	fab3 f383 	clz	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5d4>
 8006b8c:	4b01      	ldr	r3, [pc, #4]	@ (8006b94 <HAL_RCC_OscConfig+0x5d0>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	e016      	b.n	8006bc0 <HAL_RCC_OscConfig+0x5fc>
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ba2:	fa93 f3a3 	rbit	r3, r3
 8006ba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006baa:	2302      	movs	r3, #2
 8006bac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006bb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006bb4:	fa93 f3a3 	rbit	r3, r3
 8006bb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006bbc:	4bbf      	ldr	r3, [pc, #764]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006bc6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006bca:	fa92 f2a2 	rbit	r2, r2
 8006bce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8006bd2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006bd6:	fab2 f282 	clz	r2, r2
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	f042 0220 	orr.w	r2, r2, #32
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	f002 021f 	and.w	r2, r2, #31
 8006be6:	2101      	movs	r1, #1
 8006be8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1ac      	bne.n	8006b4c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8113 	beq.w	8006e2e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d07c      	beq.n	8006d12 <HAL_RCC_OscConfig+0x74e>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	fa93 f3a3 	rbit	r3, r3
 8006c26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8006c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c2e:	fab3 f383 	clz	r3, r3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	4ba2      	ldr	r3, [pc, #648]	@ (8006ec0 <HAL_RCC_OscConfig+0x8fc>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2301      	movs	r3, #1
 8006c40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c42:	f7ff f879 	bl	8005d38 <HAL_GetTick>
 8006c46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c4c:	f7ff f874 	bl	8005d38 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d902      	bls.n	8006c62 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	f000 bcfe 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006c62:	2302      	movs	r3, #2
 8006c64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6c:	fa93 f2a3 	rbit	r2, r3
 8006c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c82:	2202      	movs	r2, #2
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	fa93 f2a3 	rbit	r2, r3
 8006c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ca2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	fa93 f2a3 	rbit	r2, r3
 8006cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006cce:	2102      	movs	r1, #2
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	fa93 f1a3 	rbit	r1, r3
 8006ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ce4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006ce8:	6019      	str	r1, [r3, #0]
  return result;
 8006cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	fab3 f383 	clz	r3, r3
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2101      	movs	r1, #1
 8006d06:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d09d      	beq.n	8006c4c <HAL_RCC_OscConfig+0x688>
 8006d10:	e08d      	b.n	8006e2e <HAL_RCC_OscConfig+0x86a>
 8006d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	fa93 f2a3 	rbit	r2, r3
 8006d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006d34:	601a      	str	r2, [r3, #0]
  return result;
 8006d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006d3e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d40:	fab3 f383 	clz	r3, r3
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec0 <HAL_RCC_OscConfig+0x8fc>)
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d54:	f7fe fff0 	bl	8005d38 <HAL_GetTick>
 8006d58:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d5c:	e00a      	b.n	8006d74 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d5e:	f7fe ffeb 	bl	8005d38 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d902      	bls.n	8006d74 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	f000 bc75 	b.w	800765e <HAL_RCC_OscConfig+0x109a>
 8006d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	fa93 f2a3 	rbit	r2, r3
 8006d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006da0:	2202      	movs	r2, #2
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006da8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	fa93 f2a3 	rbit	r2, r3
 8006db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006db6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dc0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	fa93 f2a3 	rbit	r2, r3
 8006dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006dde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006de0:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006de8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006dec:	2102      	movs	r1, #2
 8006dee:	6019      	str	r1, [r3, #0]
 8006df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006df4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	fa93 f1a3 	rbit	r1, r3
 8006dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006e06:	6019      	str	r1, [r3, #0]
  return result;
 8006e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	fab3 f383 	clz	r3, r3
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2101      	movs	r1, #1
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d197      	bne.n	8006d5e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 81a5 	beq.w	800718e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e44:	2300      	movs	r3, #0
 8006e46:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d116      	bne.n	8006e84 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e56:	4b19      	ldr	r3, [pc, #100]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e60:	61d3      	str	r3, [r2, #28]
 8006e62:	4b16      	ldr	r3, [pc, #88]	@ (8006ebc <HAL_RCC_OscConfig+0x8f8>)
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006e7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e84:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec4 <HAL_RCC_OscConfig+0x900>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d121      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <HAL_RCC_OscConfig+0x900>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0b      	ldr	r2, [pc, #44]	@ (8006ec4 <HAL_RCC_OscConfig+0x900>)
 8006e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e9c:	f7fe ff4c 	bl	8005d38 <HAL_GetTick>
 8006ea0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea4:	e010      	b.n	8006ec8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ea6:	f7fe ff47 	bl	8005d38 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	@ 0x64
 8006eb4:	d908      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e3d1      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 8006eba:	bf00      	nop
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	10908120 	.word	0x10908120
 8006ec4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8007100 <HAL_RCC_OscConfig+0xb3c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0e8      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d106      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x92e>
 8006ee4:	4b87      	ldr	r3, [pc, #540]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	4a86      	ldr	r2, [pc, #536]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006eea:	f043 0301 	orr.w	r3, r3, #1
 8006eee:	6213      	str	r3, [r2, #32]
 8006ef0:	e035      	b.n	8006f5e <HAL_RCC_OscConfig+0x99a>
 8006ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ef6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10c      	bne.n	8006f1c <HAL_RCC_OscConfig+0x958>
 8006f02:	4b80      	ldr	r3, [pc, #512]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	4a7f      	ldr	r2, [pc, #508]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	6213      	str	r3, [r2, #32]
 8006f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	4a7c      	ldr	r2, [pc, #496]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	6213      	str	r3, [r2, #32]
 8006f1a:	e020      	b.n	8006f5e <HAL_RCC_OscConfig+0x99a>
 8006f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d10c      	bne.n	8006f46 <HAL_RCC_OscConfig+0x982>
 8006f2c:	4b75      	ldr	r3, [pc, #468]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	4a74      	ldr	r2, [pc, #464]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f32:	f043 0304 	orr.w	r3, r3, #4
 8006f36:	6213      	str	r3, [r2, #32]
 8006f38:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	4a71      	ldr	r2, [pc, #452]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	6213      	str	r3, [r2, #32]
 8006f44:	e00b      	b.n	8006f5e <HAL_RCC_OscConfig+0x99a>
 8006f46:	4b6f      	ldr	r3, [pc, #444]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	4a6e      	ldr	r2, [pc, #440]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	6213      	str	r3, [r2, #32]
 8006f52:	4b6c      	ldr	r3, [pc, #432]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4a6b      	ldr	r2, [pc, #428]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8081 	beq.w	8007072 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f70:	f7fe fee2 	bl	8005d38 <HAL_GetTick>
 8006f74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f78:	e00b      	b.n	8006f92 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f7a:	f7fe fedd 	bl	8005d38 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e365      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 8006f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fa2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	fa93 f2a3 	rbit	r2, r3
 8006fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fb0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fc6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	fa93 f2a3 	rbit	r2, r3
 8006fd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fd4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006fd8:	601a      	str	r2, [r3, #0]
  return result;
 8006fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fde:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006fe2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe4:	fab3 f383 	clz	r3, r3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f043 0302 	orr.w	r3, r3, #2
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d102      	bne.n	8006ffe <HAL_RCC_OscConfig+0xa3a>
 8006ff8:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	e013      	b.n	8007026 <HAL_RCC_OscConfig+0xa62>
 8006ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007002:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8007006:	2202      	movs	r2, #2
 8007008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800700e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fa93 f2a3 	rbit	r2, r3
 8007018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800701c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800702a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800702e:	2102      	movs	r1, #2
 8007030:	6011      	str	r1, [r2, #0]
 8007032:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007036:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800703a:	6812      	ldr	r2, [r2, #0]
 800703c:	fa92 f1a2 	rbit	r1, r2
 8007040:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007044:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8007048:	6011      	str	r1, [r2, #0]
  return result;
 800704a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800704e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	fab2 f282 	clz	r2, r2
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	f002 021f 	and.w	r2, r2, #31
 8007064:	2101      	movs	r1, #1
 8007066:	fa01 f202 	lsl.w	r2, r1, r2
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d084      	beq.n	8006f7a <HAL_RCC_OscConfig+0x9b6>
 8007070:	e083      	b.n	800717a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007072:	f7fe fe61 	bl	8005d38 <HAL_GetTick>
 8007076:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707a:	e00b      	b.n	8007094 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707c:	f7fe fe5c 	bl	8005d38 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e2e4      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 8007094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007098:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800709c:	2202      	movs	r2, #2
 800709e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	fa93 f2a3 	rbit	r2, r3
 80070ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070bc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80070c0:	2202      	movs	r2, #2
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	fa93 f2a3 	rbit	r2, r3
 80070d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80070da:	601a      	str	r2, [r3, #0]
  return result;
 80070dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80070e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e6:	fab3 f383 	clz	r3, r3
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f043 0302 	orr.w	r3, r3, #2
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d106      	bne.n	8007108 <HAL_RCC_OscConfig+0xb44>
 80070fa:	4b02      	ldr	r3, [pc, #8]	@ (8007104 <HAL_RCC_OscConfig+0xb40>)
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	e017      	b.n	8007130 <HAL_RCC_OscConfig+0xb6c>
 8007100:	40007000 	.word	0x40007000
 8007104:	40021000 	.word	0x40021000
 8007108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800710c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007110:	2202      	movs	r2, #2
 8007112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007118:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	fa93 f2a3 	rbit	r2, r3
 8007122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007126:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	4bb3      	ldr	r3, [pc, #716]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007134:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8007138:	2102      	movs	r1, #2
 800713a:	6011      	str	r1, [r2, #0]
 800713c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007140:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	fa92 f1a2 	rbit	r1, r2
 800714a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800714e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8007152:	6011      	str	r1, [r2, #0]
  return result;
 8007154:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007158:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	fab2 f282 	clz	r2, r2
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	f002 021f 	and.w	r2, r2, #31
 800716e:	2101      	movs	r1, #1
 8007170:	fa01 f202 	lsl.w	r2, r1, r2
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d180      	bne.n	800707c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800717a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007182:	4b9e      	ldr	r3, [pc, #632]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	4a9d      	ldr	r2, [pc, #628]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 8007188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800718c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800718e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007192:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 825e 	beq.w	800765c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a0:	4b96      	ldr	r3, [pc, #600]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	f000 821f 	beq.w	80075ec <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	f040 8170 	bne.w	80074a0 <HAL_RCC_OscConfig+0xedc>
 80071c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80071c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071d2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	fa93 f2a3 	rbit	r2, r3
 80071dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80071e4:	601a      	str	r2, [r3, #0]
  return result;
 80071e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80071ee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f0:	fab3 f383 	clz	r3, r3
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80071fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	461a      	mov	r2, r3
 8007202:	2300      	movs	r3, #0
 8007204:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007206:	f7fe fd97 	bl	8005d38 <HAL_GetTick>
 800720a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800720e:	e009      	b.n	8007224 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007210:	f7fe fd92 	bl	8005d38 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e21c      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 8007224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007228:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800722c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007236:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	fa93 f2a3 	rbit	r2, r3
 8007240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007244:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007248:	601a      	str	r2, [r3, #0]
  return result;
 800724a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800724e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007252:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	b2db      	uxtb	r3, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <HAL_RCC_OscConfig+0xcaa>
 8007268:	4b64      	ldr	r3, [pc, #400]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	e027      	b.n	80072be <HAL_RCC_OscConfig+0xcfa>
 800726e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007272:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007276:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800727a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800727c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007280:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	fa93 f2a3 	rbit	r2, r3
 800728a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800728e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007298:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800729c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80072a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	fa93 f2a3 	rbit	r2, r3
 80072b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80072b4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4b50      	ldr	r3, [pc, #320]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80072c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80072c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80072ca:	6011      	str	r1, [r2, #0]
 80072cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80072d0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80072d4:	6812      	ldr	r2, [r2, #0]
 80072d6:	fa92 f1a2 	rbit	r1, r2
 80072da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80072de:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80072e2:	6011      	str	r1, [r2, #0]
  return result;
 80072e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80072e8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	fab2 f282 	clz	r2, r2
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	f042 0220 	orr.w	r2, r2, #32
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	f002 021f 	and.w	r2, r2, #31
 80072fe:	2101      	movs	r1, #1
 8007300:	fa01 f202 	lsl.w	r2, r1, r2
 8007304:	4013      	ands	r3, r2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d182      	bne.n	8007210 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800730a:	4b3c      	ldr	r3, [pc, #240]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	f023 020f 	bic.w	r2, r3, #15
 8007312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007316:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731e:	4937      	ldr	r1, [pc, #220]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 8007320:	4313      	orrs	r3, r2
 8007322:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007324:	4b35      	ldr	r3, [pc, #212]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800732c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007330:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a19      	ldr	r1, [r3, #32]
 8007338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800733c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	430b      	orrs	r3, r1
 8007346:	492d      	ldr	r1, [pc, #180]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 8007348:	4313      	orrs	r3, r2
 800734a:	604b      	str	r3, [r1, #4]
 800734c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007350:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007354:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800735e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	fa93 f2a3 	rbit	r2, r3
 8007368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800736c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8007370:	601a      	str	r2, [r3, #0]
  return result;
 8007372:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007376:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800737a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800737c:	fab3 f383 	clz	r3, r3
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007386:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	461a      	mov	r2, r3
 800738e:	2301      	movs	r3, #1
 8007390:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007392:	f7fe fcd1 	bl	8005d38 <HAL_GetTick>
 8007396:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800739a:	e009      	b.n	80073b0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800739c:	f7fe fccc 	bl	8005d38 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e156      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 80073b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80073b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80073bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073c2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	fa93 f2a3 	rbit	r2, r3
 80073cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80073d4:	601a      	str	r2, [r3, #0]
  return result;
 80073d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073da:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80073de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073e0:	fab3 f383 	clz	r3, r3
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d105      	bne.n	8007400 <HAL_RCC_OscConfig+0xe3c>
 80073f4:	4b01      	ldr	r3, [pc, #4]	@ (80073fc <HAL_RCC_OscConfig+0xe38>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	e02a      	b.n	8007450 <HAL_RCC_OscConfig+0xe8c>
 80073fa:	bf00      	nop
 80073fc:	40021000 	.word	0x40021000
 8007400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007404:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007408:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800740c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007412:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	fa93 f2a3 	rbit	r2, r3
 800741c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007420:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800742a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800742e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007438:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	fa93 f2a3 	rbit	r2, r3
 8007442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007446:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	4b86      	ldr	r3, [pc, #536]	@ (8007668 <HAL_RCC_OscConfig+0x10a4>)
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007454:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007458:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007462:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	fa92 f1a2 	rbit	r1, r2
 800746c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007470:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8007474:	6011      	str	r1, [r2, #0]
  return result;
 8007476:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800747a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800747e:	6812      	ldr	r2, [r2, #0]
 8007480:	fab2 f282 	clz	r2, r2
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	f042 0220 	orr.w	r2, r2, #32
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	f002 021f 	and.w	r2, r2, #31
 8007490:	2101      	movs	r1, #1
 8007492:	fa01 f202 	lsl.w	r2, r1, r2
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	f43f af7f 	beq.w	800739c <HAL_RCC_OscConfig+0xdd8>
 800749e:	e0dd      	b.n	800765c <HAL_RCC_OscConfig+0x1098>
 80074a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80074a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	fa93 f2a3 	rbit	r2, r3
 80074bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80074c4:	601a      	str	r2, [r3, #0]
  return result;
 80074c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80074ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80074ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d0:	fab3 f383 	clz	r3, r3
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80074da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fe fc27 	bl	8005d38 <HAL_GetTick>
 80074ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074ee:	e009      	b.n	8007504 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fe fc22 	bl	8005d38 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e0ac      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
 8007504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007508:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800750c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007516:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	fa93 f2a3 	rbit	r2, r3
 8007520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007524:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007528:	601a      	str	r2, [r3, #0]
  return result;
 800752a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800752e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007532:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007534:	fab3 f383 	clz	r3, r3
 8007538:	b2db      	uxtb	r3, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d102      	bne.n	800754e <HAL_RCC_OscConfig+0xf8a>
 8007548:	4b47      	ldr	r3, [pc, #284]	@ (8007668 <HAL_RCC_OscConfig+0x10a4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	e027      	b.n	800759e <HAL_RCC_OscConfig+0xfda>
 800754e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007552:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007556:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800755a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800755c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007560:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	fa93 f2a3 	rbit	r2, r3
 800756a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800756e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007578:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800757c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007586:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	fa93 f2a3 	rbit	r2, r3
 8007590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007594:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	4b33      	ldr	r3, [pc, #204]	@ (8007668 <HAL_RCC_OscConfig+0x10a4>)
 800759c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075a2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80075a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80075aa:	6011      	str	r1, [r2, #0]
 80075ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	fa92 f1a2 	rbit	r1, r2
 80075ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80075c2:	6011      	str	r1, [r2, #0]
  return result;
 80075c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075c8:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	fab2 f282 	clz	r2, r2
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	f042 0220 	orr.w	r2, r2, #32
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	f002 021f 	and.w	r2, r2, #31
 80075de:	2101      	movs	r1, #1
 80075e0:	fa01 f202 	lsl.w	r2, r1, r2
 80075e4:	4013      	ands	r3, r2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d182      	bne.n	80074f0 <HAL_RCC_OscConfig+0xf2c>
 80075ea:	e037      	b.n	800765c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e02e      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007600:	4b19      	ldr	r3, [pc, #100]	@ (8007668 <HAL_RCC_OscConfig+0x10a4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007608:	4b17      	ldr	r3, [pc, #92]	@ (8007668 <HAL_RCC_OscConfig+0x10a4>)
 800760a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007610:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007614:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8007618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800761c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	429a      	cmp	r2, r3
 8007626:	d117      	bne.n	8007658 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007628:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800762c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007634:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800763c:	429a      	cmp	r2, r3
 800763e:	d10b      	bne.n	8007658 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007644:	f003 020f 	and.w	r2, r3, #15
 8007648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800764c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007654:	429a      	cmp	r2, r3
 8007656:	d001      	beq.n	800765c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000

0800766c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b09e      	sub	sp, #120	@ 0x78
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e162      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007684:	4b90      	ldr	r3, [pc, #576]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d910      	bls.n	80076b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007692:	4b8d      	ldr	r3, [pc, #564]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 0207 	bic.w	r2, r3, #7
 800769a:	498b      	ldr	r1, [pc, #556]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a2:	4b89      	ldr	r3, [pc, #548]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e14a      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c0:	4b82      	ldr	r3, [pc, #520]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	497f      	ldr	r1, [pc, #508]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80dc 	beq.w	8007898 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d13c      	bne.n	8007762 <HAL_RCC_ClockConfig+0xf6>
 80076e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80076f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f8:	fab3 f383 	clz	r3, r3
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	b2db      	uxtb	r3, r3
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	d102      	bne.n	8007712 <HAL_RCC_ClockConfig+0xa6>
 800770c:	4b6f      	ldr	r3, [pc, #444]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	e00f      	b.n	8007732 <HAL_RCC_ClockConfig+0xc6>
 8007712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007716:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800771a:	fa93 f3a3 	rbit	r3, r3
 800771e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007724:	663b      	str	r3, [r7, #96]	@ 0x60
 8007726:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007728:	fa93 f3a3 	rbit	r3, r3
 800772c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800772e:	4b67      	ldr	r3, [pc, #412]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007732:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007736:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007738:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800773a:	fa92 f2a2 	rbit	r2, r2
 800773e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007740:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007742:	fab2 f282 	clz	r2, r2
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	f042 0220 	orr.w	r2, r2, #32
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	f002 021f 	and.w	r2, r2, #31
 8007752:	2101      	movs	r1, #1
 8007754:	fa01 f202 	lsl.w	r2, r1, r2
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d17b      	bne.n	8007856 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e0f3      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d13c      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x178>
 800776a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800776e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007772:	fa93 f3a3 	rbit	r3, r3
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d102      	bne.n	8007794 <HAL_RCC_ClockConfig+0x128>
 800778e:	4b4f      	ldr	r3, [pc, #316]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	e00f      	b.n	80077b4 <HAL_RCC_ClockConfig+0x148>
 8007794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007798:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779c:	fa93 f3a3 	rbit	r3, r3
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077aa:	fa93 f3a3 	rbit	r3, r3
 80077ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077b0:	4b46      	ldr	r3, [pc, #280]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80077b8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80077ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077bc:	fa92 f2a2 	rbit	r2, r2
 80077c0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80077c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077c4:	fab2 f282 	clz	r2, r2
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	f042 0220 	orr.w	r2, r2, #32
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	f002 021f 	and.w	r2, r2, #31
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f202 	lsl.w	r2, r1, r2
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d13a      	bne.n	8007856 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0b2      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
 80077e4:	2302      	movs	r3, #2
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	fa93 f3a3 	rbit	r3, r3
 80077ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f2:	fab3 f383 	clz	r3, r3
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d102      	bne.n	800780c <HAL_RCC_ClockConfig+0x1a0>
 8007806:	4b31      	ldr	r3, [pc, #196]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	e00d      	b.n	8007828 <HAL_RCC_ClockConfig+0x1bc>
 800780c:	2302      	movs	r3, #2
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	fa93 f3a3 	rbit	r3, r3
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
 8007818:	2302      	movs	r3, #2
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	fa93 f3a3 	rbit	r3, r3
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	4b29      	ldr	r3, [pc, #164]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	2202      	movs	r2, #2
 800782a:	61ba      	str	r2, [r7, #24]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	fa92 f2a2 	rbit	r2, r2
 8007832:	617a      	str	r2, [r7, #20]
  return result;
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	fab2 f282 	clz	r2, r2
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	f042 0220 	orr.w	r2, r2, #32
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	f002 021f 	and.w	r2, r2, #31
 8007846:	2101      	movs	r1, #1
 8007848:	fa01 f202 	lsl.w	r2, r1, r2
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e079      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007856:	4b1d      	ldr	r3, [pc, #116]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f023 0203 	bic.w	r2, r3, #3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	491a      	ldr	r1, [pc, #104]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007864:	4313      	orrs	r3, r2
 8007866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007868:	f7fe fa66 	bl	8005d38 <HAL_GetTick>
 800786c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786e:	e00a      	b.n	8007886 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007870:	f7fe fa62 	bl	8005d38 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787e:	4293      	cmp	r3, r2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e061      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007886:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <HAL_RCC_ClockConfig+0x260>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f003 020c 	and.w	r2, r3, #12
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	429a      	cmp	r2, r3
 8007896:	d1eb      	bne.n	8007870 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007898:	4b0b      	ldr	r3, [pc, #44]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d214      	bcs.n	80078d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a6:	4b08      	ldr	r3, [pc, #32]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f023 0207 	bic.w	r2, r3, #7
 80078ae:	4906      	ldr	r1, [pc, #24]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078b6:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <HAL_RCC_ClockConfig+0x25c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d005      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e040      	b.n	800794a <HAL_RCC_ClockConfig+0x2de>
 80078c8:	40022000 	.word	0x40022000
 80078cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d008      	beq.n	80078ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <HAL_RCC_ClockConfig+0x2e8>)
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	491a      	ldr	r1, [pc, #104]	@ (8007954 <HAL_RCC_ClockConfig+0x2e8>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d009      	beq.n	800790e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078fa:	4b16      	ldr	r3, [pc, #88]	@ (8007954 <HAL_RCC_ClockConfig+0x2e8>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4912      	ldr	r1, [pc, #72]	@ (8007954 <HAL_RCC_ClockConfig+0x2e8>)
 800790a:	4313      	orrs	r3, r2
 800790c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800790e:	f000 f829 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8007912:	4601      	mov	r1, r0
 8007914:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <HAL_RCC_ClockConfig+0x2e8>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800791c:	22f0      	movs	r2, #240	@ 0xf0
 800791e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	fa92 f2a2 	rbit	r2, r2
 8007926:	60fa      	str	r2, [r7, #12]
  return result;
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	fab2 f282 	clz	r2, r2
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	40d3      	lsrs	r3, r2
 8007932:	4a09      	ldr	r2, [pc, #36]	@ (8007958 <HAL_RCC_ClockConfig+0x2ec>)
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	fa21 f303 	lsr.w	r3, r1, r3
 800793a:	4a08      	ldr	r2, [pc, #32]	@ (800795c <HAL_RCC_ClockConfig+0x2f0>)
 800793c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800793e:	4b08      	ldr	r3, [pc, #32]	@ (8007960 <HAL_RCC_ClockConfig+0x2f4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe f9b4 	bl	8005cb0 <HAL_InitTick>
  
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3778      	adds	r7, #120	@ 0x78
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40021000 	.word	0x40021000
 8007958:	0800a384 	.word	0x0800a384
 800795c:	20000010 	.word	0x20000010
 8007960:	20000014 	.word	0x20000014

08007964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	b08b      	sub	sp, #44	@ 0x2c
 8007968:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	2300      	movs	r3, #0
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800797e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 030c 	and.w	r3, r3, #12
 800798a:	2b04      	cmp	r3, #4
 800798c:	d002      	beq.n	8007994 <HAL_RCC_GetSysClockFreq+0x30>
 800798e:	2b08      	cmp	r3, #8
 8007990:	d003      	beq.n	800799a <HAL_RCC_GetSysClockFreq+0x36>
 8007992:	e03f      	b.n	8007a14 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007994:	4b25      	ldr	r3, [pc, #148]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007996:	623b      	str	r3, [r7, #32]
      break;
 8007998:	e03f      	b.n	8007a1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80079a0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80079a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	fa92 f2a2 	rbit	r2, r2
 80079ac:	607a      	str	r2, [r7, #4]
  return result;
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	fab2 f282 	clz	r2, r2
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	40d3      	lsrs	r3, r2
 80079b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a30 <HAL_RCC_GetSysClockFreq+0xcc>)
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80079be:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <HAL_RCC_GetSysClockFreq+0xc4>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	220f      	movs	r2, #15
 80079c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	fa92 f2a2 	rbit	r2, r2
 80079d0:	60fa      	str	r2, [r7, #12]
  return result;
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	fab2 f282 	clz	r2, r2
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	40d3      	lsrs	r3, r2
 80079dc:	4a15      	ldr	r2, [pc, #84]	@ (8007a34 <HAL_RCC_GetSysClockFreq+0xd0>)
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80079ec:	4a0f      	ldr	r2, [pc, #60]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xc8>)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fc:	e007      	b.n	8007a0e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80079fe:	4a0b      	ldr	r2, [pc, #44]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	623b      	str	r3, [r7, #32]
      break;
 8007a12:	e002      	b.n	8007a1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007a16:	623b      	str	r3, [r7, #32]
      break;
 8007a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	372c      	adds	r7, #44	@ 0x2c
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40021000 	.word	0x40021000
 8007a2c:	007a1200 	.word	0x007a1200
 8007a30:	0800a39c 	.word	0x0800a39c
 8007a34:	0800a3ac 	.word	0x0800a3ac

08007a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a3c:	4b03      	ldr	r3, [pc, #12]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000010 	.word	0x20000010

08007a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007a56:	f7ff ffef 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007a68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	fa92 f2a2 	rbit	r2, r2
 8007a70:	603a      	str	r2, [r7, #0]
  return result;
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	fab2 f282 	clz	r2, r2
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	40d3      	lsrs	r3, r2
 8007a7c:	4a04      	ldr	r2, [pc, #16]	@ (8007a90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007a7e:	5cd3      	ldrb	r3, [r2, r3]
 8007a80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	0800a394 	.word	0x0800a394

08007a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007a9a:	f7ff ffcd 	bl	8007a38 <HAL_RCC_GetHCLKFreq>
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007aa8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007aac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	fa92 f2a2 	rbit	r2, r2
 8007ab4:	603a      	str	r2, [r7, #0]
  return result;
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	fab2 f282 	clz	r2, r2
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	40d3      	lsrs	r3, r2
 8007ac0:	4a04      	ldr	r2, [pc, #16]	@ (8007ad4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007ac2:	5cd3      	ldrb	r3, [r2, r3]
 8007ac4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	0800a394 	.word	0x0800a394

08007ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b092      	sub	sp, #72	@ 0x48
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80d4 	beq.w	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007afc:	4b4e      	ldr	r3, [pc, #312]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10e      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b08:	4b4b      	ldr	r3, [pc, #300]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b12:	61d3      	str	r3, [r2, #28]
 8007b14:	4b48      	ldr	r3, [pc, #288]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	60bb      	str	r3, [r7, #8]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b26:	4b45      	ldr	r3, [pc, #276]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d118      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b32:	4b42      	ldr	r3, [pc, #264]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a41      	ldr	r2, [pc, #260]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b3e:	f7fe f8fb 	bl	8005d38 <HAL_GetTick>
 8007b42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b44:	e008      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b46:	f7fe f8f7 	bl	8005d38 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b64      	cmp	r3, #100	@ 0x64
 8007b52:	d901      	bls.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e1a5      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b58:	4b38      	ldr	r3, [pc, #224]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b64:	4b34      	ldr	r3, [pc, #208]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8084 	beq.w	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d07c      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b84:	4b2c      	ldr	r3, [pc, #176]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007b92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	fa93 f3a3 	rbit	r3, r3
 8007b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b9e:	fab3 f383 	clz	r3, r3
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b26      	ldr	r3, [pc, #152]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	461a      	mov	r2, r3
 8007bae:	2301      	movs	r3, #1
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bba:	fa93 f3a3 	rbit	r3, r3
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bc2:	fab3 f383 	clz	r3, r3
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4b1d      	ldr	r3, [pc, #116]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007bd6:	4a18      	ldr	r2, [pc, #96]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bda:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d04b      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be6:	f7fe f8a7 	bl	8005d38 <HAL_GetTick>
 8007bea:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bec:	e00a      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bee:	f7fe f8a3 	bl	8005d38 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e14f      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007c04:	2302      	movs	r3, #2
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	fa93 f3a3 	rbit	r3, r3
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c10:	2302      	movs	r3, #2
 8007c12:	623b      	str	r3, [r7, #32]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	fa93 f3a3 	rbit	r3, r3
 8007c1a:	61fb      	str	r3, [r7, #28]
  return result;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1e:	fab3 f383 	clz	r3, r3
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f043 0302 	orr.w	r3, r3, #2
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d108      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007c32:	4b01      	ldr	r3, [pc, #4]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	e00d      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40007000 	.word	0x40007000
 8007c40:	10908100 	.word	0x10908100
 8007c44:	2302      	movs	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	fa93 f3a3 	rbit	r3, r3
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	4b96      	ldr	r3, [pc, #600]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c54:	2202      	movs	r2, #2
 8007c56:	613a      	str	r2, [r7, #16]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	fa92 f2a2 	rbit	r2, r2
 8007c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	fab2 f282 	clz	r2, r2
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	f002 021f 	and.w	r2, r2, #31
 8007c72:	2101      	movs	r1, #1
 8007c74:	fa01 f202 	lsl.w	r2, r1, r2
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0b7      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	4988      	ldr	r1, [pc, #544]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007c90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d105      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c98:	4b84      	ldr	r3, [pc, #528]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	4a83      	ldr	r2, [pc, #524]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb4:	f023 0203 	bic.w	r2, r3, #3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	497b      	ldr	r1, [pc, #492]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cce:	4b77      	ldr	r3, [pc, #476]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	4974      	ldr	r1, [pc, #464]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cec:	4b6f      	ldr	r3, [pc, #444]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	496c      	ldr	r1, [pc, #432]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d0a:	4b68      	ldr	r3, [pc, #416]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0e:	f023 0210 	bic.w	r2, r3, #16
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4965      	ldr	r1, [pc, #404]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007d28:	4b60      	ldr	r3, [pc, #384]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d34:	495d      	ldr	r1, [pc, #372]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d46:	4b59      	ldr	r3, [pc, #356]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4a:	f023 0220 	bic.w	r2, r3, #32
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	4956      	ldr	r1, [pc, #344]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d64:	4b51      	ldr	r3, [pc, #324]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	494e      	ldr	r1, [pc, #312]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d82:	4b4a      	ldr	r3, [pc, #296]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	4947      	ldr	r1, [pc, #284]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007da0:	4b42      	ldr	r3, [pc, #264]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	493f      	ldr	r1, [pc, #252]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	4938      	ldr	r1, [pc, #224]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ddc:	4b33      	ldr	r3, [pc, #204]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de8:	4930      	ldr	r1, [pc, #192]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e06:	4929      	ldr	r1, [pc, #164]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007e18:	4b24      	ldr	r3, [pc, #144]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e24:	4921      	ldr	r1, [pc, #132]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007e36:	4b1d      	ldr	r3, [pc, #116]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e42:	491a      	ldr	r1, [pc, #104]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007e54:	4b15      	ldr	r3, [pc, #84]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e60:	4912      	ldr	r1, [pc, #72]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007e72:	4b0e      	ldr	r3, [pc, #56]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	490b      	ldr	r1, [pc, #44]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007e90:	4b06      	ldr	r3, [pc, #24]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9c:	4903      	ldr	r1, [pc, #12]	@ (8007eac <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3748      	adds	r7, #72	@ 0x48
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40021000 	.word	0x40021000

08007eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e09d      	b.n	8007ffe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d108      	bne.n	8007edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed2:	d009      	beq.n	8007ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	61da      	str	r2, [r3, #28]
 8007eda:	e005      	b.n	8007ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fd fd44 	bl	8005990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f28:	d902      	bls.n	8007f30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e002      	b.n	8007f36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007f3e:	d007      	beq.n	8007f50 <HAL_SPI_Init+0xa0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f48:	d002      	beq.n	8007f50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f92:	ea42 0103 	orr.w	r1, r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	0c1b      	lsrs	r3, r3, #16
 8007fac:	f003 0204 	and.w	r2, r3, #4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007fcc:	ea42 0103 	orr.w	r1, r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e01a      	b.n	800804e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800802e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7fd fcf1 	bl	8005a18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b088      	sub	sp, #32
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	603b      	str	r3, [r7, #0]
 8008062:	4613      	mov	r3, r2
 8008064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008070:	2b01      	cmp	r3, #1
 8008072:	d101      	bne.n	8008078 <HAL_SPI_Transmit+0x22>
 8008074:	2302      	movs	r3, #2
 8008076:	e15f      	b.n	8008338 <HAL_SPI_Transmit+0x2e2>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008080:	f7fd fe5a 	bl	8005d38 <HAL_GetTick>
 8008084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d002      	beq.n	800809c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008096:	2302      	movs	r3, #2
 8008098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800809a:	e148      	b.n	800832e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_SPI_Transmit+0x52>
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080ac:	e13f      	b.n	800832e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2203      	movs	r2, #3
 80080b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080f8:	d10f      	bne.n	800811a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008108:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008118:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008124:	2b40      	cmp	r3, #64	@ 0x40
 8008126:	d007      	beq.n	8008138 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008136:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008140:	d94f      	bls.n	80081e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Transmit+0xfa>
 800814a:	8afb      	ldrh	r3, [r7, #22]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d142      	bne.n	80081d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008154:	881a      	ldrh	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008160:	1c9a      	adds	r2, r3, #2
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008174:	e02f      	b.n	80081d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b02      	cmp	r3, #2
 8008182:	d112      	bne.n	80081aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	881a      	ldrh	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	1c9a      	adds	r2, r3, #2
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081a8:	e015      	b.n	80081d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081aa:	f7fd fdc5 	bl	8005d38 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d803      	bhi.n	80081c2 <HAL_SPI_Transmit+0x16c>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d102      	bne.n	80081c8 <HAL_SPI_Transmit+0x172>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80081d4:	e0ab      	b.n	800832e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1ca      	bne.n	8008176 <HAL_SPI_Transmit+0x120>
 80081e0:	e080      	b.n	80082e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_SPI_Transmit+0x19a>
 80081ea:	8afb      	ldrh	r3, [r7, #22]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d174      	bne.n	80082da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d912      	bls.n	8008220 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	881a      	ldrh	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b02      	subs	r3, #2
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800821e:	e05c      	b.n	80082da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008246:	e048      	b.n	80082da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b02      	cmp	r3, #2
 8008254:	d12b      	bne.n	80082ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	d912      	bls.n	8008286 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	881a      	ldrh	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008270:	1c9a      	adds	r2, r3, #2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b02      	subs	r3, #2
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008284:	e029      	b.n	80082da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	7812      	ldrb	r2, [r2, #0]
 8008292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082ac:	e015      	b.n	80082da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ae:	f7fd fd43 	bl	8005d38 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d803      	bhi.n	80082c6 <HAL_SPI_Transmit+0x270>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d102      	bne.n	80082cc <HAL_SPI_Transmit+0x276>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d106      	bne.n	80082da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80082d8:	e029      	b.n	800832e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1b1      	bne.n	8008248 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fcf9 	bl	8008ce0 <SPI_EndRxTxTransaction>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008302:	2300      	movs	r3, #0
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	77fb      	strb	r3, [r7, #31]
 8008324:	e003      	b.n	800832e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008336:	7ffb      	ldrb	r3, [r7, #31]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	603b      	str	r3, [r7, #0]
 800834c:	4613      	mov	r3, r2
 800834e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b01      	cmp	r3, #1
 800835e:	d002      	beq.n	8008366 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008360:	2302      	movs	r3, #2
 8008362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008364:	e11a      	b.n	800859c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800836e:	d112      	bne.n	8008396 <HAL_SPI_Receive+0x56>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10e      	bne.n	8008396 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2204      	movs	r2, #4
 800837c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4613      	mov	r3, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f90e 	bl	80085ae <HAL_SPI_TransmitReceive>
 8008392:	4603      	mov	r3, r0
 8008394:	e107      	b.n	80085a6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_SPI_Receive+0x64>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e100      	b.n	80085a6 <HAL_SPI_Receive+0x266>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ac:	f7fd fcc4 	bl	8005d38 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <HAL_SPI_Receive+0x7e>
 80083b8:	88fb      	ldrh	r3, [r7, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083c2:	e0eb      	b.n	800859c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2204      	movs	r2, #4
 80083c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800840e:	d908      	bls.n	8008422 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	e007      	b.n	8008432 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008430:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800843a:	d10f      	bne.n	800845c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800844a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800845a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008466:	2b40      	cmp	r3, #64	@ 0x40
 8008468:	d007      	beq.n	800847a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008478:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008482:	d86f      	bhi.n	8008564 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008484:	e034      	b.n	80084f0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d117      	bne.n	80084c4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f103 020c 	add.w	r2, r3, #12
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	b2d2      	uxtb	r2, r2
 80084a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80084c2:	e015      	b.n	80084f0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084c4:	f7fd fc38 	bl	8005d38 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d803      	bhi.n	80084dc <HAL_SPI_Receive+0x19c>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d102      	bne.n	80084e2 <HAL_SPI_Receive+0x1a2>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80084ee:	e055      	b.n	800859c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1c4      	bne.n	8008486 <HAL_SPI_Receive+0x146>
 80084fc:	e038      	b.n	8008570 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b01      	cmp	r3, #1
 800850a:	d115      	bne.n	8008538 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	b292      	uxth	r2, r2
 8008518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008536:	e015      	b.n	8008564 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008538:	f7fd fbfe 	bl	8005d38 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d803      	bhi.n	8008550 <HAL_SPI_Receive+0x210>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d102      	bne.n	8008556 <HAL_SPI_Receive+0x216>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008562:	e01b      	b.n	800859c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800856a:	b29b      	uxth	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1c6      	bne.n	80084fe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fb5b 	bl	8008c30 <SPI_EndRxTransaction>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
 8008592:	e003      	b.n	800859c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b08a      	sub	sp, #40	@ 0x28
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085bc:	2301      	movs	r3, #1
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x26>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e20a      	b.n	80089ea <HAL_SPI_TransmitReceive+0x43c>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085dc:	f7fd fbac 	bl	8005d38 <HAL_GetTick>
 80085e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80085e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80085f0:	887b      	ldrh	r3, [r7, #2]
 80085f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085f8:	7efb      	ldrb	r3, [r7, #27]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d00e      	beq.n	800861c <HAL_SPI_TransmitReceive+0x6e>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008604:	d106      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x66>
 800860e:	7efb      	ldrb	r3, [r7, #27]
 8008610:	2b04      	cmp	r3, #4
 8008612:	d003      	beq.n	800861c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800861a:	e1e0      	b.n	80089de <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <HAL_SPI_TransmitReceive+0x80>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_SPI_TransmitReceive+0x80>
 8008628:	887b      	ldrh	r3, [r7, #2]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008634:	e1d3      	b.n	80089de <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b04      	cmp	r3, #4
 8008640:	d003      	beq.n	800864a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2205      	movs	r2, #5
 8008646:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	887a      	ldrh	r2, [r7, #2]
 800865a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	887a      	ldrh	r2, [r7, #2]
 8008662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	887a      	ldrh	r2, [r7, #2]
 8008670:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	887a      	ldrh	r2, [r7, #2]
 8008676:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800868c:	d802      	bhi.n	8008694 <HAL_SPI_TransmitReceive+0xe6>
 800868e:	8a3b      	ldrh	r3, [r7, #16]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d908      	bls.n	80086a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086a2:	605a      	str	r2, [r3, #4]
 80086a4:	e007      	b.n	80086b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c0:	2b40      	cmp	r3, #64	@ 0x40
 80086c2:	d007      	beq.n	80086d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80086dc:	f240 8081 	bls.w	80087e2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_SPI_TransmitReceive+0x140>
 80086e8:	8a7b      	ldrh	r3, [r7, #18]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d16d      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f2:	881a      	ldrh	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fe:	1c9a      	adds	r2, r3, #2
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008708:	b29b      	uxth	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	b29a      	uxth	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008712:	e05a      	b.n	80087ca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b02      	cmp	r3, #2
 8008720:	d11b      	bne.n	800875a <HAL_SPI_TransmitReceive+0x1ac>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d016      	beq.n	800875a <HAL_SPI_TransmitReceive+0x1ac>
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	2b01      	cmp	r3, #1
 8008730:	d113      	bne.n	800875a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b01      	cmp	r3, #1
 8008766:	d11c      	bne.n	80087a2 <HAL_SPI_TransmitReceive+0x1f4>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d016      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800877e:	b292      	uxth	r2, r2
 8008780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008786:	1c9a      	adds	r2, r3, #2
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800879e:	2301      	movs	r3, #1
 80087a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087a2:	f7fd fac9 	bl	8005d38 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d80b      	bhi.n	80087ca <HAL_SPI_TransmitReceive+0x21c>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b8:	d007      	beq.n	80087ca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80087c8:	e109      	b.n	80089de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d19f      	bne.n	8008714 <HAL_SPI_TransmitReceive+0x166>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d199      	bne.n	8008714 <HAL_SPI_TransmitReceive+0x166>
 80087e0:	e0e3      	b.n	80089aa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_SPI_TransmitReceive+0x244>
 80087ea:	8a7b      	ldrh	r3, [r7, #18]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f040 80cf 	bne.w	8008990 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d912      	bls.n	8008822 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008800:	881a      	ldrh	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880c:	1c9a      	adds	r2, r3, #2
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b02      	subs	r3, #2
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008820:	e0b6      	b.n	8008990 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	7812      	ldrb	r2, [r2, #0]
 800882e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008848:	e0a2      	b.n	8008990 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b02      	cmp	r3, #2
 8008856:	d134      	bne.n	80088c2 <HAL_SPI_TransmitReceive+0x314>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885c:	b29b      	uxth	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02f      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0x314>
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	2b01      	cmp	r3, #1
 8008866:	d12c      	bne.n	80088c2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b01      	cmp	r3, #1
 8008870:	d912      	bls.n	8008898 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	881a      	ldrh	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	1c9a      	adds	r2, r3, #2
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800888c:	b29b      	uxth	r3, r3
 800888e:	3b02      	subs	r3, #2
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008896:	e012      	b.n	80088be <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d148      	bne.n	8008962 <HAL_SPI_TransmitReceive+0x3b4>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d042      	beq.n	8008962 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d923      	bls.n	8008930 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	b292      	uxth	r2, r2
 80088f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fa:	1c9a      	adds	r2, r3, #2
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b02      	subs	r3, #2
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b01      	cmp	r3, #1
 800891c:	d81f      	bhi.n	800895e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800892c:	605a      	str	r2, [r3, #4]
 800892e:	e016      	b.n	800895e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f103 020c 	add.w	r2, r3, #12
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800895e:	2301      	movs	r3, #1
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008962:	f7fd f9e9 	bl	8005d38 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800896e:	429a      	cmp	r2, r3
 8008970:	d803      	bhi.n	800897a <HAL_SPI_TransmitReceive+0x3cc>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008978:	d102      	bne.n	8008980 <HAL_SPI_TransmitReceive+0x3d2>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d107      	bne.n	8008990 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800898e:	e026      	b.n	80089de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008994:	b29b      	uxth	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	f47f af57 	bne.w	800884a <HAL_SPI_TransmitReceive+0x29c>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f47f af50 	bne.w	800884a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f996 	bl	8008ce0 <SPI_EndRxTxTransaction>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089d4:	e003      	b.n	80089de <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80089e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3728      	adds	r7, #40	@ 0x28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a04:	f7fd f998 	bl	8005d38 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4413      	add	r3, r2
 8008a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a14:	f7fd f990 	bl	8005d38 <HAL_GetTick>
 8008a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a1a:	4b39      	ldr	r3, [pc, #228]	@ (8008b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	015b      	lsls	r3, r3, #5
 8008a20:	0d1b      	lsrs	r3, r3, #20
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a2a:	e054      	b.n	8008ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d050      	beq.n	8008ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a34:	f7fd f980 	bl	8005d38 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d902      	bls.n	8008a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d13d      	bne.n	8008ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a62:	d111      	bne.n	8008a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a6c:	d004      	beq.n	8008a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a76:	d107      	bne.n	8008a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a90:	d10f      	bne.n	8008ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e017      	b.n	8008af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	bf0c      	ite	eq
 8008ae6:	2301      	moveq	r3, #1
 8008ae8:	2300      	movne	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d19b      	bne.n	8008a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000010 	.word	0x20000010

08008b04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	@ 0x28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
 8008b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b16:	f7fd f90f 	bl	8005d38 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	4413      	add	r3, r2
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008b26:	f7fd f907 	bl	8005d38 <HAL_GetTick>
 8008b2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b34:	4b3d      	ldr	r3, [pc, #244]	@ (8008c2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	00da      	lsls	r2, r3, #3
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	0d1b      	lsrs	r3, r3, #20
 8008b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b4c:	e060      	b.n	8008c10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b54:	d107      	bne.n	8008b66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d104      	bne.n	8008b66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d050      	beq.n	8008c10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b6e:	f7fd f8e3 	bl	8005d38 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d902      	bls.n	8008b84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d13d      	bne.n	8008c00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b9c:	d111      	bne.n	8008bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ba6:	d004      	beq.n	8008bb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb0:	d107      	bne.n	8008bc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bca:	d10f      	bne.n	8008bec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e010      	b.n	8008c22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d196      	bne.n	8008b4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3728      	adds	r7, #40	@ 0x28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000010 	.word	0x20000010

08008c30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c44:	d111      	bne.n	8008c6a <SPI_EndRxTransaction+0x3a>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c4e:	d004      	beq.n	8008c5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c58:	d107      	bne.n	8008c6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2180      	movs	r1, #128	@ 0x80
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff febd 	bl	80089f4 <SPI_WaitFlagStateUntilTimeout>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c84:	f043 0220 	orr.w	r2, r3, #32
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e023      	b.n	8008cd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c98:	d11d      	bne.n	8008cd6 <SPI_EndRxTransaction+0xa6>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ca2:	d004      	beq.n	8008cae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cac:	d113      	bne.n	8008cd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f7ff ff22 	bl	8008b04 <SPI_WaitFifoStateUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d007      	beq.n	8008cd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cca:	f043 0220 	orr.w	r2, r3, #32
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e000      	b.n	8008cd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff ff03 	bl	8008b04 <SPI_WaitFifoStateUntilTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d08:	f043 0220 	orr.w	r2, r3, #32
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e027      	b.n	8008d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2180      	movs	r1, #128	@ 0x80
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff fe68 	bl	80089f4 <SPI_WaitFlagStateUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d007      	beq.n	8008d3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d2e:	f043 0220 	orr.w	r2, r3, #32
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e014      	b.n	8008d64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff fedc 	bl	8008b04 <SPI_WaitFifoStateUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d56:	f043 0220 	orr.w	r2, r3, #32
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e000      	b.n	8008d64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e040      	b.n	8008e00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fc ff04 	bl	8005b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2224      	movs	r2, #36	@ 0x24
 8008d98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fbba 	bl	8009524 <UART_SetConfig>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e022      	b.n	8008e00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fd82 	bl	80098cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685a      	ldr	r2, [r3, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fe09 	bl	8009a10 <UART_CheckIdleState>
 8008dfe:	4603      	mov	r3, r0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	@ 0x28
 8008e0c:	af02      	add	r7, sp, #8
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d177      	bne.n	8008f10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d002      	beq.n	8008e2c <HAL_UART_Transmit+0x24>
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e070      	b.n	8008f12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2221      	movs	r2, #33	@ 0x21
 8008e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e3e:	f7fc ff7b 	bl	8005d38 <HAL_GetTick>
 8008e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	88fa      	ldrh	r2, [r7, #6]
 8008e50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e5c:	d108      	bne.n	8008e70 <HAL_UART_Transmit+0x68>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e003      	b.n	8008e78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e78:	e02f      	b.n	8008eda <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2180      	movs	r1, #128	@ 0x80
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fe6b 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e03b      	b.n	8008f12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10b      	bne.n	8008eb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eac:	b292      	uxth	r2, r2
 8008eae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e007      	b.n	8008ec8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1c9      	bne.n	8008e7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2140      	movs	r1, #64	@ 0x40
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fe35 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e005      	b.n	8008f12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b0ba      	sub	sp, #232	@ 0xe8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008f46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d115      	bne.n	8008f84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00f      	beq.n	8008f84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 82ab 	beq.w	80094d0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
      }
      return;
 8008f82:	e2a5      	b.n	80094d0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 8117 	beq.w	80091bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008f9e:	4b85      	ldr	r3, [pc, #532]	@ (80091b4 <HAL_UART_IRQHandler+0x298>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 810a 	beq.w	80091bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d011      	beq.n	8008fd8 <HAL_UART_IRQHandler+0xbc>
 8008fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fce:	f043 0201 	orr.w	r2, r3, #1
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d011      	beq.n	8009008 <HAL_UART_IRQHandler+0xec>
 8008fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ffe:	f043 0204 	orr.w	r2, r3, #4
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d011      	beq.n	8009038 <HAL_UART_IRQHandler+0x11c>
 8009014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2204      	movs	r2, #4
 8009026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800902e:	f043 0202 	orr.w	r2, r3, #2
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903c:	f003 0308 	and.w	r3, r3, #8
 8009040:	2b00      	cmp	r3, #0
 8009042:	d017      	beq.n	8009074 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d105      	bne.n	800905c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2208      	movs	r2, #8
 8009062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800906a:	f043 0208 	orr.w	r2, r3, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800907c:	2b00      	cmp	r3, #0
 800907e:	d012      	beq.n	80090a6 <HAL_UART_IRQHandler+0x18a>
 8009080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009084:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909c:	f043 0220 	orr.w	r2, r3, #32
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8211 	beq.w	80094d4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00d      	beq.n	80090da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80090be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d005      	beq.n	80090fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d04f      	beq.n	800919e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fe5c 	bl	8009dbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d141      	bne.n	8009196 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800912c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3308      	adds	r3, #8
 800913a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800913e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800914a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1d9      	bne.n	8009112 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009162:	2b00      	cmp	r3, #0
 8009164:	d013      	beq.n	800918e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800916a:	4a13      	ldr	r2, [pc, #76]	@ (80091b8 <HAL_UART_IRQHandler+0x29c>)
 800916c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009172:	4618      	mov	r0, r3
 8009174:	f7fc ff5a 	bl	800602c <HAL_DMA_Abort_IT>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d017      	beq.n	80091ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	e00f      	b.n	80091ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9be 	bl	8009510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009194:	e00b      	b.n	80091ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f9ba 	bl	8009510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800919c:	e007      	b.n	80091ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f9b6 	bl	8009510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80091ac:	e192      	b.n	80094d4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ae:	bf00      	nop
    return;
 80091b0:	e190      	b.n	80094d4 <HAL_UART_IRQHandler+0x5b8>
 80091b2:	bf00      	nop
 80091b4:	04000120 	.word	0x04000120
 80091b8:	08009e85 	.word	0x08009e85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	f040 814b 	bne.w	800945c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 8144 	beq.w	800945c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 813d 	beq.w	800945c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2210      	movs	r2, #16
 80091e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f4:	2b40      	cmp	r3, #64	@ 0x40
 80091f6:	f040 80b5 	bne.w	8009364 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 8164 	beq.w	80094d8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800921a:	429a      	cmp	r2, r3
 800921c:	f080 815c 	bcs.w	80094d8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009226:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	2b20      	cmp	r3, #32
 8009232:	f000 8086 	beq.w	8009342 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800924a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800924e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009252:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009260:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009264:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800926c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1da      	bne.n	8009236 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80092a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80092a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e1      	bne.n	8009280 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e3      	bne.n	80092bc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009312:	f023 0310 	bic.w	r3, r3, #16
 8009316:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009326:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800932a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e4      	bne.n	8009302 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800933c:	4618      	mov	r0, r3
 800933e:	f7fc fe3c 	bl	8005fba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009354:	b29b      	uxth	r3, r3
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	b29b      	uxth	r3, r3
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7fc fa3d 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009362:	e0b9      	b.n	80094d8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009370:	b29b      	uxth	r3, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800937e:	b29b      	uxth	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80ab 	beq.w	80094dc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80a6 	beq.w	80094dc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800939e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e4      	bne.n	8009390 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	623b      	str	r3, [r7, #32]
   return(result);
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80093ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e3      	bne.n	80093c6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0310 	bic.w	r3, r3, #16
 8009426:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	69b9      	ldr	r1, [r7, #24]
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	617b      	str	r3, [r7, #20]
   return(result);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e4      	bne.n	8009412 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800944e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7fc f9c1 	bl	80057dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800945a:	e03f      	b.n	80094dc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00e      	beq.n	8009486 <HAL_UART_IRQHandler+0x56a>
 8009468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800946c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d008      	beq.n	8009486 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800947c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fee8 	bl	800a254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009484:	e02d      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d008      	beq.n	80094b0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01c      	beq.n	80094e0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
    }
    return;
 80094ae:	e017      	b.n	80094e0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
 80094bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00c      	beq.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fcf1 	bl	8009eb0 <UART_EndTransmit_IT>
    return;
 80094ce:	e008      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80094d0:	bf00      	nop
 80094d2:	e006      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80094d4:	bf00      	nop
 80094d6:	e004      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80094d8:	bf00      	nop
 80094da:	e002      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80094dc:	bf00      	nop
 80094de:	e000      	b.n	80094e2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80094e0:	bf00      	nop
  }

}
 80094e2:	37e8      	adds	r7, #232	@ 0xe8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	431a      	orrs	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	69db      	ldr	r3, [r3, #28]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b92      	ldr	r3, [pc, #584]	@ (8009798 <UART_SetConfig+0x274>)
 8009550:	4013      	ands	r3, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	430b      	orrs	r3, r1
 800955a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	430a      	orrs	r2, r1
 8009570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a80      	ldr	r2, [pc, #512]	@ (800979c <UART_SetConfig+0x278>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d120      	bne.n	80095e2 <UART_SetConfig+0xbe>
 80095a0:	4b7f      	ldr	r3, [pc, #508]	@ (80097a0 <UART_SetConfig+0x27c>)
 80095a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d817      	bhi.n	80095dc <UART_SetConfig+0xb8>
 80095ac:	a201      	add	r2, pc, #4	@ (adr r2, 80095b4 <UART_SetConfig+0x90>)
 80095ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b2:	bf00      	nop
 80095b4:	080095c5 	.word	0x080095c5
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	080095d7 	.word	0x080095d7
 80095c0:	080095cb 	.word	0x080095cb
 80095c4:	2301      	movs	r3, #1
 80095c6:	77fb      	strb	r3, [r7, #31]
 80095c8:	e0b5      	b.n	8009736 <UART_SetConfig+0x212>
 80095ca:	2302      	movs	r3, #2
 80095cc:	77fb      	strb	r3, [r7, #31]
 80095ce:	e0b2      	b.n	8009736 <UART_SetConfig+0x212>
 80095d0:	2304      	movs	r3, #4
 80095d2:	77fb      	strb	r3, [r7, #31]
 80095d4:	e0af      	b.n	8009736 <UART_SetConfig+0x212>
 80095d6:	2308      	movs	r3, #8
 80095d8:	77fb      	strb	r3, [r7, #31]
 80095da:	e0ac      	b.n	8009736 <UART_SetConfig+0x212>
 80095dc:	2310      	movs	r3, #16
 80095de:	77fb      	strb	r3, [r7, #31]
 80095e0:	e0a9      	b.n	8009736 <UART_SetConfig+0x212>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a6f      	ldr	r2, [pc, #444]	@ (80097a4 <UART_SetConfig+0x280>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d124      	bne.n	8009636 <UART_SetConfig+0x112>
 80095ec:	4b6c      	ldr	r3, [pc, #432]	@ (80097a0 <UART_SetConfig+0x27c>)
 80095ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80095f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095f8:	d011      	beq.n	800961e <UART_SetConfig+0xfa>
 80095fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095fe:	d817      	bhi.n	8009630 <UART_SetConfig+0x10c>
 8009600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009604:	d011      	beq.n	800962a <UART_SetConfig+0x106>
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800960a:	d811      	bhi.n	8009630 <UART_SetConfig+0x10c>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <UART_SetConfig+0xf4>
 8009610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009614:	d006      	beq.n	8009624 <UART_SetConfig+0x100>
 8009616:	e00b      	b.n	8009630 <UART_SetConfig+0x10c>
 8009618:	2300      	movs	r3, #0
 800961a:	77fb      	strb	r3, [r7, #31]
 800961c:	e08b      	b.n	8009736 <UART_SetConfig+0x212>
 800961e:	2302      	movs	r3, #2
 8009620:	77fb      	strb	r3, [r7, #31]
 8009622:	e088      	b.n	8009736 <UART_SetConfig+0x212>
 8009624:	2304      	movs	r3, #4
 8009626:	77fb      	strb	r3, [r7, #31]
 8009628:	e085      	b.n	8009736 <UART_SetConfig+0x212>
 800962a:	2308      	movs	r3, #8
 800962c:	77fb      	strb	r3, [r7, #31]
 800962e:	e082      	b.n	8009736 <UART_SetConfig+0x212>
 8009630:	2310      	movs	r3, #16
 8009632:	77fb      	strb	r3, [r7, #31]
 8009634:	e07f      	b.n	8009736 <UART_SetConfig+0x212>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a5b      	ldr	r2, [pc, #364]	@ (80097a8 <UART_SetConfig+0x284>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d124      	bne.n	800968a <UART_SetConfig+0x166>
 8009640:	4b57      	ldr	r3, [pc, #348]	@ (80097a0 <UART_SetConfig+0x27c>)
 8009642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009644:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009648:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800964c:	d011      	beq.n	8009672 <UART_SetConfig+0x14e>
 800964e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009652:	d817      	bhi.n	8009684 <UART_SetConfig+0x160>
 8009654:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009658:	d011      	beq.n	800967e <UART_SetConfig+0x15a>
 800965a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800965e:	d811      	bhi.n	8009684 <UART_SetConfig+0x160>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <UART_SetConfig+0x148>
 8009664:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009668:	d006      	beq.n	8009678 <UART_SetConfig+0x154>
 800966a:	e00b      	b.n	8009684 <UART_SetConfig+0x160>
 800966c:	2300      	movs	r3, #0
 800966e:	77fb      	strb	r3, [r7, #31]
 8009670:	e061      	b.n	8009736 <UART_SetConfig+0x212>
 8009672:	2302      	movs	r3, #2
 8009674:	77fb      	strb	r3, [r7, #31]
 8009676:	e05e      	b.n	8009736 <UART_SetConfig+0x212>
 8009678:	2304      	movs	r3, #4
 800967a:	77fb      	strb	r3, [r7, #31]
 800967c:	e05b      	b.n	8009736 <UART_SetConfig+0x212>
 800967e:	2308      	movs	r3, #8
 8009680:	77fb      	strb	r3, [r7, #31]
 8009682:	e058      	b.n	8009736 <UART_SetConfig+0x212>
 8009684:	2310      	movs	r3, #16
 8009686:	77fb      	strb	r3, [r7, #31]
 8009688:	e055      	b.n	8009736 <UART_SetConfig+0x212>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a47      	ldr	r2, [pc, #284]	@ (80097ac <UART_SetConfig+0x288>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d124      	bne.n	80096de <UART_SetConfig+0x1ba>
 8009694:	4b42      	ldr	r3, [pc, #264]	@ (80097a0 <UART_SetConfig+0x27c>)
 8009696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009698:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800969c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096a0:	d011      	beq.n	80096c6 <UART_SetConfig+0x1a2>
 80096a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096a6:	d817      	bhi.n	80096d8 <UART_SetConfig+0x1b4>
 80096a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096ac:	d011      	beq.n	80096d2 <UART_SetConfig+0x1ae>
 80096ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096b2:	d811      	bhi.n	80096d8 <UART_SetConfig+0x1b4>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <UART_SetConfig+0x19c>
 80096b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096bc:	d006      	beq.n	80096cc <UART_SetConfig+0x1a8>
 80096be:	e00b      	b.n	80096d8 <UART_SetConfig+0x1b4>
 80096c0:	2300      	movs	r3, #0
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e037      	b.n	8009736 <UART_SetConfig+0x212>
 80096c6:	2302      	movs	r3, #2
 80096c8:	77fb      	strb	r3, [r7, #31]
 80096ca:	e034      	b.n	8009736 <UART_SetConfig+0x212>
 80096cc:	2304      	movs	r3, #4
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e031      	b.n	8009736 <UART_SetConfig+0x212>
 80096d2:	2308      	movs	r3, #8
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e02e      	b.n	8009736 <UART_SetConfig+0x212>
 80096d8:	2310      	movs	r3, #16
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e02b      	b.n	8009736 <UART_SetConfig+0x212>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a33      	ldr	r2, [pc, #204]	@ (80097b0 <UART_SetConfig+0x28c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d124      	bne.n	8009732 <UART_SetConfig+0x20e>
 80096e8:	4b2d      	ldr	r3, [pc, #180]	@ (80097a0 <UART_SetConfig+0x27c>)
 80096ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80096f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80096f4:	d011      	beq.n	800971a <UART_SetConfig+0x1f6>
 80096f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80096fa:	d817      	bhi.n	800972c <UART_SetConfig+0x208>
 80096fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009700:	d011      	beq.n	8009726 <UART_SetConfig+0x202>
 8009702:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009706:	d811      	bhi.n	800972c <UART_SetConfig+0x208>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <UART_SetConfig+0x1f0>
 800970c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009710:	d006      	beq.n	8009720 <UART_SetConfig+0x1fc>
 8009712:	e00b      	b.n	800972c <UART_SetConfig+0x208>
 8009714:	2300      	movs	r3, #0
 8009716:	77fb      	strb	r3, [r7, #31]
 8009718:	e00d      	b.n	8009736 <UART_SetConfig+0x212>
 800971a:	2302      	movs	r3, #2
 800971c:	77fb      	strb	r3, [r7, #31]
 800971e:	e00a      	b.n	8009736 <UART_SetConfig+0x212>
 8009720:	2304      	movs	r3, #4
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e007      	b.n	8009736 <UART_SetConfig+0x212>
 8009726:	2308      	movs	r3, #8
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e004      	b.n	8009736 <UART_SetConfig+0x212>
 800972c:	2310      	movs	r3, #16
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e001      	b.n	8009736 <UART_SetConfig+0x212>
 8009732:	2310      	movs	r3, #16
 8009734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800973e:	d16b      	bne.n	8009818 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8009740:	7ffb      	ldrb	r3, [r7, #31]
 8009742:	2b08      	cmp	r3, #8
 8009744:	d838      	bhi.n	80097b8 <UART_SetConfig+0x294>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x228>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	080097b9 	.word	0x080097b9
 800975c:	08009787 	.word	0x08009787
 8009760:	080097b9 	.word	0x080097b9
 8009764:	080097b9 	.word	0x080097b9
 8009768:	080097b9 	.word	0x080097b9
 800976c:	0800978f 	.word	0x0800978f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009770:	f7fe f96e 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 8009774:	61b8      	str	r0, [r7, #24]
        break;
 8009776:	e024      	b.n	80097c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009778:	f7fe f98c 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 800977c:	61b8      	str	r0, [r7, #24]
        break;
 800977e:	e020      	b.n	80097c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009780:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <UART_SetConfig+0x290>)
 8009782:	61bb      	str	r3, [r7, #24]
        break;
 8009784:	e01d      	b.n	80097c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009786:	f7fe f8ed 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 800978a:	61b8      	str	r0, [r7, #24]
        break;
 800978c:	e019      	b.n	80097c2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009792:	61bb      	str	r3, [r7, #24]
        break;
 8009794:	e015      	b.n	80097c2 <UART_SetConfig+0x29e>
 8009796:	bf00      	nop
 8009798:	efff69f3 	.word	0xefff69f3
 800979c:	40013800 	.word	0x40013800
 80097a0:	40021000 	.word	0x40021000
 80097a4:	40004400 	.word	0x40004400
 80097a8:	40004800 	.word	0x40004800
 80097ac:	40004c00 	.word	0x40004c00
 80097b0:	40005000 	.word	0x40005000
 80097b4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	77bb      	strb	r3, [r7, #30]
        break;
 80097c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d073      	beq.n	80098b0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	005a      	lsls	r2, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	085b      	lsrs	r3, r3, #1
 80097d2:	441a      	add	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b0f      	cmp	r3, #15
 80097e2:	d916      	bls.n	8009812 <UART_SetConfig+0x2ee>
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ea:	d212      	bcs.n	8009812 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f023 030f 	bic.w	r3, r3, #15
 80097f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	b29a      	uxth	r2, r3
 8009802:	89fb      	ldrh	r3, [r7, #14]
 8009804:	4313      	orrs	r3, r2
 8009806:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	89fa      	ldrh	r2, [r7, #14]
 800980e:	60da      	str	r2, [r3, #12]
 8009810:	e04e      	b.n	80098b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	77bb      	strb	r3, [r7, #30]
 8009816:	e04b      	b.n	80098b0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009818:	7ffb      	ldrb	r3, [r7, #31]
 800981a:	2b08      	cmp	r3, #8
 800981c:	d827      	bhi.n	800986e <UART_SetConfig+0x34a>
 800981e:	a201      	add	r2, pc, #4	@ (adr r2, 8009824 <UART_SetConfig+0x300>)
 8009820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009824:	08009849 	.word	0x08009849
 8009828:	08009851 	.word	0x08009851
 800982c:	08009859 	.word	0x08009859
 8009830:	0800986f 	.word	0x0800986f
 8009834:	0800985f 	.word	0x0800985f
 8009838:	0800986f 	.word	0x0800986f
 800983c:	0800986f 	.word	0x0800986f
 8009840:	0800986f 	.word	0x0800986f
 8009844:	08009867 	.word	0x08009867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009848:	f7fe f902 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800984c:	61b8      	str	r0, [r7, #24]
        break;
 800984e:	e013      	b.n	8009878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009850:	f7fe f920 	bl	8007a94 <HAL_RCC_GetPCLK2Freq>
 8009854:	61b8      	str	r0, [r7, #24]
        break;
 8009856:	e00f      	b.n	8009878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009858:	4b1b      	ldr	r3, [pc, #108]	@ (80098c8 <UART_SetConfig+0x3a4>)
 800985a:	61bb      	str	r3, [r7, #24]
        break;
 800985c:	e00c      	b.n	8009878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800985e:	f7fe f881 	bl	8007964 <HAL_RCC_GetSysClockFreq>
 8009862:	61b8      	str	r0, [r7, #24]
        break;
 8009864:	e008      	b.n	8009878 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800986a:	61bb      	str	r3, [r7, #24]
        break;
 800986c:	e004      	b.n	8009878 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	77bb      	strb	r3, [r7, #30]
        break;
 8009876:	bf00      	nop
    }

    if (pclk != 0U)
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d018      	beq.n	80098b0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	085a      	lsrs	r2, r3, #1
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	441a      	add	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b0f      	cmp	r3, #15
 8009896:	d909      	bls.n	80098ac <UART_SetConfig+0x388>
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800989e:	d205      	bcs.n	80098ac <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60da      	str	r2, [r3, #12]
 80098aa:	e001      	b.n	80098b0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80098bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	007a1200 	.word	0x007a1200

080098cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00a      	beq.n	80098f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	430a      	orrs	r2, r1
 80098f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00a      	beq.n	800993a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00a      	beq.n	800997e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01a      	beq.n	80099e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ca:	d10a      	bne.n	80099e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
  }
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b098      	sub	sp, #96	@ 0x60
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a20:	f7fc f98a 	bl	8005d38 <HAL_GetTick>
 8009a24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0308 	and.w	r3, r3, #8
 8009a30:	2b08      	cmp	r3, #8
 8009a32:	d12e      	bne.n	8009a92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f88c 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d021      	beq.n	8009a92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a56:	e853 3f00 	ldrex	r3, [r3]
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e6      	bne.n	8009a4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e062      	b.n	8009b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0304 	and.w	r3, r3, #4
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d149      	bne.n	8009b34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f856 	bl	8009b60 <UART_WaitOnFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d03c      	beq.n	8009b34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e6      	bne.n	8009aba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3308      	adds	r3, #8
 8009af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	e853 3f00 	ldrex	r3, [r3]
 8009afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 0301 	bic.w	r3, r3, #1
 8009b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3308      	adds	r3, #8
 8009b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b0c:	61fa      	str	r2, [r7, #28]
 8009b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b10:	69b9      	ldr	r1, [r7, #24]
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	e841 2300 	strex	r3, r2, [r1]
 8009b18:	617b      	str	r3, [r7, #20]
   return(result);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e5      	bne.n	8009aec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e011      	b.n	8009b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2220      	movs	r2, #32
 8009b38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3758      	adds	r7, #88	@ 0x58
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b70:	e049      	b.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d045      	beq.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b7a:	f7fc f8dd 	bl	8005d38 <HAL_GetTick>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	69ba      	ldr	r2, [r7, #24]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d302      	bcc.n	8009b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e048      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d031      	beq.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d110      	bne.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 f8ff 	bl	8009dbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e029      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009be0:	d111      	bne.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 f8e5 	bl	8009dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e00f      	b.n	8009c26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69da      	ldr	r2, [r3, #28]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	bf0c      	ite	eq
 8009c16:	2301      	moveq	r3, #1
 8009c18:	2300      	movne	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d0a6      	beq.n	8009b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b097      	sub	sp, #92	@ 0x5c
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	88fa      	ldrh	r2, [r7, #6]
 8009c48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	88fa      	ldrh	r2, [r7, #6]
 8009c50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c62:	d10e      	bne.n	8009c82 <UART_Start_Receive_IT+0x52>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d105      	bne.n	8009c78 <UART_Start_Receive_IT+0x48>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009c72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009c76:	e02d      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	22ff      	movs	r2, #255	@ 0xff
 8009c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009c80:	e028      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10d      	bne.n	8009ca6 <UART_Start_Receive_IT+0x76>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <UART_Start_Receive_IT+0x6c>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	22ff      	movs	r2, #255	@ 0xff
 8009c96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009c9a:	e01b      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	227f      	movs	r2, #127	@ 0x7f
 8009ca0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009ca4:	e016      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cae:	d10d      	bne.n	8009ccc <UART_Start_Receive_IT+0x9c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d104      	bne.n	8009cc2 <UART_Start_Receive_IT+0x92>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	227f      	movs	r2, #127	@ 0x7f
 8009cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009cc0:	e008      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	223f      	movs	r2, #63	@ 0x3f
 8009cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009cca:	e003      	b.n	8009cd4 <UART_Start_Receive_IT+0xa4>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2222      	movs	r2, #34	@ 0x22
 8009ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3308      	adds	r3, #8
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009d06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e5      	bne.n	8009ce4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d20:	d107      	bne.n	8009d32 <UART_Start_Receive_IT+0x102>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4a21      	ldr	r2, [pc, #132]	@ (8009db4 <UART_Start_Receive_IT+0x184>)
 8009d2e:	669a      	str	r2, [r3, #104]	@ 0x68
 8009d30:	e002      	b.n	8009d38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	4a20      	ldr	r2, [pc, #128]	@ (8009db8 <UART_Start_Receive_IT+0x188>)
 8009d36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d019      	beq.n	8009d74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e6      	bne.n	8009d40 <UART_Start_Receive_IT+0x110>
 8009d72:	e018      	b.n	8009da6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	613b      	str	r3, [r7, #16]
   return(result);
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f043 0320 	orr.w	r3, r3, #32
 8009d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	69f9      	ldr	r1, [r7, #28]
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e6      	bne.n	8009d74 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	375c      	adds	r7, #92	@ 0x5c
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	0800a0ad 	.word	0x0800a0ad
 8009db8:	08009f05 	.word	0x08009f05

08009dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b095      	sub	sp, #84	@ 0x54
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009de2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009de4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009de8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e6      	bne.n	8009dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	f023 0301 	bic.w	r3, r3, #1
 8009e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d118      	bne.n	8009e64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	e853 3f00 	ldrex	r3, [r3]
 8009e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f023 0310 	bic.w	r3, r3, #16
 8009e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e6      	bne.n	8009e32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009e78:	bf00      	nop
 8009e7a:	3754      	adds	r7, #84	@ 0x54
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff fb34 	bl	8009510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	61bb      	str	r3, [r7, #24]
 8009ed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e6      	bne.n	8009eb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff faf6 	bl	80094e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009efc:	bf00      	nop
 8009efe:	3720      	adds	r7, #32
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b09c      	sub	sp, #112	@ 0x70
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f1c:	2b22      	cmp	r3, #34	@ 0x22
 8009f1e:	f040 80b9 	bne.w	800a094 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009f28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009f30:	b2d9      	uxtb	r1, r3
 8009f32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3c:	400a      	ands	r2, r1
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f040 809c 	bne.w	800a0a4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e6      	bne.n	8009f6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3308      	adds	r3, #8
 8009fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3308      	adds	r3, #8
 8009fbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009fbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e5      	bne.n	8009f9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d018      	beq.n	800a026 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	623b      	str	r3, [r7, #32]
   return(result);
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a008:	663b      	str	r3, [r7, #96]	@ 0x60
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a012:	633b      	str	r3, [r7, #48]	@ 0x30
 800a014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e6      	bne.n	8009ff4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d12e      	bne.n	800a08c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	60fb      	str	r3, [r7, #12]
   return(result);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f023 0310 	bic.w	r3, r3, #16
 800a048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a052:	61fb      	str	r3, [r7, #28]
 800a054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	69b9      	ldr	r1, [r7, #24]
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	617b      	str	r3, [r7, #20]
   return(result);
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e6      	bne.n	800a034 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b10      	cmp	r3, #16
 800a072:	d103      	bne.n	800a07c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2210      	movs	r2, #16
 800a07a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7fb fba9 	bl	80057dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a08a:	e00b      	b.n	800a0a4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fa35 	bl	80094fc <HAL_UART_RxCpltCallback>
}
 800a092:	e007      	b.n	800a0a4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f042 0208 	orr.w	r2, r2, #8
 800a0a2:	619a      	str	r2, [r3, #24]
}
 800a0a4:	bf00      	nop
 800a0a6:	3770      	adds	r7, #112	@ 0x70
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b09c      	sub	sp, #112	@ 0x70
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c4:	2b22      	cmp	r3, #34	@ 0x22
 800a0c6:	f040 80b9 	bne.w	800a23c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a0d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a0de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ee:	1c9a      	adds	r2, r3, #2
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f040 809c 	bne.w	800a24c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a128:	667b      	str	r3, [r7, #100]	@ 0x64
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a132:	657b      	str	r3, [r7, #84]	@ 0x54
 800a134:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a138:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e6      	bne.n	800a114 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a150:	e853 3f00 	ldrex	r3, [r3]
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a166:	643a      	str	r2, [r7, #64]	@ 0x40
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a16c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a16e:	e841 2300 	strex	r3, r2, [r1]
 800a172:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e5      	bne.n	800a146 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d018      	beq.n	800a1ce <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1bc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e6      	bne.n	800a19c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d12e      	bne.n	800a234 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f023 0310 	bic.w	r3, r3, #16
 800a1f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1fa:	61bb      	str	r3, [r7, #24]
 800a1fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6979      	ldr	r1, [r7, #20]
 800a200:	69ba      	ldr	r2, [r7, #24]
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	613b      	str	r3, [r7, #16]
   return(result);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e6      	bne.n	800a1dc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	f003 0310 	and.w	r3, r3, #16
 800a218:	2b10      	cmp	r3, #16
 800a21a:	d103      	bne.n	800a224 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2210      	movs	r2, #16
 800a222:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7fb fad5 	bl	80057dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a232:	e00b      	b.n	800a24c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff f961 	bl	80094fc <HAL_UART_RxCpltCallback>
}
 800a23a:	e007      	b.n	800a24c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0208 	orr.w	r2, r2, #8
 800a24a:	619a      	str	r2, [r3, #24]
}
 800a24c:	bf00      	nop
 800a24e:	3770      	adds	r7, #112	@ 0x70
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	@ 0x30
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4613      	mov	r3, r2
 800a274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d142      	bne.n	800a306 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e03b      	b.n	800a308 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2201      	movs	r2, #1
 800a294:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff fcc4 	bl	8009c30 <UART_Start_Receive_IT>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d124      	bne.n	800a300 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d11d      	bne.n	800a2fa <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2210      	movs	r2, #16
 800a2c4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f043 0310 	orr.w	r3, r3, #16
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	6a39      	ldr	r1, [r7, #32]
 800a2ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e6      	bne.n	800a2c6 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 800a2f8:	e002      	b.n	800a300 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a304:	e000      	b.n	800a308 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a306:	2302      	movs	r3, #2
  }
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3730      	adds	r7, #48	@ 0x30
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <memset>:
 800a310:	4402      	add	r2, r0
 800a312:	4603      	mov	r3, r0
 800a314:	4293      	cmp	r3, r2
 800a316:	d100      	bne.n	800a31a <memset+0xa>
 800a318:	4770      	bx	lr
 800a31a:	f803 1b01 	strb.w	r1, [r3], #1
 800a31e:	e7f9      	b.n	800a314 <memset+0x4>

0800a320 <__libc_init_array>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4d0d      	ldr	r5, [pc, #52]	@ (800a358 <__libc_init_array+0x38>)
 800a324:	4c0d      	ldr	r4, [pc, #52]	@ (800a35c <__libc_init_array+0x3c>)
 800a326:	1b64      	subs	r4, r4, r5
 800a328:	10a4      	asrs	r4, r4, #2
 800a32a:	2600      	movs	r6, #0
 800a32c:	42a6      	cmp	r6, r4
 800a32e:	d109      	bne.n	800a344 <__libc_init_array+0x24>
 800a330:	4d0b      	ldr	r5, [pc, #44]	@ (800a360 <__libc_init_array+0x40>)
 800a332:	4c0c      	ldr	r4, [pc, #48]	@ (800a364 <__libc_init_array+0x44>)
 800a334:	f000 f818 	bl	800a368 <_init>
 800a338:	1b64      	subs	r4, r4, r5
 800a33a:	10a4      	asrs	r4, r4, #2
 800a33c:	2600      	movs	r6, #0
 800a33e:	42a6      	cmp	r6, r4
 800a340:	d105      	bne.n	800a34e <__libc_init_array+0x2e>
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	f855 3b04 	ldr.w	r3, [r5], #4
 800a348:	4798      	blx	r3
 800a34a:	3601      	adds	r6, #1
 800a34c:	e7ee      	b.n	800a32c <__libc_init_array+0xc>
 800a34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a352:	4798      	blx	r3
 800a354:	3601      	adds	r6, #1
 800a356:	e7f2      	b.n	800a33e <__libc_init_array+0x1e>
 800a358:	0800a3bc 	.word	0x0800a3bc
 800a35c:	0800a3bc 	.word	0x0800a3bc
 800a360:	0800a3bc 	.word	0x0800a3bc
 800a364:	0800a3c0 	.word	0x0800a3c0

0800a368 <_init>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr

0800a374 <_fini>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr
