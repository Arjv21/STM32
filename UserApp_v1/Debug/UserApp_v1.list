
UserApp_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  08005194  08005194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800a380  0800a380  00006380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3bc  0800a3bc  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  0800a3c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000001c  0800a3e0  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800a3e0  00007344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcea  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  00014d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00017340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb86  00000000  00000000  00018587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc06  00000000  00000000  0003710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b456d  00000000  00000000  00046d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb280  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002864  00000000  00000000  000fb2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fdb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005194 <__do_global_dtors_aux>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4c05      	ldr	r4, [pc, #20]	@ (80051ac <__do_global_dtors_aux+0x18>)
 8005198:	7823      	ldrb	r3, [r4, #0]
 800519a:	b933      	cbnz	r3, 80051aa <__do_global_dtors_aux+0x16>
 800519c:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <__do_global_dtors_aux+0x1c>)
 800519e:	b113      	cbz	r3, 80051a6 <__do_global_dtors_aux+0x12>
 80051a0:	4804      	ldr	r0, [pc, #16]	@ (80051b4 <__do_global_dtors_aux+0x20>)
 80051a2:	f3af 8000 	nop.w
 80051a6:	2301      	movs	r3, #1
 80051a8:	7023      	strb	r3, [r4, #0]
 80051aa:	bd10      	pop	{r4, pc}
 80051ac:	2000001c 	.word	0x2000001c
 80051b0:	00000000 	.word	0x00000000
 80051b4:	0800a368 	.word	0x0800a368

080051b8 <frame_dummy>:
 80051b8:	b508      	push	{r3, lr}
 80051ba:	4b03      	ldr	r3, [pc, #12]	@ (80051c8 <frame_dummy+0x10>)
 80051bc:	b11b      	cbz	r3, 80051c6 <frame_dummy+0xe>
 80051be:	4903      	ldr	r1, [pc, #12]	@ (80051cc <frame_dummy+0x14>)
 80051c0:	4803      	ldr	r0, [pc, #12]	@ (80051d0 <frame_dummy+0x18>)
 80051c2:	f3af 8000 	nop.w
 80051c6:	bd08      	pop	{r3, pc}
 80051c8:	00000000 	.word	0x00000000
 80051cc:	20000020 	.word	0x20000020
 80051d0:	0800a368 	.word	0x0800a368

080051d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051da:	f107 0314 	add.w	r3, r7, #20
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ea:	4b39      	ldr	r3, [pc, #228]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	4a38      	ldr	r2, [pc, #224]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051f4:	6153      	str	r3, [r2, #20]
 80051f6:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005202:	4b33      	ldr	r3, [pc, #204]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4a32      	ldr	r2, [pc, #200]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6153      	str	r3, [r2, #20]
 800520e:	4b30      	ldr	r3, [pc, #192]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800521a:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	4a2c      	ldr	r2, [pc, #176]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005220:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005224:	6153      	str	r3, [r2, #20]
 8005226:	4b2a      	ldr	r3, [pc, #168]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005232:	4b27      	ldr	r3, [pc, #156]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	4a26      	ldr	r2, [pc, #152]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005238:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800523c:	6153      	str	r3, [r2, #20]
 800523e:	4b24      	ldr	r3, [pc, #144]	@ (80052d0 <MX_GPIO_Init+0xfc>)
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005246:	607b      	str	r3, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Green_Pin|F_WP_Pin, GPIO_PIN_RESET);
 800524a:	2200      	movs	r2, #0
 800524c:	f241 0108 	movw	r1, #4104	@ 0x1008
 8005250:	4820      	ldr	r0, [pc, #128]	@ (80052d4 <MX_GPIO_Init+0x100>)
 8005252:	f000 ff4d 	bl	80060f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800525c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005260:	f000 ff46 	bl	80060f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8005264:	2200      	movs	r2, #0
 8005266:	2104      	movs	r1, #4
 8005268:	481b      	ldr	r0, [pc, #108]	@ (80052d8 <MX_GPIO_Init+0x104>)
 800526a:	f000 ff41 	bl	80060f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led_Green_Pin|F_WP_Pin;
 800526e:	f241 0308 	movw	r3, #4104	@ 0x1008
 8005272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005274:	2301      	movs	r3, #1
 8005276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005280:	f107 0314 	add.w	r3, r7, #20
 8005284:	4619      	mov	r1, r3
 8005286:	4813      	ldr	r0, [pc, #76]	@ (80052d4 <MX_GPIO_Init+0x100>)
 8005288:	f000 fcbc 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 800528c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005292:	2301      	movs	r3, #1
 8005294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	4619      	mov	r1, r3
 80052a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052a8:	f000 fcac 	bl	8005c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 80052ac:	2304      	movs	r3, #4
 80052ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 80052bc:	f107 0314 	add.w	r3, r7, #20
 80052c0:	4619      	mov	r1, r3
 80052c2:	4805      	ldr	r0, [pc, #20]	@ (80052d8 <MX_GPIO_Init+0x104>)
 80052c4:	f000 fc9e 	bl	8005c04 <HAL_GPIO_Init>

}
 80052c8:	bf00      	nop
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	48000400 	.word	0x48000400
 80052d8:	48000c00 	.word	0x48000c00

080052dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052e0:	f000 fa7e 	bl	80057e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052e4:	f000 f846 	bl	8005374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052e8:	f7ff ff74 	bl	80051d4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80052ec:	f000 f8c0 	bl	8005470 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80052f0:	f000 f9d2 	bl	8005698 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  extFlashHardReset();
 80052f4:	f004 fe08 	bl	8009f08 <extFlashHardReset>
  HAL_Delay(1);
 80052f8:	2001      	movs	r0, #1
 80052fa:	f000 fad7 	bl	80058ac <HAL_Delay>
  extFlashSendCommand(ENABLE_RESET);
 80052fe:	2066      	movs	r0, #102	@ 0x66
 8005300:	f004 fe6c 	bl	8009fdc <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 8005304:	2099      	movs	r0, #153	@ 0x99
 8005306:	f004 fe69 	bl	8009fdc <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 800530a:	2098      	movs	r0, #152	@ 0x98
 800530c:	f004 fe66 	bl	8009fdc <extFlashSendCommand>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, uartRxData, 512);
 8005310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005314:	4912      	ldr	r1, [pc, #72]	@ (8005360 <main+0x84>)
 8005316:	4813      	ldr	r0, [pc, #76]	@ (8005364 <main+0x88>)
 8005318:	f004 fd54 	bl	8009dc4 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(packetReceived){
 800531c:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <main+0x8c>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <main+0x5a>
		  packetReceived = 0;
 8005324:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <main+0x8c>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
		  processPacketTest(uartRxData, receivedPacketSize);
 800532a:	4b10      	ldr	r3, [pc, #64]	@ (800536c <main+0x90>)
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	480b      	ldr	r0, [pc, #44]	@ (8005360 <main+0x84>)
 8005332:	f004 ff8b 	bl	800a24c <processPacketTest>
	  }
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_SET);
 8005336:	2201      	movs	r2, #1
 8005338:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800533c:	480c      	ldr	r0, [pc, #48]	@ (8005370 <main+0x94>)
 800533e:	f000 fed7 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8005342:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005346:	f000 fab1 	bl	80058ac <HAL_Delay>
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_RESET);
 800534a:	2200      	movs	r2, #0
 800534c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005350:	4807      	ldr	r0, [pc, #28]	@ (8005370 <main+0x94>)
 8005352:	f000 fecd 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8005356:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800535a:	f000 faa7 	bl	80058ac <HAL_Delay>
	  if(packetReceived){
 800535e:	e7dd      	b.n	800531c <main+0x40>
 8005360:	2000003c 	.word	0x2000003c
 8005364:	200001b0 	.word	0x200001b0
 8005368:	2000014a 	.word	0x2000014a
 800536c:	20000038 	.word	0x20000038
 8005370:	48000400 	.word	0x48000400

08005374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b0a2      	sub	sp, #136	@ 0x88
 8005378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800537a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800537e:	2228      	movs	r2, #40	@ 0x28
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f004 ffc4 	bl	800a310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005388:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005398:	463b      	mov	r3, r7
 800539a:	224c      	movs	r2, #76	@ 0x4c
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f004 ffb6 	bl	800a310 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053a4:	2302      	movs	r3, #2
 80053a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053a8:	2301      	movs	r3, #1
 80053aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053ac:	2310      	movs	r3, #16
 80053ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053b0:	2302      	movs	r3, #2
 80053b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80053ba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80053be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053c8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fea7 	bl	8006120 <HAL_RCC_OscConfig>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80053d8:	f000 f844 	bl	8005464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053dc:	230f      	movs	r3, #15
 80053de:	64fb      	str	r3, [r7, #76]	@ 0x4c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053e0:	2302      	movs	r3, #2
 80053e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053e4:	2300      	movs	r3, #0
 80053e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053e8:	2300      	movs	r3, #0
 80053ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053ec:	2300      	movs	r3, #0
 80053ee:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80053f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fee6 	bl	80071c8 <HAL_RCC_ClockConfig>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005402:	f000 f82f 	bl	8005464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005406:	2302      	movs	r3, #2
 8005408:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800540e:	463b      	mov	r3, r7
 8005410:	4618      	mov	r0, r3
 8005412:	f002 f90f 	bl	8007634 <HAL_RCCEx_PeriphCLKConfig>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800541c:	f000 f822 	bl	8005464 <Error_Handler>
  }
}
 8005420:	bf00      	nop
 8005422:	3788      	adds	r7, #136	@ 0x88
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
	packetReceived = 1;
 8005434:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <HAL_UARTEx_RxEventCallback+0x2c>)
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
	receivedPacketSize = Size;
 800543a:	4a07      	ldr	r2, [pc, #28]	@ (8005458 <HAL_UARTEx_RxEventCallback+0x30>)
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	8013      	strh	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, uartRxData, 512);
 8005440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005444:	4905      	ldr	r1, [pc, #20]	@ (800545c <HAL_UARTEx_RxEventCallback+0x34>)
 8005446:	4806      	ldr	r0, [pc, #24]	@ (8005460 <HAL_UARTEx_RxEventCallback+0x38>)
 8005448:	f004 fcbc 	bl	8009dc4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	2000014a 	.word	0x2000014a
 8005458:	20000038 	.word	0x20000038
 800545c:	2000003c 	.word	0x2000003c
 8005460:	200001b0 	.word	0x200001b0

08005464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005468:	b672      	cpsid	i
}
 800546a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <Error_Handler+0x8>

08005470 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <MX_SPI3_Init+0x74>)
 8005476:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <MX_SPI3_Init+0x78>)
 8005478:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <MX_SPI3_Init+0x74>)
 800547c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005480:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005482:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <MX_SPI3_Init+0x74>)
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005488:	4b16      	ldr	r3, [pc, #88]	@ (80054e4 <MX_SPI3_Init+0x74>)
 800548a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800548e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005490:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <MX_SPI3_Init+0x74>)
 8005492:	2200      	movs	r2, #0
 8005494:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005496:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <MX_SPI3_Init+0x74>)
 8005498:	2200      	movs	r2, #0
 800549a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800549c:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <MX_SPI3_Init+0x74>)
 800549e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054a6:	2218      	movs	r2, #24
 80054a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054aa:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b6:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80054bc:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054be:	2207      	movs	r2, #7
 80054c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80054c2:	4b08      	ldr	r3, [pc, #32]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80054c8:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80054ce:	4805      	ldr	r0, [pc, #20]	@ (80054e4 <MX_SPI3_Init+0x74>)
 80054d0:	f002 fa9c 	bl	8007a0c <HAL_SPI_Init>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80054da:	f7ff ffc3 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2000014c 	.word	0x2000014c
 80054e8:	40003c00 	.word	0x40003c00

080054ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 0314 	add.w	r3, r7, #20
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a17      	ldr	r2, [pc, #92]	@ (8005568 <HAL_SPI_MspInit+0x7c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d128      	bne.n	8005560 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800550e:	4b17      	ldr	r3, [pc, #92]	@ (800556c <HAL_SPI_MspInit+0x80>)
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4a16      	ldr	r2, [pc, #88]	@ (800556c <HAL_SPI_MspInit+0x80>)
 8005514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005518:	61d3      	str	r3, [r2, #28]
 800551a:	4b14      	ldr	r3, [pc, #80]	@ (800556c <HAL_SPI_MspInit+0x80>)
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005526:	4b11      	ldr	r3, [pc, #68]	@ (800556c <HAL_SPI_MspInit+0x80>)
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4a10      	ldr	r2, [pc, #64]	@ (800556c <HAL_SPI_MspInit+0x80>)
 800552c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005530:	6153      	str	r3, [r2, #20]
 8005532:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <HAL_SPI_MspInit+0x80>)
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800553e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800554c:	2303      	movs	r3, #3
 800554e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005550:	2306      	movs	r3, #6
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	4619      	mov	r1, r3
 800555a:	4805      	ldr	r0, [pc, #20]	@ (8005570 <HAL_SPI_MspInit+0x84>)
 800555c:	f000 fb52 	bl	8005c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005560:	bf00      	nop
 8005562:	3728      	adds	r7, #40	@ 0x28
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40003c00 	.word	0x40003c00
 800556c:	40021000 	.word	0x40021000
 8005570:	48000800 	.word	0x48000800

08005574 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a08      	ldr	r2, [pc, #32]	@ (80055a4 <HAL_SPI_MspDeInit+0x30>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d10a      	bne.n	800559c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005586:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <HAL_SPI_MspDeInit+0x34>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4a07      	ldr	r2, [pc, #28]	@ (80055a8 <HAL_SPI_MspDeInit+0x34>)
 800558c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005590:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005592:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8005596:	4805      	ldr	r0, [pc, #20]	@ (80055ac <HAL_SPI_MspDeInit+0x38>)
 8005598:	f000 fcbe 	bl	8005f18 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40003c00 	.word	0x40003c00
 80055a8:	40021000 	.word	0x40021000
 80055ac:	48000800 	.word	0x48000800

080055b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b6:	4b0f      	ldr	r3, [pc, #60]	@ (80055f4 <HAL_MspInit+0x44>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <HAL_MspInit+0x44>)
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	6193      	str	r3, [r2, #24]
 80055c2:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <HAL_MspInit+0x44>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_MspInit+0x44>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_MspInit+0x44>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	61d3      	str	r3, [r2, #28]
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_MspInit+0x44>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000

080055f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <NMI_Handler+0x4>

08005600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <HardFault_Handler+0x4>

08005608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <MemManage_Handler+0x4>

08005610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <UsageFault_Handler+0x4>

08005620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562e:	b480      	push	{r7}
 8005630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800564e:	f000 f90d 	bl	800586c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800565c:	4802      	ldr	r0, [pc, #8]	@ (8005668 <USART2_IRQHandler+0x10>)
 800565e:	f003 fa0b 	bl	8008a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200001b0 	.word	0x200001b0

0800566c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005670:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <SystemInit+0x24>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	4a06      	ldr	r2, [pc, #24]	@ (8005690 <SystemInit+0x24>)
 8005678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800567c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8005680:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <SystemInit+0x24>)
 8005682:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <SystemInit+0x28>)
 8005684:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005686:	bf00      	nop
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	e000ed00 	.word	0xe000ed00
 8005694:	08005000 	.word	0x08005000

08005698 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800569c:	4b14      	ldr	r3, [pc, #80]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 800569e:	4a15      	ldr	r2, [pc, #84]	@ (80056f4 <MX_USART2_UART_Init+0x5c>)
 80056a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80056a2:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056aa:	4b11      	ldr	r3, [pc, #68]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056b0:	4b0f      	ldr	r3, [pc, #60]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056b6:	4b0e      	ldr	r3, [pc, #56]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056bc:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056be:	220c      	movs	r2, #12
 80056c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056c8:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056d4:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056da:	4805      	ldr	r0, [pc, #20]	@ (80056f0 <MX_USART2_UART_Init+0x58>)
 80056dc:	f003 f8f4 	bl	80088c8 <HAL_UART_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80056e6:	f7ff febd 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200001b0 	.word	0x200001b0
 80056f4:	40004400 	.word	0x40004400

080056f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005700:	f107 0314 	add.w	r3, r7, #20
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1b      	ldr	r2, [pc, #108]	@ (8005784 <HAL_UART_MspInit+0x8c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d130      	bne.n	800577c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800571a:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <HAL_UART_MspInit+0x90>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <HAL_UART_MspInit+0x90>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005724:	61d3      	str	r3, [r2, #28]
 8005726:	4b18      	ldr	r3, [pc, #96]	@ (8005788 <HAL_UART_MspInit+0x90>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005732:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <HAL_UART_MspInit+0x90>)
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	4a14      	ldr	r2, [pc, #80]	@ (8005788 <HAL_UART_MspInit+0x90>)
 8005738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573c:	6153      	str	r3, [r2, #20]
 800573e:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <HAL_UART_MspInit+0x90>)
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800574a:	230c      	movs	r3, #12
 800574c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574e:	2302      	movs	r3, #2
 8005750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005756:	2303      	movs	r3, #3
 8005758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800575a:	2307      	movs	r3, #7
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	4619      	mov	r1, r3
 8005764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005768:	f000 fa4c 	bl	8005c04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800576c:	2200      	movs	r2, #0
 800576e:	2100      	movs	r1, #0
 8005770:	2026      	movs	r0, #38	@ 0x26
 8005772:	f000 f99a 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005776:	2026      	movs	r0, #38	@ 0x26
 8005778:	f000 f9b3 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800577c:	bf00      	nop
 800577e:	3728      	adds	r7, #40	@ 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40004400 	.word	0x40004400
 8005788:	40021000 	.word	0x40021000

0800578c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800578c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005790:	f7ff ff6c 	bl	800566c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005794:	480c      	ldr	r0, [pc, #48]	@ (80057c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005796:	490d      	ldr	r1, [pc, #52]	@ (80057cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005798:	4a0d      	ldr	r2, [pc, #52]	@ (80057d0 <LoopForever+0xe>)
  movs r3, #0
 800579a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800579c:	e002      	b.n	80057a4 <LoopCopyDataInit>

0800579e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800579e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057a2:	3304      	adds	r3, #4

080057a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057a8:	d3f9      	bcc.n	800579e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057aa:	4a0a      	ldr	r2, [pc, #40]	@ (80057d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80057ac:	4c0a      	ldr	r4, [pc, #40]	@ (80057d8 <LoopForever+0x16>)
  movs r3, #0
 80057ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057b0:	e001      	b.n	80057b6 <LoopFillZerobss>

080057b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057b4:	3204      	adds	r2, #4

080057b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057b8:	d3fb      	bcc.n	80057b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057ba:	f004 fdb1 	bl	800a320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057be:	f7ff fd8d 	bl	80052dc <main>

080057c2 <LoopForever>:

LoopForever:
    b LoopForever
 80057c2:	e7fe      	b.n	80057c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80057c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80057c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80057d0:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 80057d4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80057d8:	20000344 	.word	0x20000344

080057dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80057dc:	e7fe      	b.n	80057dc <ADC1_2_IRQHandler>
	...

080057e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_Init+0x28>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a07      	ldr	r2, [pc, #28]	@ (8005808 <HAL_Init+0x28>)
 80057ea:	f043 0310 	orr.w	r3, r3, #16
 80057ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057f0:	2003      	movs	r0, #3
 80057f2:	f000 f94f 	bl	8005a94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057f6:	200f      	movs	r0, #15
 80057f8:	f000 f808 	bl	800580c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057fc:	f7ff fed8 	bl	80055b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40022000 	.word	0x40022000

0800580c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005814:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <HAL_InitTick+0x54>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b12      	ldr	r3, [pc, #72]	@ (8005864 <HAL_InitTick+0x58>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	4619      	mov	r1, r3
 800581e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005822:	fbb3 f3f1 	udiv	r3, r3, r1
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f967 	bl	8005afe <HAL_SYSTICK_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e00e      	b.n	8005858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d80a      	bhi.n	8005856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005840:	2200      	movs	r2, #0
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	f000 f92f 	bl	8005aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800584c:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <HAL_InitTick+0x5c>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e000      	b.n	8005858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000000 	.word	0x20000000
 8005864:	20000008 	.word	0x20000008
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_IncTick+0x20>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_IncTick+0x24>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4413      	add	r3, r2
 800587c:	4a04      	ldr	r2, [pc, #16]	@ (8005890 <HAL_IncTick+0x24>)
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000008 	.word	0x20000008
 8005890:	20000238 	.word	0x20000238

08005894 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return uwTick;  
 8005898:	4b03      	ldr	r3, [pc, #12]	@ (80058a8 <HAL_GetTick+0x14>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000238 	.word	0x20000238

080058ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058b4:	f7ff ffee 	bl	8005894 <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d005      	beq.n	80058d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058c6:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <HAL_Delay+0x44>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80058d2:	bf00      	nop
 80058d4:	f7ff ffde 	bl	8005894 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d8f7      	bhi.n	80058d4 <HAL_Delay+0x28>
  {
  }
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000008 	.word	0x20000008

080058f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005904:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800591c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005926:	4a04      	ldr	r2, [pc, #16]	@ (8005938 <__NVIC_SetPriorityGrouping+0x44>)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	60d3      	str	r3, [r2, #12]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005940:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <__NVIC_GetPriorityGrouping+0x18>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	0a1b      	lsrs	r3, r3, #8
 8005946:	f003 0307 	and.w	r3, r3, #7
}
 800594a:	4618      	mov	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db0b      	blt.n	8005982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f003 021f 	and.w	r2, r3, #31
 8005970:	4907      	ldr	r1, [pc, #28]	@ (8005990 <__NVIC_EnableIRQ+0x38>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2001      	movs	r0, #1
 800597a:	fa00 f202 	lsl.w	r2, r0, r2
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	e000e100 	.word	0xe000e100

08005994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	@ (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	@ (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	@ 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	bf28      	it	cs
 8005a06:	2304      	movcs	r3, #4
 8005a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d902      	bls.n	8005a18 <NVIC_EncodePriority+0x30>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3b03      	subs	r3, #3
 8005a16:	e000      	b.n	8005a1a <NVIC_EncodePriority+0x32>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	43d9      	mvns	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	4313      	orrs	r3, r2
         );
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3724      	adds	r7, #36	@ 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a60:	d301      	bcc.n	8005a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00f      	b.n	8005a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a66:	4a0a      	ldr	r2, [pc, #40]	@ (8005a90 <SysTick_Config+0x40>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a6e:	210f      	movs	r1, #15
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	f7ff ff8e 	bl	8005994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <SysTick_Config+0x40>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a7e:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <SysTick_Config+0x40>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	e000e010 	.word	0xe000e010

08005a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff29 	bl	80058f4 <__NVIC_SetPriorityGrouping>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005abc:	f7ff ff3e 	bl	800593c <__NVIC_GetPriorityGrouping>
 8005ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	6978      	ldr	r0, [r7, #20]
 8005ac8:	f7ff ff8e 	bl	80059e8 <NVIC_EncodePriority>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff5d 	bl	8005994 <__NVIC_SetPriority>
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	4603      	mov	r3, r0
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff31 	bl	8005958 <__NVIC_EnableIRQ>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff ffa2 	bl	8005a50 <SysTick_Config>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d008      	beq.n	8005b3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e020      	b.n	8005b7c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 020e 	bic.w	r2, r2, #14
 8005b48:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2101      	movs	r1, #1
 8005b64:	fa01 f202 	lsl.w	r2, r1, r2
 8005b68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d005      	beq.n	8005baa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e027      	b.n	8005bfa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 020e 	bic.w	r2, r2, #14
 8005bb8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
    } 
  }
  return status;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c12:	e160      	b.n	8005ed6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	2101      	movs	r1, #1
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8152 	beq.w	8005ed0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d005      	beq.n	8005c44 <HAL_GPIO_Init+0x40>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d130      	bne.n	8005ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	2203      	movs	r2, #3
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	43db      	mvns	r3, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4013      	ands	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0201 	and.w	r2, r3, #1
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d017      	beq.n	8005ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d123      	bne.n	8005d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	08da      	lsrs	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3208      	adds	r2, #8
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	220f      	movs	r2, #15
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	08da      	lsrs	r2, r3, #3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3208      	adds	r2, #8
 8005d30:	6939      	ldr	r1, [r7, #16]
 8005d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	2203      	movs	r2, #3
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f003 0203 	and.w	r2, r3, #3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80ac 	beq.w	8005ed0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d78:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef4 <HAL_GPIO_Init+0x2f0>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef4 <HAL_GPIO_Init+0x2f0>)
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	6193      	str	r3, [r2, #24]
 8005d84:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef4 <HAL_GPIO_Init+0x2f0>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d90:	4a59      	ldr	r2, [pc, #356]	@ (8005ef8 <HAL_GPIO_Init+0x2f4>)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	089b      	lsrs	r3, r3, #2
 8005d96:	3302      	adds	r3, #2
 8005d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	220f      	movs	r2, #15
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005dba:	d025      	beq.n	8005e08 <HAL_GPIO_Init+0x204>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a4f      	ldr	r2, [pc, #316]	@ (8005efc <HAL_GPIO_Init+0x2f8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d01f      	beq.n	8005e04 <HAL_GPIO_Init+0x200>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a4e      	ldr	r2, [pc, #312]	@ (8005f00 <HAL_GPIO_Init+0x2fc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d019      	beq.n	8005e00 <HAL_GPIO_Init+0x1fc>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a4d      	ldr	r2, [pc, #308]	@ (8005f04 <HAL_GPIO_Init+0x300>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_GPIO_Init+0x1f8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a4c      	ldr	r2, [pc, #304]	@ (8005f08 <HAL_GPIO_Init+0x304>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00d      	beq.n	8005df8 <HAL_GPIO_Init+0x1f4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a4b      	ldr	r2, [pc, #300]	@ (8005f0c <HAL_GPIO_Init+0x308>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <HAL_GPIO_Init+0x1f0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a4a      	ldr	r2, [pc, #296]	@ (8005f10 <HAL_GPIO_Init+0x30c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_GPIO_Init+0x1ec>
 8005dec:	2306      	movs	r3, #6
 8005dee:	e00c      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005df0:	2307      	movs	r3, #7
 8005df2:	e00a      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005df4:	2305      	movs	r3, #5
 8005df6:	e008      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	e006      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e004      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005e00:	2302      	movs	r3, #2
 8005e02:	e002      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_GPIO_Init+0x206>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	f002 0203 	and.w	r2, r2, #3
 8005e10:	0092      	lsls	r2, r2, #2
 8005e12:	4093      	lsls	r3, r2
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e1a:	4937      	ldr	r1, [pc, #220]	@ (8005ef8 <HAL_GPIO_Init+0x2f4>)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	3302      	adds	r3, #2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e28:	4b3a      	ldr	r3, [pc, #232]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4013      	ands	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005e4c:	4a31      	ldr	r2, [pc, #196]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e52:	4b30      	ldr	r3, [pc, #192]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005e76:	4a27      	ldr	r2, [pc, #156]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005eca:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <HAL_GPIO_Init+0x310>)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f47f ae97 	bne.w	8005c14 <HAL_GPIO_Init+0x10>
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	48000400 	.word	0x48000400
 8005f00:	48000800 	.word	0x48000800
 8005f04:	48000c00 	.word	0x48000c00
 8005f08:	48001000 	.word	0x48001000
 8005f0c:	48001400 	.word	0x48001400
 8005f10:	48001800 	.word	0x48001800
 8005f14:	40010400 	.word	0x40010400

08005f18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005f26:	e0c4      	b.n	80060b2 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005f28:	2201      	movs	r2, #1
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80b7 	beq.w	80060ac <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005f3e:	4a64      	ldr	r2, [pc, #400]	@ (80060d0 <HAL_GPIO_DeInit+0x1b8>)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	3302      	adds	r3, #2
 8005f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	220f      	movs	r2, #15
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f66:	d025      	beq.n	8005fb4 <HAL_GPIO_DeInit+0x9c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80060d4 <HAL_GPIO_DeInit+0x1bc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d01f      	beq.n	8005fb0 <HAL_GPIO_DeInit+0x98>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a59      	ldr	r2, [pc, #356]	@ (80060d8 <HAL_GPIO_DeInit+0x1c0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d019      	beq.n	8005fac <HAL_GPIO_DeInit+0x94>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a58      	ldr	r2, [pc, #352]	@ (80060dc <HAL_GPIO_DeInit+0x1c4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_GPIO_DeInit+0x90>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a57      	ldr	r2, [pc, #348]	@ (80060e0 <HAL_GPIO_DeInit+0x1c8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00d      	beq.n	8005fa4 <HAL_GPIO_DeInit+0x8c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a56      	ldr	r2, [pc, #344]	@ (80060e4 <HAL_GPIO_DeInit+0x1cc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d007      	beq.n	8005fa0 <HAL_GPIO_DeInit+0x88>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a55      	ldr	r2, [pc, #340]	@ (80060e8 <HAL_GPIO_DeInit+0x1d0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d101      	bne.n	8005f9c <HAL_GPIO_DeInit+0x84>
 8005f98:	2306      	movs	r3, #6
 8005f9a:	e00c      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005f9c:	2307      	movs	r3, #7
 8005f9e:	e00a      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	e008      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e006      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e004      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e002      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <HAL_GPIO_DeInit+0x9e>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	f002 0203 	and.w	r2, r2, #3
 8005fbc:	0092      	lsls	r2, r2, #2
 8005fbe:	4093      	lsls	r3, r2
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d132      	bne.n	800602c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fc6:	4b49      	ldr	r3, [pc, #292]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	4947      	ldr	r1, [pc, #284]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fd4:	4b45      	ldr	r3, [pc, #276]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	4943      	ldr	r1, [pc, #268]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fe2:	4b42      	ldr	r3, [pc, #264]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	4940      	ldr	r1, [pc, #256]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	493c      	ldr	r1, [pc, #240]	@ (80060ec <HAL_GPIO_DeInit+0x1d4>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	220f      	movs	r2, #15
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800600e:	4a30      	ldr	r2, [pc, #192]	@ (80060d0 <HAL_GPIO_DeInit+0x1b8>)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	3302      	adds	r3, #2
 8006016:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	43da      	mvns	r2, r3
 800601e:	482c      	ldr	r0, [pc, #176]	@ (80060d0 <HAL_GPIO_DeInit+0x1b8>)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	400a      	ands	r2, r1
 8006026:	3302      	adds	r3, #2
 8006028:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	2103      	movs	r1, #3
 8006036:	fa01 f303 	lsl.w	r3, r1, r3
 800603a:	43db      	mvns	r3, r3
 800603c:	401a      	ands	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	08da      	lsrs	r2, r3, #3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3208      	adds	r2, #8
 800604a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	220f      	movs	r2, #15
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	08d2      	lsrs	r2, r2, #3
 8006062:	4019      	ands	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3208      	adds	r2, #8
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2103      	movs	r1, #3
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	401a      	ands	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	2101      	movs	r1, #1
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	43db      	mvns	r3, r3
 8006090:	401a      	ands	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2103      	movs	r1, #3
 80060a0:	fa01 f303 	lsl.w	r3, r1, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	401a      	ands	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]
    }

    position++;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	3301      	adds	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f47f af34 	bne.w	8005f28 <HAL_GPIO_DeInit+0x10>
  }
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	48000400 	.word	0x48000400
 80060d8:	48000800 	.word	0x48000800
 80060dc:	48000c00 	.word	0x48000c00
 80060e0:	48001000 	.word	0x48001000
 80060e4:	48001400 	.word	0x48001400
 80060e8:	48001800 	.word	0x48001800
 80060ec:	40010400 	.word	0x40010400

080060f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	807b      	strh	r3, [r7, #2]
 80060fc:	4613      	mov	r3, r2
 80060fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006100:	787b      	ldrb	r3, [r7, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006106:	887a      	ldrh	r2, [r7, #2]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800610c:	e002      	b.n	8006114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800610e:	887a      	ldrh	r2, [r7, #2]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8006126:	af00      	add	r7, sp, #0
 8006128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800612c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006130:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006136:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f001 b83a 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800614a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 816f 	beq.w	800643a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800615c:	4bb5      	ldr	r3, [pc, #724]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 030c 	and.w	r3, r3, #12
 8006164:	2b04      	cmp	r3, #4
 8006166:	d00c      	beq.n	8006182 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006168:	4bb2      	ldr	r3, [pc, #712]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 030c 	and.w	r3, r3, #12
 8006170:	2b08      	cmp	r3, #8
 8006172:	d15c      	bne.n	800622e <HAL_RCC_OscConfig+0x10e>
 8006174:	4baf      	ldr	r3, [pc, #700]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006180:	d155      	bne.n	800622e <HAL_RCC_OscConfig+0x10e>
 8006182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006186:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800618e:	fa93 f3a3 	rbit	r3, r3
 8006192:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006196:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800619a:	fab3 f383 	clz	r3, r3
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	095b      	lsrs	r3, r3, #5
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d102      	bne.n	80061b4 <HAL_RCC_OscConfig+0x94>
 80061ae:	4ba1      	ldr	r3, [pc, #644]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	e015      	b.n	80061e0 <HAL_RCC_OscConfig+0xc0>
 80061b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061b8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80061c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80061d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80061d4:	fa93 f3a3 	rbit	r3, r3
 80061d8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80061dc:	4b95      	ldr	r3, [pc, #596]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80061e4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80061e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80061ec:	fa92 f2a2 	rbit	r2, r2
 80061f0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80061f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80061f8:	fab2 f282 	clz	r2, r2
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	f042 0220 	orr.w	r2, r2, #32
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	f002 021f 	and.w	r2, r2, #31
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f202 	lsl.w	r2, r1, r2
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8111 	beq.w	8006438 <HAL_RCC_OscConfig+0x318>
 8006216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800621a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8108 	bne.w	8006438 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f000 bfc6 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006232:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623e:	d106      	bne.n	800624e <HAL_RCC_OscConfig+0x12e>
 8006240:	4b7c      	ldr	r3, [pc, #496]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a7b      	ldr	r2, [pc, #492]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	e036      	b.n	80062bc <HAL_RCC_OscConfig+0x19c>
 800624e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006252:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <HAL_RCC_OscConfig+0x158>
 800625e:	4b75      	ldr	r3, [pc, #468]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a74      	ldr	r2, [pc, #464]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	4b72      	ldr	r3, [pc, #456]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a71      	ldr	r2, [pc, #452]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e021      	b.n	80062bc <HAL_RCC_OscConfig+0x19c>
 8006278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800627c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x184>
 800628a:	4b6a      	ldr	r3, [pc, #424]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a69      	ldr	r2, [pc, #420]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	4b67      	ldr	r3, [pc, #412]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a66      	ldr	r2, [pc, #408]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800629c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e00b      	b.n	80062bc <HAL_RCC_OscConfig+0x19c>
 80062a4:	4b63      	ldr	r3, [pc, #396]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a62      	ldr	r2, [pc, #392]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80062aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4b60      	ldr	r3, [pc, #384]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80062b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80062c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d059      	beq.n	8006380 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7ff fae2 	bl	8005894 <HAL_GetTick>
 80062d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d6:	f7ff fadd 	bl	8005894 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b64      	cmp	r3, #100	@ 0x64
 80062e4:	d902      	bls.n	80062ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	f000 bf67 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80062ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80062f0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80062f8:	fa93 f3a3 	rbit	r3, r3
 80062fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8006300:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006304:	fab3 f383 	clz	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <HAL_RCC_OscConfig+0x1fe>
 8006318:	4b46      	ldr	r3, [pc, #280]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	e015      	b.n	800634a <HAL_RCC_OscConfig+0x22a>
 800631e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006322:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006326:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800632a:	fa93 f3a3 	rbit	r3, r3
 800632e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8006332:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006336:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800633a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006346:	4b3b      	ldr	r3, [pc, #236]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800634e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8006352:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8006356:	fa92 f2a2 	rbit	r2, r2
 800635a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800635e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006362:	fab2 f282 	clz	r2, r2
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	f042 0220 	orr.w	r2, r2, #32
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	f002 021f 	and.w	r2, r2, #31
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f202 	lsl.w	r2, r1, r2
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0ab      	beq.n	80062d6 <HAL_RCC_OscConfig+0x1b6>
 800637e:	e05c      	b.n	800643a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7ff fa88 	bl	8005894 <HAL_GetTick>
 8006384:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006388:	e00a      	b.n	80063a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800638a:	f7ff fa83 	bl	8005894 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b64      	cmp	r3, #100	@ 0x64
 8006398:	d902      	bls.n	80063a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	f000 bf0d 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80063a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063a4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80063ac:	fa93 f3a3 	rbit	r3, r3
 80063b0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80063b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_RCC_OscConfig+0x2b2>
 80063cc:	4b19      	ldr	r3, [pc, #100]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	e015      	b.n	80063fe <HAL_RCC_OscConfig+0x2de>
 80063d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063d6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80063de:	fa93 f3a3 	rbit	r3, r3
 80063e2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80063e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80063ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80063f2:	fa93 f3a3 	rbit	r3, r3
 80063f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80063fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <HAL_RCC_OscConfig+0x314>)
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006402:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8006406:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800640a:	fa92 f2a2 	rbit	r2, r2
 800640e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8006412:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8006416:	fab2 f282 	clz	r2, r2
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	f042 0220 	orr.w	r2, r2, #32
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	f002 021f 	and.w	r2, r2, #31
 8006426:	2101      	movs	r1, #1
 8006428:	fa01 f202 	lsl.w	r2, r1, r2
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ab      	bne.n	800638a <HAL_RCC_OscConfig+0x26a>
 8006432:	e002      	b.n	800643a <HAL_RCC_OscConfig+0x31a>
 8006434:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800643e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 817f 	beq.w	800674e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006450:	4ba7      	ldr	r3, [pc, #668]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 030c 	and.w	r3, r3, #12
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00c      	beq.n	8006476 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800645c:	4ba4      	ldr	r3, [pc, #656]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 030c 	and.w	r3, r3, #12
 8006464:	2b08      	cmp	r3, #8
 8006466:	d173      	bne.n	8006550 <HAL_RCC_OscConfig+0x430>
 8006468:	4ba1      	ldr	r3, [pc, #644]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006474:	d16c      	bne.n	8006550 <HAL_RCC_OscConfig+0x430>
 8006476:	2302      	movs	r3, #2
 8006478:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8006488:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648c:	fab3 f383 	clz	r3, r3
 8006490:	b2db      	uxtb	r3, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_OscConfig+0x386>
 80064a0:	4b93      	ldr	r3, [pc, #588]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	e013      	b.n	80064ce <HAL_RCC_OscConfig+0x3ae>
 80064a6:	2302      	movs	r3, #2
 80064a8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80064b0:	fa93 f3a3 	rbit	r3, r3
 80064b4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80064b8:	2302      	movs	r3, #2
 80064ba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80064be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80064c2:	fa93 f3a3 	rbit	r3, r3
 80064c6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80064ca:	4b89      	ldr	r3, [pc, #548]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	2202      	movs	r2, #2
 80064d0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80064d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80064d8:	fa92 f2a2 	rbit	r2, r2
 80064dc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80064e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80064e4:	fab2 f282 	clz	r2, r2
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	f042 0220 	orr.w	r2, r2, #32
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	f002 021f 	and.w	r2, r2, #31
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f202 	lsl.w	r2, r1, r2
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <HAL_RCC_OscConfig+0x3f6>
 8006500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006504:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d002      	beq.n	8006516 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f000 be52 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006516:	4b76      	ldr	r3, [pc, #472]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800651e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006522:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	21f8      	movs	r1, #248	@ 0xf8
 800652c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8006534:	fa91 f1a1 	rbit	r1, r1
 8006538:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800653c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006540:	fab1 f181 	clz	r1, r1
 8006544:	b2c9      	uxtb	r1, r1
 8006546:	408b      	lsls	r3, r1
 8006548:	4969      	ldr	r1, [pc, #420]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 800654a:	4313      	orrs	r3, r2
 800654c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800654e:	e0fe      	b.n	800674e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006554:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8088 	beq.w	8006672 <HAL_RCC_OscConfig+0x552>
 8006562:	2301      	movs	r3, #1
 8006564:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006568:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800656c:	fa93 f3a3 	rbit	r3, r3
 8006570:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8006574:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006578:	fab3 f383 	clz	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006582:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	461a      	mov	r2, r3
 800658a:	2301      	movs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7ff f981 	bl	8005894 <HAL_GetTick>
 8006592:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006598:	f7ff f97c 	bl	8005894 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	f000 be06 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80065ae:	2302      	movs	r3, #2
 80065b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80065b8:	fa93 f3a3 	rbit	r3, r3
 80065bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80065c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c4:	fab3 f383 	clz	r3, r3
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d102      	bne.n	80065de <HAL_RCC_OscConfig+0x4be>
 80065d8:	4b45      	ldr	r3, [pc, #276]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	e013      	b.n	8006606 <HAL_RCC_OscConfig+0x4e6>
 80065de:	2302      	movs	r3, #2
 80065e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80065e8:	fa93 f3a3 	rbit	r3, r3
 80065ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80065f0:	2302      	movs	r3, #2
 80065f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80065f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80065fa:	fa93 f3a3 	rbit	r3, r3
 80065fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006602:	4b3b      	ldr	r3, [pc, #236]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	2202      	movs	r2, #2
 8006608:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800660c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006610:	fa92 f2a2 	rbit	r2, r2
 8006614:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8006618:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800661c:	fab2 f282 	clz	r2, r2
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	f042 0220 	orr.w	r2, r2, #32
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	f002 021f 	and.w	r2, r2, #31
 800662c:	2101      	movs	r1, #1
 800662e:	fa01 f202 	lsl.w	r2, r1, r2
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0af      	beq.n	8006598 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006638:	4b2d      	ldr	r3, [pc, #180]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006644:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	21f8      	movs	r1, #248	@ 0xf8
 800664e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006652:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8006656:	fa91 f1a1 	rbit	r1, r1
 800665a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800665e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006662:	fab1 f181 	clz	r1, r1
 8006666:	b2c9      	uxtb	r1, r1
 8006668:	408b      	lsls	r3, r1
 800666a:	4921      	ldr	r1, [pc, #132]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]
 8006670:	e06d      	b.n	800674e <HAL_RCC_OscConfig+0x62e>
 8006672:	2301      	movs	r3, #1
 8006674:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006678:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800667c:	fa93 f3a3 	rbit	r3, r3
 8006680:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8006684:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006688:	fab3 f383 	clz	r3, r3
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006692:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	461a      	mov	r2, r3
 800669a:	2300      	movs	r3, #0
 800669c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669e:	f7ff f8f9 	bl	8005894 <HAL_GetTick>
 80066a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a6:	e00a      	b.n	80066be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066a8:	f7ff f8f4 	bl	8005894 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d902      	bls.n	80066be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	f000 bd7e 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80066be:	2302      	movs	r3, #2
 80066c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80066c8:	fa93 f3a3 	rbit	r3, r3
 80066cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80066d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d4:	fab3 f383 	clz	r3, r3
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d105      	bne.n	80066f4 <HAL_RCC_OscConfig+0x5d4>
 80066e8:	4b01      	ldr	r3, [pc, #4]	@ (80066f0 <HAL_RCC_OscConfig+0x5d0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	e016      	b.n	800671c <HAL_RCC_OscConfig+0x5fc>
 80066ee:	bf00      	nop
 80066f0:	40021000 	.word	0x40021000
 80066f4:	2302      	movs	r3, #2
 80066f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066fe:	fa93 f3a3 	rbit	r3, r3
 8006702:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006706:	2302      	movs	r3, #2
 8006708:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800670c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006710:	fa93 f3a3 	rbit	r3, r3
 8006714:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006718:	4bbf      	ldr	r3, [pc, #764]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	2202      	movs	r2, #2
 800671e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8006722:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006726:	fa92 f2a2 	rbit	r2, r2
 800672a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800672e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006732:	fab2 f282 	clz	r2, r2
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	f042 0220 	orr.w	r2, r2, #32
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	f002 021f 	and.w	r2, r2, #31
 8006742:	2101      	movs	r1, #1
 8006744:	fa01 f202 	lsl.w	r2, r1, r2
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ac      	bne.n	80066a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006752:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8113 	beq.w	800698a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006768:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d07c      	beq.n	800686e <HAL_RCC_OscConfig+0x74e>
 8006774:	2301      	movs	r3, #1
 8006776:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	fa93 f3a3 	rbit	r3, r3
 8006782:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8006786:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800678a:	fab3 f383 	clz	r3, r3
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	4ba2      	ldr	r3, [pc, #648]	@ (8006a1c <HAL_RCC_OscConfig+0x8fc>)
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	461a      	mov	r2, r3
 800679a:	2301      	movs	r3, #1
 800679c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679e:	f7ff f879 	bl	8005894 <HAL_GetTick>
 80067a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a6:	e00a      	b.n	80067be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067a8:	f7ff f874 	bl	8005894 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d902      	bls.n	80067be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	f000 bcfe 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80067be:	2302      	movs	r3, #2
 80067c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c8:	fa93 f2a3 	rbit	r2, r3
 80067cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067de:	2202      	movs	r2, #2
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	fa93 f2a3 	rbit	r2, r3
 80067f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80067fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006802:	2202      	movs	r2, #2
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800680a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	fa93 f2a3 	rbit	r2, r3
 8006814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006818:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800681c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800681e:	4b7e      	ldr	r3, [pc, #504]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 8006820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006826:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800682a:	2102      	movs	r1, #2
 800682c:	6019      	str	r1, [r3, #0]
 800682e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	fa93 f1a3 	rbit	r1, r3
 800683c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006840:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006844:	6019      	str	r1, [r3, #0]
  return result;
 8006846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800684a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	fab3 f383 	clz	r3, r3
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2101      	movs	r1, #1
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d09d      	beq.n	80067a8 <HAL_RCC_OscConfig+0x688>
 800686c:	e08d      	b.n	800698a <HAL_RCC_OscConfig+0x86a>
 800686e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006872:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800687e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	fa93 f2a3 	rbit	r2, r3
 8006888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800688c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006890:	601a      	str	r2, [r3, #0]
  return result;
 8006892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006896:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800689a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800689c:	fab3 f383 	clz	r3, r3
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	4b5d      	ldr	r3, [pc, #372]	@ (8006a1c <HAL_RCC_OscConfig+0x8fc>)
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	461a      	mov	r2, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b0:	f7fe fff0 	bl	8005894 <HAL_GetTick>
 80068b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	e00a      	b.n	80068d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ba:	f7fe ffeb 	bl	8005894 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d902      	bls.n	80068d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	f000 bc75 	b.w	80071ba <HAL_RCC_OscConfig+0x109a>
 80068d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80068d8:	2202      	movs	r2, #2
 80068da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	fa93 f2a3 	rbit	r2, r3
 80068ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80068f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80068fc:	2202      	movs	r2, #2
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006904:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	fa93 f2a3 	rbit	r2, r3
 800690e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006912:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800691c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006920:	2202      	movs	r2, #2
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006928:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	fa93 f2a3 	rbit	r2, r3
 8006932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006936:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800693a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 800693e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006944:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006948:	2102      	movs	r1, #2
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006950:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	fa93 f1a3 	rbit	r1, r3
 800695a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800695e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006962:	6019      	str	r1, [r3, #0]
  return result;
 8006964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006968:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	fab3 f383 	clz	r3, r3
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2101      	movs	r1, #1
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d197      	bne.n	80068ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800698e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 81a5 	beq.w	8006cea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a0:	2300      	movs	r3, #0
 80069a2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069a6:	4b1c      	ldr	r3, [pc, #112]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d116      	bne.n	80069e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b2:	4b19      	ldr	r3, [pc, #100]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4a18      	ldr	r2, [pc, #96]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 80069b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069bc:	61d3      	str	r3, [r2, #28]
 80069be:	4b16      	ldr	r3, [pc, #88]	@ (8006a18 <HAL_RCC_OscConfig+0x8f8>)
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80069c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80069d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a20 <HAL_RCC_OscConfig+0x900>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d121      	bne.n	8006a30 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <HAL_RCC_OscConfig+0x900>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006a20 <HAL_RCC_OscConfig+0x900>)
 80069f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069f8:	f7fe ff4c 	bl	8005894 <HAL_GetTick>
 80069fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a00:	e010      	b.n	8006a24 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fe ff47 	bl	8005894 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b64      	cmp	r3, #100	@ 0x64
 8006a10:	d908      	bls.n	8006a24 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e3d1      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8006a16:	bf00      	nop
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	10908120 	.word	0x10908120
 8006a20:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a24:	4b8d      	ldr	r3, [pc, #564]	@ (8006c5c <HAL_RCC_OscConfig+0xb3c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0e8      	beq.n	8006a02 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCC_OscConfig+0x92e>
 8006a40:	4b87      	ldr	r3, [pc, #540]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	4a86      	ldr	r2, [pc, #536]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6213      	str	r3, [r2, #32]
 8006a4c:	e035      	b.n	8006aba <HAL_RCC_OscConfig+0x99a>
 8006a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0x958>
 8006a5e:	4b80      	ldr	r3, [pc, #512]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4a7f      	ldr	r2, [pc, #508]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6213      	str	r3, [r2, #32]
 8006a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a70:	f023 0304 	bic.w	r3, r3, #4
 8006a74:	6213      	str	r3, [r2, #32]
 8006a76:	e020      	b.n	8006aba <HAL_RCC_OscConfig+0x99a>
 8006a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d10c      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x982>
 8006a88:	4b75      	ldr	r3, [pc, #468]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	4a74      	ldr	r2, [pc, #464]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a8e:	f043 0304 	orr.w	r3, r3, #4
 8006a92:	6213      	str	r3, [r2, #32]
 8006a94:	4b72      	ldr	r3, [pc, #456]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	4a71      	ldr	r2, [pc, #452]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6213      	str	r3, [r2, #32]
 8006aa0:	e00b      	b.n	8006aba <HAL_RCC_OscConfig+0x99a>
 8006aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006aa8:	f023 0301 	bic.w	r3, r3, #1
 8006aac:	6213      	str	r3, [r2, #32]
 8006aae:	4b6c      	ldr	r3, [pc, #432]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006ab4:	f023 0304 	bic.w	r3, r3, #4
 8006ab8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006abe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8081 	beq.w	8006bce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006acc:	f7fe fee2 	bl	8005894 <HAL_GetTick>
 8006ad0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad4:	e00b      	b.n	8006aee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fe fedd 	bl	8005894 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e365      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8006aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006af2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006af6:	2202      	movs	r2, #2
 8006af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006afe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	fa93 f2a3 	rbit	r2, r3
 8006b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b0c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b22:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	fa93 f2a3 	rbit	r2, r3
 8006b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006b34:	601a      	str	r2, [r3, #0]
  return result;
 8006b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b3a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006b3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b40:	fab3 f383 	clz	r3, r3
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f043 0302 	orr.w	r3, r3, #2
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d102      	bne.n	8006b5a <HAL_RCC_OscConfig+0xa3a>
 8006b54:	4b42      	ldr	r3, [pc, #264]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	e013      	b.n	8006b82 <HAL_RCC_OscConfig+0xa62>
 8006b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b5e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006b62:	2202      	movs	r2, #2
 8006b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b6a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	fa93 f2a3 	rbit	r2, r3
 8006b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b78:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	4b38      	ldr	r3, [pc, #224]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006b86:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006b8a:	2102      	movs	r1, #2
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006b92:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	fa92 f1a2 	rbit	r1, r2
 8006b9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006ba0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8006ba4:	6011      	str	r1, [r2, #0]
  return result;
 8006ba6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006baa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	fab2 f282 	clz	r2, r2
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	f002 021f 	and.w	r2, r2, #31
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d084      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x9b6>
 8006bcc:	e083      	b.n	8006cd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bce:	f7fe fe61 	bl	8005894 <HAL_GetTick>
 8006bd2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd6:	e00b      	b.n	8006bf0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd8:	f7fe fe5c 	bl	8005894 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e2e4      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8006bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006bf4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	fa93 f2a3 	rbit	r2, r3
 8006c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c0e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c18:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	fa93 f2a3 	rbit	r2, r3
 8006c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006c36:	601a      	str	r2, [r3, #0]
  return result;
 8006c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006c40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c42:	fab3 f383 	clz	r3, r3
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f043 0302 	orr.w	r3, r3, #2
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d106      	bne.n	8006c64 <HAL_RCC_OscConfig+0xb44>
 8006c56:	4b02      	ldr	r3, [pc, #8]	@ (8006c60 <HAL_RCC_OscConfig+0xb40>)
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	e017      	b.n	8006c8c <HAL_RCC_OscConfig+0xb6c>
 8006c5c:	40007000 	.word	0x40007000
 8006c60:	40021000 	.word	0x40021000
 8006c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c74:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	fa93 f2a3 	rbit	r2, r3
 8006c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006c82:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	4bb3      	ldr	r3, [pc, #716]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006c94:	2102      	movs	r1, #2
 8006c96:	6011      	str	r1, [r2, #0]
 8006c98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006c9c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	fa92 f1a2 	rbit	r1, r2
 8006ca6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006caa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8006cae:	6011      	str	r1, [r2, #0]
  return result;
 8006cb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006cb4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	fab2 f282 	clz	r2, r2
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	f002 021f 	and.w	r2, r2, #31
 8006cca:	2101      	movs	r1, #1
 8006ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d180      	bne.n	8006bd8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cd6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d105      	bne.n	8006cea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cde:	4b9e      	ldr	r3, [pc, #632]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4a9d      	ldr	r2, [pc, #628]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006cee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 825e 	beq.w	80071b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cfc:	4b96      	ldr	r3, [pc, #600]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	f000 821f 	beq.w	8007148 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	f040 8170 	bne.w	8006ffc <HAL_RCC_OscConfig+0xedc>
 8006d1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d20:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006d24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d2e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	fa93 f2a3 	rbit	r2, r3
 8006d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006d40:	601a      	str	r2, [r3, #0]
  return result;
 8006d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d46:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006d4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4c:	fab3 f383 	clz	r3, r3
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006d56:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fe fd97 	bl	8005894 <HAL_GetTick>
 8006d66:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d6a:	e009      	b.n	8006d80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6c:	f7fe fd92 	bl	8005894 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e21c      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8006d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d84:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006d88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d92:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	fa93 f2a3 	rbit	r2, r3
 8006d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006da0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006da4:	601a      	str	r2, [r3, #0]
  return result;
 8006da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006daa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006dae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db0:	fab3 f383 	clz	r3, r3
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <HAL_RCC_OscConfig+0xcaa>
 8006dc4:	4b64      	ldr	r3, [pc, #400]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	e027      	b.n	8006e1a <HAL_RCC_OscConfig+0xcfa>
 8006dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006dd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ddc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	fa93 f2a3 	rbit	r2, r3
 8006de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006dea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006df4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006df8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e02:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	fa93 f2a3 	rbit	r2, r3
 8006e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e10:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	4b50      	ldr	r3, [pc, #320]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e1e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006e22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006e26:	6011      	str	r1, [r2, #0]
 8006e28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e2c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	fa92 f1a2 	rbit	r1, r2
 8006e36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e3a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006e3e:	6011      	str	r1, [r2, #0]
  return result;
 8006e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006e44:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	fab2 f282 	clz	r2, r2
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	f042 0220 	orr.w	r2, r2, #32
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	f002 021f 	and.w	r2, r2, #31
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d182      	bne.n	8006d6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e66:	4b3c      	ldr	r3, [pc, #240]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	f023 020f 	bic.w	r2, r3, #15
 8006e6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7a:	4937      	ldr	r1, [pc, #220]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006e80:	4b35      	ldr	r3, [pc, #212]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8006e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a19      	ldr	r1, [r3, #32]
 8006e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	492d      	ldr	r1, [pc, #180]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
 8006ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006eba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	fa93 f2a3 	rbit	r2, r3
 8006ec4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ec8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006ecc:	601a      	str	r2, [r3, #0]
  return result;
 8006ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006ed2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006ed6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed8:	fab3 f383 	clz	r3, r3
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006ee2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2301      	movs	r3, #1
 8006eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eee:	f7fe fcd1 	bl	8005894 <HAL_GetTick>
 8006ef2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ef6:	e009      	b.n	8006f0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fe fccc 	bl	8005894 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e156      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8006f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	fa93 f2a3 	rbit	r2, r3
 8006f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006f30:	601a      	str	r2, [r3, #0]
  return result;
 8006f32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006f3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f3c:	fab3 f383 	clz	r3, r3
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCC_OscConfig+0xe3c>
 8006f50:	4b01      	ldr	r3, [pc, #4]	@ (8006f58 <HAL_RCC_OscConfig+0xe38>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	e02a      	b.n	8006fac <HAL_RCC_OscConfig+0xe8c>
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f60:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006f64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	fa93 f2a3 	rbit	r2, r3
 8006f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006f8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	fa93 f2a3 	rbit	r2, r3
 8006f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006fa2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	4b86      	ldr	r3, [pc, #536]	@ (80071c4 <HAL_RCC_OscConfig+0x10a4>)
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006fb0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006fb4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006fb8:	6011      	str	r1, [r2, #0]
 8006fba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006fbe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	fa92 f1a2 	rbit	r1, r2
 8006fc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006fcc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006fd0:	6011      	str	r1, [r2, #0]
  return result;
 8006fd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8006fd6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	fab2 f282 	clz	r2, r2
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	f042 0220 	orr.w	r2, r2, #32
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	f002 021f 	and.w	r2, r2, #31
 8006fec:	2101      	movs	r1, #1
 8006fee:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f43f af7f 	beq.w	8006ef8 <HAL_RCC_OscConfig+0xdd8>
 8006ffa:	e0dd      	b.n	80071b8 <HAL_RCC_OscConfig+0x1098>
 8006ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007000:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007004:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800700e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fa93 f2a3 	rbit	r2, r3
 8007018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800701c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007020:	601a      	str	r2, [r3, #0]
  return result;
 8007022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007026:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800702a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800702c:	fab3 f383 	clz	r3, r3
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007036:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007042:	f7fe fc27 	bl	8005894 <HAL_GetTick>
 8007046:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800704a:	e009      	b.n	8007060 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704c:	f7fe fc22 	bl	8005894 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e0ac      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
 8007060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007064:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007068:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800706c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007072:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	fa93 f2a3 	rbit	r2, r3
 800707c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007080:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007084:	601a      	str	r2, [r3, #0]
  return result;
 8007086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800708a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800708e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007090:	fab3 f383 	clz	r3, r3
 8007094:	b2db      	uxtb	r3, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d102      	bne.n	80070aa <HAL_RCC_OscConfig+0xf8a>
 80070a4:	4b47      	ldr	r3, [pc, #284]	@ (80071c4 <HAL_RCC_OscConfig+0x10a4>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	e027      	b.n	80070fa <HAL_RCC_OscConfig+0xfda>
 80070aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070ae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80070b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	fa93 f2a3 	rbit	r2, r3
 80070c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070ca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070d4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80070d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	fa93 f2a3 	rbit	r2, r3
 80070ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070f0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	4b33      	ldr	r3, [pc, #204]	@ (80071c4 <HAL_RCC_OscConfig+0x10a4>)
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80070fe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007102:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007106:	6011      	str	r1, [r2, #0]
 8007108:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800710c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	fa92 f1a2 	rbit	r1, r2
 8007116:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800711a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800711e:	6011      	str	r1, [r2, #0]
  return result;
 8007120:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007124:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	fab2 f282 	clz	r2, r2
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	f042 0220 	orr.w	r2, r2, #32
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	f002 021f 	and.w	r2, r2, #31
 800713a:	2101      	movs	r1, #1
 800713c:	fa01 f202 	lsl.w	r2, r1, r2
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d182      	bne.n	800704c <HAL_RCC_OscConfig+0xf2c>
 8007146:	e037      	b.n	80071b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800714c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e02e      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800715c:	4b19      	ldr	r3, [pc, #100]	@ (80071c4 <HAL_RCC_OscConfig+0x10a4>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007164:	4b17      	ldr	r3, [pc, #92]	@ (80071c4 <HAL_RCC_OscConfig+0x10a4>)
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800716c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007170:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8007174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007178:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	429a      	cmp	r2, r3
 8007182:	d117      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007184:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007188:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800718c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007198:	429a      	cmp	r2, r3
 800719a:	d10b      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800719c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d001      	beq.n	80071b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40021000 	.word	0x40021000

080071c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b09e      	sub	sp, #120	@ 0x78
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e162      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071e0:	4b90      	ldr	r3, [pc, #576]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d910      	bls.n	8007210 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ee:	4b8d      	ldr	r3, [pc, #564]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 0207 	bic.w	r2, r3, #7
 80071f6:	498b      	ldr	r1, [pc, #556]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fe:	4b89      	ldr	r3, [pc, #548]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d001      	beq.n	8007210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e14a      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800721c:	4b82      	ldr	r3, [pc, #520]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	497f      	ldr	r1, [pc, #508]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80dc 	beq.w	80073f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d13c      	bne.n	80072be <HAL_RCC_ClockConfig+0xf6>
 8007244:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007248:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800724a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800724c:	fa93 f3a3 	rbit	r3, r3
 8007250:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	b2db      	uxtb	r3, r3
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d102      	bne.n	800726e <HAL_RCC_ClockConfig+0xa6>
 8007268:	4b6f      	ldr	r3, [pc, #444]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	e00f      	b.n	800728e <HAL_RCC_ClockConfig+0xc6>
 800726e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007272:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	667b      	str	r3, [r7, #100]	@ 0x64
 800727c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007280:	663b      	str	r3, [r7, #96]	@ 0x60
 8007282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007284:	fa93 f3a3 	rbit	r3, r3
 8007288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800728a:	4b67      	ldr	r3, [pc, #412]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007292:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007294:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007296:	fa92 f2a2 	rbit	r2, r2
 800729a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800729c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800729e:	fab2 f282 	clz	r2, r2
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	f042 0220 	orr.w	r2, r2, #32
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	f002 021f 	and.w	r2, r2, #31
 80072ae:	2101      	movs	r1, #1
 80072b0:	fa01 f202 	lsl.w	r2, r1, r2
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d17b      	bne.n	80073b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0f3      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d13c      	bne.n	8007340 <HAL_RCC_ClockConfig+0x178>
 80072c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80072d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d102      	bne.n	80072f0 <HAL_RCC_ClockConfig+0x128>
 80072ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	e00f      	b.n	8007310 <HAL_RCC_ClockConfig+0x148>
 80072f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f8:	fa93 f3a3 	rbit	r3, r3
 80072fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80072fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007302:	643b      	str	r3, [r7, #64]	@ 0x40
 8007304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730c:	4b46      	ldr	r3, [pc, #280]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007314:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007318:	fa92 f2a2 	rbit	r2, r2
 800731c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800731e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007320:	fab2 f282 	clz	r2, r2
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	f042 0220 	orr.w	r2, r2, #32
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	f002 021f 	and.w	r2, r2, #31
 8007330:	2101      	movs	r1, #1
 8007332:	fa01 f202 	lsl.w	r2, r1, r2
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d13a      	bne.n	80073b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0b2      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
 8007340:	2302      	movs	r3, #2
 8007342:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	fa93 f3a3 	rbit	r3, r3
 800734a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800734c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	d102      	bne.n	8007368 <HAL_RCC_ClockConfig+0x1a0>
 8007362:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	e00d      	b.n	8007384 <HAL_RCC_ClockConfig+0x1bc>
 8007368:	2302      	movs	r3, #2
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	fa93 f3a3 	rbit	r3, r3
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
 8007374:	2302      	movs	r3, #2
 8007376:	623b      	str	r3, [r7, #32]
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	fa93 f3a3 	rbit	r3, r3
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	4b29      	ldr	r3, [pc, #164]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	2202      	movs	r2, #2
 8007386:	61ba      	str	r2, [r7, #24]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	fa92 f2a2 	rbit	r2, r2
 800738e:	617a      	str	r2, [r7, #20]
  return result;
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	fab2 f282 	clz	r2, r2
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	f042 0220 	orr.w	r2, r2, #32
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	f002 021f 	and.w	r2, r2, #31
 80073a2:	2101      	movs	r1, #1
 80073a4:	fa01 f202 	lsl.w	r2, r1, r2
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e079      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f023 0203 	bic.w	r2, r3, #3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	491a      	ldr	r1, [pc, #104]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073c4:	f7fe fa66 	bl	8005894 <HAL_GetTick>
 80073c8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fe fa62 	bl	8005894 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e061      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e2:	4b11      	ldr	r3, [pc, #68]	@ (8007428 <HAL_RCC_ClockConfig+0x260>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 020c 	and.w	r2, r3, #12
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d1eb      	bne.n	80073cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d214      	bcs.n	800742c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007402:	4b08      	ldr	r3, [pc, #32]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 0207 	bic.w	r2, r3, #7
 800740a:	4906      	ldr	r1, [pc, #24]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007412:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <HAL_RCC_ClockConfig+0x25c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d005      	beq.n	800742c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e040      	b.n	80074a6 <HAL_RCC_ClockConfig+0x2de>
 8007424:	40022000 	.word	0x40022000
 8007428:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007438:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <HAL_RCC_ClockConfig+0x2e8>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	491a      	ldr	r1, [pc, #104]	@ (80074b0 <HAL_RCC_ClockConfig+0x2e8>)
 8007446:	4313      	orrs	r3, r2
 8007448:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007456:	4b16      	ldr	r3, [pc, #88]	@ (80074b0 <HAL_RCC_ClockConfig+0x2e8>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4912      	ldr	r1, [pc, #72]	@ (80074b0 <HAL_RCC_ClockConfig+0x2e8>)
 8007466:	4313      	orrs	r3, r2
 8007468:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800746a:	f000 f829 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 800746e:	4601      	mov	r1, r0
 8007470:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <HAL_RCC_ClockConfig+0x2e8>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007478:	22f0      	movs	r2, #240	@ 0xf0
 800747a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	fa92 f2a2 	rbit	r2, r2
 8007482:	60fa      	str	r2, [r7, #12]
  return result;
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	fab2 f282 	clz	r2, r2
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	40d3      	lsrs	r3, r2
 800748e:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <HAL_RCC_ClockConfig+0x2ec>)
 8007490:	5cd3      	ldrb	r3, [r2, r3]
 8007492:	fa21 f303 	lsr.w	r3, r1, r3
 8007496:	4a08      	ldr	r2, [pc, #32]	@ (80074b8 <HAL_RCC_ClockConfig+0x2f0>)
 8007498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800749a:	4b08      	ldr	r3, [pc, #32]	@ (80074bc <HAL_RCC_ClockConfig+0x2f4>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe f9b4 	bl	800580c <HAL_InitTick>
  
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3778      	adds	r7, #120	@ 0x78
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40021000 	.word	0x40021000
 80074b4:	0800a384 	.word	0x0800a384
 80074b8:	20000000 	.word	0x20000000
 80074bc:	20000004 	.word	0x20000004

080074c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b08b      	sub	sp, #44	@ 0x2c
 80074c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80074da:	4b2a      	ldr	r3, [pc, #168]	@ (8007584 <HAL_RCC_GetSysClockFreq+0xc4>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f003 030c 	and.w	r3, r3, #12
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d002      	beq.n	80074f0 <HAL_RCC_GetSysClockFreq+0x30>
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d003      	beq.n	80074f6 <HAL_RCC_GetSysClockFreq+0x36>
 80074ee:	e03f      	b.n	8007570 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80074f0:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <HAL_RCC_GetSysClockFreq+0xc8>)
 80074f2:	623b      	str	r3, [r7, #32]
      break;
 80074f4:	e03f      	b.n	8007576 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80074fc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8007500:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	fa92 f2a2 	rbit	r2, r2
 8007508:	607a      	str	r2, [r7, #4]
  return result;
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	fab2 f282 	clz	r2, r2
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	40d3      	lsrs	r3, r2
 8007514:	4a1d      	ldr	r2, [pc, #116]	@ (800758c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007516:	5cd3      	ldrb	r3, [r2, r3]
 8007518:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800751a:	4b1a      	ldr	r3, [pc, #104]	@ (8007584 <HAL_RCC_GetSysClockFreq+0xc4>)
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	220f      	movs	r2, #15
 8007524:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	fa92 f2a2 	rbit	r2, r2
 800752c:	60fa      	str	r2, [r7, #12]
  return result;
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	fab2 f282 	clz	r2, r2
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	40d3      	lsrs	r3, r2
 8007538:	4a15      	ldr	r2, [pc, #84]	@ (8007590 <HAL_RCC_GetSysClockFreq+0xd0>)
 800753a:	5cd3      	ldrb	r3, [r2, r3]
 800753c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007548:	4a0f      	ldr	r2, [pc, #60]	@ (8007588 <HAL_RCC_GetSysClockFreq+0xc8>)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
 8007558:	e007      	b.n	800756a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800755a:	4a0b      	ldr	r2, [pc, #44]	@ (8007588 <HAL_RCC_GetSysClockFreq+0xc8>)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	fb02 f303 	mul.w	r3, r2, r3
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	623b      	str	r3, [r7, #32]
      break;
 800756e:	e002      	b.n	8007576 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007572:	623b      	str	r3, [r7, #32]
      break;
 8007574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007576:	6a3b      	ldr	r3, [r7, #32]
}
 8007578:	4618      	mov	r0, r3
 800757a:	372c      	adds	r7, #44	@ 0x2c
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40021000 	.word	0x40021000
 8007588:	007a1200 	.word	0x007a1200
 800758c:	0800a39c 	.word	0x0800a39c
 8007590:	0800a3ac 	.word	0x0800a3ac

08007594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007594:	b480      	push	{r7}
 8007596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007598:	4b03      	ldr	r3, [pc, #12]	@ (80075a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800759a:	681b      	ldr	r3, [r3, #0]
}
 800759c:	4618      	mov	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000000 	.word	0x20000000

080075ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80075b2:	f7ff ffef 	bl	8007594 <HAL_RCC_GetHCLKFreq>
 80075b6:	4601      	mov	r1, r0
 80075b8:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80075c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	fa92 f2a2 	rbit	r2, r2
 80075cc:	603a      	str	r2, [r7, #0]
  return result;
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	fab2 f282 	clz	r2, r2
 80075d4:	b2d2      	uxtb	r2, r2
 80075d6:	40d3      	lsrs	r3, r2
 80075d8:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80075da:	5cd3      	ldrb	r3, [r2, r3]
 80075dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40021000 	.word	0x40021000
 80075ec:	0800a394 	.word	0x0800a394

080075f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80075f6:	f7ff ffcd 	bl	8007594 <HAL_RCC_GetHCLKFreq>
 80075fa:	4601      	mov	r1, r0
 80075fc:	4b0b      	ldr	r3, [pc, #44]	@ (800762c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007604:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007608:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	fa92 f2a2 	rbit	r2, r2
 8007610:	603a      	str	r2, [r7, #0]
  return result;
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	fab2 f282 	clz	r2, r2
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	40d3      	lsrs	r3, r2
 800761c:	4a04      	ldr	r2, [pc, #16]	@ (8007630 <HAL_RCC_GetPCLK2Freq+0x40>)
 800761e:	5cd3      	ldrb	r3, [r2, r3]
 8007620:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40021000 	.word	0x40021000
 8007630:	0800a394 	.word	0x0800a394

08007634 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b092      	sub	sp, #72	@ 0x48
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007644:	2300      	movs	r3, #0
 8007646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 80d4 	beq.w	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007658:	4b4e      	ldr	r3, [pc, #312]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10e      	bne.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007664:	4b4b      	ldr	r3, [pc, #300]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4a4a      	ldr	r2, [pc, #296]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800766e:	61d3      	str	r3, [r2, #28]
 8007670:	4b48      	ldr	r3, [pc, #288]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007678:	60bb      	str	r3, [r7, #8]
 800767a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007682:	4b45      	ldr	r3, [pc, #276]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768a:	2b00      	cmp	r3, #0
 800768c:	d118      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800768e:	4b42      	ldr	r3, [pc, #264]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a41      	ldr	r2, [pc, #260]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007698:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800769a:	f7fe f8fb 	bl	8005894 <HAL_GetTick>
 800769e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a0:	e008      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a2:	f7fe f8f7 	bl	8005894 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b64      	cmp	r3, #100	@ 0x64
 80076ae:	d901      	bls.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e1a5      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076b4:	4b38      	ldr	r3, [pc, #224]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0f0      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076c0:	4b34      	ldr	r3, [pc, #208]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8084 	beq.w	80077da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076dc:	429a      	cmp	r2, r3
 80076de:	d07c      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80076ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	fa93 f3a3 	rbit	r3, r3
 80076f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076fa:	fab3 f383 	clz	r3, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	4b26      	ldr	r3, [pc, #152]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	461a      	mov	r2, r3
 800770a:	2301      	movs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	fa93 f3a3 	rbit	r3, r3
 800771a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800771c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800771e:	fab3 f383 	clz	r3, r3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	4b1d      	ldr	r3, [pc, #116]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	461a      	mov	r2, r3
 800772e:	2300      	movs	r3, #0
 8007730:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007732:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007736:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04b      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007742:	f7fe f8a7 	bl	8005894 <HAL_GetTick>
 8007746:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007748:	e00a      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774a:	f7fe f8a3 	bl	8005894 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e14f      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007760:	2302      	movs	r3, #2
 8007762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	fa93 f3a3 	rbit	r3, r3
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
 800776c:	2302      	movs	r3, #2
 800776e:	623b      	str	r3, [r7, #32]
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	fa93 f3a3 	rbit	r3, r3
 8007776:	61fb      	str	r3, [r7, #28]
  return result;
 8007778:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f043 0302 	orr.w	r3, r3, #2
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d108      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800778e:	4b01      	ldr	r3, [pc, #4]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	e00d      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007794:	40021000 	.word	0x40021000
 8007798:	40007000 	.word	0x40007000
 800779c:	10908100 	.word	0x10908100
 80077a0:	2302      	movs	r3, #2
 80077a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	fa93 f3a3 	rbit	r3, r3
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	4b96      	ldr	r3, [pc, #600]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	2202      	movs	r2, #2
 80077b2:	613a      	str	r2, [r7, #16]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	fa92 f2a2 	rbit	r2, r2
 80077ba:	60fa      	str	r2, [r7, #12]
  return result;
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	fab2 f282 	clz	r2, r2
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	f002 021f 	and.w	r2, r2, #31
 80077ce:	2101      	movs	r1, #1
 80077d0:	fa01 f202 	lsl.w	r2, r1, r2
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0b7      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80077da:	4b8b      	ldr	r3, [pc, #556]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	4988      	ldr	r1, [pc, #544]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80077ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d105      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f4:	4b84      	ldr	r3, [pc, #528]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80077f6:	69db      	ldr	r3, [r3, #28]
 80077f8:	4a83      	ldr	r2, [pc, #524]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80077fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800780c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800780e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007810:	f023 0203 	bic.w	r2, r3, #3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	497b      	ldr	r1, [pc, #492]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800781a:	4313      	orrs	r3, r2
 800781c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800782a:	4b77      	ldr	r3, [pc, #476]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800782c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800782e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4974      	ldr	r1, [pc, #464]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007838:	4313      	orrs	r3, r2
 800783a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007848:	4b6f      	ldr	r3, [pc, #444]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	496c      	ldr	r1, [pc, #432]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007866:	4b68      	ldr	r3, [pc, #416]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786a:	f023 0210 	bic.w	r2, r3, #16
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4965      	ldr	r1, [pc, #404]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007874:	4313      	orrs	r3, r2
 8007876:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007884:	4b60      	ldr	r3, [pc, #384]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007890:	495d      	ldr	r1, [pc, #372]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007892:	4313      	orrs	r3, r2
 8007894:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078a2:	4b59      	ldr	r3, [pc, #356]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a6:	f023 0220 	bic.w	r2, r3, #32
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	4956      	ldr	r1, [pc, #344]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078c0:	4b51      	ldr	r3, [pc, #324]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	494e      	ldr	r1, [pc, #312]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80078de:	4b4a      	ldr	r3, [pc, #296]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	4947      	ldr	r1, [pc, #284]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078fc:	4b42      	ldr	r3, [pc, #264]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80078fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007900:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	493f      	ldr	r1, [pc, #252]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800791a:	4b3b      	ldr	r3, [pc, #236]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007926:	4938      	ldr	r1, [pc, #224]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007928:	4313      	orrs	r3, r2
 800792a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007938:	4b33      	ldr	r3, [pc, #204]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800793a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007944:	4930      	ldr	r1, [pc, #192]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007946:	4313      	orrs	r3, r2
 8007948:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007956:	4b2c      	ldr	r3, [pc, #176]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007962:	4929      	ldr	r1, [pc, #164]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007964:	4313      	orrs	r3, r2
 8007966:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007974:	4b24      	ldr	r3, [pc, #144]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007978:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007980:	4921      	ldr	r1, [pc, #132]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007982:	4313      	orrs	r3, r2
 8007984:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007992:	4b1d      	ldr	r3, [pc, #116]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	491a      	ldr	r1, [pc, #104]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80079b0:	4b15      	ldr	r3, [pc, #84]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079bc:	4912      	ldr	r1, [pc, #72]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80079ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	490b      	ldr	r1, [pc, #44]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f8:	4903      	ldr	r1, [pc, #12]	@ (8007a08 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3748      	adds	r7, #72	@ 0x48
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40021000 	.word	0x40021000

08007a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e09d      	b.n	8007b5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d108      	bne.n	8007a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a2e:	d009      	beq.n	8007a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	61da      	str	r2, [r3, #28]
 8007a36:	e005      	b.n	8007a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fd fd44 	bl	80054ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a84:	d902      	bls.n	8007a8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e002      	b.n	8007a92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a9a:	d007      	beq.n	8007aac <HAL_SPI_Init+0xa0>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007aa4:	d002      	beq.n	8007aac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aee:	ea42 0103 	orr.w	r1, r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	0c1b      	lsrs	r3, r3, #16
 8007b08:	f003 0204 	and.w	r2, r3, #4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f003 0310 	and.w	r3, r3, #16
 8007b14:	431a      	orrs	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b28:	ea42 0103 	orr.w	r1, r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69da      	ldr	r2, [r3, #28]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e01a      	b.n	8007baa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b8a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fd fcf1 	bl	8005574 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b088      	sub	sp, #32
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_SPI_Transmit+0x22>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e15f      	b.n	8007e94 <HAL_SPI_Transmit+0x2e2>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bdc:	f7fd fe5a 	bl	8005894 <HAL_GetTick>
 8007be0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d002      	beq.n	8007bf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007bf6:	e148      	b.n	8007e8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Transmit+0x52>
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c08:	e13f      	b.n	8007e8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	88fa      	ldrh	r2, [r7, #6]
 8007c22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c54:	d10f      	bne.n	8007c76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b40      	cmp	r3, #64	@ 0x40
 8007c82:	d007      	beq.n	8007c94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c9c:	d94f      	bls.n	8007d3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d002      	beq.n	8007cac <HAL_SPI_Transmit+0xfa>
 8007ca6:	8afb      	ldrh	r3, [r7, #22]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d142      	bne.n	8007d32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	881a      	ldrh	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	1c9a      	adds	r2, r3, #2
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007cd0:	e02f      	b.n	8007d32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d112      	bne.n	8007d06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce4:	881a      	ldrh	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	1c9a      	adds	r2, r3, #2
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d04:	e015      	b.n	8007d32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d06:	f7fd fdc5 	bl	8005894 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d803      	bhi.n	8007d1e <HAL_SPI_Transmit+0x16c>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d102      	bne.n	8007d24 <HAL_SPI_Transmit+0x172>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007d30:	e0ab      	b.n	8007e8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ca      	bne.n	8007cd2 <HAL_SPI_Transmit+0x120>
 8007d3c:	e080      	b.n	8007e40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_SPI_Transmit+0x19a>
 8007d46:	8afb      	ldrh	r3, [r7, #22]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d174      	bne.n	8007e36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d912      	bls.n	8007d7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	881a      	ldrh	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	1c9a      	adds	r2, r3, #2
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	3b02      	subs	r3, #2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d7a:	e05c      	b.n	8007e36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330c      	adds	r3, #12
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007da2:	e048      	b.n	8007e36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d12b      	bne.n	8007e0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d912      	bls.n	8007de2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	881a      	ldrh	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	1c9a      	adds	r2, r3, #2
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b02      	subs	r3, #2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007de0:	e029      	b.n	8007e36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007e08:	e015      	b.n	8007e36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e0a:	f7fd fd43 	bl	8005894 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d803      	bhi.n	8007e22 <HAL_SPI_Transmit+0x270>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d102      	bne.n	8007e28 <HAL_SPI_Transmit+0x276>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007e34:	e029      	b.n	8007e8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1b1      	bne.n	8007da4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fcf9 	bl	800883c <SPI_EndRxTxTransaction>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10a      	bne.n	8007e74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e5e:	2300      	movs	r3, #0
 8007e60:	613b      	str	r3, [r7, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e003      	b.n	8007e8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d002      	beq.n	8007ec2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ec0:	e11a      	b.n	80080f8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eca:	d112      	bne.n	8007ef2 <HAL_SPI_Receive+0x56>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10e      	bne.n	8007ef2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f90e 	bl	800810a <HAL_SPI_TransmitReceive>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	e107      	b.n	8008102 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_SPI_Receive+0x64>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e100      	b.n	8008102 <HAL_SPI_Receive+0x266>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f08:	f7fd fcc4 	bl	8005894 <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_SPI_Receive+0x7e>
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f1e:	e0eb      	b.n	80080f8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2204      	movs	r2, #4
 8007f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	88fa      	ldrh	r2, [r7, #6]
 8007f38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f6a:	d908      	bls.n	8007f7e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	e007      	b.n	8007f8e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f8c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f96:	d10f      	bne.n	8007fb8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d007      	beq.n	8007fd6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fde:	d86f      	bhi.n	80080c0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007fe0:	e034      	b.n	800804c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d117      	bne.n	8008020 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f103 020c 	add.w	r2, r3, #12
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	7812      	ldrb	r2, [r2, #0]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800801e:	e015      	b.n	800804c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008020:	f7fd fc38 	bl	8005894 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d803      	bhi.n	8008038 <HAL_SPI_Receive+0x19c>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d102      	bne.n	800803e <HAL_SPI_Receive+0x1a2>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800804a:	e055      	b.n	80080f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1c4      	bne.n	8007fe2 <HAL_SPI_Receive+0x146>
 8008058:	e038      	b.n	80080cc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b01      	cmp	r3, #1
 8008066:	d115      	bne.n	8008094 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	b292      	uxth	r2, r2
 8008074:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807a:	1c9a      	adds	r2, r3, #2
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008092:	e015      	b.n	80080c0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008094:	f7fd fbfe 	bl	8005894 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d803      	bhi.n	80080ac <HAL_SPI_Receive+0x210>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080aa:	d102      	bne.n	80080b2 <HAL_SPI_Receive+0x216>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80080be:	e01b      	b.n	80080f8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1c6      	bne.n	800805a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fb5b 	bl	800878c <SPI_EndRxTransaction>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	75fb      	strb	r3, [r7, #23]
 80080ee:	e003      	b.n	80080f8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b08a      	sub	sp, #40	@ 0x28
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008118:	2301      	movs	r3, #1
 800811a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x26>
 800812c:	2302      	movs	r3, #2
 800812e:	e20a      	b.n	8008546 <HAL_SPI_TransmitReceive+0x43c>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008138:	f7fd fbac 	bl	8005894 <HAL_GetTick>
 800813c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008144:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800814c:	887b      	ldrh	r3, [r7, #2]
 800814e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008154:	7efb      	ldrb	r3, [r7, #27]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00e      	beq.n	8008178 <HAL_SPI_TransmitReceive+0x6e>
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008160:	d106      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x66>
 800816a:	7efb      	ldrb	r3, [r7, #27]
 800816c:	2b04      	cmp	r3, #4
 800816e:	d003      	beq.n	8008178 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008170:	2302      	movs	r3, #2
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008176:	e1e0      	b.n	800853a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <HAL_SPI_TransmitReceive+0x80>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <HAL_SPI_TransmitReceive+0x80>
 8008184:	887b      	ldrh	r3, [r7, #2]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008190:	e1d3      	b.n	800853a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b04      	cmp	r3, #4
 800819c:	d003      	beq.n	80081a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2205      	movs	r2, #5
 80081a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	887a      	ldrh	r2, [r7, #2]
 80081d2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081e8:	d802      	bhi.n	80081f0 <HAL_SPI_TransmitReceive+0xe6>
 80081ea:	8a3b      	ldrh	r3, [r7, #16]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d908      	bls.n	8008202 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	e007      	b.n	8008212 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008210:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800821c:	2b40      	cmp	r3, #64	@ 0x40
 800821e:	d007      	beq.n	8008230 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800822e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008238:	f240 8081 	bls.w	800833e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_SPI_TransmitReceive+0x140>
 8008244:	8a7b      	ldrh	r3, [r7, #18]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d16d      	bne.n	8008326 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	881a      	ldrh	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800826e:	e05a      	b.n	8008326 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b02      	cmp	r3, #2
 800827c:	d11b      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x1ac>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d016      	beq.n	80082b6 <HAL_SPI_TransmitReceive+0x1ac>
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	2b01      	cmp	r3, #1
 800828c:	d113      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008292:	881a      	ldrh	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d11c      	bne.n	80082fe <HAL_SPI_TransmitReceive+0x1f4>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d016      	beq.n	80082fe <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	b292      	uxth	r2, r2
 80082dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	1c9a      	adds	r2, r3, #2
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082fa:	2301      	movs	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082fe:	f7fd fac9 	bl	8005894 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800830a:	429a      	cmp	r2, r3
 800830c:	d80b      	bhi.n	8008326 <HAL_SPI_TransmitReceive+0x21c>
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008314:	d007      	beq.n	8008326 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008324:	e109      	b.n	800853a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d19f      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x166>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008336:	b29b      	uxth	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d199      	bne.n	8008270 <HAL_SPI_TransmitReceive+0x166>
 800833c:	e0e3      	b.n	8008506 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <HAL_SPI_TransmitReceive+0x244>
 8008346:	8a7b      	ldrh	r3, [r7, #18]
 8008348:	2b01      	cmp	r3, #1
 800834a:	f040 80cf 	bne.w	80084ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d912      	bls.n	800837e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835c:	881a      	ldrh	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	1c9a      	adds	r2, r3, #2
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b02      	subs	r3, #2
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800837c:	e0b6      	b.n	80084ec <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800839a:	b29b      	uxth	r3, r3
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a4:	e0a2      	b.n	80084ec <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d134      	bne.n	800841e <HAL_SPI_TransmitReceive+0x314>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d02f      	beq.n	800841e <HAL_SPI_TransmitReceive+0x314>
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d12c      	bne.n	800841e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d912      	bls.n	80083f4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	881a      	ldrh	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	1c9a      	adds	r2, r3, #2
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b02      	subs	r3, #2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80083f2:	e012      	b.n	800841a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d148      	bne.n	80084be <HAL_SPI_TransmitReceive+0x3b4>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d042      	beq.n	80084be <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d923      	bls.n	800848c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	b292      	uxth	r2, r2
 8008450:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008456:	1c9a      	adds	r2, r3, #2
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b02      	subs	r3, #2
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b01      	cmp	r3, #1
 8008478:	d81f      	bhi.n	80084ba <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008488:	605a      	str	r2, [r3, #4]
 800848a:	e016      	b.n	80084ba <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f103 020c 	add.w	r2, r3, #12
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084ba:	2301      	movs	r3, #1
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084be:	f7fd f9e9 	bl	8005894 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d803      	bhi.n	80084d6 <HAL_SPI_TransmitReceive+0x3cc>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d102      	bne.n	80084dc <HAL_SPI_TransmitReceive+0x3d2>
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d107      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80084ea:	e026      	b.n	800853a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f47f af57 	bne.w	80083a6 <HAL_SPI_TransmitReceive+0x29c>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	f47f af50 	bne.w	80083a6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 f996 	bl	800883c <SPI_EndRxTxTransaction>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008530:	e003      	b.n	800853a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008542:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008546:	4618      	mov	r0, r3
 8008548:	3728      	adds	r7, #40	@ 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008560:	f7fd f998 	bl	8005894 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	4413      	add	r3, r2
 800856e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008570:	f7fd f990 	bl	8005894 <HAL_GetTick>
 8008574:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008576:	4b39      	ldr	r3, [pc, #228]	@ (800865c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	015b      	lsls	r3, r3, #5
 800857c:	0d1b      	lsrs	r3, r3, #20
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	fb02 f303 	mul.w	r3, r2, r3
 8008584:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008586:	e054      	b.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d050      	beq.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008590:	f7fd f980 	bl	8005894 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	429a      	cmp	r2, r3
 800859e:	d902      	bls.n	80085a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d13d      	bne.n	8008622 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085be:	d111      	bne.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c8:	d004      	beq.n	80085d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d2:	d107      	bne.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ec:	d10f      	bne.n	800860e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800860c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e017      	b.n	8008652 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	3b01      	subs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4013      	ands	r3, r2
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	429a      	cmp	r2, r3
 800864e:	d19b      	bne.n	8008588 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000000 	.word	0x20000000

08008660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	@ 0x28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008672:	f7fd f90f 	bl	8005894 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4413      	add	r3, r2
 8008680:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008682:	f7fd f907 	bl	8005894 <HAL_GetTick>
 8008686:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	330c      	adds	r3, #12
 800868e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008690:	4b3d      	ldr	r3, [pc, #244]	@ (8008788 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	00da      	lsls	r2, r3, #3
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	0d1b      	lsrs	r3, r3, #20
 80086a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086a8:	e060      	b.n	800876c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086b0:	d107      	bne.n	80086c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d104      	bne.n	80086c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d050      	beq.n	800876c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086ca:	f7fd f8e3 	bl	8005894 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d902      	bls.n	80086e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d13d      	bne.n	800875c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086f8:	d111      	bne.n	800871e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008702:	d004      	beq.n	800870e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870c:	d107      	bne.n	800871e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800871c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008726:	d10f      	bne.n	8008748 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e010      	b.n	800877e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	3b01      	subs	r3, #1
 800876a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4013      	ands	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d196      	bne.n	80086aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3728      	adds	r7, #40	@ 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000000 	.word	0x20000000

0800878c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af02      	add	r7, sp, #8
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087a0:	d111      	bne.n	80087c6 <SPI_EndRxTransaction+0x3a>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087aa:	d004      	beq.n	80087b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b4:	d107      	bne.n	80087c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2180      	movs	r1, #128	@ 0x80
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff febd 	bl	8008550 <SPI_WaitFlagStateUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d007      	beq.n	80087ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e0:	f043 0220 	orr.w	r2, r3, #32
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e023      	b.n	8008834 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087f4:	d11d      	bne.n	8008832 <SPI_EndRxTransaction+0xa6>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087fe:	d004      	beq.n	800880a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008808:	d113      	bne.n	8008832 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff ff22 	bl	8008660 <SPI_WaitFifoStateUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008826:	f043 0220 	orr.w	r2, r3, #32
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e000      	b.n	8008834 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff ff03 	bl	8008660 <SPI_WaitFifoStateUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e027      	b.n	80088c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	2180      	movs	r1, #128	@ 0x80
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff fe68 	bl	8008550 <SPI_WaitFlagStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e014      	b.n	80088c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f7ff fedc 	bl	8008660 <SPI_WaitFifoStateUntilTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b2:	f043 0220 	orr.w	r2, r3, #32
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e000      	b.n	80088c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e040      	b.n	800895c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d106      	bne.n	80088f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fc ff04 	bl	80056f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2224      	movs	r2, #36	@ 0x24
 80088f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fbba 	bl	8009080 <UART_SetConfig>
 800890c:	4603      	mov	r3, r0
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e022      	b.n	800895c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fd82 	bl	8009428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fe09 	bl	800956c <UART_CheckIdleState>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08a      	sub	sp, #40	@ 0x28
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	4613      	mov	r3, r2
 8008972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008978:	2b20      	cmp	r3, #32
 800897a:	d177      	bne.n	8008a6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_UART_Transmit+0x24>
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e070      	b.n	8008a6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2221      	movs	r2, #33	@ 0x21
 8008998:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800899a:	f7fc ff7b 	bl	8005894 <HAL_GetTick>
 800899e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	88fa      	ldrh	r2, [r7, #6]
 80089a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	88fa      	ldrh	r2, [r7, #6]
 80089ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089b8:	d108      	bne.n	80089cc <HAL_UART_Transmit+0x68>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e003      	b.n	80089d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089d4:	e02f      	b.n	8008a36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2200      	movs	r2, #0
 80089de:	2180      	movs	r1, #128	@ 0x80
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fe6b 	bl	80096bc <UART_WaitOnFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2220      	movs	r2, #32
 80089f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e03b      	b.n	8008a6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10b      	bne.n	8008a14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	881a      	ldrh	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e007      	b.n	8008a24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3301      	adds	r3, #1
 8008a22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1c9      	bne.n	80089d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2140      	movs	r1, #64	@ 0x40
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fe35 	bl	80096bc <UART_WaitOnFlagUntilTimeout>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e005      	b.n	8008a6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e000      	b.n	8008a6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008a6c:	2302      	movs	r3, #2
  }
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008aa2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d115      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00f      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 82ab 	beq.w	800902c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
      }
      return;
 8008ade:	e2a5      	b.n	800902c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 8117 	beq.w	8008d18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008afa:	4b85      	ldr	r3, [pc, #532]	@ (8008d10 <HAL_UART_IRQHandler+0x298>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 810a 	beq.w	8008d18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d011      	beq.n	8008b34 <HAL_UART_IRQHandler+0xbc>
 8008b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2201      	movs	r2, #1
 8008b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b2a:	f043 0201 	orr.w	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d011      	beq.n	8008b64 <HAL_UART_IRQHandler+0xec>
 8008b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2202      	movs	r2, #2
 8008b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5a:	f043 0204 	orr.w	r2, r3, #4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d011      	beq.n	8008b94 <HAL_UART_IRQHandler+0x11c>
 8008b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2204      	movs	r2, #4
 8008b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b8a:	f043 0202 	orr.w	r2, r3, #2
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d017      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00b      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bc6:	f043 0208 	orr.w	r2, r3, #8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d012      	beq.n	8008c02 <HAL_UART_IRQHandler+0x18a>
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bf8:	f043 0220 	orr.w	r2, r3, #32
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8211 	beq.w	8009030 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00d      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	d005      	beq.n	8008c5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d04f      	beq.n	8008cfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fe5c 	bl	8009918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6a:	2b40      	cmp	r3, #64	@ 0x40
 8008c6c:	d141      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1d9      	bne.n	8008c6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d013      	beq.n	8008cea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc6:	4a13      	ldr	r2, [pc, #76]	@ (8008d14 <HAL_UART_IRQHandler+0x29c>)
 8008cc8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fc ff5a 	bl	8005b88 <HAL_DMA_Abort_IT>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d017      	beq.n	8008d0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	e00f      	b.n	8008d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f9be 	bl	800906c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	e00b      	b.n	8008d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9ba 	bl	800906c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf8:	e007      	b.n	8008d0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9b6 	bl	800906c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008d08:	e192      	b.n	8009030 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0a:	bf00      	nop
    return;
 8008d0c:	e190      	b.n	8009030 <HAL_UART_IRQHandler+0x5b8>
 8008d0e:	bf00      	nop
 8008d10:	04000120 	.word	0x04000120
 8008d14:	080099e1 	.word	0x080099e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	f040 814b 	bne.w	8008fb8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d26:	f003 0310 	and.w	r3, r3, #16
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 8144 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d34:	f003 0310 	and.w	r3, r3, #16
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 813d 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2210      	movs	r2, #16
 8008d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d50:	2b40      	cmp	r3, #64	@ 0x40
 8008d52:	f040 80b5 	bne.w	8008ec0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 8164 	beq.w	8009034 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d76:	429a      	cmp	r2, r3
 8008d78:	f080 815c 	bcs.w	8009034 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	f000 8086 	beq.w	8008e9e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008daa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008dc0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1da      	bne.n	8008d92 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3308      	adds	r3, #8
 8008de2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008dec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e1      	bne.n	8008ddc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3308      	adds	r3, #8
 8008e38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e3      	bne.n	8008e18 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e6e:	f023 0310 	bic.w	r3, r3, #16
 8008e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e4      	bne.n	8008e5e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fc fe3c 	bl	8005b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7fc fab5 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ebe:	e0b9      	b.n	8009034 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80ab 	beq.w	8009038 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80a6 	beq.w	8009038 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f10:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e4      	bne.n	8008eec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	623b      	str	r3, [r7, #32]
   return(result);
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	f023 0301 	bic.w	r3, r3, #1
 8008f38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e3      	bne.n	8008f22 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0310 	bic.w	r3, r3, #16
 8008f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	69b9      	ldr	r1, [r7, #24]
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e4      	bne.n	8008f6e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7fc fa39 	bl	8005428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fb6:	e03f      	b.n	8009038 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x56a>
 8008fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fee8 	bl	8009db0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fe0:	e02d      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00e      	beq.n	800900c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d008      	beq.n	800900c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d01c      	beq.n	800903c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
    }
    return;
 800900a:	e017      	b.n	800903c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800900c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d012      	beq.n	800903e <HAL_UART_IRQHandler+0x5c6>
 8009018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00c      	beq.n	800903e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fcf1 	bl	8009a0c <UART_EndTransmit_IT>
    return;
 800902a:	e008      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
      return;
 800902c:	bf00      	nop
 800902e:	e006      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
    return;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <HAL_UART_IRQHandler+0x5c6>
    return;
 800903c:	bf00      	nop
  }

}
 800903e:	37e8      	adds	r7, #232	@ 0xe8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b92      	ldr	r3, [pc, #584]	@ (80092f4 <UART_SetConfig+0x274>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	6979      	ldr	r1, [r7, #20]
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a80      	ldr	r2, [pc, #512]	@ (80092f8 <UART_SetConfig+0x278>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d120      	bne.n	800913e <UART_SetConfig+0xbe>
 80090fc:	4b7f      	ldr	r3, [pc, #508]	@ (80092fc <UART_SetConfig+0x27c>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	2b03      	cmp	r3, #3
 8009106:	d817      	bhi.n	8009138 <UART_SetConfig+0xb8>
 8009108:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <UART_SetConfig+0x90>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009121 	.word	0x08009121
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009133 	.word	0x08009133
 800911c:	08009127 	.word	0x08009127
 8009120:	2301      	movs	r3, #1
 8009122:	77fb      	strb	r3, [r7, #31]
 8009124:	e0b5      	b.n	8009292 <UART_SetConfig+0x212>
 8009126:	2302      	movs	r3, #2
 8009128:	77fb      	strb	r3, [r7, #31]
 800912a:	e0b2      	b.n	8009292 <UART_SetConfig+0x212>
 800912c:	2304      	movs	r3, #4
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e0af      	b.n	8009292 <UART_SetConfig+0x212>
 8009132:	2308      	movs	r3, #8
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e0ac      	b.n	8009292 <UART_SetConfig+0x212>
 8009138:	2310      	movs	r3, #16
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e0a9      	b.n	8009292 <UART_SetConfig+0x212>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a6f      	ldr	r2, [pc, #444]	@ (8009300 <UART_SetConfig+0x280>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d124      	bne.n	8009192 <UART_SetConfig+0x112>
 8009148:	4b6c      	ldr	r3, [pc, #432]	@ (80092fc <UART_SetConfig+0x27c>)
 800914a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009154:	d011      	beq.n	800917a <UART_SetConfig+0xfa>
 8009156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800915a:	d817      	bhi.n	800918c <UART_SetConfig+0x10c>
 800915c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009160:	d011      	beq.n	8009186 <UART_SetConfig+0x106>
 8009162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009166:	d811      	bhi.n	800918c <UART_SetConfig+0x10c>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <UART_SetConfig+0xf4>
 800916c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009170:	d006      	beq.n	8009180 <UART_SetConfig+0x100>
 8009172:	e00b      	b.n	800918c <UART_SetConfig+0x10c>
 8009174:	2300      	movs	r3, #0
 8009176:	77fb      	strb	r3, [r7, #31]
 8009178:	e08b      	b.n	8009292 <UART_SetConfig+0x212>
 800917a:	2302      	movs	r3, #2
 800917c:	77fb      	strb	r3, [r7, #31]
 800917e:	e088      	b.n	8009292 <UART_SetConfig+0x212>
 8009180:	2304      	movs	r3, #4
 8009182:	77fb      	strb	r3, [r7, #31]
 8009184:	e085      	b.n	8009292 <UART_SetConfig+0x212>
 8009186:	2308      	movs	r3, #8
 8009188:	77fb      	strb	r3, [r7, #31]
 800918a:	e082      	b.n	8009292 <UART_SetConfig+0x212>
 800918c:	2310      	movs	r3, #16
 800918e:	77fb      	strb	r3, [r7, #31]
 8009190:	e07f      	b.n	8009292 <UART_SetConfig+0x212>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a5b      	ldr	r2, [pc, #364]	@ (8009304 <UART_SetConfig+0x284>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d124      	bne.n	80091e6 <UART_SetConfig+0x166>
 800919c:	4b57      	ldr	r3, [pc, #348]	@ (80092fc <UART_SetConfig+0x27c>)
 800919e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80091a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091a8:	d011      	beq.n	80091ce <UART_SetConfig+0x14e>
 80091aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091ae:	d817      	bhi.n	80091e0 <UART_SetConfig+0x160>
 80091b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091b4:	d011      	beq.n	80091da <UART_SetConfig+0x15a>
 80091b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091ba:	d811      	bhi.n	80091e0 <UART_SetConfig+0x160>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <UART_SetConfig+0x148>
 80091c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091c4:	d006      	beq.n	80091d4 <UART_SetConfig+0x154>
 80091c6:	e00b      	b.n	80091e0 <UART_SetConfig+0x160>
 80091c8:	2300      	movs	r3, #0
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e061      	b.n	8009292 <UART_SetConfig+0x212>
 80091ce:	2302      	movs	r3, #2
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	e05e      	b.n	8009292 <UART_SetConfig+0x212>
 80091d4:	2304      	movs	r3, #4
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e05b      	b.n	8009292 <UART_SetConfig+0x212>
 80091da:	2308      	movs	r3, #8
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e058      	b.n	8009292 <UART_SetConfig+0x212>
 80091e0:	2310      	movs	r3, #16
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e055      	b.n	8009292 <UART_SetConfig+0x212>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a47      	ldr	r2, [pc, #284]	@ (8009308 <UART_SetConfig+0x288>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d124      	bne.n	800923a <UART_SetConfig+0x1ba>
 80091f0:	4b42      	ldr	r3, [pc, #264]	@ (80092fc <UART_SetConfig+0x27c>)
 80091f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80091f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091fc:	d011      	beq.n	8009222 <UART_SetConfig+0x1a2>
 80091fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009202:	d817      	bhi.n	8009234 <UART_SetConfig+0x1b4>
 8009204:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009208:	d011      	beq.n	800922e <UART_SetConfig+0x1ae>
 800920a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800920e:	d811      	bhi.n	8009234 <UART_SetConfig+0x1b4>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <UART_SetConfig+0x19c>
 8009214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009218:	d006      	beq.n	8009228 <UART_SetConfig+0x1a8>
 800921a:	e00b      	b.n	8009234 <UART_SetConfig+0x1b4>
 800921c:	2300      	movs	r3, #0
 800921e:	77fb      	strb	r3, [r7, #31]
 8009220:	e037      	b.n	8009292 <UART_SetConfig+0x212>
 8009222:	2302      	movs	r3, #2
 8009224:	77fb      	strb	r3, [r7, #31]
 8009226:	e034      	b.n	8009292 <UART_SetConfig+0x212>
 8009228:	2304      	movs	r3, #4
 800922a:	77fb      	strb	r3, [r7, #31]
 800922c:	e031      	b.n	8009292 <UART_SetConfig+0x212>
 800922e:	2308      	movs	r3, #8
 8009230:	77fb      	strb	r3, [r7, #31]
 8009232:	e02e      	b.n	8009292 <UART_SetConfig+0x212>
 8009234:	2310      	movs	r3, #16
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e02b      	b.n	8009292 <UART_SetConfig+0x212>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a33      	ldr	r2, [pc, #204]	@ (800930c <UART_SetConfig+0x28c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d124      	bne.n	800928e <UART_SetConfig+0x20e>
 8009244:	4b2d      	ldr	r3, [pc, #180]	@ (80092fc <UART_SetConfig+0x27c>)
 8009246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009248:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800924c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009250:	d011      	beq.n	8009276 <UART_SetConfig+0x1f6>
 8009252:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009256:	d817      	bhi.n	8009288 <UART_SetConfig+0x208>
 8009258:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800925c:	d011      	beq.n	8009282 <UART_SetConfig+0x202>
 800925e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009262:	d811      	bhi.n	8009288 <UART_SetConfig+0x208>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <UART_SetConfig+0x1f0>
 8009268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800926c:	d006      	beq.n	800927c <UART_SetConfig+0x1fc>
 800926e:	e00b      	b.n	8009288 <UART_SetConfig+0x208>
 8009270:	2300      	movs	r3, #0
 8009272:	77fb      	strb	r3, [r7, #31]
 8009274:	e00d      	b.n	8009292 <UART_SetConfig+0x212>
 8009276:	2302      	movs	r3, #2
 8009278:	77fb      	strb	r3, [r7, #31]
 800927a:	e00a      	b.n	8009292 <UART_SetConfig+0x212>
 800927c:	2304      	movs	r3, #4
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e007      	b.n	8009292 <UART_SetConfig+0x212>
 8009282:	2308      	movs	r3, #8
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e004      	b.n	8009292 <UART_SetConfig+0x212>
 8009288:	2310      	movs	r3, #16
 800928a:	77fb      	strb	r3, [r7, #31]
 800928c:	e001      	b.n	8009292 <UART_SetConfig+0x212>
 800928e:	2310      	movs	r3, #16
 8009290:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800929a:	d16b      	bne.n	8009374 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800929c:	7ffb      	ldrb	r3, [r7, #31]
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d838      	bhi.n	8009314 <UART_SetConfig+0x294>
 80092a2:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <UART_SetConfig+0x228>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092cd 	.word	0x080092cd
 80092ac:	080092d5 	.word	0x080092d5
 80092b0:	080092dd 	.word	0x080092dd
 80092b4:	08009315 	.word	0x08009315
 80092b8:	080092e3 	.word	0x080092e3
 80092bc:	08009315 	.word	0x08009315
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009315 	.word	0x08009315
 80092c8:	080092eb 	.word	0x080092eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092cc:	f7fe f96e 	bl	80075ac <HAL_RCC_GetPCLK1Freq>
 80092d0:	61b8      	str	r0, [r7, #24]
        break;
 80092d2:	e024      	b.n	800931e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d4:	f7fe f98c 	bl	80075f0 <HAL_RCC_GetPCLK2Freq>
 80092d8:	61b8      	str	r0, [r7, #24]
        break;
 80092da:	e020      	b.n	800931e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009310 <UART_SetConfig+0x290>)
 80092de:	61bb      	str	r3, [r7, #24]
        break;
 80092e0:	e01d      	b.n	800931e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092e2:	f7fe f8ed 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 80092e6:	61b8      	str	r0, [r7, #24]
        break;
 80092e8:	e019      	b.n	800931e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ee:	61bb      	str	r3, [r7, #24]
        break;
 80092f0:	e015      	b.n	800931e <UART_SetConfig+0x29e>
 80092f2:	bf00      	nop
 80092f4:	efff69f3 	.word	0xefff69f3
 80092f8:	40013800 	.word	0x40013800
 80092fc:	40021000 	.word	0x40021000
 8009300:	40004400 	.word	0x40004400
 8009304:	40004800 	.word	0x40004800
 8009308:	40004c00 	.word	0x40004c00
 800930c:	40005000 	.word	0x40005000
 8009310:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	77bb      	strb	r3, [r7, #30]
        break;
 800931c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d073      	beq.n	800940c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	005a      	lsls	r2, r3, #1
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	441a      	add	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b0f      	cmp	r3, #15
 800933e:	d916      	bls.n	800936e <UART_SetConfig+0x2ee>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009346:	d212      	bcs.n	800936e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	b29b      	uxth	r3, r3
 800934c:	f023 030f 	bic.w	r3, r3, #15
 8009350:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	085b      	lsrs	r3, r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	b29a      	uxth	r2, r3
 800935e:	89fb      	ldrh	r3, [r7, #14]
 8009360:	4313      	orrs	r3, r2
 8009362:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	89fa      	ldrh	r2, [r7, #14]
 800936a:	60da      	str	r2, [r3, #12]
 800936c:	e04e      	b.n	800940c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	77bb      	strb	r3, [r7, #30]
 8009372:	e04b      	b.n	800940c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009374:	7ffb      	ldrb	r3, [r7, #31]
 8009376:	2b08      	cmp	r3, #8
 8009378:	d827      	bhi.n	80093ca <UART_SetConfig+0x34a>
 800937a:	a201      	add	r2, pc, #4	@ (adr r2, 8009380 <UART_SetConfig+0x300>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	080093a5 	.word	0x080093a5
 8009384:	080093ad 	.word	0x080093ad
 8009388:	080093b5 	.word	0x080093b5
 800938c:	080093cb 	.word	0x080093cb
 8009390:	080093bb 	.word	0x080093bb
 8009394:	080093cb 	.word	0x080093cb
 8009398:	080093cb 	.word	0x080093cb
 800939c:	080093cb 	.word	0x080093cb
 80093a0:	080093c3 	.word	0x080093c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a4:	f7fe f902 	bl	80075ac <HAL_RCC_GetPCLK1Freq>
 80093a8:	61b8      	str	r0, [r7, #24]
        break;
 80093aa:	e013      	b.n	80093d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ac:	f7fe f920 	bl	80075f0 <HAL_RCC_GetPCLK2Freq>
 80093b0:	61b8      	str	r0, [r7, #24]
        break;
 80093b2:	e00f      	b.n	80093d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009424 <UART_SetConfig+0x3a4>)
 80093b6:	61bb      	str	r3, [r7, #24]
        break;
 80093b8:	e00c      	b.n	80093d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093ba:	f7fe f881 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 80093be:	61b8      	str	r0, [r7, #24]
        break;
 80093c0:	e008      	b.n	80093d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c6:	61bb      	str	r3, [r7, #24]
        break;
 80093c8:	e004      	b.n	80093d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	77bb      	strb	r3, [r7, #30]
        break;
 80093d2:	bf00      	nop
    }

    if (pclk != 0U)
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d018      	beq.n	800940c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	085a      	lsrs	r2, r3, #1
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	441a      	add	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b0f      	cmp	r3, #15
 80093f2:	d909      	bls.n	8009408 <UART_SetConfig+0x388>
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093fa:	d205      	bcs.n	8009408 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60da      	str	r2, [r3, #12]
 8009406:	e001      	b.n	800940c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009418:	7fbb      	ldrb	r3, [r7, #30]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	007a1200 	.word	0x007a1200

08009428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01a      	beq.n	800953e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009526:	d10a      	bne.n	800953e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	430a      	orrs	r2, r1
 800955e:	605a      	str	r2, [r3, #4]
  }
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b098      	sub	sp, #96	@ 0x60
 8009570:	af02      	add	r7, sp, #8
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800957c:	f7fc f98a 	bl	8005894 <HAL_GetTick>
 8009580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0308 	and.w	r3, r3, #8
 800958c:	2b08      	cmp	r3, #8
 800958e:	d12e      	bne.n	80095ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009598:	2200      	movs	r2, #0
 800959a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f88c 	bl	80096bc <UART_WaitOnFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d021      	beq.n	80095ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095be:	653b      	str	r3, [r7, #80]	@ 0x50
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e6      	bne.n	80095aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e062      	b.n	80096b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d149      	bne.n	8009690 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009604:	2200      	movs	r2, #0
 8009606:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f856 	bl	80096bc <UART_WaitOnFlagUntilTimeout>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d03c      	beq.n	8009690 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	623b      	str	r3, [r7, #32]
   return(result);
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800962a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009634:	633b      	str	r3, [r7, #48]	@ 0x30
 8009636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800963a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	60fb      	str	r3, [r7, #12]
   return(result);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009668:	61fa      	str	r2, [r7, #28]
 800966a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	69b9      	ldr	r1, [r7, #24]
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	617b      	str	r3, [r7, #20]
   return(result);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e5      	bne.n	8009648 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e011      	b.n	80096b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3758      	adds	r7, #88	@ 0x58
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096cc:	e049      	b.n	8009762 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d045      	beq.n	8009762 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fc f8dd 	bl	8005894 <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <UART_WaitOnFlagUntilTimeout+0x30>
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e048      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d031      	beq.n	8009762 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	f003 0308 	and.w	r3, r3, #8
 8009708:	2b08      	cmp	r3, #8
 800970a:	d110      	bne.n	800972e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2208      	movs	r2, #8
 8009712:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 f8ff 	bl	8009918 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2208      	movs	r2, #8
 800971e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e029      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800973c:	d111      	bne.n	8009762 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f8e5 	bl	8009918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2220      	movs	r2, #32
 8009752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e00f      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69da      	ldr	r2, [r3, #28]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4013      	ands	r3, r2
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	429a      	cmp	r2, r3
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	429a      	cmp	r2, r3
 800977e:	d0a6      	beq.n	80096ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800978c:	b480      	push	{r7}
 800978e:	b097      	sub	sp, #92	@ 0x5c
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	4613      	mov	r3, r2
 8009798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	88fa      	ldrh	r2, [r7, #6]
 80097a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097be:	d10e      	bne.n	80097de <UART_Start_Receive_IT+0x52>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <UART_Start_Receive_IT+0x48>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80097ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097d2:	e02d      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	22ff      	movs	r2, #255	@ 0xff
 80097d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097dc:	e028      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10d      	bne.n	8009802 <UART_Start_Receive_IT+0x76>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d104      	bne.n	80097f8 <UART_Start_Receive_IT+0x6c>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	22ff      	movs	r2, #255	@ 0xff
 80097f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80097f6:	e01b      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	227f      	movs	r2, #127	@ 0x7f
 80097fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009800:	e016      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800980a:	d10d      	bne.n	8009828 <UART_Start_Receive_IT+0x9c>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <UART_Start_Receive_IT+0x92>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	227f      	movs	r2, #127	@ 0x7f
 8009818:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800981c:	e008      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	223f      	movs	r2, #63	@ 0x3f
 8009822:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009826:	e003      	b.n	8009830 <UART_Start_Receive_IT+0xa4>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2222      	movs	r2, #34	@ 0x22
 800983c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	657b      	str	r3, [r7, #84]	@ 0x54
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009860:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009862:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800986e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e5      	bne.n	8009840 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987c:	d107      	bne.n	800988e <UART_Start_Receive_IT+0x102>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4a21      	ldr	r2, [pc, #132]	@ (8009910 <UART_Start_Receive_IT+0x184>)
 800988a:	669a      	str	r2, [r3, #104]	@ 0x68
 800988c:	e002      	b.n	8009894 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a20      	ldr	r2, [pc, #128]	@ (8009914 <UART_Start_Receive_IT+0x188>)
 8009892:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d019      	beq.n	80098d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80098b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80098bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e6      	bne.n	800989c <UART_Start_Receive_IT+0x110>
 80098ce:	e018      	b.n	8009902 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	613b      	str	r3, [r7, #16]
   return(result);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f043 0320 	orr.w	r3, r3, #32
 80098e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098ee:	623b      	str	r3, [r7, #32]
 80098f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	69f9      	ldr	r1, [r7, #28]
 80098f4:	6a3a      	ldr	r2, [r7, #32]
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e6      	bne.n	80098d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	375c      	adds	r7, #92	@ 0x5c
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	08009c09 	.word	0x08009c09
 8009914:	08009a61 	.word	0x08009a61

08009918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b095      	sub	sp, #84	@ 0x54
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800994c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e6      	bne.n	8009920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	61fb      	str	r3, [r7, #28]
   return(result);
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	f023 0301 	bic.w	r3, r3, #1
 8009968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	3308      	adds	r3, #8
 8009970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998a:	2b01      	cmp	r3, #1
 800998c:	d118      	bne.n	80099c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	60bb      	str	r3, [r7, #8]
   return(result);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f023 0310 	bic.w	r3, r3, #16
 80099a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6979      	ldr	r1, [r7, #20]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e6      	bne.n	800998e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80099d4:	bf00      	nop
 80099d6:	3754      	adds	r7, #84	@ 0x54
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fb34 	bl	800906c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a04:	bf00      	nop
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a28:	61fb      	str	r3, [r7, #28]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	61bb      	str	r3, [r7, #24]
 8009a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e6      	bne.n	8009a14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff faf6 	bl	8009044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a58:	bf00      	nop
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b09c      	sub	sp, #112	@ 0x70
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a78:	2b22      	cmp	r3, #34	@ 0x22
 8009a7a:	f040 80b9 	bne.w	8009bf0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009a8c:	b2d9      	uxtb	r1, r3
 8009a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a98:	400a      	ands	r2, r1
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f040 809c 	bne.w	8009c00 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ae8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e6      	bne.n	8009ac8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3308      	adds	r3, #8
 8009b18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e5      	bne.n	8009afa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d018      	beq.n	8009b82 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e6      	bne.n	8009b50 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d12e      	bne.n	8009be8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f023 0310 	bic.w	r3, r3, #16
 8009ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	69b9      	ldr	r1, [r7, #24]
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	617b      	str	r3, [r7, #20]
   return(result);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e6      	bne.n	8009b90 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d103      	bne.n	8009bd8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2210      	movs	r2, #16
 8009bd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7fb fc21 	bl	8005428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be6:	e00b      	b.n	8009c00 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fa35 	bl	8009058 <HAL_UART_RxCpltCallback>
}
 8009bee:	e007      	b.n	8009c00 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0208 	orr.w	r2, r2, #8
 8009bfe:	619a      	str	r2, [r3, #24]
}
 8009c00:	bf00      	nop
 8009c02:	3770      	adds	r7, #112	@ 0x70
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b09c      	sub	sp, #112	@ 0x70
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c20:	2b22      	cmp	r3, #34	@ 0x22
 8009c22:	f040 80b9 	bne.w	8009d98 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009c2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009c3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c3e:	4013      	ands	r3, r2
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c4a:	1c9a      	adds	r2, r3, #2
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 809c 	bne.w	8009da8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c84:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e6      	bne.n	8009c70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cac:	e853 3f00 	ldrex	r3, [r3]
 8009cb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1e5      	bne.n	8009ca2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d018      	beq.n	8009d2a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	e853 3f00 	ldrex	r3, [r3]
 8009d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d18:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1e6      	bne.n	8009cf8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d12e      	bne.n	8009d90 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f023 0310 	bic.w	r3, r3, #16
 8009d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d56:	61bb      	str	r3, [r7, #24]
 8009d58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6979      	ldr	r1, [r7, #20]
 8009d5c:	69ba      	ldr	r2, [r7, #24]
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	613b      	str	r3, [r7, #16]
   return(result);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e6      	bne.n	8009d38 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d103      	bne.n	8009d80 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2210      	movs	r2, #16
 8009d7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7fb fb4d 	bl	8005428 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d8e:	e00b      	b.n	8009da8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff f961 	bl	8009058 <HAL_UART_RxCpltCallback>
}
 8009d96:	e007      	b.n	8009da8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0208 	orr.w	r2, r2, #8
 8009da6:	619a      	str	r2, [r3, #24]
}
 8009da8:	bf00      	nop
 8009daa:	3770      	adds	r7, #112	@ 0x70
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08c      	sub	sp, #48	@ 0x30
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	d142      	bne.n	8009e62 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e03b      	b.n	8009e64 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f7ff fcc4 	bl	800978c <UART_Start_Receive_IT>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d124      	bne.n	8009e5c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d11d      	bne.n	8009e56 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2210      	movs	r2, #16
 8009e20:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f043 0310 	orr.w	r3, r3, #16
 8009e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e42:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e44:	6a39      	ldr	r1, [r7, #32]
 8009e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e48:	e841 2300 	strex	r3, r2, [r1]
 8009e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8009e54:	e002      	b.n	8009e5c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e60:	e000      	b.n	8009e64 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009e62:	2302      	movs	r3, #2
  }
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3730      	adds	r7, #48	@ 0x30
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	81fb      	strh	r3, [r7, #14]
 8009e7c:	e007      	b.n	8009e8e <clearBuffer+0x22>
		pBuff[i] = 0x00;
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	81fb      	strh	r3, [r7, #14]
 8009e8e:	89fa      	ldrh	r2, [r7, #14]
 8009e90:	887b      	ldrh	r3, [r7, #2]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d3f3      	bcc.n	8009e7e <clearBuffer+0x12>
}
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <softDelay>:
void softDelay(uint32_t count){
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8009eac:	e002      	b.n	8009eb4 <softDelay+0x10>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	607b      	str	r3, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f9      	bne.n	8009eae <softDelay+0xa>
}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8009ec8:	b480      	push	{r7}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	82fb      	strh	r3, [r7, #22]
 8009eda:	e00a      	b.n	8009ef2 <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8009edc:	8afb      	ldrh	r3, [r7, #22]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	441a      	add	r2, r3
 8009ee2:	8afb      	ldrh	r3, [r7, #22]
 8009ee4:	68f9      	ldr	r1, [r7, #12]
 8009ee6:	440b      	add	r3, r1
 8009ee8:	7812      	ldrb	r2, [r2, #0]
 8009eea:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8009eec:	8afb      	ldrh	r3, [r7, #22]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	82fb      	strh	r3, [r7, #22]
 8009ef2:	8afa      	ldrh	r2, [r7, #22]
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d3f0      	bcc.n	8009edc <flashDataCopy+0x14>
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	371c      	adds	r7, #28
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <extFlashHardReset>:
void extFlashHardReset(void){
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2108      	movs	r1, #8
 8009f10:	4818      	ldr	r0, [pc, #96]	@ (8009f74 <extFlashHardReset+0x6c>)
 8009f12:	f7fc f8ed 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 8009f16:	2201      	movs	r2, #1
 8009f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f20:	f7fc f8e6 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8009f24:	2201      	movs	r2, #1
 8009f26:	2104      	movs	r1, #4
 8009f28:	4813      	ldr	r0, [pc, #76]	@ (8009f78 <extFlashHardReset+0x70>)
 8009f2a:	f7fc f8e1 	bl	80060f0 <HAL_GPIO_WritePin>
	  softDelay(100);
 8009f2e:	2064      	movs	r0, #100	@ 0x64
 8009f30:	f7ff ffb8 	bl	8009ea4 <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 8009f34:	2200      	movs	r2, #0
 8009f36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f3e:	f7fc f8d7 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2104      	movs	r1, #4
 8009f46:	480c      	ldr	r0, [pc, #48]	@ (8009f78 <extFlashHardReset+0x70>)
 8009f48:	f7fc f8d2 	bl	80060f0 <HAL_GPIO_WritePin>
	  softDelay(100);
 8009f4c:	2064      	movs	r0, #100	@ 0x64
 8009f4e:	f7ff ffa9 	bl	8009ea4 <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 8009f52:	2201      	movs	r2, #1
 8009f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009f5c:	f7fc f8c8 	bl	80060f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8009f60:	2201      	movs	r2, #1
 8009f62:	2104      	movs	r1, #4
 8009f64:	4804      	ldr	r0, [pc, #16]	@ (8009f78 <extFlashHardReset+0x70>)
 8009f66:	f7fc f8c3 	bl	80060f0 <HAL_GPIO_WritePin>
	  softDelay(200);
 8009f6a:	20c8      	movs	r0, #200	@ 0xc8
 8009f6c:	f7ff ff9a 	bl	8009ea4 <softDelay>
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	48000400 	.word	0x48000400
 8009f78:	48000c00 	.word	0x48000c00

08009f7c <extFlashGetStatusReg1>:
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_Init(&hspi3);
	softDelay(500);
}
uint8_t extFlashGetStatusReg1(){
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 8009f82:	4b13      	ldr	r3, [pc, #76]	@ (8009fd0 <extFlashGetStatusReg1+0x54>)
 8009f84:	2205      	movs	r2, #5
 8009f86:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8009f8c:	4811      	ldr	r0, [pc, #68]	@ (8009fd4 <extFlashGetStatusReg1+0x58>)
 8009f8e:	f7fd fd3d 	bl	8007a0c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8009f92:	2200      	movs	r2, #0
 8009f94:	2104      	movs	r1, #4
 8009f96:	4810      	ldr	r0, [pc, #64]	@ (8009fd8 <extFlashGetStatusReg1+0x5c>)
 8009f98:	f7fc f8aa 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8009f9c:	2364      	movs	r3, #100	@ 0x64
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	490b      	ldr	r1, [pc, #44]	@ (8009fd0 <extFlashGetStatusReg1+0x54>)
 8009fa2:	480c      	ldr	r0, [pc, #48]	@ (8009fd4 <extFlashGetStatusReg1+0x58>)
 8009fa4:	f7fd fe05 	bl	8007bb2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8009fa8:	1df9      	adds	r1, r7, #7
 8009faa:	2301      	movs	r3, #1
 8009fac:	2201      	movs	r2, #1
 8009fae:	4809      	ldr	r0, [pc, #36]	@ (8009fd4 <extFlashGetStatusReg1+0x58>)
 8009fb0:	f7fd ff74 	bl	8007e9c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	2104      	movs	r1, #4
 8009fb8:	4807      	ldr	r0, [pc, #28]	@ (8009fd8 <extFlashGetStatusReg1+0x5c>)
 8009fba:	f7fc f899 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8009fbe:	4805      	ldr	r0, [pc, #20]	@ (8009fd4 <extFlashGetStatusReg1+0x58>)
 8009fc0:	f7fd fdcf 	bl	8007b62 <HAL_SPI_DeInit>
	return status;
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	2000023c 	.word	0x2000023c
 8009fd4:	2000014c 	.word	0x2000014c
 8009fd8:	48000c00 	.word	0x48000c00

08009fdc <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8009fe6:	480d      	ldr	r0, [pc, #52]	@ (800a01c <extFlashSendCommand+0x40>)
 8009fe8:	f7fd fd10 	bl	8007a0c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8009fec:	2200      	movs	r2, #0
 8009fee:	2104      	movs	r1, #4
 8009ff0:	480b      	ldr	r0, [pc, #44]	@ (800a020 <extFlashSendCommand+0x44>)
 8009ff2:	f7fc f87d 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 8009ff6:	1df9      	adds	r1, r7, #7
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	4807      	ldr	r0, [pc, #28]	@ (800a01c <extFlashSendCommand+0x40>)
 8009ffe:	f7fd fdd8 	bl	8007bb2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800a002:	2201      	movs	r2, #1
 800a004:	2104      	movs	r1, #4
 800a006:	4806      	ldr	r0, [pc, #24]	@ (800a020 <extFlashSendCommand+0x44>)
 800a008:	f7fc f872 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800a00c:	4803      	ldr	r0, [pc, #12]	@ (800a01c <extFlashSendCommand+0x40>)
 800a00e:	f7fd fda8 	bl	8007b62 <HAL_SPI_DeInit>
}
 800a012:	bf00      	nop
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	2000014c 	.word	0x2000014c
 800a020:	48000c00 	.word	0x48000c00

0800a024 <extFlashPageWrite>:
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	HAL_Delay(1);
}
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	extFlashSendCommand(WRITE_ENABLE);
 800a032:	2006      	movs	r0, #6
 800a034:	f7ff ffd2 	bl	8009fdc <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800a038:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a03c:	4822      	ldr	r0, [pc, #136]	@ (800a0c8 <extFlashPageWrite+0xa4>)
 800a03e:	f7ff ff15 	bl	8009e6c <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 800a042:	4b21      	ldr	r3, [pc, #132]	@ (800a0c8 <extFlashPageWrite+0xa4>)
 800a044:	2202      	movs	r2, #2
 800a046:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 800a048:	2303      	movs	r3, #3
 800a04a:	75fb      	strb	r3, [r7, #23]
 800a04c:	e00a      	b.n	800a064 <extFlashPageWrite+0x40>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	b2d1      	uxtb	r1, r2
 800a054:	4a1c      	ldr	r2, [pc, #112]	@ (800a0c8 <extFlashPageWrite+0xa4>)
 800a056:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	0a1b      	lsrs	r3, r3, #8
 800a05c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	3b01      	subs	r3, #1
 800a062:	75fb      	strb	r3, [r7, #23]
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f1      	bne.n	800a04e <extFlashPageWrite+0x2a>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 800a06a:	4818      	ldr	r0, [pc, #96]	@ (800a0cc <extFlashPageWrite+0xa8>)
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	461a      	mov	r2, r3
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	f7ff ff29 	bl	8009ec8 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 800a076:	4816      	ldr	r0, [pc, #88]	@ (800a0d0 <extFlashPageWrite+0xac>)
 800a078:	f7fd fcc8 	bl	8007a0c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800a07c:	2200      	movs	r2, #0
 800a07e:	2104      	movs	r1, #4
 800a080:	4814      	ldr	r0, [pc, #80]	@ (800a0d4 <extFlashPageWrite+0xb0>)
 800a082:	f7fc f835 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	3304      	adds	r3, #4
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	230a      	movs	r3, #10
 800a08e:	490e      	ldr	r1, [pc, #56]	@ (800a0c8 <extFlashPageWrite+0xa4>)
 800a090:	480f      	ldr	r0, [pc, #60]	@ (800a0d0 <extFlashPageWrite+0xac>)
 800a092:	f7fd fd8e 	bl	8007bb2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800a096:	2201      	movs	r2, #1
 800a098:	2104      	movs	r1, #4
 800a09a:	480e      	ldr	r0, [pc, #56]	@ (800a0d4 <extFlashPageWrite+0xb0>)
 800a09c:	f7fc f828 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800a0a0:	480b      	ldr	r0, [pc, #44]	@ (800a0d0 <extFlashPageWrite+0xac>)
 800a0a2:	f7fd fd5e 	bl	8007b62 <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	f7fb fc00 	bl	80058ac <HAL_Delay>
		status = extFlashGetStatusReg1();
 800a0ac:	f7ff ff66 	bl	8009f7c <extFlashGetStatusReg1>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 800a0b4:	7dbb      	ldrb	r3, [r7, #22]
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f3      	bne.n	800a0a6 <extFlashPageWrite+0x82>
}
 800a0be:	bf00      	nop
 800a0c0:	bf00      	nop
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	2000023c 	.word	0x2000023c
 800a0cc:	20000240 	.word	0x20000240
 800a0d0:	2000014c 	.word	0x2000014c
 800a0d4:	48000c00 	.word	0x48000c00

0800a0d8 <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(WRITE_ENABLE);
 800a0e4:	2006      	movs	r0, #6
 800a0e6:	f7ff ff79 	bl	8009fdc <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800a0ea:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800a0ee:	481f      	ldr	r0, [pc, #124]	@ (800a16c <extFlashErase+0x94>)
 800a0f0:	f7ff febc 	bl	8009e6c <clearBuffer>
	flashInstruction[0]	= cmd;
 800a0f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a16c <extFlashErase+0x94>)
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 3; i>0; i--){
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	73fb      	strb	r3, [r7, #15]
 800a0fe:	e00a      	b.n	800a116 <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	b2d1      	uxtb	r1, r2
 800a106:	4a19      	ldr	r2, [pc, #100]	@ (800a16c <extFlashErase+0x94>)
 800a108:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	3b01      	subs	r3, #1
 800a114:	73fb      	strb	r3, [r7, #15]
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f1      	bne.n	800a100 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 800a11c:	4814      	ldr	r0, [pc, #80]	@ (800a170 <extFlashErase+0x98>)
 800a11e:	f7fd fc75 	bl	8007a0c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800a122:	2200      	movs	r2, #0
 800a124:	2104      	movs	r1, #4
 800a126:	4813      	ldr	r0, [pc, #76]	@ (800a174 <extFlashErase+0x9c>)
 800a128:	f7fb ffe2 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 800a12c:	2301      	movs	r3, #1
 800a12e:	2204      	movs	r2, #4
 800a130:	490e      	ldr	r1, [pc, #56]	@ (800a16c <extFlashErase+0x94>)
 800a132:	480f      	ldr	r0, [pc, #60]	@ (800a170 <extFlashErase+0x98>)
 800a134:	f7fd fd3d 	bl	8007bb2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800a138:	2201      	movs	r2, #1
 800a13a:	2104      	movs	r1, #4
 800a13c:	480d      	ldr	r0, [pc, #52]	@ (800a174 <extFlashErase+0x9c>)
 800a13e:	f7fb ffd7 	bl	80060f0 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 800a142:	480b      	ldr	r0, [pc, #44]	@ (800a170 <extFlashErase+0x98>)
 800a144:	f7fd fd0d 	bl	8007b62 <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 800a148:	2001      	movs	r0, #1
 800a14a:	f7fb fbaf 	bl	80058ac <HAL_Delay>
		status = extFlashGetStatusReg1();
 800a14e:	f7ff ff15 	bl	8009f7c <extFlashGetStatusReg1>
 800a152:	4603      	mov	r3, r0
 800a154:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1f3      	bne.n	800a148 <extFlashErase+0x70>
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000023c 	.word	0x2000023c
 800a170:	2000014c 	.word	0x2000014c
 800a174:	48000c00 	.word	0x48000c00

0800a178 <extFlashEraseFotaSector>:
void extFlashEraseFotaSector(void){
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
	extFlashSendCommand(WRITE_ENABLE);
 800a17c:	2006      	movs	r0, #6
 800a17e:	f7ff ff2d 	bl	8009fdc <extFlashSendCommand>
	extFlashSendCommand(GLOBAL_UNLOCK);
 800a182:	2098      	movs	r0, #152	@ 0x98
 800a184:	f7ff ff2a 	bl	8009fdc <extFlashSendCommand>
	extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
 800a188:	2100      	movs	r1, #0
 800a18a:	20d8      	movs	r0, #216	@ 0xd8
 800a18c:	f7ff ffa4 	bl	800a0d8 <extFlashErase>
	extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
 800a190:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800a194:	20d8      	movs	r0, #216	@ 0xd8
 800a196:	f7ff ff9f 	bl	800a0d8 <extFlashErase>
}
 800a19a:	bf00      	nop
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <extFlashWriteHeader>:

void extFlashWriteHeader(uint8_t *pData){
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 800a1a8:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800a1ac:	2020      	movs	r0, #32
 800a1ae:	f7ff ff93 	bl	800a0d8 <extFlashErase>

	uint8_t header[3] = {0};
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <extFlashWriteHeader+0x44>)
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	81bb      	strh	r3, [r7, #12]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]
	header[0] = 0xBB;
 800a1bc:	23bb      	movs	r3, #187	@ 0xbb
 800a1be:	733b      	strb	r3, [r7, #12]
	header[1] = *pData;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	737b      	strb	r3, [r7, #13]
	header[2] = *(pData+1);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	73bb      	strb	r3, [r7, #14]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 800a1cc:	f107 030c 	add.w	r3, r7, #12
 800a1d0:	2203      	movs	r2, #3
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a1d8:	f7ff ff24 	bl	800a024 <extFlashPageWrite>

}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	0800a380 	.word	0x0800a380

0800a1e8 <resetFotaFlag>:


void resetFotaFlag(void){
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
	extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 800a1ee:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800a1f2:	2020      	movs	r0, #32
 800a1f4:	f7ff ff70 	bl	800a0d8 <extFlashErase>
	uint8_t header[3] = {0};
 800a1f8:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <resetFotaFlag+0x34>)
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	80bb      	strh	r3, [r7, #4]
 800a1fe:	2300      	movs	r3, #0
 800a200:	71bb      	strb	r3, [r7, #6]
	header[0] = 0xAA;
 800a202:	23aa      	movs	r3, #170	@ 0xaa
 800a204:	713b      	strb	r3, [r7, #4]
	extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, header, 3);
 800a206:	1d3b      	adds	r3, r7, #4
 800a208:	2203      	movs	r2, #3
 800a20a:	4619      	mov	r1, r3
 800a20c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800a210:	f7ff ff08 	bl	800a024 <extFlashPageWrite>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	0800a380 	.word	0x0800a380

0800a220 <__NVIC_SystemReset>:
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a224:	f3bf 8f4f 	dsb	sy
}
 800a228:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a22a:	4b06      	ldr	r3, [pc, #24]	@ (800a244 <__NVIC_SystemReset+0x24>)
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a232:	4904      	ldr	r1, [pc, #16]	@ (800a244 <__NVIC_SystemReset+0x24>)
 800a234:	4b04      	ldr	r3, [pc, #16]	@ (800a248 <__NVIC_SystemReset+0x28>)
 800a236:	4313      	orrs	r3, r2
 800a238:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a23a:	f3bf 8f4f 	dsb	sy
}
 800a23e:	bf00      	nop
    __NOP();
 800a240:	bf00      	nop
 800a242:	e7fd      	b.n	800a240 <__NVIC_SystemReset+0x20>
 800a244:	e000ed00 	.word	0xe000ed00
 800a248:	05fa0004 	.word	0x05fa0004

0800a24c <processPacketTest>:
uint8_t 	isFirmwareVerified	= 0;
uint32_t 	firmwareSize		= 0;

uint8_t		msg[]				= "Erase Done...\n";

void processPacketTest(uint8_t *pFrame, uint16_t pktLen){
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	807b      	strh	r3, [r7, #2]
	/*check if Frame Start and Frame End is Properly received*/
	if(*pFrame == 0x00)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <processPacketTest+0x28>
		savePacketToExtFlash((pFrame+1),pktLen-1);// assuing FRAME= FRAME_TYPE+DATA_BYTES(1+N DATA_BYTES)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	887b      	ldrh	r3, [r7, #2]
 800a266:	3b01      	subs	r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4619      	mov	r1, r3
 800a26c:	4610      	mov	r0, r2
 800a26e:	f000 f82b 	bl	800a2c8 <savePacketToExtFlash>
		HAL_Delay(10);
		NVIC_SystemReset();
	}
	else if(*pFrame == 0x03)
		resetFotaFlag();
}
 800a272:	e020      	b.n	800a2b6 <processPacketTest+0x6a>
	else if(*pFrame == 0x01){
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d108      	bne.n	800a28e <processPacketTest+0x42>
		extFlashEraseFotaSector();
 800a27c:	f7ff ff7c 	bl	800a178 <extFlashEraseFotaSector>
		HAL_UART_Transmit(&huart2, msg, 14, 10);
 800a280:	230a      	movs	r3, #10
 800a282:	220e      	movs	r2, #14
 800a284:	490e      	ldr	r1, [pc, #56]	@ (800a2c0 <processPacketTest+0x74>)
 800a286:	480f      	ldr	r0, [pc, #60]	@ (800a2c4 <processPacketTest+0x78>)
 800a288:	f7fe fb6c 	bl	8008964 <HAL_UART_Transmit>
}
 800a28c:	e013      	b.n	800a2b6 <processPacketTest+0x6a>
	else if(*pFrame == 0x02){
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d109      	bne.n	800a2aa <processPacketTest+0x5e>
		extFlashWriteHeader(pFrame+1);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3301      	adds	r3, #1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff ff80 	bl	800a1a0 <extFlashWriteHeader>
		HAL_Delay(10);
 800a2a0:	200a      	movs	r0, #10
 800a2a2:	f7fb fb03 	bl	80058ac <HAL_Delay>
		NVIC_SystemReset();
 800a2a6:	f7ff ffbb 	bl	800a220 <__NVIC_SystemReset>
	else if(*pFrame == 0x03)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d101      	bne.n	800a2b6 <processPacketTest+0x6a>
		resetFotaFlag();
 800a2b2:	f7ff ff99 	bl	800a1e8 <resetFotaFlag>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000000c 	.word	0x2000000c
 800a2c4:	200001b0 	.word	0x200001b0

0800a2c8 <savePacketToExtFlash>:

void savePacketToExtFlash(uint8_t *pData, uint16_t dataLen){
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
	uint8_t responseString[2] = {0x05,0x00};
 800a2d4:	2305      	movs	r3, #5
 800a2d6:	81bb      	strh	r3, [r7, #12]

	static uint32_t extFlashAddress = FLASH_PAGE0_BASE_ADDRESS;
//	uint8_t compareFlag = 0;
	extFlashPageWrite(extFlashAddress, pData, dataLen);
 800a2d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a308 <savePacketToExtFlash+0x40>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	887a      	ldrh	r2, [r7, #2]
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fe9f 	bl	800a024 <extFlashPageWrite>
//		extFlashAddress += dataLen;
//	}
//	else {
//		responseString[1] = 0xAA;
//	}
	extFlashAddress += dataLen;
 800a2e6:	887a      	ldrh	r2, [r7, #2]
 800a2e8:	4b07      	ldr	r3, [pc, #28]	@ (800a308 <savePacketToExtFlash+0x40>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	4a06      	ldr	r2, [pc, #24]	@ (800a308 <savePacketToExtFlash+0x40>)
 800a2f0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, responseString, 2, 5);
 800a2f2:	f107 010c 	add.w	r1, r7, #12
 800a2f6:	2305      	movs	r3, #5
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	4804      	ldr	r0, [pc, #16]	@ (800a30c <savePacketToExtFlash+0x44>)
 800a2fc:	f7fe fb32 	bl	8008964 <HAL_UART_Transmit>
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20000340 	.word	0x20000340
 800a30c:	200001b0 	.word	0x200001b0

0800a310 <memset>:
 800a310:	4402      	add	r2, r0
 800a312:	4603      	mov	r3, r0
 800a314:	4293      	cmp	r3, r2
 800a316:	d100      	bne.n	800a31a <memset+0xa>
 800a318:	4770      	bx	lr
 800a31a:	f803 1b01 	strb.w	r1, [r3], #1
 800a31e:	e7f9      	b.n	800a314 <memset+0x4>

0800a320 <__libc_init_array>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4d0d      	ldr	r5, [pc, #52]	@ (800a358 <__libc_init_array+0x38>)
 800a324:	4c0d      	ldr	r4, [pc, #52]	@ (800a35c <__libc_init_array+0x3c>)
 800a326:	1b64      	subs	r4, r4, r5
 800a328:	10a4      	asrs	r4, r4, #2
 800a32a:	2600      	movs	r6, #0
 800a32c:	42a6      	cmp	r6, r4
 800a32e:	d109      	bne.n	800a344 <__libc_init_array+0x24>
 800a330:	4d0b      	ldr	r5, [pc, #44]	@ (800a360 <__libc_init_array+0x40>)
 800a332:	4c0c      	ldr	r4, [pc, #48]	@ (800a364 <__libc_init_array+0x44>)
 800a334:	f000 f818 	bl	800a368 <_init>
 800a338:	1b64      	subs	r4, r4, r5
 800a33a:	10a4      	asrs	r4, r4, #2
 800a33c:	2600      	movs	r6, #0
 800a33e:	42a6      	cmp	r6, r4
 800a340:	d105      	bne.n	800a34e <__libc_init_array+0x2e>
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	f855 3b04 	ldr.w	r3, [r5], #4
 800a348:	4798      	blx	r3
 800a34a:	3601      	adds	r6, #1
 800a34c:	e7ee      	b.n	800a32c <__libc_init_array+0xc>
 800a34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a352:	4798      	blx	r3
 800a354:	3601      	adds	r6, #1
 800a356:	e7f2      	b.n	800a33e <__libc_init_array+0x1e>
 800a358:	0800a3bc 	.word	0x0800a3bc
 800a35c:	0800a3bc 	.word	0x0800a3bc
 800a360:	0800a3bc 	.word	0x0800a3bc
 800a364:	0800a3c0 	.word	0x0800a3c0

0800a368 <_init>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr

0800a374 <_fini>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr
