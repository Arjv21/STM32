
UserApp_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  0000710c  2**0
                  CONTENTS
  4 .ARM          00000000  08005370  08005370  0000710c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005370  08005370  0000710c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005374  08005374  00006374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08005378  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  2000010c  08005484  0000710c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08005484  00007534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d345  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ec  00000000  00000000  00014481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00016870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c2  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8f9  00000000  00000000  00017a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f31b  00000000  00000000  00036353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4318  00000000  00000000  0004566e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9986  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d0  00000000  00000000  000f99cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000fc19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000010c 	.word	0x2000010c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005320 	.word	0x08005320

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000110 	.word	0x20000110
 80001d0:	08005320 	.word	0x08005320

080001d4 <clearBuffer>:

#include "ext_flash_w25q64.h"

uint8_t flashInstruction[260] = {0};

void clearBuffer(uint8_t *pBuff, uint16_t buffLen){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	807b      	strh	r3, [r7, #2]
	for(uint16_t i = 0;i < buffLen; i++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	81fb      	strh	r3, [r7, #14]
 80001e4:	e007      	b.n	80001f6 <clearBuffer+0x22>
		pBuff[i] = 0x00;
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i < buffLen; i++)
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	3301      	adds	r3, #1
 80001f4:	81fb      	strh	r3, [r7, #14]
 80001f6:	89fa      	ldrh	r2, [r7, #14]
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f3      	bcc.n	80001e6 <clearBuffer+0x12>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <softDelay>:

void softDelay(uint32_t count)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	for(;count>0;count--);
 8000214:	e002      	b.n	800021c <softDelay+0x10>
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	3b01      	subs	r3, #1
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f9      	bne.n	8000216 <softDelay+0xa>
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr

08000230 <flashDataCopy>:
void flashDataCopy(uint8_t *pDest, uint8_t *pSrc, uint16_t len){
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	4613      	mov	r3, r2
 800023c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0; i<len; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	82fb      	strh	r3, [r7, #22]
 8000242:	e00a      	b.n	800025a <flashDataCopy+0x2a>
		pDest[i] = pSrc[i];
 8000244:	8afb      	ldrh	r3, [r7, #22]
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	441a      	add	r2, r3
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<len; i++)
 8000254:	8afb      	ldrh	r3, [r7, #22]
 8000256:	3301      	adds	r3, #1
 8000258:	82fb      	strh	r3, [r7, #22]
 800025a:	8afa      	ldrh	r2, [r7, #22]
 800025c:	88fb      	ldrh	r3, [r7, #6]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3f0      	bcc.n	8000244 <flashDataCopy+0x14>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	371c      	adds	r7, #28
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <extFlashHardReset>:
void extFlashHardReset(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	  HAL_GPIO_WritePin(F_WP_GPIO_Port, F_WP_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2108      	movs	r1, #8
 8000278:	4818      	ldr	r0, [pc, #96]	@ (80002dc <extFlashHardReset+0x6c>)
 800027a:	f001 f9f1 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f001 f9ea 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2104      	movs	r1, #4
 8000290:	4813      	ldr	r0, [pc, #76]	@ (80002e0 <extFlashHardReset+0x70>)
 8000292:	f001 f9e5 	bl	8001660 <HAL_GPIO_WritePin>
	  softDelay(100);
 8000296:	2064      	movs	r0, #100	@ 0x64
 8000298:	f7ff ffb8 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f001 f9db 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	480c      	ldr	r0, [pc, #48]	@ (80002e0 <extFlashHardReset+0x70>)
 80002b0:	f001 f9d6 	bl	8001660 <HAL_GPIO_WritePin>
	  softDelay(100);
 80002b4:	2064      	movs	r0, #100	@ 0x64
 80002b6:	f7ff ffa9 	bl	800020c <softDelay>
	  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c4:	f001 f9cc 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	2104      	movs	r1, #4
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <extFlashHardReset+0x70>)
 80002ce:	f001 f9c7 	bl	8001660 <HAL_GPIO_WritePin>
	  softDelay(200);
 80002d2:	20c8      	movs	r0, #200	@ 0xc8
 80002d4:	f7ff ff9a 	bl	800020c <softDelay>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	48000400 	.word	0x48000400
 80002e0:	48000c00 	.word	0x48000c00

080002e4 <extFlashGetDeviceId>:
void extFlashGetDeviceId(uint8_t *pDeviceIdRxData){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint8_t manufacturerId[] = {0x90,0x00,0x00,0x00};
 80002ec:	2390      	movs	r3, #144	@ 0x90
 80002ee:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Init(&hspi3);				//
 80002f0:	4812      	ldr	r0, [pc, #72]	@ (800033c <extFlashGetDeviceId+0x58>)
 80002f2:	f002 fe43 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2104      	movs	r1, #4
 80002fa:	4811      	ldr	r0, [pc, #68]	@ (8000340 <extFlashGetDeviceId+0x5c>)
 80002fc:	f001 f9b0 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&manufacturerId, 4, 1);
 8000300:	f107 010c 	add.w	r1, r7, #12
 8000304:	2301      	movs	r3, #1
 8000306:	2204      	movs	r2, #4
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <extFlashGetDeviceId+0x58>)
 800030a:	f002 ff0a 	bl	8003122 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pDeviceIdRxData, 2, 100);
 800030e:	2364      	movs	r3, #100	@ 0x64
 8000310:	2202      	movs	r2, #2
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <extFlashGetDeviceId+0x58>)
 8000316:	f003 f879 	bl	800340c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2104      	movs	r1, #4
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <extFlashGetDeviceId+0x5c>)
 8000320:	f001 f99e 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Init(&hspi3);
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <extFlashGetDeviceId+0x58>)
 8000326:	f002 fe29 	bl	8002f7c <HAL_SPI_Init>
	softDelay(500);
 800032a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800032e:	f7ff ff6d 	bl	800020c <softDelay>
}
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000444 	.word	0x20000444
 8000340:	48000c00 	.word	0x48000c00

08000344 <extFlashGetStatusReg1>:
uint8_t extFlashGetStatusReg1(){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	flashInstruction[0] = 0x05;
 800034a:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <extFlashGetStatusReg1+0x54>)
 800034c:	2205      	movs	r2, #5
 800034e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 8000354:	4811      	ldr	r0, [pc, #68]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000356:	f002 fe11 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2104      	movs	r1, #4
 800035e:	4810      	ldr	r0, [pc, #64]	@ (80003a0 <extFlashGetStatusReg1+0x5c>)
 8000360:	f001 f97e 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)flashInstruction, 1, 100);
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	490b      	ldr	r1, [pc, #44]	@ (8000398 <extFlashGetStatusReg1+0x54>)
 800036a:	480c      	ldr	r0, [pc, #48]	@ (800039c <extFlashGetStatusReg1+0x58>)
 800036c:	f002 fed9 	bl	8003122 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
 8000370:	1df9      	adds	r1, r7, #7
 8000372:	2301      	movs	r3, #1
 8000374:	2201      	movs	r2, #1
 8000376:	4809      	ldr	r0, [pc, #36]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000378:	f003 f848 	bl	800340c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2104      	movs	r1, #4
 8000380:	4807      	ldr	r0, [pc, #28]	@ (80003a0 <extFlashGetStatusReg1+0x5c>)
 8000382:	f001 f96d 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <extFlashGetStatusReg1+0x58>)
 8000388:	f002 fea3 	bl	80030d2 <HAL_SPI_DeInit>
	return status;
 800038c:	79fb      	ldrb	r3, [r7, #7]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000128 	.word	0x20000128
 800039c:	20000444 	.word	0x20000444
 80003a0:	48000c00 	.word	0x48000c00

080003a4 <extFlashSendCommand>:
	HAL_SPI_Receive(&hspi3, &status, 1, 1);
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
	HAL_SPI_DeInit(&hspi3);
	return status;
}
void extFlashSendCommand(uint8_t flashCmd){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Init(&hspi3);
 80003ae:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003b0:	f002 fde4 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2104      	movs	r1, #4
 80003b8:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <extFlashSendCommand+0x44>)
 80003ba:	f001 f951 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashCmd, 1, 1);
 80003be:	1df9      	adds	r1, r7, #7
 80003c0:	2301      	movs	r3, #1
 80003c2:	2201      	movs	r2, #1
 80003c4:	4807      	ldr	r0, [pc, #28]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003c6:	f002 feac 	bl	8003122 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2104      	movs	r1, #4
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <extFlashSendCommand+0x44>)
 80003d0:	f001 f946 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80003d4:	4803      	ldr	r0, [pc, #12]	@ (80003e4 <extFlashSendCommand+0x40>)
 80003d6:	f002 fe7c 	bl	80030d2 <HAL_SPI_DeInit>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000444 	.word	0x20000444
 80003e8:	48000c00 	.word	0x48000c00

080003ec <extFlashPageRead>:
void extFlashPageRead(uint32_t address, uint8_t* pData, uint8_t dataLength){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	4613      	mov	r3, r2
 80003f8:	71fb      	strb	r3, [r7, #7]
	flashInstruction[0] = READ_DATA;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <extFlashPageRead+0x80>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 8000400:	2303      	movs	r3, #3
 8000402:	75fb      	strb	r3, [r7, #23]
 8000404:	e00a      	b.n	800041c <extFlashPageRead+0x30>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	b2d1      	uxtb	r1, r2
 800040c:	4a17      	ldr	r2, [pc, #92]	@ (800046c <extFlashPageRead+0x80>)
 800040e:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 8000416:	7dfb      	ldrb	r3, [r7, #23]
 8000418:	3b01      	subs	r3, #1
 800041a:	75fb      	strb	r3, [r7, #23]
 800041c:	7dfb      	ldrb	r3, [r7, #23]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1f1      	bne.n	8000406 <extFlashPageRead+0x1a>
	}
	HAL_SPI_Init(&hspi3);
 8000422:	4813      	ldr	r0, [pc, #76]	@ (8000470 <extFlashPageRead+0x84>)
 8000424:	f002 fdaa 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4811      	ldr	r0, [pc, #68]	@ (8000474 <extFlashPageRead+0x88>)
 800042e:	f001 f917 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000432:	2301      	movs	r3, #1
 8000434:	2204      	movs	r2, #4
 8000436:	490d      	ldr	r1, [pc, #52]	@ (800046c <extFlashPageRead+0x80>)
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <extFlashPageRead+0x84>)
 800043a:	f002 fe72 	bl	8003122 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pData, dataLength, 10);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	b29a      	uxth	r2, r3
 8000442:	230a      	movs	r3, #10
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	480a      	ldr	r0, [pc, #40]	@ (8000470 <extFlashPageRead+0x84>)
 8000448:	f002 ffe0 	bl	800340c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	4808      	ldr	r0, [pc, #32]	@ (8000474 <extFlashPageRead+0x88>)
 8000452:	f001 f905 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000456:	4806      	ldr	r0, [pc, #24]	@ (8000470 <extFlashPageRead+0x84>)
 8000458:	f002 fe3b 	bl	80030d2 <HAL_SPI_DeInit>
	HAL_Delay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fcdd 	bl	8000e1c <HAL_Delay>
}
 8000462:	bf00      	nop
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000128 	.word	0x20000128
 8000470:	20000444 	.word	0x20000444
 8000474:	48000c00 	.word	0x48000c00

08000478 <extFlashPageWrite>:
void extFlashPageWrite(uint32_t address, uint8_t* pData, uint16_t dataLength){
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	4613      	mov	r3, r2
 8000484:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	extFlashSendCommand(WRITE_ENABLE);
 8000486:	2006      	movs	r0, #6
 8000488:	f7ff ff8c 	bl	80003a4 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800048c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000490:	4822      	ldr	r0, [pc, #136]	@ (800051c <extFlashPageWrite+0xa4>)
 8000492:	f7ff fe9f 	bl	80001d4 <clearBuffer>
	flashInstruction[0] = PAGE_PROGRAM;
 8000496:	4b21      	ldr	r3, [pc, #132]	@ (800051c <extFlashPageWrite+0xa4>)
 8000498:	2202      	movs	r2, #2
 800049a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 3; i>0; i--){
 800049c:	2303      	movs	r3, #3
 800049e:	75fb      	strb	r3, [r7, #23]
 80004a0:	e00a      	b.n	80004b8 <extFlashPageWrite+0x40>
		flashInstruction[i] = (uint8_t)address & 0xFF;
 80004a2:	7dfb      	ldrb	r3, [r7, #23]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	b2d1      	uxtb	r1, r2
 80004a8:	4a1c      	ldr	r2, [pc, #112]	@ (800051c <extFlashPageWrite+0xa4>)
 80004aa:	54d1      	strb	r1, [r2, r3]
		address = address>>8;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 3; i>0; i--){
 80004b2:	7dfb      	ldrb	r3, [r7, #23]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	75fb      	strb	r3, [r7, #23]
 80004b8:	7dfb      	ldrb	r3, [r7, #23]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1f1      	bne.n	80004a2 <extFlashPageWrite+0x2a>
	}
	flashDataCopy(flashInstruction+4, pData, dataLength);
 80004be:	4818      	ldr	r0, [pc, #96]	@ (8000520 <extFlashPageWrite+0xa8>)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	461a      	mov	r2, r3
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	f7ff feb3 	bl	8000230 <flashDataCopy>
	HAL_SPI_Init(&hspi3);
 80004ca:	4816      	ldr	r0, [pc, #88]	@ (8000524 <extFlashPageWrite+0xac>)
 80004cc:	f002 fd56 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2104      	movs	r1, #4
 80004d4:	4814      	ldr	r0, [pc, #80]	@ (8000528 <extFlashPageWrite+0xb0>)
 80004d6:	f001 f8c3 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, flashInstruction, dataLength+4, 10);
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	3304      	adds	r3, #4
 80004de:	b29a      	uxth	r2, r3
 80004e0:	230a      	movs	r3, #10
 80004e2:	490e      	ldr	r1, [pc, #56]	@ (800051c <extFlashPageWrite+0xa4>)
 80004e4:	480f      	ldr	r0, [pc, #60]	@ (8000524 <extFlashPageWrite+0xac>)
 80004e6:	f002 fe1c 	bl	8003122 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2104      	movs	r1, #4
 80004ee:	480e      	ldr	r0, [pc, #56]	@ (8000528 <extFlashPageWrite+0xb0>)
 80004f0:	f001 f8b6 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 80004f4:	480b      	ldr	r0, [pc, #44]	@ (8000524 <extFlashPageWrite+0xac>)
 80004f6:	f002 fdec 	bl	80030d2 <HAL_SPI_DeInit>
	do{
		HAL_Delay(1);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 fc8e 	bl	8000e1c <HAL_Delay>
		status = extFlashGetStatusReg1();
 8000500:	f7ff ff20 	bl	8000344 <extFlashGetStatusReg1>
 8000504:	4603      	mov	r3, r0
 8000506:	75bb      	strb	r3, [r7, #22]
	}while((status & 0x03) != 0x00);
 8000508:	7dbb      	ldrb	r3, [r7, #22]
 800050a:	f003 0303 	and.w	r3, r3, #3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1f3      	bne.n	80004fa <extFlashPageWrite+0x82>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000128 	.word	0x20000128
 8000520:	2000012c 	.word	0x2000012c
 8000524:	20000444 	.word	0x20000444
 8000528:	48000c00 	.word	0x48000c00

0800052c <extFlashErase>:
void extFlashErase(uint8_t cmd, uint32_t eraseAddress){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
	extFlashSendCommand(WRITE_ENABLE);
 8000538:	2006      	movs	r0, #6
 800053a:	f7ff ff33 	bl	80003a4 <extFlashSendCommand>
	clearBuffer(flashInstruction, 260);
 800053e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000542:	481f      	ldr	r0, [pc, #124]	@ (80005c0 <extFlashErase+0x94>)
 8000544:	f7ff fe46 	bl	80001d4 <clearBuffer>
	flashInstruction[0]	= cmd;
 8000548:	4a1d      	ldr	r2, [pc, #116]	@ (80005c0 <extFlashErase+0x94>)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	7013      	strb	r3, [r2, #0]
	for(uint8_t i = 3; i>0; i--){
 800054e:	2303      	movs	r3, #3
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e00a      	b.n	800056a <extFlashErase+0x3e>
		flashInstruction[i] = (uint8_t)eraseAddress & 0xFF;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	b2d1      	uxtb	r1, r2
 800055a:	4a19      	ldr	r2, [pc, #100]	@ (80005c0 <extFlashErase+0x94>)
 800055c:	54d1      	strb	r1, [r2, r3]
		eraseAddress = eraseAddress>>8;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 3; i>0; i--){
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	3b01      	subs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f1      	bne.n	8000554 <extFlashErase+0x28>
	}
	HAL_SPI_Init(&hspi3);
 8000570:	4814      	ldr	r0, [pc, #80]	@ (80005c4 <extFlashErase+0x98>)
 8000572:	f002 fd03 	bl	8002f7c <HAL_SPI_Init>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2104      	movs	r1, #4
 800057a:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <extFlashErase+0x9c>)
 800057c:	f001 f870 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t *)&flashInstruction, 4, 1);
 8000580:	2301      	movs	r3, #1
 8000582:	2204      	movs	r2, #4
 8000584:	490e      	ldr	r1, [pc, #56]	@ (80005c0 <extFlashErase+0x94>)
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <extFlashErase+0x98>)
 8000588:	f002 fdcb 	bl	8003122 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2104      	movs	r1, #4
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <extFlashErase+0x9c>)
 8000592:	f001 f865 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_SPI_DeInit(&hspi3);
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <extFlashErase+0x98>)
 8000598:	f002 fd9b 	bl	80030d2 <HAL_SPI_DeInit>

	uint8_t status;
	do{
		HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fc3d 	bl	8000e1c <HAL_Delay>
		status = extFlashGetStatusReg1();
 80005a2:	f7ff fecf 	bl	8000344 <extFlashGetStatusReg1>
 80005a6:	4603      	mov	r3, r0
 80005a8:	73bb      	strb	r3, [r7, #14]
	}while((status & 0x03) != 0x00);
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f3      	bne.n	800059c <extFlashErase+0x70>
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000128 	.word	0x20000128
 80005c4:	20000444 	.word	0x20000444
 80005c8:	48000c00 	.word	0x48000c00

080005cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a38      	ldr	r2, [pc, #224]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b36      	ldr	r3, [pc, #216]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a2c      	ldr	r2, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000618:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a26      	ldr	r2, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000630:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <MX_GPIO_Init+0xfc>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Green_Pin|F_WP_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f241 0108 	movw	r1, #4104	@ 0x1008
 8000648:	4820      	ldr	r0, [pc, #128]	@ (80006cc <MX_GPIO_Init+0x100>)
 800064a:	f001 f809 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_RST_GPIO_Port, F_RST_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f001 f802 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(F_nCS_GPIO_Port, F_nCS_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	481b      	ldr	r0, [pc, #108]	@ (80006d0 <MX_GPIO_Init+0x104>)
 8000662:	f000 fffd 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led_Green_Pin|F_WP_Pin;
 8000666:	f241 0308 	movw	r3, #4104	@ 0x1008
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	@ (80006cc <MX_GPIO_Init+0x100>)
 8000680:	f000 fd78 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_RST_Pin;
 8000684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_RST_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a0:	f000 fd68 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = F_nCS_Pin;
 80006a4:	2304      	movs	r3, #4
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(F_nCS_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_GPIO_Init+0x104>)
 80006bc:	f000 fd5a 	bl	8001174 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	@ 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48000c00 	.word	0x48000c00

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb39 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f905 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff ff73 	bl	80005cc <MX_GPIO_Init>
  MX_SPI3_Init();
 80006e6:	f000 f97f 	bl	80009e8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80006ea:	f000 fa8d 	bl	8000c08 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  extFlashHardReset();
 80006ee:	f7ff fdbf 	bl	8000270 <extFlashHardReset>
//  HAL_Delay(10);
  extFlashSendCommand(ENABLE_RESET);
 80006f2:	2066      	movs	r0, #102	@ 0x66
 80006f4:	f7ff fe56 	bl	80003a4 <extFlashSendCommand>
  extFlashSendCommand(RESET_DEVICE);
 80006f8:	2099      	movs	r0, #153	@ 0x99
 80006fa:	f7ff fe53 	bl	80003a4 <extFlashSendCommand>
  extFlashSendCommand(GLOBAL_UNLOCK);
 80006fe:	2098      	movs	r0, #152	@ 0x98
 8000700:	f7ff fe50 	bl	80003a4 <extFlashSendCommand>
//  extFlashSendCommand(CHIP_ERASE);
//  HAL_Delay(110000);

  extFlashGetDeviceId(device_Id);
 8000704:	486e      	ldr	r0, [pc, #440]	@ (80008c0 <main+0x1ec>)
 8000706:	f7ff fded 	bl	80002e4 <extFlashGetDeviceId>
//  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
//  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
//  extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
//  dummyFlagData = 0xAA;
//  extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, &dummyFlagData, 1);
  dummyFlagData = 0;
 800070a:	4b6e      	ldr	r3, [pc, #440]	@ (80008c4 <main+0x1f0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  extFlashPageRead(FLASH_FLAG_SAVE_ADDRESS,&dummyFlagData, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	496c      	ldr	r1, [pc, #432]	@ (80008c4 <main+0x1f0>)
 8000714:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000718:	f7ff fe68 	bl	80003ec <extFlashPageRead>
  if(dummyFlagData == 0xAA){
 800071c:	4b69      	ldr	r3, [pc, #420]	@ (80008c4 <main+0x1f0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2baa      	cmp	r3, #170	@ 0xaa
 8000722:	d11f      	bne.n	8000764 <main+0x90>
	  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
 8000724:	2100      	movs	r1, #0
 8000726:	20d8      	movs	r0, #216	@ 0xd8
 8000728:	f7ff ff00 	bl	800052c <extFlashErase>
	  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
 800072c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000730:	20d8      	movs	r0, #216	@ 0xd8
 8000732:	f7ff fefb 	bl	800052c <extFlashErase>
	  extFlashPageWrite(flashWriteAddress, userData, sizeof(userData));
 8000736:	4b64      	ldr	r3, [pc, #400]	@ (80008c8 <main+0x1f4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073e:	4963      	ldr	r1, [pc, #396]	@ (80008cc <main+0x1f8>)
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe99 	bl	8000478 <extFlashPageWrite>
	  extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 8000746:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800074a:	2020      	movs	r0, #32
 800074c:	f7ff feee 	bl	800052c <extFlashErase>
	  dummyFlagData = 0xBB;
 8000750:	4b5c      	ldr	r3, [pc, #368]	@ (80008c4 <main+0x1f0>)
 8000752:	22bb      	movs	r2, #187	@ 0xbb
 8000754:	701a      	strb	r2, [r3, #0]
	  extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, &dummyFlagData, 1);
 8000756:	2201      	movs	r2, #1
 8000758:	495a      	ldr	r1, [pc, #360]	@ (80008c4 <main+0x1f0>)
 800075a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800075e:	f7ff fe8b 	bl	8000478 <extFlashPageWrite>
 8000762:	e029      	b.n	80007b8 <main+0xe4>
  }
  else if(dummyFlagData == 0xBB){
 8000764:	4b57      	ldr	r3, [pc, #348]	@ (80008c4 <main+0x1f0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2bbb      	cmp	r3, #187	@ 0xbb
 800076a:	d125      	bne.n	80007b8 <main+0xe4>
	  for(uint8_t i=0; i < 64; i++){
 800076c:	2300      	movs	r3, #0
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	e011      	b.n	8000796 <main+0xc2>
		  extFlashPageRead(extFlashReadAddress,(uint8_t*)&flashReadData[i], 4);
 8000772:	4b57      	ldr	r3, [pc, #348]	@ (80008d0 <main+0x1fc>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4a56      	ldr	r2, [pc, #344]	@ (80008d4 <main+0x200>)
 800077c:	4413      	add	r3, r2
 800077e:	2204      	movs	r2, #4
 8000780:	4619      	mov	r1, r3
 8000782:	f7ff fe33 	bl	80003ec <extFlashPageRead>
		  extFlashReadAddress += 4;
 8000786:	4b52      	ldr	r3, [pc, #328]	@ (80008d0 <main+0x1fc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3304      	adds	r3, #4
 800078c:	4a50      	ldr	r2, [pc, #320]	@ (80008d0 <main+0x1fc>)
 800078e:	6013      	str	r3, [r2, #0]
	  for(uint8_t i=0; i < 64; i++){
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3301      	adds	r3, #1
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b3f      	cmp	r3, #63	@ 0x3f
 800079a:	d9ea      	bls.n	8000772 <main+0x9e>
	  }
	  extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 800079c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80007a0:	2020      	movs	r0, #32
 80007a2:	f7ff fec3 	bl	800052c <extFlashErase>
	  dummyFlagData = 0xAA;
 80007a6:	4b47      	ldr	r3, [pc, #284]	@ (80008c4 <main+0x1f0>)
 80007a8:	22aa      	movs	r2, #170	@ 0xaa
 80007aa:	701a      	strb	r2, [r3, #0]
	  extFlashPageWrite(FLASH_FLAG_SAVE_ADDRESS, &dummyFlagData, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	4945      	ldr	r1, [pc, #276]	@ (80008c4 <main+0x1f0>)
 80007b0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80007b4:	f7ff fe60 	bl	8000478 <extFlashPageWrite>
  }

  while (1)
  {
	  if(packetReceived){
 80007b8:	4b47      	ldr	r3, [pc, #284]	@ (80008d8 <main+0x204>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d06a      	beq.n	8000896 <main+0x1c2>
		  packetReceived = 0;
 80007c0:	4b45      	ldr	r3, [pc, #276]	@ (80008d8 <main+0x204>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		  if(uartRxData[0] == 0x00){	// data packet
 80007c6:	4b45      	ldr	r3, [pc, #276]	@ (80008dc <main+0x208>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d12a      	bne.n	8000824 <main+0x150>
			  if(flashWriteAddress == 0){
 80007ce:	4b3e      	ldr	r3, [pc, #248]	@ (80008c8 <main+0x1f4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d113      	bne.n	80007fe <main+0x12a>
				  extFlashHardReset();
 80007d6:	f7ff fd4b 	bl	8000270 <extFlashHardReset>
				  extFlashSendCommand(ENABLE_RESET);
 80007da:	2066      	movs	r0, #102	@ 0x66
 80007dc:	f7ff fde2 	bl	80003a4 <extFlashSendCommand>
				  extFlashSendCommand(RESET_DEVICE);
 80007e0:	2099      	movs	r0, #153	@ 0x99
 80007e2:	f7ff fddf 	bl	80003a4 <extFlashSendCommand>
				  extFlashSendCommand(GLOBAL_UNLOCK);
 80007e6:	2098      	movs	r0, #152	@ 0x98
 80007e8:	f7ff fddc 	bl	80003a4 <extFlashSendCommand>
				  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE0_BASE_ADDRESS);
 80007ec:	2100      	movs	r1, #0
 80007ee:	20d8      	movs	r0, #216	@ 0xd8
 80007f0:	f7ff fe9c 	bl	800052c <extFlashErase>
				  extFlashErase(BLOCK_ERASE_64KB, FLASH_PAGE1_BASE_ADDRESS);
 80007f4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80007f8:	20d8      	movs	r0, #216	@ 0xd8
 80007fa:	f7ff fe97 	bl	800052c <extFlashErase>
			  }
			  extFlashPageWrite(flashWriteAddress, uartRxData+1, receivedPacketSize-1);
 80007fe:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <main+0x1f4>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	4937      	ldr	r1, [pc, #220]	@ (80008e0 <main+0x20c>)
 8000804:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <main+0x210>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	f7ff fe33 	bl	8000478 <extFlashPageWrite>
			  flashWriteAddress += receivedPacketSize;
 8000812:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <main+0x210>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <main+0x1f4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4413      	add	r3, r2
 800081e:	4a2a      	ldr	r2, [pc, #168]	@ (80008c8 <main+0x1f4>)
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e038      	b.n	8000896 <main+0x1c2>
		  }
		  else if(uartRxData[0] == 0x01){	// End of Tranfer and set saveFlag
 8000824:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <main+0x208>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d112      	bne.n	8000852 <main+0x17e>
			  uint8_t flashFlageData = 0xAA;
 800082c:	23aa      	movs	r3, #170	@ 0xaa
 800082e:	717b      	strb	r3, [r7, #5]
			  flashWriteAddress = FLASH_FLAG_SAVE_ADDRESS;
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <main+0x1f4>)
 8000832:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000836:	601a      	str	r2, [r3, #0]
			  extFlashErase(SECTOR_ERASE_4KB, FLASH_FLAG_SAVE_ADDRESS);
 8000838:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800083c:	2020      	movs	r0, #32
 800083e:	f7ff fe75 	bl	800052c <extFlashErase>
			  extFlashPageWrite(flashWriteAddress,&flashFlageData,1);
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <main+0x1f4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1d79      	adds	r1, r7, #5
 8000848:	2201      	movs	r2, #1
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe14 	bl	8000478 <extFlashPageWrite>
 8000850:	e021      	b.n	8000896 <main+0x1c2>
		  }
		  else if(uartRxData[0] == 0x02){	// Just read once if the data has been saved into th flash
 8000852:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <main+0x208>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d11d      	bne.n	8000896 <main+0x1c2>
			  extFlashReadAddress = FLASH_PAGE0_BASE_ADDRESS;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <main+0x1fc>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
			  for(uint8_t i=0; i < 64; i++){
 8000860:	2300      	movs	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]
 8000864:	e011      	b.n	800088a <main+0x1b6>
				  extFlashPageRead(extFlashReadAddress,(uint8_t*)&flashReadData[i], 4);
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <main+0x1fc>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4a19      	ldr	r2, [pc, #100]	@ (80008d4 <main+0x200>)
 8000870:	4413      	add	r3, r2
 8000872:	2204      	movs	r2, #4
 8000874:	4619      	mov	r1, r3
 8000876:	f7ff fdb9 	bl	80003ec <extFlashPageRead>
				  extFlashReadAddress += 4;
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <main+0x1fc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3304      	adds	r3, #4
 8000880:	4a13      	ldr	r2, [pc, #76]	@ (80008d0 <main+0x1fc>)
 8000882:	6013      	str	r3, [r2, #0]
			  for(uint8_t i=0; i < 64; i++){
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	3301      	adds	r3, #1
 8000888:	71bb      	strb	r3, [r7, #6]
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	2b3f      	cmp	r3, #63	@ 0x3f
 800088e:	d9ea      	bls.n	8000866 <main+0x192>
			  }
			  extFlashReadAddress = FLASH_PAGE0_BASE_ADDRESS;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <main+0x1fc>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
		  }
	  }
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <main+0x214>)
 800089e:	f000 fedf 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008a2:	2064      	movs	r0, #100	@ 0x64
 80008a4:	f000 faba 	bl	8000e1c <HAL_Delay>
	  HAL_GPIO_WritePin(Led_Green_GPIO_Port, Led_Green_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <main+0x214>)
 80008b0:	f000 fed6 	bl	8001660 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f000 fab0 	bl	8000e1c <HAL_Delay>
	  if(packetReceived){
 80008bc:	e77c      	b.n	80007b8 <main+0xe4>
 80008be:	bf00      	nop
 80008c0:	20000440 	.word	0x20000440
 80008c4:	20000336 	.word	0x20000336
 80008c8:	2000022c 	.word	0x2000022c
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000230 	.word	0x20000230
 80008d4:	20000234 	.word	0x20000234
 80008d8:	2000043c 	.word	0x2000043c
 80008dc:	20000338 	.word	0x20000338
 80008e0:	20000339 	.word	0x20000339
 80008e4:	20000334 	.word	0x20000334
 80008e8:	48000400 	.word	0x48000400

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0a2      	sub	sp, #136	@ 0x88
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008f6:	2228      	movs	r2, #40	@ 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 fce4 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fcd6 	bl	80052c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000930:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fea4 	bl	8001690 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094e:	f000 f845 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	64fb      	str	r3, [r7, #76]	@ 0x4c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000966:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fee3 	bl	8002738 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000978:	f000 f830 	bl	80009dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097c:	2302      	movs	r3, #2
 800097e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4618      	mov	r0, r3
 8000988:	f002 f90c 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000992:	f000 f823 	bl	80009dc <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3788      	adds	r7, #136	@ 0x88
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	807b      	strh	r3, [r7, #2]
	packetReceived = 1;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <HAL_UARTEx_RxEventCallback+0x2c>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	receivedPacketSize = Size;
 80009b2:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_UARTEx_RxEventCallback+0x30>)
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	8013      	strh	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, uartRxData, 260);
 80009b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009bc:	4905      	ldr	r1, [pc, #20]	@ (80009d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <HAL_UARTEx_RxEventCallback+0x38>)
 80009c0:	f004 fc2e 	bl	8005220 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000043c 	.word	0x2000043c
 80009d0:	20000334 	.word	0x20000334
 80009d4:	20000338 	.word	0x20000338
 80009d8:	200004a8 	.word	0x200004a8

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_SPI3_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_SPI3_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <MX_SPI3_Init+0x74>)
 80009f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <MX_SPI3_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a02:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a1e:	2218      	movs	r2, #24
 8000a20:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a36:	2207      	movs	r2, #7
 8000a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a42:	2208      	movs	r2, #8
 8000a44:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_SPI3_Init+0x74>)
 8000a48:	f002 fa98 	bl	8002f7c <HAL_SPI_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f7ff ffc3 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000444 	.word	0x20000444
 8000a60:	40003c00 	.word	0x40003c00

08000a64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_SPI_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d128      	bne.n	8000ad8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a16      	ldr	r2, [pc, #88]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_SPI_MspInit+0x80>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ab6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <HAL_SPI_MspInit+0x84>)
 8000ad4:	f000 fb4e 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40003c00 	.word	0x40003c00
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_SPI_MspDeInit+0x30>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10a      	bne.n	8000b14 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_SPI_MspDeInit+0x34>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_SPI_MspDeInit+0x34>)
 8000b04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b08:	61d3      	str	r3, [r2, #28]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8000b0a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_SPI_MspDeInit+0x38>)
 8000b10:	f000 fcba 	bl	8001488 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40003c00 	.word	0x40003c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000800 	.word	0x48000800

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	61d3      	str	r3, [r2, #28]
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 f909 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART2_IRQHandler+0x10>)
 8000bd6:	f003 f97d 	bl	8003ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200004a8 	.word	0x200004a8

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_USART2_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f003 f8f4 	bl	8003e38 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff fec1 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200004a8 	.word	0x200004a8
 8000c64:	40004400 	.word	0x40004400

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d130      	bne.n	8000cec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_UART_MspInit+0x90>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd8:	f000 fa4c 	bl	8001174 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2026      	movs	r0, #38	@ 0x26
 8000ce2:	f000 f99a 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce6:	2026      	movs	r0, #38	@ 0x26
 8000ce8:	f000 f9b3 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000

08000cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff ff70 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopForever+0xe>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopForever+0x16>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f004 fad5 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2e:	f7ff fcd1 	bl	80006d4 <main>

08000d32 <LoopForever>:

LoopForever:
    b LoopForever
 8000d32:	e7fe      	b.n	8000d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000d40:	08005378 	.word	0x08005378
  ldr r2, =_sbss
 8000d44:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000d48:	20000534 	.word	0x20000534

08000d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC1_2_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f94f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fedc 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f967 	bl	800106e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f92f 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000100 	.word	0x20000100
 8000dd4:	20000108 	.word	0x20000108
 8000dd8:	20000104 	.word	0x20000104

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000108 	.word	0x20000108
 8000e00:	20000530 	.word	0x20000530

08000e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000530 	.word	0x20000530

08000e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000108 	.word	0x20000108

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001094:	2b02      	cmp	r3, #2
 8001096:	d008      	beq.n	80010aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2204      	movs	r2, #4
 800109c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e020      	b.n	80010ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 020e 	bic.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800110a:	2b02      	cmp	r3, #2
 800110c:	d005      	beq.n	800111a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e027      	b.n	800116a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 020e 	bic.w	r2, r2, #14
 8001128:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	4798      	blx	r3
    } 
  }
  return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e160      	b.n	8001446 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8152 	beq.w	8001440 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x40>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80ac 	beq.w	8001440 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001464 <HAL_GPIO_Init+0x2f0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001464 <HAL_GPIO_Init+0x2f0>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001464 <HAL_GPIO_Init+0x2f0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001300:	4a59      	ldr	r2, [pc, #356]	@ (8001468 <HAL_GPIO_Init+0x2f4>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800132a:	d025      	beq.n	8001378 <HAL_GPIO_Init+0x204>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4f      	ldr	r2, [pc, #316]	@ (800146c <HAL_GPIO_Init+0x2f8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d01f      	beq.n	8001374 <HAL_GPIO_Init+0x200>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4e      	ldr	r2, [pc, #312]	@ (8001470 <HAL_GPIO_Init+0x2fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d019      	beq.n	8001370 <HAL_GPIO_Init+0x1fc>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <HAL_GPIO_Init+0x300>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1f8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4c      	ldr	r2, [pc, #304]	@ (8001478 <HAL_GPIO_Init+0x304>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1f4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4b      	ldr	r2, [pc, #300]	@ (800147c <HAL_GPIO_Init+0x308>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1f0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a4a      	ldr	r2, [pc, #296]	@ (8001480 <HAL_GPIO_Init+0x30c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1ec>
 800135c:	2306      	movs	r3, #6
 800135e:	e00c      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001360:	2307      	movs	r3, #7
 8001362:	e00a      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001364:	2305      	movs	r3, #5
 8001366:	e008      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001368:	2304      	movs	r3, #4
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x206>
 800136c:	2303      	movs	r3, #3
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x206>
 8001378:	2300      	movs	r3, #0
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138a:	4937      	ldr	r1, [pc, #220]	@ (8001468 <HAL_GPIO_Init+0x2f4>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001398:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <HAL_GPIO_Init+0x310>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013bc:	4a31      	ldr	r2, [pc, #196]	@ (8001484 <HAL_GPIO_Init+0x310>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c2:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_GPIO_Init+0x310>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e6:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_GPIO_Init+0x310>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <HAL_GPIO_Init+0x310>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <HAL_GPIO_Init+0x310>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001416:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_GPIO_Init+0x310>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_GPIO_Init+0x310>)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f ae97 	bne.w	8001184 <HAL_GPIO_Init+0x10>
  }
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	48001000 	.word	0x48001000
 800147c:	48001400 	.word	0x48001400
 8001480:	48001800 	.word	0x48001800
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001496:	e0c4      	b.n	8001622 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80b7 	beq.w	800161c <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80014ae:	4a64      	ldr	r2, [pc, #400]	@ (8001640 <HAL_GPIO_DeInit+0x1b8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014d6:	d025      	beq.n	8001524 <HAL_GPIO_DeInit+0x9c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a5a      	ldr	r2, [pc, #360]	@ (8001644 <HAL_GPIO_DeInit+0x1bc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d01f      	beq.n	8001520 <HAL_GPIO_DeInit+0x98>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a59      	ldr	r2, [pc, #356]	@ (8001648 <HAL_GPIO_DeInit+0x1c0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d019      	beq.n	800151c <HAL_GPIO_DeInit+0x94>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a58      	ldr	r2, [pc, #352]	@ (800164c <HAL_GPIO_DeInit+0x1c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d013      	beq.n	8001518 <HAL_GPIO_DeInit+0x90>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a57      	ldr	r2, [pc, #348]	@ (8001650 <HAL_GPIO_DeInit+0x1c8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00d      	beq.n	8001514 <HAL_GPIO_DeInit+0x8c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a56      	ldr	r2, [pc, #344]	@ (8001654 <HAL_GPIO_DeInit+0x1cc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_DeInit+0x88>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a55      	ldr	r2, [pc, #340]	@ (8001658 <HAL_GPIO_DeInit+0x1d0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_GPIO_DeInit+0x84>
 8001508:	2306      	movs	r3, #6
 800150a:	e00c      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 800150c:	2307      	movs	r3, #7
 800150e:	e00a      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 8001510:	2305      	movs	r3, #5
 8001512:	e008      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 8001514:	2304      	movs	r3, #4
 8001516:	e006      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 8001518:	2303      	movs	r3, #3
 800151a:	e004      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_GPIO_DeInit+0x9e>
 8001524:	2300      	movs	r3, #0
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	429a      	cmp	r2, r3
 8001534:	d132      	bne.n	800159c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	4947      	ldr	r1, [pc, #284]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 8001540:	4013      	ands	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	4943      	ldr	r1, [pc, #268]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 800154e:	4013      	ands	r3, r2
 8001550:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001552:	4b42      	ldr	r3, [pc, #264]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	4940      	ldr	r1, [pc, #256]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001560:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	493c      	ldr	r1, [pc, #240]	@ (800165c <HAL_GPIO_DeInit+0x1d4>)
 800156a:	4013      	ands	r3, r2
 800156c:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800157e:	4a30      	ldr	r2, [pc, #192]	@ (8001640 <HAL_GPIO_DeInit+0x1b8>)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43da      	mvns	r2, r3
 800158e:	482c      	ldr	r0, [pc, #176]	@ (8001640 <HAL_GPIO_DeInit+0x1b8>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	400a      	ands	r2, r1
 8001596:	3302      	adds	r3, #2
 8001598:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2103      	movs	r1, #3
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	08da      	lsrs	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3208      	adds	r2, #8
 80015ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	08d2      	lsrs	r2, r2, #3
 80015d2:	4019      	ands	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2103      	movs	r1, #3
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	401a      	ands	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	2101      	movs	r1, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	401a      	ands	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2103      	movs	r1, #3
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f af34 	bne.w	8001498 <HAL_GPIO_DeInit+0x10>
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	48001800 	.word	0x48001800
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800167c:	e002      	b.n	8001684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001696:	af00      	add	r7, sp, #0
 8001698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f001 b83a 	b.w	800272a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 816f 	beq.w	80019aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016cc:	4bb5      	ldr	r3, [pc, #724]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d00c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d8:	4bb2      	ldr	r3, [pc, #712]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d15c      	bne.n	800179e <HAL_RCC_OscConfig+0x10e>
 80016e4:	4baf      	ldr	r3, [pc, #700]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d155      	bne.n	800179e <HAL_RCC_OscConfig+0x10e>
 80016f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001706:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b01      	cmp	r3, #1
 800171c:	d102      	bne.n	8001724 <HAL_RCC_OscConfig+0x94>
 800171e:	4ba1      	ldr	r3, [pc, #644]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	e015      	b.n	8001750 <HAL_RCC_OscConfig+0xc0>
 8001724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001728:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800173c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001740:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800174c:	4b95      	ldr	r3, [pc, #596]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001754:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001758:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800175c:	fa92 f2a2 	rbit	r2, r2
 8001760:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001764:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001768:	fab2 f282 	clz	r2, r2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	f002 021f 	and.w	r2, r2, #31
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8111 	beq.w	80019a8 <HAL_RCC_OscConfig+0x318>
 8001786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8108 	bne.w	80019a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f000 bfc6 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x12e>
 80017b0:	4b7c      	ldr	r3, [pc, #496]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a7b      	ldr	r2, [pc, #492]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e036      	b.n	800182c <HAL_RCC_OscConfig+0x19c>
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x158>
 80017ce:	4b75      	ldr	r3, [pc, #468]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a74      	ldr	r2, [pc, #464]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a71      	ldr	r2, [pc, #452]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e021      	b.n	800182c <HAL_RCC_OscConfig+0x19c>
 80017e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x184>
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a69      	ldr	r2, [pc, #420]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b67      	ldr	r3, [pc, #412]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a66      	ldr	r2, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x19c>
 8001814:	4b63      	ldr	r3, [pc, #396]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a62      	ldr	r2, [pc, #392]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800181a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5f      	ldr	r2, [pc, #380]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 8001826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800182a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800182c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001830:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d059      	beq.n	80018f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fae2 	bl	8000e04 <HAL_GetTick>
 8001840:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001846:	f7ff fadd 	bl	8000e04 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d902      	bls.n	800185c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	f000 bf67 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 800185c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001860:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001870:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_RCC_OscConfig+0x1fe>
 8001888:	4b46      	ldr	r3, [pc, #280]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x22a>
 800188e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001892:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80018a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018a6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80018aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018be:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80018c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018c6:	fa92 f2a2 	rbit	r2, r2
 80018ca:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f002 021f 	and.w	r2, r2, #31
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0ab      	beq.n	8001846 <HAL_RCC_OscConfig+0x1b6>
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa88 	bl	8000e04 <HAL_GetTick>
 80018f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fa:	f7ff fa83 	bl	8000e04 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d902      	bls.n	8001910 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	f000 bf0d 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 8001910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001914:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001924:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x2b2>
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x2de>
 8001942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001946:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800195e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_RCC_OscConfig+0x314>)
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001972:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001976:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800197a:	fa92 f2a2 	rbit	r2, r2
 800197e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001982:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ab      	bne.n	80018fa <HAL_RCC_OscConfig+0x26a>
 80019a2:	e002      	b.n	80019aa <HAL_RCC_OscConfig+0x31a>
 80019a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 817f 	beq.w	8001cbe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019c0:	4ba7      	ldr	r3, [pc, #668]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019cc:	4ba4      	ldr	r3, [pc, #656]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d173      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x430>
 80019d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019e4:	d16c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x430>
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80019f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x386>
 8001a10:	4b93      	ldr	r3, [pc, #588]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e013      	b.n	8001a3e <HAL_RCC_OscConfig+0x3ae>
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a2e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a3a:	4b89      	ldr	r3, [pc, #548]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a44:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a48:	fa92 f2a2 	rbit	r2, r2
 8001a4c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a50:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a54:	fab2 f282 	clz	r2, r2
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f042 0220 	orr.w	r2, r2, #32
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f002 021f 	and.w	r2, r2, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00a      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3f6>
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d002      	beq.n	8001a86 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	f000 be52 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	21f8      	movs	r1, #248	@ 0xf8
 8001a9c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001aa4:	fa91 f1a1 	rbit	r1, r1
 8001aa8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001aac:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001ab0:	fab1 f181 	clz	r1, r1
 8001ab4:	b2c9      	uxtb	r1, r1
 8001ab6:	408b      	lsls	r3, r1
 8001ab8:	4969      	ldr	r1, [pc, #420]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e0fe      	b.n	8001cbe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8088 	beq.w	8001be2 <HAL_RCC_OscConfig+0x552>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001ae4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001af2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	2301      	movs	r3, #1
 8001afc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f981 	bl	8000e04 <HAL_GetTick>
 8001b02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b08:	f7ff f97c 	bl	8000e04 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d902      	bls.n	8001b1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f000 be06 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b30:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4be>
 8001b48:	4b45      	ldr	r3, [pc, #276]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e6>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b66:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	2202      	movs	r2, #2
 8001b78:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b88:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0af      	beq.n	8001b08 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	21f8      	movs	r1, #248	@ 0xf8
 8001bbe:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001bc6:	fa91 f1a1 	rbit	r1, r1
 8001bca:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001bce:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001bd2:	fab1 f181 	clz	r1, r1
 8001bd6:	b2c9      	uxtb	r1, r1
 8001bd8:	408b      	lsls	r3, r1
 8001bda:	4921      	ldr	r1, [pc, #132]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e06d      	b.n	8001cbe <HAL_RCC_OscConfig+0x62e>
 8001be2:	2301      	movs	r3, #1
 8001be4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001bf4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f8f9 	bl	8000e04 <HAL_GetTick>
 8001c12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff f8f4 	bl	8000e04 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d902      	bls.n	8001c2e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	f000 bd7e 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5d4>
 8001c58:	4b01      	ldr	r3, [pc, #4]	@ (8001c60 <HAL_RCC_OscConfig+0x5d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e016      	b.n	8001c8c <HAL_RCC_OscConfig+0x5fc>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	2302      	movs	r3, #2
 8001c66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c88:	4bbf      	ldr	r3, [pc, #764]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c96:	fa92 f2a2 	rbit	r2, r2
 8001c9a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0220 	orr.w	r2, r2, #32
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ac      	bne.n	8001c18 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8113 	beq.w	8001efa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d07c      	beq.n	8001dde <HAL_RCC_OscConfig+0x74e>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001cf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4ba2      	ldr	r3, [pc, #648]	@ (8001f8c <HAL_RCC_OscConfig+0x8fc>)
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f879 	bl	8000e04 <HAL_GetTick>
 8001d12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f874 	bl	8000e04 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 bcfe 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fa93 f2a3 	rbit	r2, r3
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	6019      	str	r1, [r3, #0]
 8001d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f1a3 	rbit	r1, r3
 8001dac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001db4:	6019      	str	r1, [r3, #0]
  return result;
 8001db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d09d      	beq.n	8001d18 <HAL_RCC_OscConfig+0x688>
 8001ddc:	e08d      	b.n	8001efa <HAL_RCC_OscConfig+0x86a>
 8001dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e00:	601a      	str	r2, [r3, #0]
  return result;
 8001e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b5d      	ldr	r3, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x8fc>)
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7fe fff0 	bl	8000e04 <HAL_GetTick>
 8001e24:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7fe ffeb 	bl	8000e04 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f000 bc75 	b.w	800272a <HAL_RCC_OscConfig+0x109a>
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e48:	2202      	movs	r2, #2
 8001e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001eaa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b36      	ldr	r3, [pc, #216]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001eb8:	2102      	movs	r1, #2
 8001eba:	6019      	str	r1, [r3, #0]
 8001ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	fa93 f1a3 	rbit	r1, r3
 8001eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ece:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ed2:	6019      	str	r1, [r3, #0]
  return result;
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d197      	bne.n	8001e2a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 81a5 	beq.w	800225a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_RCC_OscConfig+0x8f8>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_RCC_OscConfig+0x900>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d121      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_RCC_OscConfig+0x900>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <HAL_RCC_OscConfig+0x900>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f68:	f7fe ff4c 	bl	8000e04 <HAL_GetTick>
 8001f6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e010      	b.n	8001f94 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f72:	f7fe ff47 	bl	8000e04 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	@ 0x64
 8001f80:	d908      	bls.n	8001f94 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e3d1      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	10908120 	.word	0x10908120
 8001f90:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b8d      	ldr	r3, [pc, #564]	@ (80021cc <HAL_RCC_OscConfig+0xb3c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0e8      	beq.n	8001f72 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x92e>
 8001fb0:	4b87      	ldr	r3, [pc, #540]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a86      	ldr	r2, [pc, #536]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e035      	b.n	800202a <HAL_RCC_OscConfig+0x99a>
 8001fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x958>
 8001fce:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a7f      	ldr	r2, [pc, #508]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b7d      	ldr	r3, [pc, #500]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a7c      	ldr	r2, [pc, #496]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	e020      	b.n	800202a <HAL_RCC_OscConfig+0x99a>
 8001fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x982>
 8001ff8:	4b75      	ldr	r3, [pc, #468]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a74      	ldr	r2, [pc, #464]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	4b72      	ldr	r3, [pc, #456]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a71      	ldr	r2, [pc, #452]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x99a>
 8002012:	4b6f      	ldr	r3, [pc, #444]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a6e      	ldr	r2, [pc, #440]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b6c      	ldr	r3, [pc, #432]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a6b      	ldr	r2, [pc, #428]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8081 	beq.w	800213e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe fee2 	bl	8000e04 <HAL_GetTick>
 8002040:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00b      	b.n	800205e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7fe fedd 	bl	8000e04 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e365      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 800205e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002062:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002086:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002092:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020a4:	601a      	str	r2, [r3, #0]
  return result;
 80020a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020aa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d102      	bne.n	80020ca <HAL_RCC_OscConfig+0xa3a>
 80020c4:	4b42      	ldr	r3, [pc, #264]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	e013      	b.n	80020f2 <HAL_RCC_OscConfig+0xa62>
 80020ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020d2:	2202      	movs	r2, #2
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020da:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020fa:	2102      	movs	r1, #2
 80020fc:	6011      	str	r1, [r2, #0]
 80020fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002102:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	fa92 f1a2 	rbit	r1, r2
 800210c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002110:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002114:	6011      	str	r1, [r2, #0]
  return result;
 8002116:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800211a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f002 021f 	and.w	r2, r2, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d084      	beq.n	8002046 <HAL_RCC_OscConfig+0x9b6>
 800213c:	e083      	b.n	8002246 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7fe fe61 	bl	8000e04 <HAL_GetTick>
 8002142:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7fe fe5c 	bl	8000e04 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e2e4      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002168:	2202      	movs	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002170:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	fa93 f2a3 	rbit	r2, r3
 800217a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002188:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002194:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	fa93 f2a3 	rbit	r2, r3
 800219e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021a6:	601a      	str	r2, [r3, #0]
  return result;
 80021a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ac:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0xb44>
 80021c6:	4b02      	ldr	r3, [pc, #8]	@ (80021d0 <HAL_RCC_OscConfig+0xb40>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	e017      	b.n	80021fc <HAL_RCC_OscConfig+0xb6c>
 80021cc:	40007000 	.word	0x40007000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	4bb3      	ldr	r3, [pc, #716]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002200:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002204:	2102      	movs	r1, #2
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800220c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	fa92 f1a2 	rbit	r1, r2
 8002216:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800221a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800221e:	6011      	str	r1, [r2, #0]
  return result;
 8002220:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002224:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	fab2 f282 	clz	r2, r2
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f002 021f 	and.w	r2, r2, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f202 	lsl.w	r2, r1, r2
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d180      	bne.n	8002148 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002246:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b9e      	ldr	r3, [pc, #632]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a9d      	ldr	r2, [pc, #628]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 825e 	beq.w	8002728 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226c:	4b96      	ldr	r3, [pc, #600]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	f000 821f 	beq.w	80026b8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b02      	cmp	r3, #2
 8002288:	f040 8170 	bne.w	800256c <HAL_RCC_OscConfig+0xedc>
 800228c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002290:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002294:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800229e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022b0:	601a      	str	r2, [r3, #0]
  return result;
 80022b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80022ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fd97 	bl	8000e04 <HAL_GetTick>
 80022d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	e009      	b.n	80022f0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fd92 	bl	8000e04 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e21c      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002302:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002314:	601a      	str	r2, [r3, #0]
  return result;
 8002316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800231e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0xcaa>
 8002334:	4b64      	ldr	r3, [pc, #400]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e027      	b.n	800238a <HAL_RCC_OscConfig+0xcfa>
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002342:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002364:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002368:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002372:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	fa93 f2a3 	rbit	r2, r3
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	4b50      	ldr	r3, [pc, #320]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800238e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002392:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002396:	6011      	str	r1, [r2, #0]
 8002398:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800239c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	fa92 f1a2 	rbit	r1, r2
 80023a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023aa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80023ae:	6011      	str	r1, [r2, #0]
  return result;
 80023b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023b4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d182      	bne.n	80022dc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d6:	4b3c      	ldr	r3, [pc, #240]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f023 020f 	bic.w	r2, r3, #15
 80023de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	4937      	ldr	r1, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80023f0:	4b35      	ldr	r3, [pc, #212]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80023f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a19      	ldr	r1, [r3, #32]
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	430b      	orrs	r3, r1
 8002412:	492d      	ldr	r1, [pc, #180]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002420:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	fa93 f2a3 	rbit	r2, r3
 8002434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002438:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800243c:	601a      	str	r2, [r3, #0]
  return result;
 800243e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002442:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002446:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002452:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	461a      	mov	r2, r3
 800245a:	2301      	movs	r3, #1
 800245c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe fcd1 	bl	8000e04 <HAL_GetTick>
 8002462:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002466:	e009      	b.n	800247c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fccc 	bl	8000e04 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e156      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002484:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024a0:	601a      	str	r2, [r3, #0]
  return result;
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0xe3c>
 80024c0:	4b01      	ldr	r3, [pc, #4]	@ (80024c8 <HAL_RCC_OscConfig+0xe38>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	e02a      	b.n	800251c <HAL_RCC_OscConfig+0xe8c>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fa93 f2a3 	rbit	r2, r3
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	4b86      	ldr	r3, [pc, #536]	@ (8002734 <HAL_RCC_OscConfig+0x10a4>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002520:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002524:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800252e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	fa92 f1a2 	rbit	r1, r2
 8002538:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800253c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002540:	6011      	str	r1, [r2, #0]
  return result;
 8002542:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002546:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	f43f af7f 	beq.w	8002468 <HAL_RCC_OscConfig+0xdd8>
 800256a:	e0dd      	b.n	8002728 <HAL_RCC_OscConfig+0x1098>
 800256c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002570:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002590:	601a      	str	r2, [r3, #0]
  return result;
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800259a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fc27 	bl	8000e04 <HAL_GetTick>
 80025b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ba:	e009      	b.n	80025d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fc22 	bl	8000e04 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0ac      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
 80025d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025f4:	601a      	str	r2, [r3, #0]
  return result;
 80025f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80025fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_RCC_OscConfig+0xf8a>
 8002614:	4b47      	ldr	r3, [pc, #284]	@ (8002734 <HAL_RCC_OscConfig+0x10a4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e027      	b.n	800266a <HAL_RCC_OscConfig+0xfda>
 800261a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800261e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002622:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <HAL_RCC_OscConfig+0x10a4>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800266e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002672:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002676:	6011      	str	r1, [r2, #0]
 8002678:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800267c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	fa92 f1a2 	rbit	r1, r2
 8002686:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800268a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800268e:	6011      	str	r1, [r2, #0]
  return result;
 8002690:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002694:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d182      	bne.n	80025bc <HAL_RCC_OscConfig+0xf2c>
 80026b6:	e037      	b.n	8002728 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e02e      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_RCC_OscConfig+0x10a4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <HAL_RCC_OscConfig+0x10a4>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026e0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d117      	bne.n	8002724 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80026f8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002700:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002708:	429a      	cmp	r2, r3
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800270c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b09e      	sub	sp, #120	@ 0x78
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e162      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b90      	ldr	r3, [pc, #576]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b8d      	ldr	r3, [pc, #564]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	498b      	ldr	r1, [pc, #556]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b89      	ldr	r3, [pc, #548]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e14a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b82      	ldr	r3, [pc, #520]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	497f      	ldr	r1, [pc, #508]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80dc 	beq.w	8002964 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d13c      	bne.n	800282e <HAL_RCC_ClockConfig+0xf6>
 80027b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_RCC_ClockConfig+0xa6>
 80027d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	e00f      	b.n	80027fe <HAL_RCC_ClockConfig+0xc6>
 80027de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80027ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027fa:	4b67      	ldr	r3, [pc, #412]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002802:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800280c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800280e:	fab2 f282 	clz	r2, r2
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f042 0220 	orr.w	r2, r2, #32
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f002 021f 	and.w	r2, r2, #31
 800281e:	2101      	movs	r1, #1
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d17b      	bne.n	8002922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0f3      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d13c      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x178>
 8002836:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800283a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_ClockConfig+0x128>
 800285a:	4b4f      	ldr	r3, [pc, #316]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e00f      	b.n	8002880 <HAL_RCC_ClockConfig+0x148>
 8002860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002864:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
 800286e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002872:	643b      	str	r3, [r7, #64]	@ 0x40
 8002874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800287c:	4b46      	ldr	r3, [pc, #280]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002884:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002886:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800288e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002890:	fab2 f282 	clz	r2, r2
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f002 021f 	and.w	r2, r2, #31
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d13a      	bne.n	8002922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0b2      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
 80028b0:	2302      	movs	r3, #2
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x1a0>
 80028d2:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e00d      	b.n	80028f4 <HAL_RCC_ClockConfig+0x1bc>
 80028d8:	2302      	movs	r3, #2
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e4:	2302      	movs	r3, #2
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	2202      	movs	r2, #2
 80028f6:	61ba      	str	r2, [r7, #24]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	fa92 f2a2 	rbit	r2, r2
 80028fe:	617a      	str	r2, [r7, #20]
  return result;
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	fab2 f282 	clz	r2, r2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f042 0220 	orr.w	r2, r2, #32
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	f002 021f 	and.w	r2, r2, #31
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e079      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	491a      	ldr	r1, [pc, #104]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe fa66 	bl	8000e04 <HAL_GetTick>
 8002938:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fa62 	bl	8000e04 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e061      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_ClockConfig+0x260>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d214      	bcs.n	800299c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4906      	ldr	r1, [pc, #24]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e040      	b.n	8002a16 <HAL_RCC_ClockConfig+0x2de>
 8002994:	40022000 	.word	0x40022000
 8002998:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_RCC_ClockConfig+0x2e8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	491a      	ldr	r1, [pc, #104]	@ (8002a20 <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <HAL_RCC_ClockConfig+0x2e8>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4912      	ldr	r1, [pc, #72]	@ (8002a20 <HAL_RCC_ClockConfig+0x2e8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029da:	f000 f829 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029de:	4601      	mov	r1, r0
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_RCC_ClockConfig+0x2e8>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e8:	22f0      	movs	r2, #240	@ 0xf0
 80029ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	60fa      	str	r2, [r7, #12]
  return result;
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	fab2 f282 	clz	r2, r2
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	40d3      	lsrs	r3, r2
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_RCC_ClockConfig+0x2ec>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	fa21 f303 	lsr.w	r3, r1, r3
 8002a06:	4a08      	ldr	r2, [pc, #32]	@ (8002a28 <HAL_RCC_ClockConfig+0x2f0>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <HAL_RCC_ClockConfig+0x2f4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f9b4 	bl	8000d7c <HAL_InitTick>
  
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3778      	adds	r7, #120	@ 0x78
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08005338 	.word	0x08005338
 8002a28:	20000100 	.word	0x20000100
 8002a2c:	20000104 	.word	0x20000104

08002a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b08b      	sub	sp, #44	@ 0x2c
 8002a34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x30>
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x36>
 8002a5e:	e03f      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a62:	623b      	str	r3, [r7, #32]
      break;
 8002a64:	e03f      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a6c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002a70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	fa92 f2a2 	rbit	r2, r2
 8002a78:	607a      	str	r2, [r7, #4]
  return result;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	40d3      	lsrs	r3, r2
 8002a84:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	220f      	movs	r2, #15
 8002a94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	fa92 f2a2 	rbit	r2, r2
 8002a9c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	40d3      	lsrs	r3, r2
 8002aa8:	4a15      	ldr	r2, [pc, #84]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac8:	e007      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aca:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	623b      	str	r3, [r7, #32]
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae2:	623b      	str	r3, [r7, #32]
      break;
 8002ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	372c      	adds	r7, #44	@ 0x2c
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	08005350 	.word	0x08005350
 8002b00:	08005360 	.word	0x08005360

08002b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000100 	.word	0x20000100

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b22:	f7ff ffef 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b26:	4601      	mov	r1, r0
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b30:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	fa92 f2a2 	rbit	r2, r2
 8002b3c:	603a      	str	r2, [r7, #0]
  return result;
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	fab2 f282 	clz	r2, r2
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	40d3      	lsrs	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	08005348 	.word	0x08005348

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b66:	f7ff ffcd 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b74:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 8002b80:	603a      	str	r2, [r7, #0]
  return result;
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	fab2 f282 	clz	r2, r2
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	40d3      	lsrs	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08005348 	.word	0x08005348

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b092      	sub	sp, #72	@ 0x48
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80d4 	beq.w	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
 8002be0:	4b48      	ldr	r3, [pc, #288]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b45      	ldr	r3, [pc, #276]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b42      	ldr	r3, [pc, #264]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a41      	ldr	r2, [pc, #260]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe f8fb 	bl	8000e04 <HAL_GetTick>
 8002c0e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7fe f8f7 	bl	8000e04 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a5      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	4b38      	ldr	r3, [pc, #224]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c30:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8084 	beq.w	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d07c      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ca2:	4a18      	ldr	r2, [pc, #96]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f8a7 	bl	8000e04 <HAL_GetTick>
 8002cb6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe f8a3 	bl	8000e04 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e14f      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	2302      	movs	r3, #2
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d108      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002cfe:	4b01      	ldr	r3, [pc, #4]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	e00d      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	10908100 	.word	0x10908100
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	4b96      	ldr	r3, [pc, #600]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	2202      	movs	r2, #2
 8002d22:	613a      	str	r2, [r7, #16]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	fa92 f2a2 	rbit	r2, r2
 8002d2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0b7      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4988      	ldr	r1, [pc, #544]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b84      	ldr	r3, [pc, #528]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a83      	ldr	r2, [pc, #524]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f023 0203 	bic.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	497b      	ldr	r1, [pc, #492]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9a:	4b77      	ldr	r3, [pc, #476]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4974      	ldr	r1, [pc, #464]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	496c      	ldr	r1, [pc, #432]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd6:	4b68      	ldr	r3, [pc, #416]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f023 0210 	bic.w	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4965      	ldr	r1, [pc, #404]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002df4:	4b60      	ldr	r3, [pc, #384]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e00:	495d      	ldr	r1, [pc, #372]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e12:	4b59      	ldr	r3, [pc, #356]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f023 0220 	bic.w	r2, r3, #32
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4956      	ldr	r1, [pc, #344]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e30:	4b51      	ldr	r3, [pc, #324]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	494e      	ldr	r1, [pc, #312]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4947      	ldr	r1, [pc, #284]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e6c:	4b42      	ldr	r3, [pc, #264]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	493f      	ldr	r1, [pc, #252]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	4938      	ldr	r1, [pc, #224]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ea8:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	4930      	ldr	r1, [pc, #192]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4929      	ldr	r1, [pc, #164]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ee4:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	4921      	ldr	r1, [pc, #132]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f02:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	491a      	ldr	r1, [pc, #104]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f20:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	4912      	ldr	r1, [pc, #72]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	490b      	ldr	r1, [pc, #44]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f5c:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	4903      	ldr	r1, [pc, #12]	@ (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3748      	adds	r7, #72	@ 0x48
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e09d      	b.n	80030ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f9e:	d009      	beq.n	8002fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
 8002fa6:	e005      	b.n	8002fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fd48 	bl	8000a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff4:	d902      	bls.n	8002ffc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e002      	b.n	8003002 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ffc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003000:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800300a:	d007      	beq.n	800301c <HAL_SPI_Init+0xa0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003014:	d002      	beq.n	800301c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	ea42 0103 	orr.w	r1, r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	f003 0204 	and.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e01a      	b.n	800311a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fcf5 	bl	8000aec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_SPI_Transmit+0x22>
 8003140:	2302      	movs	r3, #2
 8003142:	e15f      	b.n	8003404 <HAL_SPI_Transmit+0x2e2>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800314c:	f7fd fe5a 	bl	8000e04 <HAL_GetTick>
 8003150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003166:	e148      	b.n	80033fa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0x52>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003178:	e13f      	b.n	80033fa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c4:	d10f      	bne.n	80031e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d007      	beq.n	8003204 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800320c:	d94f      	bls.n	80032ae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0xfa>
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d142      	bne.n	80032a2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	1c9a      	adds	r2, r3, #2
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003240:	e02f      	b.n	80032a2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b02      	cmp	r3, #2
 800324e:	d112      	bne.n	8003276 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003274:	e015      	b.n	80032a2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003276:	f7fd fdc5 	bl	8000e04 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d803      	bhi.n	800328e <HAL_SPI_Transmit+0x16c>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d102      	bne.n	8003294 <HAL_SPI_Transmit+0x172>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032a0:	e0ab      	b.n	80033fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ca      	bne.n	8003242 <HAL_SPI_Transmit+0x120>
 80032ac:	e080      	b.n	80033b0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_SPI_Transmit+0x19a>
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d174      	bne.n	80033a6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d912      	bls.n	80032ec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b02      	subs	r3, #2
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032ea:	e05c      	b.n	80033a6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003312:	e048      	b.n	80033a6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d12b      	bne.n	800337a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	d912      	bls.n	8003352 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	881a      	ldrh	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b02      	subs	r3, #2
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003350:	e029      	b.n	80033a6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	7812      	ldrb	r2, [r2, #0]
 800335e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003378:	e015      	b.n	80033a6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337a:	f7fd fd43 	bl	8000e04 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d803      	bhi.n	8003392 <HAL_SPI_Transmit+0x270>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d102      	bne.n	8003398 <HAL_SPI_Transmit+0x276>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033a4:	e029      	b.n	80033fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1b1      	bne.n	8003314 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fcf9 	bl	8003dac <SPI_EndRxTxTransaction>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e003      	b.n	80033fa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003402:	7ffb      	ldrb	r3, [r7, #31]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d002      	beq.n	8003432 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003430:	e11a      	b.n	8003668 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800343a:	d112      	bne.n	8003462 <HAL_SPI_Receive+0x56>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2204      	movs	r2, #4
 8003448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	4613      	mov	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f90e 	bl	800367a <HAL_SPI_TransmitReceive>
 800345e:	4603      	mov	r3, r0
 8003460:	e107      	b.n	8003672 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_SPI_Receive+0x64>
 800346c:	2302      	movs	r3, #2
 800346e:	e100      	b.n	8003672 <HAL_SPI_Receive+0x266>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003478:	f7fd fcc4 	bl	8000e04 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Receive+0x7e>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348e:	e0eb      	b.n	8003668 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2204      	movs	r2, #4
 8003494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034da:	d908      	bls.n	80034ee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	e007      	b.n	80034fe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003506:	d10f      	bne.n	8003528 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d007      	beq.n	8003546 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800354e:	d86f      	bhi.n	8003630 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003550:	e034      	b.n	80035bc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d117      	bne.n	8003590 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f103 020c 	add.w	r2, r3, #12
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800358e:	e015      	b.n	80035bc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003590:	f7fd fc38 	bl	8000e04 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d803      	bhi.n	80035a8 <HAL_SPI_Receive+0x19c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d102      	bne.n	80035ae <HAL_SPI_Receive+0x1a2>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80035ba:	e055      	b.n	8003668 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1c4      	bne.n	8003552 <HAL_SPI_Receive+0x146>
 80035c8:	e038      	b.n	800363c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d115      	bne.n	8003604 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	b292      	uxth	r2, r2
 80035e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	1c9a      	adds	r2, r3, #2
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003602:	e015      	b.n	8003630 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003604:	f7fd fbfe 	bl	8000e04 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d803      	bhi.n	800361c <HAL_SPI_Receive+0x210>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d102      	bne.n	8003622 <HAL_SPI_Receive+0x216>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800362e:	e01b      	b.n	8003668 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1c6      	bne.n	80035ca <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fb5b 	bl	8003cfc <SPI_EndRxTransaction>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
 800365e:	e003      	b.n	8003668 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003670:	7dfb      	ldrb	r3, [r7, #23]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	@ 0x28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_SPI_TransmitReceive+0x26>
 800369c:	2302      	movs	r3, #2
 800369e:	e20a      	b.n	8003ab6 <HAL_SPI_TransmitReceive+0x43c>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a8:	f7fd fbac 	bl	8000e04 <HAL_GetTick>
 80036ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c4:	7efb      	ldrb	r3, [r7, #27]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00e      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x6e>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d0:	d106      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x66>
 80036da:	7efb      	ldrb	r3, [r7, #27]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d003      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80036e6:	e1e0      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x80>
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003700:	e1d3      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	887a      	ldrh	r2, [r7, #2]
 8003726:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003758:	d802      	bhi.n	8003760 <HAL_SPI_TransmitReceive+0xe6>
 800375a:	8a3b      	ldrh	r3, [r7, #16]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d908      	bls.n	8003772 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	e007      	b.n	8003782 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003780:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b40      	cmp	r3, #64	@ 0x40
 800378e:	d007      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037a8:	f240 8081 	bls.w	80038ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x140>
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d16d      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	e05a      	b.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d11b      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d113      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11c      	bne.n	800386e <HAL_SPI_TransmitReceive+0x1f4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	b292      	uxth	r2, r2
 800384c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	1c9a      	adds	r2, r3, #2
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800386e:	f7fd fac9 	bl	8000e04 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800387a:	429a      	cmp	r2, r3
 800387c:	d80b      	bhi.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d007      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003894:	e109      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d19f      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x166>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d199      	bne.n	80037e0 <HAL_SPI_TransmitReceive+0x166>
 80038ac:	e0e3      	b.n	8003a76 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_SPI_TransmitReceive+0x244>
 80038b6:	8a7b      	ldrh	r3, [r7, #18]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80cf 	bne.w	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d912      	bls.n	80038ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b02      	subs	r3, #2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038ec:	e0b6      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003914:	e0a2      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d134      	bne.n	800398e <HAL_SPI_TransmitReceive+0x314>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02f      	beq.n	800398e <HAL_SPI_TransmitReceive+0x314>
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12c      	bne.n	800398e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d912      	bls.n	8003964 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b02      	subs	r3, #2
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003962:	e012      	b.n	800398a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d148      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x3b4>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d042      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d923      	bls.n	80039fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	b292      	uxth	r2, r2
 80039c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b02      	subs	r3, #2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d81f      	bhi.n	8003a2a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e016      	b.n	8003a2a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f103 020c 	add.w	r2, r3, #12
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a2e:	f7fd f9e9 	bl	8000e04 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d803      	bhi.n	8003a46 <HAL_SPI_TransmitReceive+0x3cc>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x3d2>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003a5a:	e026      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f af57 	bne.w	8003916 <HAL_SPI_TransmitReceive+0x29c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f47f af50 	bne.w	8003916 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f996 	bl	8003dac <SPI_EndRxTxTransaction>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa0:	e003      	b.n	8003aaa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3728      	adds	r7, #40	@ 0x28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad0:	f7fd f998 	bl	8000e04 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae0:	f7fd f990 	bl	8000e04 <HAL_GetTick>
 8003ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	@ (8003bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	0d1b      	lsrs	r3, r3, #20
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af6:	e054      	b.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d050      	beq.n	8003ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b00:	f7fd f980 	bl	8000e04 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d902      	bls.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d13d      	bne.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b2e:	d111      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b38:	d004      	beq.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d107      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5c:	d10f      	bne.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e017      	b.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d19b      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000100 	.word	0x20000100

08003bd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003be2:	f7fd f90f 	bl	8000e04 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003bf2:	f7fd f907 	bl	8000e04 <HAL_GetTick>
 8003bf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c00:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	0d1b      	lsrs	r3, r3, #20
 8003c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c18:	e060      	b.n	8003cdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c20:	d107      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d050      	beq.n	8003cdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c3a:	f7fd f8e3 	bl	8000e04 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d902      	bls.n	8003c50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d13d      	bne.n	8003ccc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c68:	d111      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c72:	d004      	beq.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c7c:	d107      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c96:	d10f      	bne.n	8003cb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e010      	b.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d196      	bne.n	8003c1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	@ 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000100 	.word	0x20000100

08003cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d10:	d111      	bne.n	8003d36 <SPI_EndRxTransaction+0x3a>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d1a:	d004      	beq.n	8003d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d24:	d107      	bne.n	8003d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff febd 	bl	8003ac0 <SPI_WaitFlagStateUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e023      	b.n	8003da4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d64:	d11d      	bne.n	8003da2 <SPI_EndRxTransaction+0xa6>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6e:	d004      	beq.n	8003d7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d78:	d113      	bne.n	8003da2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff ff22 	bl	8003bd0 <SPI_WaitFifoStateUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e000      	b.n	8003da4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff ff03 	bl	8003bd0 <SPI_WaitFifoStateUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e027      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2180      	movs	r1, #128	@ 0x80
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff fe68 	bl	8003ac0 <SPI_WaitFlagStateUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e014      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fedc 	bl	8003bd0 <SPI_WaitFifoStateUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e000      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e040      	b.n	8003ecc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc ff04 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	@ 0x24
 8003e64:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fb30 	bl	80044dc <UART_SetConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e022      	b.n	8003ecc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fcf8 	bl	8004884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fd7f 	bl	80049c8 <UART_CheckIdleState>
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003efe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f02:	4013      	ands	r3, r2
 8003f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d115      	bne.n	8003f3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00f      	beq.n	8003f3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 82ab 	beq.w	8004488 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
      }
      return;
 8003f3a:	e2a5      	b.n	8004488 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8117 	beq.w	8004174 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f56:	4b85      	ldr	r3, [pc, #532]	@ (800416c <HAL_UART_IRQHandler+0x298>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 810a 	beq.w	8004174 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d011      	beq.n	8003f90 <HAL_UART_IRQHandler+0xbc>
 8003f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xec>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x11c>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe6:	f043 0202 	orr.w	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2208      	movs	r2, #8
 800401a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004022:	f043 0208 	orr.w	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <HAL_UART_IRQHandler+0x18a>
 8004038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800404c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8211 	beq.w	800448c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	d005      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04f      	beq.n	8004156 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fe5c 	bl	8004d74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d141      	bne.n	800414e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800410e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1d9      	bne.n	80040ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004122:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <HAL_UART_IRQHandler+0x29c>)
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc ffe4 	bl	80010f8 <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00f      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9be 	bl	80044c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00b      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9ba 	bl	80044c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e007      	b.n	8004166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9b6 	bl	80044c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004164:	e192      	b.n	800448c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004166:	bf00      	nop
    return;
 8004168:	e190      	b.n	800448c <HAL_UART_IRQHandler+0x5b8>
 800416a:	bf00      	nop
 800416c:	04000120 	.word	0x04000120
 8004170:	08004e3d 	.word	0x08004e3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 814b 	bne.w	8004414 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8144 	beq.w	8004414 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 813d 	beq.w	8004414 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	f040 80b5 	bne.w	800431c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8164 	beq.w	8004490 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f080 815c 	bcs.w	8004490 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	f000 8086 	beq.w	80042fa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004202:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800420a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800421c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004224:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1da      	bne.n	80041ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004248:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800425c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004260:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004264:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800426e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e1      	bne.n	8004238 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004298:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800429a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800429e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e3      	bne.n	8004274 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ca:	f023 0310 	bic.w	r3, r3, #16
 80042ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e4      	bne.n	80042ba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fec6 	bl	8001086 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800430c:	b29b      	uxth	r3, r3
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fc fb43 	bl	80009a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800431a:	e0b9      	b.n	8004490 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004328:	b29b      	uxth	r3, r3
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80ab 	beq.w	8004494 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800433e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a6 	beq.w	8004494 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800435c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800436a:	647b      	str	r3, [r7, #68]	@ 0x44
 800436c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e4      	bne.n	8004348 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	623b      	str	r3, [r7, #32]
   return(result);
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e3      	bne.n	800437e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0310 	bic.w	r3, r3, #16
 80043de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	617b      	str	r3, [r7, #20]
   return(result);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e4      	bne.n	80043ca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fc fac7 	bl	80009a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004412:	e03f      	b.n	8004494 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <HAL_UART_IRQHandler+0x56a>
 8004420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fee8 	bl	800520c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800443c:	e02d      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01c      	beq.n	8004498 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
    }
    return;
 8004466:	e017      	b.n	8004498 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800446c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_UART_IRQHandler+0x5c6>
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fcf1 	bl	8004e68 <UART_EndTransmit_IT>
    return;
 8004486:	e008      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004488:	bf00      	nop
 800448a:	e006      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
    return;
 800448c:	bf00      	nop
 800448e:	e004      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004498:	bf00      	nop
  }

}
 800449a:	37e8      	adds	r7, #232	@ 0xe8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b92      	ldr	r3, [pc, #584]	@ (8004750 <UART_SetConfig+0x274>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	6979      	ldr	r1, [r7, #20]
 8004510:	430b      	orrs	r3, r1
 8004512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a80      	ldr	r2, [pc, #512]	@ (8004754 <UART_SetConfig+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d120      	bne.n	800459a <UART_SetConfig+0xbe>
 8004558:	4b7f      	ldr	r3, [pc, #508]	@ (8004758 <UART_SetConfig+0x27c>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d817      	bhi.n	8004594 <UART_SetConfig+0xb8>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0x90>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	08004589 	.word	0x08004589
 8004574:	0800458f 	.word	0x0800458f
 8004578:	08004583 	.word	0x08004583
 800457c:	2301      	movs	r3, #1
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e0b5      	b.n	80046ee <UART_SetConfig+0x212>
 8004582:	2302      	movs	r3, #2
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e0b2      	b.n	80046ee <UART_SetConfig+0x212>
 8004588:	2304      	movs	r3, #4
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e0af      	b.n	80046ee <UART_SetConfig+0x212>
 800458e:	2308      	movs	r3, #8
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e0ac      	b.n	80046ee <UART_SetConfig+0x212>
 8004594:	2310      	movs	r3, #16
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e0a9      	b.n	80046ee <UART_SetConfig+0x212>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6f      	ldr	r2, [pc, #444]	@ (800475c <UART_SetConfig+0x280>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d124      	bne.n	80045ee <UART_SetConfig+0x112>
 80045a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <UART_SetConfig+0x27c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b0:	d011      	beq.n	80045d6 <UART_SetConfig+0xfa>
 80045b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b6:	d817      	bhi.n	80045e8 <UART_SetConfig+0x10c>
 80045b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045bc:	d011      	beq.n	80045e2 <UART_SetConfig+0x106>
 80045be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c2:	d811      	bhi.n	80045e8 <UART_SetConfig+0x10c>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <UART_SetConfig+0xf4>
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d006      	beq.n	80045dc <UART_SetConfig+0x100>
 80045ce:	e00b      	b.n	80045e8 <UART_SetConfig+0x10c>
 80045d0:	2300      	movs	r3, #0
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e08b      	b.n	80046ee <UART_SetConfig+0x212>
 80045d6:	2302      	movs	r3, #2
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e088      	b.n	80046ee <UART_SetConfig+0x212>
 80045dc:	2304      	movs	r3, #4
 80045de:	77fb      	strb	r3, [r7, #31]
 80045e0:	e085      	b.n	80046ee <UART_SetConfig+0x212>
 80045e2:	2308      	movs	r3, #8
 80045e4:	77fb      	strb	r3, [r7, #31]
 80045e6:	e082      	b.n	80046ee <UART_SetConfig+0x212>
 80045e8:	2310      	movs	r3, #16
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e07f      	b.n	80046ee <UART_SetConfig+0x212>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004760 <UART_SetConfig+0x284>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d124      	bne.n	8004642 <UART_SetConfig+0x166>
 80045f8:	4b57      	ldr	r3, [pc, #348]	@ (8004758 <UART_SetConfig+0x27c>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004600:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004604:	d011      	beq.n	800462a <UART_SetConfig+0x14e>
 8004606:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800460a:	d817      	bhi.n	800463c <UART_SetConfig+0x160>
 800460c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004610:	d011      	beq.n	8004636 <UART_SetConfig+0x15a>
 8004612:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004616:	d811      	bhi.n	800463c <UART_SetConfig+0x160>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <UART_SetConfig+0x148>
 800461c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x154>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x160>
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e061      	b.n	80046ee <UART_SetConfig+0x212>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e05e      	b.n	80046ee <UART_SetConfig+0x212>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e05b      	b.n	80046ee <UART_SetConfig+0x212>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e058      	b.n	80046ee <UART_SetConfig+0x212>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e055      	b.n	80046ee <UART_SetConfig+0x212>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a47      	ldr	r2, [pc, #284]	@ (8004764 <UART_SetConfig+0x288>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d124      	bne.n	8004696 <UART_SetConfig+0x1ba>
 800464c:	4b42      	ldr	r3, [pc, #264]	@ (8004758 <UART_SetConfig+0x27c>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004654:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004658:	d011      	beq.n	800467e <UART_SetConfig+0x1a2>
 800465a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800465e:	d817      	bhi.n	8004690 <UART_SetConfig+0x1b4>
 8004660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004664:	d011      	beq.n	800468a <UART_SetConfig+0x1ae>
 8004666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800466a:	d811      	bhi.n	8004690 <UART_SetConfig+0x1b4>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0x19c>
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004674:	d006      	beq.n	8004684 <UART_SetConfig+0x1a8>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x1b4>
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e037      	b.n	80046ee <UART_SetConfig+0x212>
 800467e:	2302      	movs	r3, #2
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e034      	b.n	80046ee <UART_SetConfig+0x212>
 8004684:	2304      	movs	r3, #4
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e031      	b.n	80046ee <UART_SetConfig+0x212>
 800468a:	2308      	movs	r3, #8
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e02e      	b.n	80046ee <UART_SetConfig+0x212>
 8004690:	2310      	movs	r3, #16
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e02b      	b.n	80046ee <UART_SetConfig+0x212>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a33      	ldr	r2, [pc, #204]	@ (8004768 <UART_SetConfig+0x28c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d124      	bne.n	80046ea <UART_SetConfig+0x20e>
 80046a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004758 <UART_SetConfig+0x27c>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80046a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046ac:	d011      	beq.n	80046d2 <UART_SetConfig+0x1f6>
 80046ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046b2:	d817      	bhi.n	80046e4 <UART_SetConfig+0x208>
 80046b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046b8:	d011      	beq.n	80046de <UART_SetConfig+0x202>
 80046ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046be:	d811      	bhi.n	80046e4 <UART_SetConfig+0x208>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <UART_SetConfig+0x1f0>
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046c8:	d006      	beq.n	80046d8 <UART_SetConfig+0x1fc>
 80046ca:	e00b      	b.n	80046e4 <UART_SetConfig+0x208>
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e00d      	b.n	80046ee <UART_SetConfig+0x212>
 80046d2:	2302      	movs	r3, #2
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e00a      	b.n	80046ee <UART_SetConfig+0x212>
 80046d8:	2304      	movs	r3, #4
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e007      	b.n	80046ee <UART_SetConfig+0x212>
 80046de:	2308      	movs	r3, #8
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e004      	b.n	80046ee <UART_SetConfig+0x212>
 80046e4:	2310      	movs	r3, #16
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e001      	b.n	80046ee <UART_SetConfig+0x212>
 80046ea:	2310      	movs	r3, #16
 80046ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d16b      	bne.n	80047d0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80046f8:	7ffb      	ldrb	r3, [r7, #31]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d838      	bhi.n	8004770 <UART_SetConfig+0x294>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0x228>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004729 	.word	0x08004729
 8004708:	08004731 	.word	0x08004731
 800470c:	08004739 	.word	0x08004739
 8004710:	08004771 	.word	0x08004771
 8004714:	0800473f 	.word	0x0800473f
 8004718:	08004771 	.word	0x08004771
 800471c:	08004771 	.word	0x08004771
 8004720:	08004771 	.word	0x08004771
 8004724:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004728:	f7fe f9f8 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e024      	b.n	800477a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7fe fa16 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8004734:	61b8      	str	r0, [r7, #24]
        break;
 8004736:	e020      	b.n	800477a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004738:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <UART_SetConfig+0x290>)
 800473a:	61bb      	str	r3, [r7, #24]
        break;
 800473c:	e01d      	b.n	800477a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe f977 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 8004742:	61b8      	str	r0, [r7, #24]
        break;
 8004744:	e019      	b.n	800477a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800474a:	61bb      	str	r3, [r7, #24]
        break;
 800474c:	e015      	b.n	800477a <UART_SetConfig+0x29e>
 800474e:	bf00      	nop
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40013800 	.word	0x40013800
 8004758:	40021000 	.word	0x40021000
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	77bb      	strb	r3, [r7, #30]
        break;
 8004778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d073      	beq.n	8004868 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	005a      	lsls	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	441a      	add	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b0f      	cmp	r3, #15
 800479a:	d916      	bls.n	80047ca <UART_SetConfig+0x2ee>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a2:	d212      	bcs.n	80047ca <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f023 030f 	bic.w	r3, r3, #15
 80047ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	89fb      	ldrh	r3, [r7, #14]
 80047bc:	4313      	orrs	r3, r2
 80047be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	89fa      	ldrh	r2, [r7, #14]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e04e      	b.n	8004868 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	77bb      	strb	r3, [r7, #30]
 80047ce:	e04b      	b.n	8004868 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d0:	7ffb      	ldrb	r3, [r7, #31]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d827      	bhi.n	8004826 <UART_SetConfig+0x34a>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x300>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fe f98c 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8004804:	61b8      	str	r0, [r7, #24]
        break;
 8004806:	e013      	b.n	8004830 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe f9aa 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 800480c:	61b8      	str	r0, [r7, #24]
        break;
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <UART_SetConfig+0x3a4>)
 8004812:	61bb      	str	r3, [r7, #24]
        break;
 8004814:	e00c      	b.n	8004830 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe f90b 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 800481a:	61b8      	str	r0, [r7, #24]
        break;
 800481c:	e008      	b.n	8004830 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e004      	b.n	8004830 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	77bb      	strb	r3, [r7, #30]
        break;
 800482e:	bf00      	nop
    }

    if (pclk != 0U)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085a      	lsrs	r2, r3, #1
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b0f      	cmp	r3, #15
 800484e:	d909      	bls.n	8004864 <UART_SetConfig+0x388>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004856:	d205      	bcs.n	8004864 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	e001      	b.n	8004868 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004874:	7fbb      	ldrb	r3, [r7, #30]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	007a1200 	.word	0x007a1200

08004884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01a      	beq.n	800499a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d10a      	bne.n	800499a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b098      	sub	sp, #96	@ 0x60
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d8:	f7fc fa14 	bl	8000e04 <HAL_GetTick>
 80049dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d12e      	bne.n	8004a4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f88c 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d021      	beq.n	8004a4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e062      	b.n	8004b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d149      	bne.n	8004aec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a60:	2200      	movs	r2, #0
 8004a62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f856 	bl	8004b18 <UART_WaitOnFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03c      	beq.n	8004aec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e6      	bne.n	8004a72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac4:	61fa      	str	r2, [r7, #28]
 8004ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	69b9      	ldr	r1, [r7, #24]
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e011      	b.n	8004b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3758      	adds	r7, #88	@ 0x58
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b28:	e049      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b30:	d045      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fc f967 	bl	8000e04 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d302      	bcc.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e048      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d031      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d110      	bne.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f8ff 	bl	8004d74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e029      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b98:	d111      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f8e5 	bl	8004d74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0a6      	beq.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b097      	sub	sp, #92	@ 0x5c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1a:	d10e      	bne.n	8004c3a <UART_Start_Receive_IT+0x52>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <UART_Start_Receive_IT+0x48>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c2e:	e02d      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	22ff      	movs	r2, #255	@ 0xff
 8004c34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c38:	e028      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <UART_Start_Receive_IT+0x76>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <UART_Start_Receive_IT+0x6c>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22ff      	movs	r2, #255	@ 0xff
 8004c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c52:	e01b      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	227f      	movs	r2, #127	@ 0x7f
 8004c58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c5c:	e016      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c66:	d10d      	bne.n	8004c84 <UART_Start_Receive_IT+0x9c>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <UART_Start_Receive_IT+0x92>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	227f      	movs	r2, #127	@ 0x7f
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c78:	e008      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	223f      	movs	r2, #63	@ 0x3f
 8004c7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004c82:	e003      	b.n	8004c8c <UART_Start_Receive_IT+0xa4>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2222      	movs	r2, #34	@ 0x22
 8004c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cbc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004cbe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e5      	bne.n	8004c9c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd8:	d107      	bne.n	8004cea <UART_Start_Receive_IT+0x102>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <UART_Start_Receive_IT+0x184>)
 8004ce6:	669a      	str	r2, [r3, #104]	@ 0x68
 8004ce8:	e002      	b.n	8004cf0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a20      	ldr	r2, [pc, #128]	@ (8004d70 <UART_Start_Receive_IT+0x188>)
 8004cee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d019      	beq.n	8004d2c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d18:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_Start_Receive_IT+0x110>
 8004d2a:	e018      	b.n	8004d5e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f043 0320 	orr.w	r3, r3, #32
 8004d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e6      	bne.n	8004d2c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	375c      	adds	r7, #92	@ 0x5c
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	08005065 	.word	0x08005065
 8004d70:	08004ebd 	.word	0x08004ebd

08004d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b095      	sub	sp, #84	@ 0x54
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d118      	bne.n	8004e1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6979      	ldr	r1, [r7, #20]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	613b      	str	r3, [r7, #16]
   return(result);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e30:	bf00      	nop
 8004e32:	3754      	adds	r7, #84	@ 0x54
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fb34 	bl	80044c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e6      	bne.n	8004e70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff faf6 	bl	80044a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb4:	bf00      	nop
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b09c      	sub	sp, #112	@ 0x70
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004eca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed4:	2b22      	cmp	r3, #34	@ 0x22
 8004ed6:	f040 80b9 	bne.w	800504c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ee0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ee8:	b2d9      	uxtb	r1, r3
 8004eea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	400a      	ands	r2, r1
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 809c 	bne.w	800505c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d018      	beq.n	8004fde <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d12e      	bne.n	8005044 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	69b9      	ldr	r1, [r7, #24]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	617b      	str	r3, [r7, #20]
   return(result);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d103      	bne.n	8005034 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2210      	movs	r2, #16
 8005032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fb fcaf 	bl	80009a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005042:	e00b      	b.n	800505c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fa35 	bl	80044b4 <HAL_UART_RxCpltCallback>
}
 800504a:	e007      	b.n	800505c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0208 	orr.w	r2, r2, #8
 800505a:	619a      	str	r2, [r3, #24]
}
 800505c:	bf00      	nop
 800505e:	3770      	adds	r7, #112	@ 0x70
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b09c      	sub	sp, #112	@ 0x70
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005072:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	f040 80b9 	bne.w	80051f4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005088:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005092:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005096:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800509a:	4013      	ands	r3, r2
 800509c:	b29a      	uxth	r2, r3
 800509e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a6:	1c9a      	adds	r2, r3, #2
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 809c 	bne.w	8005204 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80050f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80050f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	663b      	str	r3, [r7, #96]	@ 0x60
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800511e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005120:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800512c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d018      	beq.n	8005186 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	61fb      	str	r3, [r7, #28]
   return(result);
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005174:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e6      	bne.n	8005154 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	2b01      	cmp	r3, #1
 800518c:	d12e      	bne.n	80051ec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0310 	bic.w	r3, r3, #16
 80051a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	613b      	str	r3, [r7, #16]
   return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d103      	bne.n	80051dc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2210      	movs	r2, #16
 80051da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fb fbdb 	bl	80009a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051ea:	e00b      	b.n	8005204 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff f961 	bl	80044b4 <HAL_UART_RxCpltCallback>
}
 80051f2:	e007      	b.n	8005204 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0208 	orr.w	r2, r2, #8
 8005202:	619a      	str	r2, [r3, #24]
}
 8005204:	bf00      	nop
 8005206:	3770      	adds	r7, #112	@ 0x70
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	@ 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005234:	2b20      	cmp	r3, #32
 8005236:	d142      	bne.n	80052be <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e03b      	b.n	80052c0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	461a      	mov	r2, r3
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff fcc4 	bl	8004be8 <UART_Start_Receive_IT>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800526a:	2b00      	cmp	r3, #0
 800526c:	d124      	bne.n	80052b8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005272:	2b01      	cmp	r3, #1
 8005274:	d11d      	bne.n	80052b2 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2210      	movs	r2, #16
 800527c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	617b      	str	r3, [r7, #20]
   return(result);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f043 0310 	orr.w	r3, r3, #16
 8005292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6a39      	ldr	r1, [r7, #32]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e6      	bne.n	800527e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80052b0:	e002      	b.n	80052b8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80052b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80052bc:	e000      	b.n	80052c0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3730      	adds	r7, #48	@ 0x30
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <memset>:
 80052c8:	4402      	add	r2, r0
 80052ca:	4603      	mov	r3, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	f803 1b01 	strb.w	r1, [r3], #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	@ (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	@ (800531c <__libc_init_array+0x44>)
 80052ec:	f000 f818 	bl	8005320 <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08005370 	.word	0x08005370
 8005314:	08005370 	.word	0x08005370
 8005318:	08005370 	.word	0x08005370
 800531c:	08005374 	.word	0x08005374

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
