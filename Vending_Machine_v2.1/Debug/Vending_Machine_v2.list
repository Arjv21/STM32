
Vending_Machine_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009530  08000178  08000178  00001178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002584  080096a8  080096a8  0000a6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc2c  0800bc2c  0000d0dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc2c  0800bc2c  0000cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc34  0800bc34  0000d0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc34  0800bc34  0000cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  0800bc3c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0dc  2**0
                  CONTENTS
 10 .bss          00004f40  200000dc  200000dc  0000d0dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000501c  2000501c  0000d0dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008706  00000000  00000000  0000d10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002139  00000000  00000000  00015812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  00017950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000661  00000000  00000000  000181d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fb5  00000000  00000000  00018839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c941  00000000  00000000  0002f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000724dc  00000000  00000000  0003c12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ae60b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022e4  00000000  00000000  000ae650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000b0934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000178 <__do_global_dtors_aux>:
 8000178:	b510      	push	{r4, lr}
 800017a:	4c05      	ldr	r4, [pc, #20]	@ (8000190 <__do_global_dtors_aux+0x18>)
 800017c:	7823      	ldrb	r3, [r4, #0]
 800017e:	b933      	cbnz	r3, 800018e <__do_global_dtors_aux+0x16>
 8000180:	4b04      	ldr	r3, [pc, #16]	@ (8000194 <__do_global_dtors_aux+0x1c>)
 8000182:	b113      	cbz	r3, 800018a <__do_global_dtors_aux+0x12>
 8000184:	4804      	ldr	r0, [pc, #16]	@ (8000198 <__do_global_dtors_aux+0x20>)
 8000186:	f3af 8000 	nop.w
 800018a:	2301      	movs	r3, #1
 800018c:	7023      	strb	r3, [r4, #0]
 800018e:	bd10      	pop	{r4, pc}
 8000190:	200000dc 	.word	0x200000dc
 8000194:	00000000 	.word	0x00000000
 8000198:	08009690 	.word	0x08009690

0800019c <frame_dummy>:
 800019c:	b508      	push	{r3, lr}
 800019e:	4b03      	ldr	r3, [pc, #12]	@ (80001ac <frame_dummy+0x10>)
 80001a0:	b11b      	cbz	r3, 80001aa <frame_dummy+0xe>
 80001a2:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <frame_dummy+0x14>)
 80001a4:	4803      	ldr	r0, [pc, #12]	@ (80001b4 <frame_dummy+0x18>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	bd08      	pop	{r3, pc}
 80001ac:	00000000 	.word	0x00000000
 80001b0:	200000e0 	.word	0x200000e0
 80001b4:	08009690 	.word	0x08009690

080001b8 <strcmp>:
 80001b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001c0:	2a01      	cmp	r2, #1
 80001c2:	bf28      	it	cs
 80001c4:	429a      	cmpcs	r2, r3
 80001c6:	d0f7      	beq.n	80001b8 <strcmp>
 80001c8:	1ad0      	subs	r0, r2, r3
 80001ca:	4770      	bx	lr

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	@ 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	3c01      	subs	r4, #1
 8000318:	bf28      	it	cs
 800031a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031e:	d2e9      	bcs.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c6:	bf08      	it	eq
 80004c8:	4770      	bxeq	lr
 80004ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ce:	bf04      	itt	eq
 80004d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	e71c      	b.n	8000320 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_ul2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f04f 0500 	mov.w	r5, #0
 80004f6:	e00a      	b.n	800050e <__aeabi_l2d+0x16>

080004f8 <__aeabi_l2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000506:	d502      	bpl.n	800050e <__aeabi_l2d+0x16>
 8000508:	4240      	negs	r0, r0
 800050a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000512:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051a:	f43f aed8 	beq.w	80002ce <__adddf3+0xe6>
 800051e:	f04f 0203 	mov.w	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa00 fc03 	lsl.w	ip, r0, r3
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 fe03 	lsl.w	lr, r1, r3
 8000546:	ea40 000e 	orr.w	r0, r0, lr
 800054a:	fa21 f102 	lsr.w	r1, r1, r2
 800054e:	4414      	add	r4, r2
 8000550:	e6bd      	b.n	80002ce <__adddf3+0xe6>
 8000552:	bf00      	nop

08000554 <__aeabi_dmul>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000562:	bf1d      	ittte	ne
 8000564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000568:	ea94 0f0c 	teqne	r4, ip
 800056c:	ea95 0f0c 	teqne	r5, ip
 8000570:	f000 f8de 	bleq	8000730 <__aeabi_dmul+0x1dc>
 8000574:	442c      	add	r4, r5
 8000576:	ea81 0603 	eor.w	r6, r1, r3
 800057a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000586:	bf18      	it	ne
 8000588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800058c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000594:	d038      	beq.n	8000608 <__aeabi_dmul+0xb4>
 8000596:	fba0 ce02 	umull	ip, lr, r0, r2
 800059a:	f04f 0500 	mov.w	r5, #0
 800059e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005aa:	f04f 0600 	mov.w	r6, #0
 80005ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b2:	f09c 0f00 	teq	ip, #0
 80005b6:	bf18      	it	ne
 80005b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c8:	d204      	bcs.n	80005d4 <__aeabi_dmul+0x80>
 80005ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ce:	416d      	adcs	r5, r5
 80005d0:	eb46 0606 	adc.w	r6, r6, r6
 80005d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005ec:	bf88      	it	hi
 80005ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f2:	d81e      	bhi.n	8000632 <__aeabi_dmul+0xde>
 80005f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800060c:	ea46 0101 	orr.w	r1, r6, r1
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	ea81 0103 	eor.w	r1, r1, r3
 8000618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800061c:	bfc2      	ittt	gt
 800061e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000626:	bd70      	popgt	{r4, r5, r6, pc}
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f04f 0e00 	mov.w	lr, #0
 8000630:	3c01      	subs	r4, #1
 8000632:	f300 80ab 	bgt.w	800078c <__aeabi_dmul+0x238>
 8000636:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063a:	bfde      	ittt	le
 800063c:	2000      	movle	r0, #0
 800063e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000642:	bd70      	pople	{r4, r5, r6, pc}
 8000644:	f1c4 0400 	rsb	r4, r4, #0
 8000648:	3c20      	subs	r4, #32
 800064a:	da35      	bge.n	80006b8 <__aeabi_dmul+0x164>
 800064c:	340c      	adds	r4, #12
 800064e:	dc1b      	bgt.n	8000688 <__aeabi_dmul+0x134>
 8000650:	f104 0414 	add.w	r4, r4, #20
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f305 	lsl.w	r3, r0, r5
 800065c:	fa20 f004 	lsr.w	r0, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800066c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000674:	fa21 f604 	lsr.w	r6, r1, r4
 8000678:	eb42 0106 	adc.w	r1, r2, r6
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f1c4 040c 	rsb	r4, r4, #12
 800068c:	f1c4 0520 	rsb	r5, r4, #32
 8000690:	fa00 f304 	lsl.w	r3, r0, r4
 8000694:	fa20 f005 	lsr.w	r0, r0, r5
 8000698:	fa01 f204 	lsl.w	r2, r1, r4
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	f141 0100 	adc.w	r1, r1, #0
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f205 	lsl.w	r2, r0, r5
 80006c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c4:	fa20 f304 	lsr.w	r3, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea43 0302 	orr.w	r3, r3, r2
 80006d0:	fa21 f004 	lsr.w	r0, r1, r4
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	fa21 f204 	lsr.w	r2, r1, r4
 80006dc:	ea20 0002 	bic.w	r0, r0, r2
 80006e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f094 0f00 	teq	r4, #0
 80006f4:	d10f      	bne.n	8000716 <__aeabi_dmul+0x1c2>
 80006f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fa:	0040      	lsls	r0, r0, #1
 80006fc:	eb41 0101 	adc.w	r1, r1, r1
 8000700:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000704:	bf08      	it	eq
 8000706:	3c01      	subeq	r4, #1
 8000708:	d0f7      	beq.n	80006fa <__aeabi_dmul+0x1a6>
 800070a:	ea41 0106 	orr.w	r1, r1, r6
 800070e:	f095 0f00 	teq	r5, #0
 8000712:	bf18      	it	ne
 8000714:	4770      	bxne	lr
 8000716:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071a:	0052      	lsls	r2, r2, #1
 800071c:	eb43 0303 	adc.w	r3, r3, r3
 8000720:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3d01      	subeq	r5, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1c6>
 800072a:	ea43 0306 	orr.w	r3, r3, r6
 800072e:	4770      	bx	lr
 8000730:	ea94 0f0c 	teq	r4, ip
 8000734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000738:	bf18      	it	ne
 800073a:	ea95 0f0c 	teqne	r5, ip
 800073e:	d00c      	beq.n	800075a <__aeabi_dmul+0x206>
 8000740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000744:	bf18      	it	ne
 8000746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074a:	d1d1      	bne.n	80006f0 <__aeabi_dmul+0x19c>
 800074c:	ea81 0103 	eor.w	r1, r1, r3
 8000750:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075e:	bf06      	itte	eq
 8000760:	4610      	moveq	r0, r2
 8000762:	4619      	moveq	r1, r3
 8000764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000768:	d019      	beq.n	800079e <__aeabi_dmul+0x24a>
 800076a:	ea94 0f0c 	teq	r4, ip
 800076e:	d102      	bne.n	8000776 <__aeabi_dmul+0x222>
 8000770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000774:	d113      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000776:	ea95 0f0c 	teq	r5, ip
 800077a:	d105      	bne.n	8000788 <__aeabi_dmul+0x234>
 800077c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000780:	bf1c      	itt	ne
 8000782:	4610      	movne	r0, r2
 8000784:	4619      	movne	r1, r3
 8000786:	d10a      	bne.n	800079e <__aeabi_dmul+0x24a>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000794:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a6:	bd70      	pop	{r4, r5, r6, pc}

080007a8 <__aeabi_ddiv>:
 80007a8:	b570      	push	{r4, r5, r6, lr}
 80007aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b6:	bf1d      	ittte	ne
 80007b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007bc:	ea94 0f0c 	teqne	r4, ip
 80007c0:	ea95 0f0c 	teqne	r5, ip
 80007c4:	f000 f8a7 	bleq	8000916 <__aeabi_ddiv+0x16e>
 80007c8:	eba4 0405 	sub.w	r4, r4, r5
 80007cc:	ea81 0e03 	eor.w	lr, r1, r3
 80007d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d8:	f000 8088 	beq.w	80008ec <__aeabi_ddiv+0x144>
 80007dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000800:	429d      	cmp	r5, r3
 8000802:	bf08      	it	eq
 8000804:	4296      	cmpeq	r6, r2
 8000806:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080e:	d202      	bcs.n	8000816 <__aeabi_ddiv+0x6e>
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	1ab6      	subs	r6, r6, r2
 8000818:	eb65 0503 	sbc.w	r5, r5, r3
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000826:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 000c 	orrcs.w	r0, r0, ip
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000884:	ea55 0e06 	orrs.w	lr, r5, r6
 8000888:	d018      	beq.n	80008bc <__aeabi_ddiv+0x114>
 800088a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000892:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a6:	d1c0      	bne.n	800082a <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	d10b      	bne.n	80008c6 <__aeabi_ddiv+0x11e>
 80008ae:	ea41 0100 	orr.w	r1, r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ba:	e7b6      	b.n	800082a <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	bf04      	itt	eq
 80008c2:	4301      	orreq	r1, r0
 80008c4:	2000      	moveq	r0, #0
 80008c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ca:	bf88      	it	hi
 80008cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d0:	f63f aeaf 	bhi.w	8000632 <__aeabi_dmul+0xde>
 80008d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d8:	bf04      	itt	eq
 80008da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f8:	bfc2      	ittt	gt
 80008fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000902:	bd70      	popgt	{r4, r5, r6, pc}
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000908:	f04f 0e00 	mov.w	lr, #0
 800090c:	3c01      	subs	r4, #1
 800090e:	e690      	b.n	8000632 <__aeabi_dmul+0xde>
 8000910:	ea45 0e06 	orr.w	lr, r5, r6
 8000914:	e68d      	b.n	8000632 <__aeabi_dmul+0xde>
 8000916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091a:	ea94 0f0c 	teq	r4, ip
 800091e:	bf08      	it	eq
 8000920:	ea95 0f0c 	teqeq	r5, ip
 8000924:	f43f af3b 	beq.w	800079e <__aeabi_dmul+0x24a>
 8000928:	ea94 0f0c 	teq	r4, ip
 800092c:	d10a      	bne.n	8000944 <__aeabi_ddiv+0x19c>
 800092e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000932:	f47f af34 	bne.w	800079e <__aeabi_dmul+0x24a>
 8000936:	ea95 0f0c 	teq	r5, ip
 800093a:	f47f af25 	bne.w	8000788 <__aeabi_dmul+0x234>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e72c      	b.n	800079e <__aeabi_dmul+0x24a>
 8000944:	ea95 0f0c 	teq	r5, ip
 8000948:	d106      	bne.n	8000958 <__aeabi_ddiv+0x1b0>
 800094a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094e:	f43f aefd 	beq.w	800074c <__aeabi_dmul+0x1f8>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e722      	b.n	800079e <__aeabi_dmul+0x24a>
 8000958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800095c:	bf18      	it	ne
 800095e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000962:	f47f aec5 	bne.w	80006f0 <__aeabi_dmul+0x19c>
 8000966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096a:	f47f af0d 	bne.w	8000788 <__aeabi_dmul+0x234>
 800096e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000972:	f47f aeeb 	bne.w	800074c <__aeabi_dmul+0x1f8>
 8000976:	e712      	b.n	800079e <__aeabi_dmul+0x24a>

08000978 <__gedf2>:
 8000978:	f04f 3cff 	mov.w	ip, #4294967295
 800097c:	e006      	b.n	800098c <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__ledf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	e002      	b.n	800098c <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__cmpdf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a2:	d01b      	beq.n	80009dc <__cmpdf2+0x54>
 80009a4:	b001      	add	sp, #4
 80009a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009aa:	bf0c      	ite	eq
 80009ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b0:	ea91 0f03 	teqne	r1, r3
 80009b4:	bf02      	ittt	eq
 80009b6:	ea90 0f02 	teqeq	r0, r2
 80009ba:	2000      	moveq	r0, #0
 80009bc:	4770      	bxeq	lr
 80009be:	f110 0f00 	cmn.w	r0, #0
 80009c2:	ea91 0f03 	teq	r1, r3
 80009c6:	bf58      	it	pl
 80009c8:	4299      	cmppl	r1, r3
 80009ca:	bf08      	it	eq
 80009cc:	4290      	cmpeq	r0, r2
 80009ce:	bf2c      	ite	cs
 80009d0:	17d8      	asrcs	r0, r3, #31
 80009d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d6:	f040 0001 	orr.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d102      	bne.n	80009ec <__cmpdf2+0x64>
 80009e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ea:	d107      	bne.n	80009fc <__cmpdf2+0x74>
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d1d6      	bne.n	80009a4 <__cmpdf2+0x1c>
 80009f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fa:	d0d3      	beq.n	80009a4 <__cmpdf2+0x1c>
 80009fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdrcmple>:
 8000a04:	4684      	mov	ip, r0
 8000a06:	4610      	mov	r0, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	468c      	mov	ip, r1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4663      	mov	r3, ip
 8000a10:	e000      	b.n	8000a14 <__aeabi_cdcmpeq>
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdcmpeq>:
 8000a14:	b501      	push	{r0, lr}
 8000a16:	f7ff ffb7 	bl	8000988 <__cmpdf2>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	bf48      	it	mi
 8000a1e:	f110 0f00 	cmnmi.w	r0, #0
 8000a22:	bd01      	pop	{r0, pc}

08000a24 <__aeabi_dcmpeq>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff fff4 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2001      	moveq	r0, #1
 8000a30:	2000      	movne	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmplt>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffea 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a40:	bf34      	ite	cc
 8000a42:	2001      	movcc	r0, #1
 8000a44:	2000      	movcs	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmple>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffe0 	bl	8000a14 <__aeabi_cdcmpeq>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpge>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffce 	bl	8000a04 <__aeabi_cdrcmple>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpgt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffc4 	bl	8000a04 <__aeabi_cdrcmple>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2iz>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d215      	bcs.n	8000abe <__aeabi_d2iz+0x36>
 8000a92:	d511      	bpl.n	8000ab8 <__aeabi_d2iz+0x30>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d912      	bls.n	8000ac4 <__aeabi_d2iz+0x3c>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	4770      	bx	lr
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac2:	d105      	bne.n	8000ad0 <__aeabi_d2iz+0x48>
 8000ac4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	bf08      	it	eq
 8000aca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_d2uiz>:
 8000ad8:	004a      	lsls	r2, r1, #1
 8000ada:	d211      	bcs.n	8000b00 <__aeabi_d2uiz+0x28>
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae0:	d211      	bcs.n	8000b06 <__aeabi_d2uiz+0x2e>
 8000ae2:	d50d      	bpl.n	8000b00 <__aeabi_d2uiz+0x28>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d40e      	bmi.n	8000b0c <__aeabi_d2uiz+0x34>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_d2uiz+0x3a>
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <ATCMD_Default_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_Default_Callback(uint8_t *rsp)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t ret = ATCMD_RSP_CONTINUE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
	char* rspStrTable[2] = {"OK", "ERROR"};
 8000bc4:	4a34      	ldr	r2, [pc, #208]	@ (8000c98 <ATCMD_Default_Callback+0xe0>)
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75bb      	strb	r3, [r7, #22]
	int8_t rspType = -1;
 8000bd6:	23ff      	movs	r3, #255	@ 0xff
 8000bd8:	757b      	strb	r3, [r7, #21]
	uint8_t* p = rsp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
	while(p)
 8000bde:	e033      	b.n	8000c48 <ATCMD_Default_Callback+0x90>
	{
		/*Ignore /r/n*/
		while( ( ATCMD_CMD_CR == *p) || ( ATCMD_CMD_LF == *p ))
		{
			p++;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3301      	adds	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
		while( ( ATCMD_CMD_CR == *p) || ( ATCMD_CMD_LF == *p ))
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b0d      	cmp	r3, #13
 8000bec:	d0f8      	beq.n	8000be0 <ATCMD_Default_Callback+0x28>
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b0a      	cmp	r3, #10
 8000bf4:	d0f4      	beq.n	8000be0 <ATCMD_Default_Callback+0x28>
		}
		for(i = 0; i < 2; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	75bb      	strb	r3, [r7, #22]
 8000bfa:	e01d      	b.n	8000c38 <ATCMD_Default_Callback+0x80>
		{
			if(!strncmp((char*)rspStrTable[i], (char*)p, strlen((char*)rspStrTable[i]) ))
 8000bfc:	7dbb      	ldrb	r3, [r7, #22]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	3318      	adds	r3, #24
 8000c02:	443b      	add	r3, r7
 8000c04:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000c08:	7dbb      	ldrb	r3, [r7, #22]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	3318      	adds	r3, #24
 8000c0e:	443b      	add	r3, r7
 8000c10:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fad9 	bl	80001cc <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	6939      	ldr	r1, [r7, #16]
 8000c20:	4620      	mov	r0, r4
 8000c22:	f008 fcd6 	bl	80095d2 <strncmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <ATCMD_Default_Callback+0x7a>
			{
				rspType = (int8_t)i;
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	757b      	strb	r3, [r7, #21]
				break;
 8000c30:	e005      	b.n	8000c3e <ATCMD_Default_Callback+0x86>
		for(i = 0; i < 2; i++)
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	3301      	adds	r3, #1
 8000c36:	75bb      	strb	r3, [r7, #22]
 8000c38:	7dbb      	ldrb	r3, [r7, #22]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d9de      	bls.n	8000bfc <ATCMD_Default_Callback+0x44>
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8000c3e:	210a      	movs	r1, #10
 8000c40:	6938      	ldr	r0, [r7, #16]
 8000c42:	f008 fcb9 	bl	80095b8 <strchr>
 8000c46:	6138      	str	r0, [r7, #16]
	while(p)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1cb      	bne.n	8000be6 <ATCMD_Default_Callback+0x2e>
	}
	switch(rspType)
 8000c4e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <ATCMD_Default_Callback+0xa4>
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d006      	beq.n	8000c68 <ATCMD_Default_Callback+0xb0>
 8000c5a:	e00e      	b.n	8000c7a <ATCMD_Default_Callback+0xc2>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	75fb      	strb	r3, [r7, #23]
		g_errorCount = 0;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <ATCMD_Default_Callback+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
		break;
 8000c66:	e011      	b.n	8000c8c <ATCMD_Default_Callback+0xd4>
	case 1:
		ret = ATCMD_RSP_ERROR;
 8000c68:	23ff      	movs	r3, #255	@ 0xff
 8000c6a:	75fb      	strb	r3, [r7, #23]
		g_errorCount++;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <ATCMD_Default_Callback+0xe4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <ATCMD_Default_Callback+0xe4>)
 8000c76:	701a      	strb	r2, [r3, #0]
		break;
 8000c78:	e008      	b.n	8000c8c <ATCMD_Default_Callback+0xd4>
	default:
		g_errorCount++;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <ATCMD_Default_Callback+0xe4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <ATCMD_Default_Callback+0xe4>)
 8000c84:	701a      	strb	r2, [r3, #0]
		ret = ATCMD_RSP_ERROR;
 8000c86:	23ff      	movs	r3, #255	@ 0xff
 8000c88:	75fb      	strb	r3, [r7, #23]
		break;
 8000c8a:	bf00      	nop

	}
	return ret;
 8000c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	371c      	adds	r7, #28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	080096b4 	.word	0x080096b4
 8000c9c:	200001b9 	.word	0x200001b9

08000ca0 <ATCMD_Cpin_Status_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_Cpin_Status_Callback(uint8_t* rsp)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_CONTINUE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"+CPIN: READY", "+CPIN: NOT READY", "ERROR"};
 8000cae:	4a40      	ldr	r2, [pc, #256]	@ (8000db0 <ATCMD_Cpin_Status_Callback+0x110>)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
	while(p)
 8000cc8:	e03c      	b.n	8000d44 <ATCMD_Cpin_Status_Callback+0xa4>
	{
		/*Ignore /r/n */
		while((ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p))
		{
			p++;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
		while((ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p))
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b0d      	cmp	r3, #13
 8000cd6:	d0f8      	beq.n	8000cca <ATCMD_Cpin_Status_Callback+0x2a>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b0a      	cmp	r3, #10
 8000cde:	d0f4      	beq.n	8000cca <ATCMD_Cpin_Status_Callback+0x2a>
		}
		for ( i =0; i < 3; i++ )
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75fb      	strb	r3, [r7, #23]
 8000ce4:	e023      	b.n	8000d2e <ATCMD_Cpin_Status_Callback+0x8e>
		{
			if(!strncmp((char*)rspStrTable[i], (char*)p, strlen((char*)rspStrTable[i])))
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	3328      	adds	r3, #40	@ 0x28
 8000cee:	443b      	add	r3, r7
 8000cf0:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000cf4:	68fd      	ldr	r5, [r7, #12]
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	3328      	adds	r3, #40	@ 0x28
 8000cfe:	443b      	add	r3, r7
 8000d00:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa61 	bl	80001cc <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4629      	mov	r1, r5
 8000d10:	4620      	mov	r0, r4
 8000d12:	f008 fc5e 	bl	80095d2 <strncmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <ATCMD_Cpin_Status_Callback+0x84>
			{
				rspType =i;
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	613b      	str	r3, [r7, #16]
				break;
 8000d22:	e008      	b.n	8000d36 <ATCMD_Cpin_Status_Callback+0x96>
		for ( i =0; i < 3; i++ )
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	75fb      	strb	r3, [r7, #23]
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d9d7      	bls.n	8000ce6 <ATCMD_Cpin_Status_Callback+0x46>
			}
		}
		p=(uint8_t*)strchr((char*)p, 0x0a);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	210a      	movs	r1, #10
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f008 fc3c 	bl	80095b8 <strchr>
 8000d40:	4603      	mov	r3, r0
 8000d42:	60fb      	str	r3, [r7, #12]
	while(p)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1c2      	bne.n	8000cd0 <ATCMD_Cpin_Status_Callback+0x30>
	}
	switch(rspType)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d014      	beq.n	8000d7a <ATCMD_Cpin_Status_Callback+0xda>
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	dc1c      	bgt.n	8000d8e <ATCMD_Cpin_Status_Callback+0xee>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <ATCMD_Cpin_Status_Callback+0xbe>
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d007      	beq.n	8000d6c <ATCMD_Cpin_Status_Callback+0xcc>
 8000d5c:	e017      	b.n	8000d8e <ATCMD_Cpin_Status_Callback+0xee>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount=0;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		break;
 8000d6a:	e01a      	b.n	8000da2 <ATCMD_Cpin_Status_Callback+0x102>
	case 1:
		ret = ATCMD_RSP_ERROR;
 8000d6c:	23ff      	movs	r3, #255	@ 0xff
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount=0;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		break;
 8000d78:	e013      	b.n	8000da2 <ATCMD_Cpin_Status_Callback+0x102>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d8a:	701a      	strb	r2, [r3, #0]
		break;
 8000d8c:	e009      	b.n	8000da2 <ATCMD_Cpin_Status_Callback+0x102>
	default:
		g_errorCount++;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <ATCMD_Cpin_Status_Callback+0x114>)
 8000d98:	701a      	strb	r2, [r3, #0]
		ret = ATCMD_RSP_ERROR;
 8000d9a:	23ff      	movs	r3, #255	@ 0xff
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8000da0:	bf00      	nop
	}
	return ret;
 8000da2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000da6:	b25b      	sxtb	r3, r3

}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bdb0      	pop	{r4, r5, r7, pc}
 8000db0:	080096e0 	.word	0x080096e0
 8000db4:	200001b9 	.word	0x200001b9

08000db8 <ATCMD_Creg_Status_Callback>:
* <hr>
*
*******************************************************************************/

atcmd_rsp_t ATCMD_Creg_Status_Callback( uint8_t* rsp)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_CONTINUE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"+CREG: 0,1", "+CREG: 0,5", "ERROR"};
 8000dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb4 <ATCMD_Creg_Status_Callback+0xfc>)
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	75fb      	strb	r3, [r7, #23]
	uint32_t volatile rspType = -1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	60fb      	str	r3, [r7, #12]

	while(p)
 8000de0:	e03c      	b.n	8000e5c <ATCMD_Creg_Status_Callback+0xa4>
	{
		/**Ignore /r/n**/
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
		{
			p++;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b0d      	cmp	r3, #13
 8000dee:	d0f8      	beq.n	8000de2 <ATCMD_Creg_Status_Callback+0x2a>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b0a      	cmp	r3, #10
 8000df6:	d0f4      	beq.n	8000de2 <ATCMD_Creg_Status_Callback+0x2a>
		}
		for( i = 0; i < 3; i++ )
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
 8000dfc:	e023      	b.n	8000e46 <ATCMD_Creg_Status_Callback+0x8e>
		{
			if(!strncmp((char*)rspStrTable[i], (char*)p, strlen((char*)rspStrTable[i])))
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	3328      	adds	r3, #40	@ 0x28
 8000e06:	443b      	add	r3, r7
 8000e08:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000e0c:	68fd      	ldr	r5, [r7, #12]
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	3328      	adds	r3, #40	@ 0x28
 8000e16:	443b      	add	r3, r7
 8000e18:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9d5 	bl	80001cc <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4629      	mov	r1, r5
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f008 fbd2 	bl	80095d2 <strncmp>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d103      	bne.n	8000e3c <ATCMD_Creg_Status_Callback+0x84>
			{
				rspType = i;
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	613b      	str	r3, [r7, #16]
				break;
 8000e3a:	e008      	b.n	8000e4e <ATCMD_Creg_Status_Callback+0x96>
		for( i = 0; i < 3; i++ )
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	75fb      	strb	r3, [r7, #23]
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d9d7      	bls.n	8000dfe <ATCMD_Creg_Status_Callback+0x46>
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	210a      	movs	r1, #10
 8000e52:	4618      	mov	r0, r3
 8000e54:	f008 fbb0 	bl	80095b8 <strchr>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60fb      	str	r3, [r7, #12]
	while(p)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1c2      	bne.n	8000de8 <ATCMD_Creg_Status_Callback+0x30>
	}
	switch(rspType)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d902      	bls.n	8000e6e <ATCMD_Creg_Status_Callback+0xb6>
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d007      	beq.n	8000e7c <ATCMD_Creg_Status_Callback+0xc4>
 8000e6c:	e010      	b.n	8000e90 <ATCMD_Creg_Status_Callback+0xd8>
	{
	case 0:
	case 1:
		ret = ATCMD_RSP_FINISH;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount=0;
 8000e74:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <ATCMD_Creg_Status_Callback+0x100>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
		break;
 8000e7a:	e013      	b.n	8000ea4 <ATCMD_Creg_Status_Callback+0xec>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8000e82:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb8 <ATCMD_Creg_Status_Callback+0x100>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <ATCMD_Creg_Status_Callback+0x100>)
 8000e8c:	701a      	strb	r2, [r3, #0]
		break;
 8000e8e:	e009      	b.n	8000ea4 <ATCMD_Creg_Status_Callback+0xec>
	default:
		g_errorCount++;
 8000e90:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <ATCMD_Creg_Status_Callback+0x100>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <ATCMD_Creg_Status_Callback+0x100>)
 8000e9a:	701a      	strb	r2, [r3, #0]
		ret = ATCMD_RSP_ERROR;
 8000e9c:	23ff      	movs	r3, #255	@ 0xff
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8000ea2:	bf00      	nop
	}
	return ret;
 8000ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ea8:	b25b      	sxtb	r3, r3

}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08009704 	.word	0x08009704
 8000eb8:	200001b9 	.word	0x200001b9

08000ebc <ATCMD_CNTP_Callback>:
* <tr><td> 16/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_CNTP_Callback (uint8_t *rsp){
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8000ec4:	23ff      	movs	r3, #255	@ 0xff
 8000ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char* volatile rspStrTable[3] = {"+CNTP: ", "OK","ERROR"};
 8000eca:	4a4e      	ldr	r2, [pc, #312]	@ (8001004 <ATCMD_CNTP_Callback+0x148>)
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
	while(p){
 8000ee4:	e060      	b.n	8000fa8 <ATCMD_CNTP_Callback+0xec>
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p ){
			p++;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p ){
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b0d      	cmp	r3, #13
 8000ef2:	d0f8      	beq.n	8000ee6 <ATCMD_CNTP_Callback+0x2a>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b0a      	cmp	r3, #10
 8000efa:	d0f4      	beq.n	8000ee6 <ATCMD_CNTP_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++){
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]
 8000f00:	e023      	b.n	8000f4a <ATCMD_CNTP_Callback+0x8e>
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))	{
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	3328      	adds	r3, #40	@ 0x28
 8000f0a:	443b      	add	r3, r7
 8000f0c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000f10:	68fd      	ldr	r5, [r7, #12]
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	3328      	adds	r3, #40	@ 0x28
 8000f1a:	443b      	add	r3, r7
 8000f1c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f953 	bl	80001cc <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f008 fb50 	bl	80095d2 <strncmp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <ATCMD_CNTP_Callback+0x84>
				rspType = i;
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	613b      	str	r3, [r7, #16]
				break;
 8000f3e:	e008      	b.n	8000f52 <ATCMD_CNTP_Callback+0x96>
		for ( i = 0; i < 3; i ++){
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	75fb      	strb	r3, [r7, #23]
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d9d7      	bls.n	8000f02 <ATCMD_CNTP_Callback+0x46>
			}
		}
		if(rspType == 0){
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d120      	bne.n	8000f9a <ATCMD_CNTP_Callback+0xde>
			s_tmpStr = p;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001008 <ATCMD_CNTP_Callback+0x14c>)
 8000f5c:	6013      	str	r3, [r2, #0]
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8000f5e:	2232      	movs	r2, #50	@ 0x32
 8000f60:	2100      	movs	r1, #0
 8000f62:	482a      	ldr	r0, [pc, #168]	@ (800100c <ATCMD_CNTP_Callback+0x150>)
 8000f64:	f008 fb11 	bl	800958a <memset>
			memset(ntpHostName, '\0', 20);
 8000f68:	2214      	movs	r2, #20
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4828      	ldr	r0, [pc, #160]	@ (8001010 <ATCMD_CNTP_Callback+0x154>)
 8000f6e:	f008 fb0c 	bl	800958a <memset>
			s_tmpStr = Str_Cpy_Marker(s_tmpStr, &s_tempBuff[0], ' ', ATCMD_CMD_CR);
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <ATCMD_CNTP_Callback+0x14c>)
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	230d      	movs	r3, #13
 8000f78:	2220      	movs	r2, #32
 8000f7a:	4924      	ldr	r1, [pc, #144]	@ (800100c <ATCMD_CNTP_Callback+0x150>)
 8000f7c:	f006 f862 	bl	8007044 <Str_Cpy_Marker>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <ATCMD_CNTP_Callback+0x14c>)
 8000f84:	6013      	str	r3, [r2, #0]
			strncpy(ntpHostName, (char*)s_tempBuff, strlen((char*)s_tempBuff));
 8000f86:	4821      	ldr	r0, [pc, #132]	@ (800100c <ATCMD_CNTP_Callback+0x150>)
 8000f88:	f7ff f920 	bl	80001cc <strlen>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	491e      	ldr	r1, [pc, #120]	@ (800100c <ATCMD_CNTP_Callback+0x150>)
 8000f92:	481f      	ldr	r0, [pc, #124]	@ (8001010 <ATCMD_CNTP_Callback+0x154>)
 8000f94:	f008 fb2f 	bl	80095f6 <strncpy>
			break;
 8000f98:	e009      	b.n	8000fae <ATCMD_CNTP_Callback+0xf2>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 fb0a 	bl	80095b8 <strchr>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60fb      	str	r3, [r7, #12]
	while(p){
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d19e      	bne.n	8000eec <ATCMD_CNTP_Callback+0x30>
	}

	switch(rspType)	{
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	dc02      	bgt.n	8000fba <ATCMD_CNTP_Callback+0xfe>
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da03      	bge.n	8000fc0 <ATCMD_CNTP_Callback+0x104>
 8000fb8:	e013      	b.n	8000fe2 <ATCMD_CNTP_Callback+0x126>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d007      	beq.n	8000fce <ATCMD_CNTP_Callback+0x112>
 8000fbe:	e010      	b.n	8000fe2 <ATCMD_CNTP_Callback+0x126>
	case 0:
	case 1:
		ret = ATCMD_RSP_FINISH;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <ATCMD_CNTP_Callback+0x158>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
		break;
 8000fcc:	e013      	b.n	8000ff6 <ATCMD_CNTP_Callback+0x13a>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8000fce:	23ff      	movs	r3, #255	@ 0xff
 8000fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <ATCMD_CNTP_Callback+0x158>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <ATCMD_CNTP_Callback+0x158>)
 8000fde:	701a      	strb	r2, [r3, #0]
		break;
 8000fe0:	e009      	b.n	8000ff6 <ATCMD_CNTP_Callback+0x13a>
	default:
		ret = ATCMD_RSP_ERROR;
 8000fe2:	23ff      	movs	r3, #255	@ 0xff
 8000fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <ATCMD_CNTP_Callback+0x158>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <ATCMD_CNTP_Callback+0x158>)
 8000ff2:	701a      	strb	r2, [r3, #0]
		break;
 8000ff4:	bf00      	nop
	}
	return ret;
 8000ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ffa:	b25b      	sxtb	r3, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bdb0      	pop	{r4, r5, r7, pc}
 8001004:	08009718 	.word	0x08009718
 8001008:	200001c0 	.word	0x200001c0
 800100c:	200001c8 	.word	0x200001c8
 8001010:	20000758 	.word	0x20000758
 8001014:	200001b9 	.word	0x200001b9

08001018 <ATCMD_GetDateTime_Callback>:
* <tr><td> 16/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_GetDateTime_Callback (uint8_t *rsp){
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001020:	23ff      	movs	r3, #255	@ 0xff
 8001022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char* volatile rspStrTable[3] = {"+CCLK: ", "OK", "ERROR"};
 8001026:	4a4e      	ldr	r2, [pc, #312]	@ (8001160 <ATCMD_GetDateTime_Callback+0x148>)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	ca07      	ldmia	r2, {r0, r1, r2}
 800102e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60fb      	str	r3, [r7, #12]
	while(p){
 8001040:	e060      	b.n	8001104 <ATCMD_GetDateTime_Callback+0xec>
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p ){
			p++;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p ){
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b0d      	cmp	r3, #13
 800104e:	d0f8      	beq.n	8001042 <ATCMD_GetDateTime_Callback+0x2a>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b0a      	cmp	r3, #10
 8001056:	d0f4      	beq.n	8001042 <ATCMD_GetDateTime_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++){
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	e023      	b.n	80010a6 <ATCMD_GetDateTime_Callback+0x8e>
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i]))){
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	3328      	adds	r3, #40	@ 0x28
 8001066:	443b      	add	r3, r7
 8001068:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800106c:	68fd      	ldr	r5, [r7, #12]
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	3328      	adds	r3, #40	@ 0x28
 8001076:	443b      	add	r3, r7
 8001078:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f8a5 	bl	80001cc <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4629      	mov	r1, r5
 8001088:	4620      	mov	r0, r4
 800108a:	f008 faa2 	bl	80095d2 <strncmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d103      	bne.n	800109c <ATCMD_GetDateTime_Callback+0x84>
				rspType = i;
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	613b      	str	r3, [r7, #16]
				break;
 800109a:	e008      	b.n	80010ae <ATCMD_GetDateTime_Callback+0x96>
		for ( i = 0; i < 3; i ++){
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d9d7      	bls.n	800105e <ATCMD_GetDateTime_Callback+0x46>
			}
		}
		if(rspType == 0){
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d120      	bne.n	80010f6 <ATCMD_GetDateTime_Callback+0xde>
			s_tmpStr = p;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001164 <ATCMD_GetDateTime_Callback+0x14c>)
 80010b8:	6013      	str	r3, [r2, #0]
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 80010ba:	2232      	movs	r2, #50	@ 0x32
 80010bc:	2100      	movs	r1, #0
 80010be:	482a      	ldr	r0, [pc, #168]	@ (8001168 <ATCMD_GetDateTime_Callback+0x150>)
 80010c0:	f008 fa63 	bl	800958a <memset>
			memset(dateTime, '\0', 22);
 80010c4:	2216      	movs	r2, #22
 80010c6:	2100      	movs	r1, #0
 80010c8:	4828      	ldr	r0, [pc, #160]	@ (800116c <ATCMD_GetDateTime_Callback+0x154>)
 80010ca:	f008 fa5e 	bl	800958a <memset>
			s_tmpStr = Str_Cpy_Marker(s_tmpStr, &s_tempBuff[0], '"', '"');
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <ATCMD_GetDateTime_Callback+0x14c>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	2322      	movs	r3, #34	@ 0x22
 80010d4:	2222      	movs	r2, #34	@ 0x22
 80010d6:	4924      	ldr	r1, [pc, #144]	@ (8001168 <ATCMD_GetDateTime_Callback+0x150>)
 80010d8:	f005 ffb4 	bl	8007044 <Str_Cpy_Marker>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <ATCMD_GetDateTime_Callback+0x14c>)
 80010e0:	6013      	str	r3, [r2, #0]
			strncpy(dateTime, (char*)s_tempBuff, strlen((char*)s_tempBuff));
 80010e2:	4821      	ldr	r0, [pc, #132]	@ (8001168 <ATCMD_GetDateTime_Callback+0x150>)
 80010e4:	f7ff f872 	bl	80001cc <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	491e      	ldr	r1, [pc, #120]	@ (8001168 <ATCMD_GetDateTime_Callback+0x150>)
 80010ee:	481f      	ldr	r0, [pc, #124]	@ (800116c <ATCMD_GetDateTime_Callback+0x154>)
 80010f0:	f008 fa81 	bl	80095f6 <strncpy>
			break;
 80010f4:	e009      	b.n	800110a <ATCMD_GetDateTime_Callback+0xf2>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	210a      	movs	r1, #10
 80010fa:	4618      	mov	r0, r3
 80010fc:	f008 fa5c 	bl	80095b8 <strchr>
 8001100:	4603      	mov	r3, r0
 8001102:	60fb      	str	r3, [r7, #12]
	while(p){
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d19e      	bne.n	8001048 <ATCMD_GetDateTime_Callback+0x30>
	}
	switch(rspType){
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	2b01      	cmp	r3, #1
 800110e:	dc02      	bgt.n	8001116 <ATCMD_GetDateTime_Callback+0xfe>
 8001110:	2b00      	cmp	r3, #0
 8001112:	da03      	bge.n	800111c <ATCMD_GetDateTime_Callback+0x104>
 8001114:	e013      	b.n	800113e <ATCMD_GetDateTime_Callback+0x126>
 8001116:	2b02      	cmp	r3, #2
 8001118:	d007      	beq.n	800112a <ATCMD_GetDateTime_Callback+0x112>
 800111a:	e010      	b.n	800113e <ATCMD_GetDateTime_Callback+0x126>
	case 0:
	case 1:
		ret = ATCMD_RSP_FINISH;
 800111c:	2302      	movs	r3, #2
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8001122:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <ATCMD_GetDateTime_Callback+0x158>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		break;
 8001128:	e013      	b.n	8001152 <ATCMD_GetDateTime_Callback+0x13a>
	case 2:
		ret = ATCMD_RSP_ERROR;
 800112a:	23ff      	movs	r3, #255	@ 0xff
 800112c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <ATCMD_GetDateTime_Callback+0x158>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <ATCMD_GetDateTime_Callback+0x158>)
 800113a:	701a      	strb	r2, [r3, #0]
		break;
 800113c:	e009      	b.n	8001152 <ATCMD_GetDateTime_Callback+0x13a>
	default:
		ret = ATCMD_RSP_ERROR;
 800113e:	23ff      	movs	r3, #255	@ 0xff
 8001140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <ATCMD_GetDateTime_Callback+0x158>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <ATCMD_GetDateTime_Callback+0x158>)
 800114e:	701a      	strb	r2, [r3, #0]
		break;
 8001150:	bf00      	nop
	}
	return ret;
 8001152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001156:	b25b      	sxtb	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	3728      	adds	r7, #40	@ 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bdb0      	pop	{r4, r5, r7, pc}
 8001160:	0800972c 	.word	0x0800972c
 8001164:	200001c0 	.word	0x200001c0
 8001168:	200001c8 	.word	0x200001c8
 800116c:	2000076c 	.word	0x2000076c
 8001170:	200001b9 	.word	0x200001b9

08001174 <ATCMD_HttpAction_Get_Callback>:
*
*******************************************************************************/


atcmd_rsp_t ATCMD_HttpAction_Get_Callback(uint8_t* rsp)
{
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_CONTINUE;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK", "+HTTPACTION: ", "ERROR"};
 8001182:	4a54      	ldr	r2, [pc, #336]	@ (80012d4 <ATCMD_HttpAction_Get_Callback+0x160>)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	ca07      	ldmia	r2, {r0, r1, r2}
 800118a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
	uint32_t volatile rspType = -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	60fb      	str	r3, [r7, #12]

	while(p)
 800119c:	e044      	b.n	8001228 <ATCMD_HttpAction_Get_Callback+0xb4>
	{
		/**Ignore /r/n**/
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
		{
			p++;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0d      	cmp	r3, #13
 80011aa:	d0f8      	beq.n	800119e <ATCMD_HttpAction_Get_Callback+0x2a>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b0a      	cmp	r3, #10
 80011b2:	d0f4      	beq.n	800119e <ATCMD_HttpAction_Get_Callback+0x2a>
		}
		for( i = 0; i < 3; i++ )
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	e029      	b.n	800120e <ATCMD_HttpAction_Get_Callback+0x9a>
		{
			if(!strncmp((char*)rspStrTable[i], (char*)p, strlen((char*)rspStrTable[i])))
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	3328      	adds	r3, #40	@ 0x28
 80011c2:	443b      	add	r3, r7
 80011c4:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80011c8:	68fd      	ldr	r5, [r7, #12]
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	3328      	adds	r3, #40	@ 0x28
 80011d2:	443b      	add	r3, r7
 80011d4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7fe fff7 	bl	80001cc <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4629      	mov	r1, r5
 80011e4:	4620      	mov	r0, r4
 80011e6:	f008 f9f4 	bl	80095d2 <strncmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d109      	bne.n	8001204 <ATCMD_HttpAction_Get_Callback+0x90>
			{
				rspType = i;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	613b      	str	r3, [r7, #16]
				if( rspType == 1 )
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10d      	bne.n	8001218 <ATCMD_HttpAction_Get_Callback+0xa4>
				{
					s_tmpStr = p;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a36      	ldr	r2, [pc, #216]	@ (80012d8 <ATCMD_HttpAction_Get_Callback+0x164>)
 8001200:	6013      	str	r3, [r2, #0]
				}
				break;
 8001202:	e009      	b.n	8001218 <ATCMD_HttpAction_Get_Callback+0xa4>
		for( i = 0; i < 3; i++ )
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3301      	adds	r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	75fb      	strb	r3, [r7, #23]
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d9d1      	bls.n	80011ba <ATCMD_HttpAction_Get_Callback+0x46>
 8001216:	e000      	b.n	800121a <ATCMD_HttpAction_Get_Callback+0xa6>
				break;
 8001218:	bf00      	nop
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	210a      	movs	r1, #10
 800121e:	4618      	mov	r0, r3
 8001220:	f008 f9ca 	bl	80095b8 <strchr>
 8001224:	4603      	mov	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
	while(p)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1ba      	bne.n	80011a4 <ATCMD_HttpAction_Get_Callback+0x30>
	}
	switch(rspType)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d033      	beq.n	800129c <ATCMD_HttpAction_Get_Callback+0x128>
 8001234:	2b02      	cmp	r3, #2
 8001236:	d83b      	bhi.n	80012b0 <ATCMD_HttpAction_Get_Callback+0x13c>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <ATCMD_HttpAction_Get_Callback+0xce>
 800123c:	2b01      	cmp	r3, #1
 800123e:	d004      	beq.n	800124a <ATCMD_HttpAction_Get_Callback+0xd6>
 8001240:	e036      	b.n	80012b0 <ATCMD_HttpAction_Get_Callback+0x13c>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 8001242:	2303      	movs	r3, #3
 8001244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001248:	e03c      	b.n	80012c4 <ATCMD_HttpAction_Get_Callback+0x150>
	case 1:
		ret = ATCMD_RSP_FINISH;
 800124a:	2302      	movs	r3, #2
 800124c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		s_tmpStr = Str_Cpy_Marker(s_tmpStr, &g_httpResponse.httpResponseCode[0], ',', ',');
 8001250:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <ATCMD_HttpAction_Get_Callback+0x164>)
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	232c      	movs	r3, #44	@ 0x2c
 8001256:	222c      	movs	r2, #44	@ 0x2c
 8001258:	4920      	ldr	r1, [pc, #128]	@ (80012dc <ATCMD_HttpAction_Get_Callback+0x168>)
 800125a:	f005 fef3 	bl	8007044 <Str_Cpy_Marker>
 800125e:	4603      	mov	r3, r0
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <ATCMD_HttpAction_Get_Callback+0x164>)
 8001262:	6013      	str	r3, [r2, #0]
		s_tmpStr = Str_Cpy_Marker(s_tmpStr, &g_httpResponse.httpResponseBytes[0], ',', ATCMD_CMD_CR);
 8001264:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <ATCMD_HttpAction_Get_Callback+0x164>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	230d      	movs	r3, #13
 800126a:	222c      	movs	r2, #44	@ 0x2c
 800126c:	491c      	ldr	r1, [pc, #112]	@ (80012e0 <ATCMD_HttpAction_Get_Callback+0x16c>)
 800126e:	f005 fee9 	bl	8007044 <Str_Cpy_Marker>
 8001272:	4603      	mov	r3, r0
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <ATCMD_HttpAction_Get_Callback+0x164>)
 8001276:	6013      	str	r3, [r2, #0]
		g_httpResponse.bytesToRead = Convert_String_To_Integer(&g_httpResponse.httpResponseBytes[0]);
 8001278:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <ATCMD_HttpAction_Get_Callback+0x16c>)
 800127a:	f005 fe17 	bl	8006eac <Convert_String_To_Integer>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ATCMD_HttpAction_Get_Callback+0x168>)
 8001284:	815a      	strh	r2, [r3, #10]
		g_httpResponse.responseCode = Convert_String_To_Integer(&g_httpResponse.httpResponseCode[0]);
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <ATCMD_HttpAction_Get_Callback+0x168>)
 8001288:	f005 fe10 	bl	8006eac <Convert_String_To_Integer>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <ATCMD_HttpAction_Get_Callback+0x168>)
 8001292:	819a      	strh	r2, [r3, #12]
		g_errorCount = 0;
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <ATCMD_HttpAction_Get_Callback+0x170>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
		break;
 800129a:	e013      	b.n	80012c4 <ATCMD_HttpAction_Get_Callback+0x150>
	case 2:
		ret = ATCMD_RSP_ERROR;
 800129c:	23ff      	movs	r3, #255	@ 0xff
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <ATCMD_HttpAction_Get_Callback+0x170>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <ATCMD_HttpAction_Get_Callback+0x170>)
 80012ac:	701a      	strb	r2, [r3, #0]
		break;
 80012ae:	e009      	b.n	80012c4 <ATCMD_HttpAction_Get_Callback+0x150>
	default:
		g_errorCount++;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <ATCMD_HttpAction_Get_Callback+0x170>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <ATCMD_HttpAction_Get_Callback+0x170>)
 80012ba:	701a      	strb	r2, [r3, #0]
		ret = ATCMD_RSP_ERROR;
 80012bc:	23ff      	movs	r3, #255	@ 0xff
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 80012c2:	bf00      	nop
	}
return ret;
 80012c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012c8:	b25b      	sxtb	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08009748 	.word	0x08009748
 80012d8:	200001c0 	.word	0x200001c0
 80012dc:	200000f8 	.word	0x200000f8
 80012e0:	200000fc 	.word	0x200000fc
 80012e4:	200001b9 	.word	0x200001b9

080012e8 <ATCMD_HttpRead_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_HttpRead_Callback( uint8_t* rsp)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_CONTINUE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK", "+HTTPREAD: ", "ERROR"};
 80012f6:	4a89      	ldr	r2, [pc, #548]	@ (800151c <ATCMD_HttpRead_Callback+0x234>)
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
	uint32_t volatile rspType = -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60fb      	str	r3, [r7, #12]
	while(p)
 8001310:	e04b      	b.n	80013aa <ATCMD_HttpRead_Callback+0xc2>
	{
		/**Ignore /r/n**/
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
		{
			p++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
		while( (ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p) )
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b0d      	cmp	r3, #13
 800131e:	d0f8      	beq.n	8001312 <ATCMD_HttpRead_Callback+0x2a>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b0a      	cmp	r3, #10
 8001326:	d0f4      	beq.n	8001312 <ATCMD_HttpRead_Callback+0x2a>
		}
		for( i = 0; i < 3; i++ )
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e029      	b.n	8001382 <ATCMD_HttpRead_Callback+0x9a>
		{
			if(!strncmp((char*)rspStrTable[i], (char*)p, strlen((char*)rspStrTable[i])))
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3328      	adds	r3, #40	@ 0x28
 8001336:	443b      	add	r3, r7
 8001338:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800133c:	68fd      	ldr	r5, [r7, #12]
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	3328      	adds	r3, #40	@ 0x28
 8001346:	443b      	add	r3, r7
 8001348:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff3d 	bl	80001cc <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4629      	mov	r1, r5
 8001358:	4620      	mov	r0, r4
 800135a:	f008 f93a 	bl	80095d2 <strncmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <ATCMD_HttpRead_Callback+0x90>
			{
				rspType = i;
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	613b      	str	r3, [r7, #16]
				if( rspType == 1 )
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10d      	bne.n	800138c <ATCMD_HttpRead_Callback+0xa4>
				{
					s_tmpStr = p;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4a6b      	ldr	r2, [pc, #428]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 8001374:	6013      	str	r3, [r2, #0]
				}
				break;
 8001376:	e009      	b.n	800138c <ATCMD_HttpRead_Callback+0xa4>
		for( i = 0; i < 3; i++ )
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3301      	adds	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d9d1      	bls.n	800132e <ATCMD_HttpRead_Callback+0x46>
 800138a:	e000      	b.n	800138e <ATCMD_HttpRead_Callback+0xa6>
				break;
 800138c:	bf00      	nop
			}
		}
		if((rspType == 1) || (rspType == -1))
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d00d      	beq.n	80013b0 <ATCMD_HttpRead_Callback+0xc8>
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139a:	d009      	beq.n	80013b0 <ATCMD_HttpRead_Callback+0xc8>
		{
			break;
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	210a      	movs	r1, #10
 80013a0:	4618      	mov	r0, r3
 80013a2:	f008 f909 	bl	80095b8 <strchr>
 80013a6:	4603      	mov	r3, r0
 80013a8:	60fb      	str	r3, [r7, #12]
	while(p)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1b3      	bne.n	8001318 <ATCMD_HttpRead_Callback+0x30>
	}
	switch(rspType)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	f000 8096 	beq.w	80014e4 <ATCMD_HttpRead_Callback+0x1fc>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	f200 809d 	bhi.w	80014f8 <ATCMD_HttpRead_Callback+0x210>
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <ATCMD_HttpRead_Callback+0xe0>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d004      	beq.n	80013d0 <ATCMD_HttpRead_Callback+0xe8>
 80013c6:	e097      	b.n	80014f8 <ATCMD_HttpRead_Callback+0x210>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 80013ce:	e09d      	b.n	800150c <ATCMD_HttpRead_Callback+0x224>
	case 1:
		ret = ATCMD_RSP_FINISH;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		s_tmpStr = (uint8_t*)strchr((char*)s_tmpStr, ATCMD_CMD_LF);
 80013d6:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	210a      	movs	r1, #10
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 f8eb 	bl	80095b8 <strchr>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80013e6:	6013      	str	r3, [r2, #0]
		s_tmpStr++;
 80013e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80013f0:	6013      	str	r3, [r2, #0]
		s_txBuf = Uart_Get_Transmit_Buffer();
 80013f2:	f006 fc31 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001524 <ATCMD_HttpRead_Callback+0x23c>)
 80013fa:	6013      	str	r3, [r2, #0]
		memset(s_txBuf, '\0', A7672_UART_TX_BUFFSIZE_CONF);
 80013fc:	4b49      	ldr	r3, [pc, #292]	@ (8001524 <ATCMD_HttpRead_Callback+0x23c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f008 f8bf 	bl	800958a <memset>
		s_bytesToRead = g_httpResponse.bytesToRead;
 800140c:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <ATCMD_HttpRead_Callback+0x240>)
 800140e:	895a      	ldrh	r2, [r3, #10]
 8001410:	4b46      	ldr	r3, [pc, #280]	@ (800152c <ATCMD_HttpRead_Callback+0x244>)
 8001412:	801a      	strh	r2, [r3, #0]

		while(strncmp((char*)s_tmpStr, "+HTTPREAD: 0", 12) != 0)
 8001414:	e058      	b.n	80014c8 <ATCMD_HttpRead_Callback+0x1e0>
		{
			if(!strncmp((char*)s_tmpStr, "+HTTPREAD: ", 10))
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	220a      	movs	r2, #10
 800141c:	4944      	ldr	r1, [pc, #272]	@ (8001530 <ATCMD_HttpRead_Callback+0x248>)
 800141e:	4618      	mov	r0, r3
 8001420:	f008 f8d7 	bl	80095d2 <strncmp>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <ATCMD_HttpRead_Callback+0x15e>
			{
				s_tmpStr = (uint8_t*)strchr((char*)s_tmpStr, ATCMD_CMD_LF);
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	210a      	movs	r1, #10
 8001430:	4618      	mov	r0, r3
 8001432:	f008 f8c1 	bl	80095b8 <strchr>
 8001436:	4603      	mov	r3, r0
 8001438:	4a39      	ldr	r2, [pc, #228]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 800143a:	6013      	str	r3, [r2, #0]
				s_tmpStr++;
 800143c:	4b38      	ldr	r3, [pc, #224]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a37      	ldr	r2, [pc, #220]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 8001444:	6013      	str	r3, [r2, #0]
			}
			if( s_bytesToRead >= 1024 )
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <ATCMD_HttpRead_Callback+0x244>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144e:	d304      	bcc.n	800145a <ATCMD_HttpRead_Callback+0x172>
			{
				s_byteCount = 1024;
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 8001452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	e003      	b.n	8001462 <ATCMD_HttpRead_Callback+0x17a>
			}
			else
			{
				s_byteCount = s_bytesToRead;
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <ATCMD_HttpRead_Callback+0x244>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 8001460:	801a      	strh	r2, [r3, #0]
			}
			s_bytesToRead = s_bytesToRead - s_byteCount;
 8001462:	4b32      	ldr	r3, [pc, #200]	@ (800152c <ATCMD_HttpRead_Callback+0x244>)
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <ATCMD_HttpRead_Callback+0x244>)
 8001470:	801a      	strh	r2, [r3, #0]
			while(s_byteCount != 0)
 8001472:	e015      	b.n	80014a0 <ATCMD_HttpRead_Callback+0x1b8>
			{
				*s_txBuf = *s_tmpStr;
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <ATCMD_HttpRead_Callback+0x23c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]
				s_txBuf++;
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <ATCMD_HttpRead_Callback+0x23c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <ATCMD_HttpRead_Callback+0x23c>)
 8001488:	6013      	str	r3, [r2, #0]
				s_tmpStr++;
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 8001492:	6013      	str	r3, [r2, #0]
				s_byteCount--;
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b25      	ldr	r3, [pc, #148]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 800149e:	801a      	strh	r2, [r3, #0]
			while(s_byteCount != 0)
 80014a0:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <ATCMD_HttpRead_Callback+0x24c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e5      	bne.n	8001474 <ATCMD_HttpRead_Callback+0x18c>
			}

			while((*s_tmpStr == ATCMD_CMD_LF) || (*s_tmpStr == ATCMD_CMD_CR))
 80014a8:	e004      	b.n	80014b4 <ATCMD_HttpRead_Callback+0x1cc>
			{
				s_tmpStr++;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80014b2:	6013      	str	r3, [r2, #0]
			while((*s_tmpStr == ATCMD_CMD_LF) || (*s_tmpStr == ATCMD_CMD_CR))
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b0a      	cmp	r3, #10
 80014bc:	d0f5      	beq.n	80014aa <ATCMD_HttpRead_Callback+0x1c2>
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b0d      	cmp	r3, #13
 80014c6:	d0f0      	beq.n	80014aa <ATCMD_HttpRead_Callback+0x1c2>
		while(strncmp((char*)s_tmpStr, "+HTTPREAD: 0", 12) != 0)
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <ATCMD_HttpRead_Callback+0x238>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	220c      	movs	r2, #12
 80014ce:	491a      	ldr	r1, [pc, #104]	@ (8001538 <ATCMD_HttpRead_Callback+0x250>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f008 f87e 	bl	80095d2 <strncmp>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d19c      	bne.n	8001416 <ATCMD_HttpRead_Callback+0x12e>
			}
		}
		g_errorCount = 0;
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <ATCMD_HttpRead_Callback+0x254>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
		break;
 80014e2:	e013      	b.n	800150c <ATCMD_HttpRead_Callback+0x224>
	case 2:
		ret = ATCMD_RSP_ERROR;
 80014e4:	23ff      	movs	r3, #255	@ 0xff
 80014e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <ATCMD_HttpRead_Callback+0x254>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <ATCMD_HttpRead_Callback+0x254>)
 80014f4:	701a      	strb	r2, [r3, #0]
		break;
 80014f6:	e009      	b.n	800150c <ATCMD_HttpRead_Callback+0x224>
	default:
		ret = ATCMD_RSP_ERROR;
 80014f8:	23ff      	movs	r3, #255	@ 0xff
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <ATCMD_HttpRead_Callback+0x254>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <ATCMD_HttpRead_Callback+0x254>)
 8001508:	701a      	strb	r2, [r3, #0]
		break;
 800150a:	bf00      	nop
	}
	return ret;
 800150c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001510:	b25b      	sxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}
 800151a:	bf00      	nop
 800151c:	08009770 	.word	0x08009770
 8001520:	200001c0 	.word	0x200001c0
 8001524:	200001c4 	.word	0x200001c4
 8001528:	200000f8 	.word	0x200000f8
 800152c:	200001fa 	.word	0x200001fa
 8001530:	08009754 	.word	0x08009754
 8001534:	200001fc 	.word	0x200001fc
 8001538:	08009760 	.word	0x08009760
 800153c:	200001b9 	.word	0x200001b9

08001540 <ATCMD_CertDownload_Callback>:
* <hr>
*
*******************************************************************************/

atcmd_rsp_t ATCMD_CertDownload_Callback( uint8_t* rsp)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001548:	23ff      	movs	r3, #255	@ 0xff
 800154a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {">", "OK", "ERROR"};
 800154e:	4a40      	ldr	r2, [pc, #256]	@ (8001650 <ATCMD_CertDownload_Callback+0x110>)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	ca07      	ldmia	r2, {r0, r1, r2}
 8001556:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60fb      	str	r3, [r7, #12]

	while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001568:	e002      	b.n	8001570 <ATCMD_CertDownload_Callback+0x30>
	{
		p++;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
	while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0d      	cmp	r3, #13
 8001576:	d0f8      	beq.n	800156a <ATCMD_CertDownload_Callback+0x2a>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b0a      	cmp	r3, #10
 800157e:	d0f4      	beq.n	800156a <ATCMD_CertDownload_Callback+0x2a>
	}
	for ( i = 0; i < 3; i ++)
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]
 8001584:	e023      	b.n	80015ce <ATCMD_CertDownload_Callback+0x8e>
	{
		if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	3328      	adds	r3, #40	@ 0x28
 800158e:	443b      	add	r3, r7
 8001590:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001594:	68fd      	ldr	r5, [r7, #12]
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3328      	adds	r3, #40	@ 0x28
 800159e:	443b      	add	r3, r7
 80015a0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe11 	bl	80001cc <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	4629      	mov	r1, r5
 80015b0:	4620      	mov	r0, r4
 80015b2:	f008 f80e 	bl	80095d2 <strncmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <ATCMD_CertDownload_Callback+0x84>
		{
			rspType = i;
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	613b      	str	r3, [r7, #16]
			break;
 80015c2:	e008      	b.n	80015d6 <ATCMD_CertDownload_Callback+0x96>
	for ( i = 0; i < 3; i ++)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	75fb      	strb	r3, [r7, #23]
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d9d7      	bls.n	8001586 <ATCMD_CertDownload_Callback+0x46>
		}

	}
	switch(rspType)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d01d      	beq.n	8001618 <ATCMD_CertDownload_Callback+0xd8>
 80015dc:	2b02      	cmp	r3, #2
 80015de:	dc25      	bgt.n	800162c <ATCMD_CertDownload_Callback+0xec>
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <ATCMD_CertDownload_Callback+0xaa>
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d010      	beq.n	800160a <ATCMD_CertDownload_Callback+0xca>
 80015e8:	e020      	b.n	800162c <ATCMD_CertDownload_Callback+0xec>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		p = Uart_Get_Transmit_Buffer();
 80015f0:	f006 fb32 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 80015f4:	4603      	mov	r3, r0
 80015f6:	60fb      	str	r3, [r7, #12]
		Uart_Transmit_Data_Dma((uint32_t)p, g_httpResponse.bytesToRead);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <ATCMD_CertDownload_Callback+0x114>)
 80015fe:	895b      	ldrh	r3, [r3, #10]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f006 fa9c 	bl	8007b40 <Uart_Transmit_Data_Dma>
		break;
 8001608:	e01a      	b.n	8001640 <ATCMD_CertDownload_Callback+0x100>
	case 1:
		ret = ATCMD_RSP_FINISH;
 800160a:	2302      	movs	r3, #2
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <ATCMD_CertDownload_Callback+0x118>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
		break;
 8001616:	e013      	b.n	8001640 <ATCMD_CertDownload_Callback+0x100>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8001618:	23ff      	movs	r3, #255	@ 0xff
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <ATCMD_CertDownload_Callback+0x118>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <ATCMD_CertDownload_Callback+0x118>)
 8001628:	701a      	strb	r2, [r3, #0]
		break;
 800162a:	e009      	b.n	8001640 <ATCMD_CertDownload_Callback+0x100>
	default:
		ret = ATCMD_RSP_ERROR;
 800162c:	23ff      	movs	r3, #255	@ 0xff
 800162e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <ATCMD_CertDownload_Callback+0x118>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <ATCMD_CertDownload_Callback+0x118>)
 800163c:	701a      	strb	r2, [r3, #0]
		break;
 800163e:	bf00      	nop
	}
	return ret;
 8001640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001644:	b25b      	sxtb	r3, r3
}
 8001646:	4618      	mov	r0, r3
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bdb0      	pop	{r4, r5, r7, pc}
 800164e:	bf00      	nop
 8001650:	08009780 	.word	0x08009780
 8001654:	200000f8 	.word	0x200000f8
 8001658:	200001b9 	.word	0x200001b9

0800165c <ATCMD_Get_IMEI_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_Get_IMEI_Callback (uint8_t *rsp)
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001664:	23ff      	movs	r3, #255	@ 0xff
 8001666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char* volatile rspStrTable[5] = {"Revision: ", "IMEI: ", "+GCAP: ", "OK", "ERROR"};
 800166a:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <ATCMD_Get_IMEI_Callback+0x194>)
 800166c:	f107 0418 	add.w	r4, r7, #24
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	6023      	str	r3, [r4, #0]
	uint8_t volatile i  = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60fb      	str	r3, [r7, #12]
	while(p)
 8001688:	e085      	b.n	8001796 <ATCMD_Get_IMEI_Callback+0x13a>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b0d      	cmp	r3, #13
 8001696:	d0f8      	beq.n	800168a <ATCMD_Get_IMEI_Callback+0x2e>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0a      	cmp	r3, #10
 800169e:	d0f4      	beq.n	800168a <ATCMD_Get_IMEI_Callback+0x2e>
		}
		for ( i = 0; i < 5; i ++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
 80016a4:	e023      	b.n	80016ee <ATCMD_Get_IMEI_Callback+0x92>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	3330      	adds	r3, #48	@ 0x30
 80016ae:	443b      	add	r3, r7
 80016b0:	f853 4c18 	ldr.w	r4, [r3, #-24]
 80016b4:	68fd      	ldr	r5, [r7, #12]
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	3330      	adds	r3, #48	@ 0x30
 80016be:	443b      	add	r3, r7
 80016c0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fd81 	bl	80001cc <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4629      	mov	r1, r5
 80016d0:	4620      	mov	r0, r4
 80016d2:	f007 ff7e 	bl	80095d2 <strncmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d103      	bne.n	80016e4 <ATCMD_Get_IMEI_Callback+0x88>
			{
				rspType = i;
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	613b      	str	r3, [r7, #16]
				break;
 80016e2:	e008      	b.n	80016f6 <ATCMD_Get_IMEI_Callback+0x9a>
		for ( i = 0; i < 5; i ++)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	75fb      	strb	r3, [r7, #23]
 80016ee:	7dfb      	ldrb	r3, [r7, #23]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d9d7      	bls.n	80016a6 <ATCMD_Get_IMEI_Callback+0x4a>
			}
		}
		if(rspType == 1)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d122      	bne.n	8001742 <ATCMD_Get_IMEI_Callback+0xe6>
		{
			s_tmpStr = p;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a3d      	ldr	r2, [pc, #244]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 8001700:	6013      	str	r3, [r2, #0]
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8001702:	2232      	movs	r2, #50	@ 0x32
 8001704:	2100      	movs	r1, #0
 8001706:	483c      	ldr	r0, [pc, #240]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001708:	f007 ff3f 	bl	800958a <memset>
			s_tmpStr = Str_Cpy_Marker(s_tmpStr, &s_tempBuff[0], ' ', ATCMD_CMD_CR);
 800170c:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	230d      	movs	r3, #13
 8001712:	2220      	movs	r2, #32
 8001714:	4938      	ldr	r1, [pc, #224]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001716:	f005 fc95 	bl	8007044 <Str_Cpy_Marker>
 800171a:	4603      	mov	r3, r0
 800171c:	4a35      	ldr	r2, [pc, #212]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 800171e:	6013      	str	r3, [r2, #0]
			ATCMD_A7672_HTTP_Set_DevName((char*) s_tempBuff);
 8001720:	4835      	ldr	r0, [pc, #212]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001722:	f001 fb8d 	bl	8002e40 <ATCMD_A7672_HTTP_Set_DevName>
			memset(g_moduleStatus.imei, '\0', sizeof(g_moduleStatus.imei));
 8001726:	2214      	movs	r2, #20
 8001728:	2100      	movs	r1, #0
 800172a:	4834      	ldr	r0, [pc, #208]	@ (80017fc <ATCMD_Get_IMEI_Callback+0x1a0>)
 800172c:	f007 ff2d 	bl	800958a <memset>
			strncpy((char*)g_moduleStatus.imei, (char*)s_tempBuff, strlen((char*)s_tempBuff));
 8001730:	4831      	ldr	r0, [pc, #196]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001732:	f7fe fd4b 	bl	80001cc <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	492f      	ldr	r1, [pc, #188]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 800173c:	482f      	ldr	r0, [pc, #188]	@ (80017fc <ATCMD_Get_IMEI_Callback+0x1a0>)
 800173e:	f007 ff5a 	bl	80095f6 <strncpy>
		}
		if(rspType == 0)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11f      	bne.n	8001788 <ATCMD_Get_IMEI_Callback+0x12c>
		{
			s_tmpStr = p;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a2a      	ldr	r2, [pc, #168]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 800174c:	6013      	str	r3, [r2, #0]
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 800174e:	2232      	movs	r2, #50	@ 0x32
 8001750:	2100      	movs	r1, #0
 8001752:	4829      	ldr	r0, [pc, #164]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001754:	f007 ff19 	bl	800958a <memset>
			memset(g_moduleStatus.Model, '\0', sizeof(g_moduleStatus.Model));
 8001758:	2219      	movs	r2, #25
 800175a:	2100      	movs	r1, #0
 800175c:	4828      	ldr	r0, [pc, #160]	@ (8001800 <ATCMD_Get_IMEI_Callback+0x1a4>)
 800175e:	f007 ff14 	bl	800958a <memset>
			s_tmpStr = Str_Cpy_Marker(s_tmpStr, &s_tempBuff[0], ' ', ATCMD_CMD_CR);
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	230d      	movs	r3, #13
 8001768:	2220      	movs	r2, #32
 800176a:	4923      	ldr	r1, [pc, #140]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 800176c:	f005 fc6a 	bl	8007044 <Str_Cpy_Marker>
 8001770:	4603      	mov	r3, r0
 8001772:	4a20      	ldr	r2, [pc, #128]	@ (80017f4 <ATCMD_Get_IMEI_Callback+0x198>)
 8001774:	6013      	str	r3, [r2, #0]
			strncpy((char*)g_moduleStatus.Model, (char*)s_tempBuff, strlen((char*)s_tempBuff));
 8001776:	4820      	ldr	r0, [pc, #128]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001778:	f7fe fd28 	bl	80001cc <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	491d      	ldr	r1, [pc, #116]	@ (80017f8 <ATCMD_Get_IMEI_Callback+0x19c>)
 8001782:	481f      	ldr	r0, [pc, #124]	@ (8001800 <ATCMD_Get_IMEI_Callback+0x1a4>)
 8001784:	f007 ff37 	bl	80095f6 <strncpy>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	210a      	movs	r1, #10
 800178c:	4618      	mov	r0, r3
 800178e:	f007 ff13 	bl	80095b8 <strchr>
 8001792:	4603      	mov	r3, r0
 8001794:	60fb      	str	r3, [r7, #12]
	while(p)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f af79 	bne.w	8001690 <ATCMD_Get_IMEI_Callback+0x34>
	}

	switch(rspType)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <ATCMD_Get_IMEI_Callback+0x154>
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db11      	blt.n	80017cc <ATCMD_Get_IMEI_Callback+0x170>
 80017a8:	3b01      	subs	r3, #1
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d80e      	bhi.n	80017cc <ATCMD_Get_IMEI_Callback+0x170>
 80017ae:	e006      	b.n	80017be <ATCMD_Get_IMEI_Callback+0x162>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		g_errorCount = 0;
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <ATCMD_Get_IMEI_Callback+0x1a8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		break;
 80017bc:	e010      	b.n	80017e0 <ATCMD_Get_IMEI_Callback+0x184>
	case 1:
	case 2:
	case 3:
		ret = ATCMD_RSP_FINISH;
 80017be:	2302      	movs	r3, #2
 80017c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		g_errorCount=0;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <ATCMD_Get_IMEI_Callback+0x1a8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		break;
 80017ca:	e009      	b.n	80017e0 <ATCMD_Get_IMEI_Callback+0x184>
	case 4:
	default:
		ret = ATCMD_RSP_ERROR;
 80017cc:	23ff      	movs	r3, #255	@ 0xff
 80017ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		g_errorCount++;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <ATCMD_Get_IMEI_Callback+0x1a8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <ATCMD_Get_IMEI_Callback+0x1a8>)
 80017dc:	701a      	strb	r2, [r3, #0]
		break;
 80017de:	bf00      	nop
	}
	return ret;
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	b25b      	sxtb	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3730      	adds	r7, #48	@ 0x30
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	080097a8 	.word	0x080097a8
 80017f4:	200001c0 	.word	0x200001c0
 80017f8:	200001c8 	.word	0x200001c8
 80017fc:	20000121 	.word	0x20000121
 8001800:	20000136 	.word	0x20000136
 8001804:	200001b9 	.word	0x200001b9

08001808 <ATCMD_Get_Signal_Strength_Callback>:
* <hr>
*
*******************************************************************************/

atcmd_rsp_t ATCMD_Get_Signal_Strength_Callback(uint8_t* rsp)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001810:	23ff      	movs	r3, #255	@ 0xff
 8001812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	char* volatile rspStrTable[3] = {"+CSQ: ", "ERROR"};
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <ATCMD_Get_Signal_Strength_Callback+0x128>)
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
 8001826:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <ATCMD_Get_Signal_Strength_Callback+0x12c>)
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001832:	ca07      	ldmia	r2, {r0, r1, r2}
 8001834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	74fb      	strb	r3, [r7, #19]
	int32_t volatile rspType = -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	60fb      	str	r3, [r7, #12]
	uint8_t* volatile p = rsp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60bb      	str	r3, [r7, #8]
	while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001846:	e002      	b.n	800184e <ATCMD_Get_Signal_Strength_Callback+0x46>
	{
		p++;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3301      	adds	r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
	while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b0d      	cmp	r3, #13
 8001854:	d0f8      	beq.n	8001848 <ATCMD_Get_Signal_Strength_Callback+0x40>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0a      	cmp	r3, #10
 800185c:	d0f4      	beq.n	8001848 <ATCMD_Get_Signal_Strength_Callback+0x40>
	}
	for ( i = 0; i < 2; i ++)
 800185e:	2300      	movs	r3, #0
 8001860:	74fb      	strb	r3, [r7, #19]
 8001862:	e023      	b.n	80018ac <ATCMD_Get_Signal_Strength_Callback+0xa4>
	{
		if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	3330      	adds	r3, #48	@ 0x30
 800186c:	443b      	add	r3, r7
 800186e:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 8001872:	68bd      	ldr	r5, [r7, #8]
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	3330      	adds	r3, #48	@ 0x30
 800187c:	443b      	add	r3, r7
 800187e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fca2 	bl	80001cc <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4629      	mov	r1, r5
 800188e:	4620      	mov	r0, r4
 8001890:	f007 fe9f 	bl	80095d2 <strncmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <ATCMD_Get_Signal_Strength_Callback+0x9a>
		{
			rspType = i;
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	60fb      	str	r3, [r7, #12]

			break;
 80018a0:	e008      	b.n	80018b4 <ATCMD_Get_Signal_Strength_Callback+0xac>
	for ( i = 0; i < 2; i ++)
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	74fb      	strb	r3, [r7, #19]
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d9d7      	bls.n	8001864 <ATCMD_Get_Signal_Strength_Callback+0x5c>
		}
	}

	switch(rspType)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <ATCMD_Get_Signal_Strength_Callback+0xb8>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d01d      	beq.n	80018fa <ATCMD_Get_Signal_Strength_Callback+0xf2>
 80018be:	e026      	b.n	800190e <ATCMD_Get_Signal_Strength_Callback+0x106>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 80018c6:	2232      	movs	r2, #50	@ 0x32
 80018c8:	2100      	movs	r1, #0
 80018ca:	481b      	ldr	r0, [pc, #108]	@ (8001938 <ATCMD_Get_Signal_Strength_Callback+0x130>)
 80018cc:	f007 fe5d 	bl	800958a <memset>
		s_tmpStr = Str_Cpy_Marker(p, &s_tempBuff[0], ' ', ',');
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	232c      	movs	r3, #44	@ 0x2c
 80018d4:	2220      	movs	r2, #32
 80018d6:	4918      	ldr	r1, [pc, #96]	@ (8001938 <ATCMD_Get_Signal_Strength_Callback+0x130>)
 80018d8:	f005 fbb4 	bl	8007044 <Str_Cpy_Marker>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a17      	ldr	r2, [pc, #92]	@ (800193c <ATCMD_Get_Signal_Strength_Callback+0x134>)
 80018e0:	6013      	str	r3, [r2, #0]
		g_moduleStatus.sigStrength = Convert_String_To_Integer(s_tempBuff);
 80018e2:	4815      	ldr	r0, [pc, #84]	@ (8001938 <ATCMD_Get_Signal_Strength_Callback+0x130>)
 80018e4:	f005 fae2 	bl	8006eac <Convert_String_To_Integer>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <ATCMD_Get_Signal_Strength_Callback+0x138>)
 80018ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		g_errorCount = 0;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <ATCMD_Get_Signal_Strength_Callback+0x13c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
		break;
 80018f8:	e013      	b.n	8001922 <ATCMD_Get_Signal_Strength_Callback+0x11a>
	case 1:
		ret = ATCMD_RSP_ERROR;
 80018fa:	23ff      	movs	r3, #255	@ 0xff
 80018fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		g_errorCount++;
 8001900:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <ATCMD_Get_Signal_Strength_Callback+0x13c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <ATCMD_Get_Signal_Strength_Callback+0x13c>)
 800190a:	701a      	strb	r2, [r3, #0]
 		break;
 800190c:	e009      	b.n	8001922 <ATCMD_Get_Signal_Strength_Callback+0x11a>
	default:
   		ret = ATCMD_RSP_ERROR;
 800190e:	23ff      	movs	r3, #255	@ 0xff
 8001910:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
   		g_errorCount++;
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <ATCMD_Get_Signal_Strength_Callback+0x13c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <ATCMD_Get_Signal_Strength_Callback+0x13c>)
 800191e:	701a      	strb	r2, [r3, #0]
		break;
 8001920:	bf00      	nop
	}
	return ret;
 8001922:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001926:	b25b      	sxtb	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	@ 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	080097bc 	.word	0x080097bc
 8001934:	080096ac 	.word	0x080096ac
 8001938:	200001c8 	.word	0x200001c8
 800193c:	200001c0 	.word	0x200001c0
 8001940:	20000108 	.word	0x20000108
 8001944:	200001b9 	.word	0x200001b9

08001948 <ATCMD_MQTT_Start_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Start_Callback(uint8_t* rsp)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001950:	23ff      	movs	r3, #255	@ 0xff
 8001952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK","+CMQTTSTART: ", "ERROR"};
 8001956:	4a48      	ldr	r2, [pc, #288]	@ (8001a78 <ATCMD_MQTT_Start_Callback+0x130>)
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	ca07      	ldmia	r2, {r0, r1, r2}
 800195e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60fb      	str	r3, [r7, #12]

	while(p)
 8001970:	e052      	b.n	8001a18 <ATCMD_MQTT_Start_Callback+0xd0>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b0d      	cmp	r3, #13
 800197e:	d0f8      	beq.n	8001972 <ATCMD_MQTT_Start_Callback+0x2a>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b0a      	cmp	r3, #10
 8001986:	d0f4      	beq.n	8001972 <ATCMD_MQTT_Start_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
 800198c:	e023      	b.n	80019d6 <ATCMD_MQTT_Start_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	3328      	adds	r3, #40	@ 0x28
 8001996:	443b      	add	r3, r7
 8001998:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800199c:	68fd      	ldr	r5, [r7, #12]
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3328      	adds	r3, #40	@ 0x28
 80019a6:	443b      	add	r3, r7
 80019a8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc0d 	bl	80001cc <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4629      	mov	r1, r5
 80019b8:	4620      	mov	r0, r4
 80019ba:	f007 fe0a 	bl	80095d2 <strncmp>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <ATCMD_MQTT_Start_Callback+0x84>
			{
				rspType = i;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	613b      	str	r3, [r7, #16]
				break;
 80019ca:	e008      	b.n	80019de <ATCMD_MQTT_Start_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d9d7      	bls.n	800198e <ATCMD_MQTT_Start_Callback+0x46>
			}

		}
		if(rspType == 1)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d112      	bne.n	8001a0a <ATCMD_MQTT_Start_Callback+0xc2>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 80019e4:	2232      	movs	r2, #50	@ 0x32
 80019e6:	2100      	movs	r1, #0
 80019e8:	4824      	ldr	r0, [pc, #144]	@ (8001a7c <ATCMD_MQTT_Start_Callback+0x134>)
 80019ea:	f007 fdce 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0], ' ', ATCMD_CMD_CR);
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	230d      	movs	r3, #13
 80019f2:	2220      	movs	r2, #32
 80019f4:	4921      	ldr	r1, [pc, #132]	@ (8001a7c <ATCMD_MQTT_Start_Callback+0x134>)
 80019f6:	f005 fb25 	bl	8007044 <Str_Cpy_Marker>
			g_mqtt_result = Convert_String_To_Integer(s_tempBuff);
 80019fa:	4820      	ldr	r0, [pc, #128]	@ (8001a7c <ATCMD_MQTT_Start_Callback+0x134>)
 80019fc:	f005 fa56 	bl	8006eac <Convert_String_To_Integer>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <ATCMD_MQTT_Start_Callback+0x138>)
 8001a06:	801a      	strh	r2, [r3, #0]
			break;
 8001a08:	e009      	b.n	8001a1e <ATCMD_MQTT_Start_Callback+0xd6>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	210a      	movs	r1, #10
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 fdd2 	bl	80095b8 <strchr>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
	while(p)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ac      	bne.n	8001978 <ATCMD_MQTT_Start_Callback+0x30>
	}
	switch(rspType)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <ATCMD_MQTT_Start_Callback+0xe2>
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d007      	beq.n	8001a38 <ATCMD_MQTT_Start_Callback+0xf0>
 8001a28:	e015      	b.n	8001a56 <ATCMD_MQTT_Start_Callback+0x10e>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8001a30:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <ATCMD_MQTT_Start_Callback+0x13c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
		break;
 8001a36:	e018      	b.n	8001a6a <ATCMD_MQTT_Start_Callback+0x122>
	case 1:
		if(g_mqtt_result != 0)
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <ATCMD_MQTT_Start_Callback+0x138>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <ATCMD_MQTT_Start_Callback+0x100>
		{
			ret = ATCMD_RSP_ERROR;
 8001a40:	23ff      	movs	r3, #255	@ 0xff
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		{
			ret = ATCMD_RSP_FINISH;
			g_errorCount=0;
		}

		break;
 8001a46:	e010      	b.n	8001a6a <ATCMD_MQTT_Start_Callback+0x122>
			ret = ATCMD_RSP_FINISH;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount=0;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <ATCMD_MQTT_Start_Callback+0x13c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
		break;
 8001a54:	e009      	b.n	8001a6a <ATCMD_MQTT_Start_Callback+0x122>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 8001a56:	23ff      	movs	r3, #255	@ 0xff
 8001a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <ATCMD_MQTT_Start_Callback+0x13c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <ATCMD_MQTT_Start_Callback+0x13c>)
 8001a66:	701a      	strb	r2, [r3, #0]
		break;
 8001a68:	bf00      	nop
	}
	return ret;
 8001a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a6e:	b25b      	sxtb	r3, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3728      	adds	r7, #40	@ 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	080097d4 	.word	0x080097d4
 8001a7c:	200001c8 	.word	0x200001c8
 8001a80:	200001bc 	.word	0x200001bc
 8001a84:	200001b9 	.word	0x200001b9

08001a88 <ATCMD_MQTT_Accquire_Client_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Accquire_Client_Callback(uint8_t* rsp)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001a90:	23ff      	movs	r3, #255	@ 0xff
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK","+CMQTTACCQ: ", "ERROR"};
 8001a96:	4a38      	ldr	r2, [pc, #224]	@ (8001b78 <ATCMD_MQTT_Accquire_Client_Callback+0xf0>)
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60fb      	str	r3, [r7, #12]
	while(p)
 8001ab0:	e03c      	b.n	8001b2c <ATCMD_MQTT_Accquire_Client_Callback+0xa4>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b0d      	cmp	r3, #13
 8001abe:	d0f8      	beq.n	8001ab2 <ATCMD_MQTT_Accquire_Client_Callback+0x2a>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b0a      	cmp	r3, #10
 8001ac6:	d0f4      	beq.n	8001ab2 <ATCMD_MQTT_Accquire_Client_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	75fb      	strb	r3, [r7, #23]
 8001acc:	e023      	b.n	8001b16 <ATCMD_MQTT_Accquire_Client_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3328      	adds	r3, #40	@ 0x28
 8001ad6:	443b      	add	r3, r7
 8001ad8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001adc:	68fd      	ldr	r5, [r7, #12]
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3328      	adds	r3, #40	@ 0x28
 8001ae6:	443b      	add	r3, r7
 8001ae8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fb6d 	bl	80001cc <strlen>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4629      	mov	r1, r5
 8001af8:	4620      	mov	r0, r4
 8001afa:	f007 fd6a 	bl	80095d2 <strncmp>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <ATCMD_MQTT_Accquire_Client_Callback+0x84>
			{
				rspType = i;
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	613b      	str	r3, [r7, #16]
				break;
 8001b0a:	e008      	b.n	8001b1e <ATCMD_MQTT_Accquire_Client_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	75fb      	strb	r3, [r7, #23]
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d9d7      	bls.n	8001ace <ATCMD_MQTT_Accquire_Client_Callback+0x46>
			}

		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	210a      	movs	r1, #10
 8001b22:	4618      	mov	r0, r3
 8001b24:	f007 fd48 	bl	80095b8 <strchr>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
	while(p)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1c2      	bne.n	8001ab8 <ATCMD_MQTT_Accquire_Client_Callback+0x30>
	}
	switch(rspType)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <ATCMD_MQTT_Accquire_Client_Callback+0xb6>
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d007      	beq.n	8001b4c <ATCMD_MQTT_Accquire_Client_Callback+0xc4>
 8001b3c:	e00a      	b.n	8001b54 <ATCMD_MQTT_Accquire_Client_Callback+0xcc>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <ATCMD_MQTT_Accquire_Client_Callback+0xf4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
		break;
 8001b4a:	e00d      	b.n	8001b68 <ATCMD_MQTT_Accquire_Client_Callback+0xe0>
	case 1:
		ret = ATCMD_RSP_ERROR;
 8001b4c:	23ff      	movs	r3, #255	@ 0xff
 8001b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001b52:	e009      	b.n	8001b68 <ATCMD_MQTT_Accquire_Client_Callback+0xe0>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 8001b54:	23ff      	movs	r3, #255	@ 0xff
 8001b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <ATCMD_MQTT_Accquire_Client_Callback+0xf4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <ATCMD_MQTT_Accquire_Client_Callback+0xf4>)
 8001b64:	701a      	strb	r2, [r3, #0]
		break;
 8001b66:	bf00      	nop
	}
	return ret;
 8001b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b6c:	b25b      	sxtb	r3, r3
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bdb0      	pop	{r4, r5, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	080097f0 	.word	0x080097f0
 8001b7c:	200001b9 	.word	0x200001b9

08001b80 <ATCMD_MQTT_Connect_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Connect_Callback(uint8_t* rsp)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001b88:	23ff      	movs	r3, #255	@ 0xff
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK","+CMQTTCONNECT: 0,", "ERROR"};
 8001b8e:	4a47      	ldr	r2, [pc, #284]	@ (8001cac <ATCMD_MQTT_Connect_Callback+0x12c>)
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]
	while(p)
 8001ba8:	e052      	b.n	8001c50 <ATCMD_MQTT_Connect_Callback+0xd0>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b0d      	cmp	r3, #13
 8001bb6:	d0f8      	beq.n	8001baa <ATCMD_MQTT_Connect_Callback+0x2a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b0a      	cmp	r3, #10
 8001bbe:	d0f4      	beq.n	8001baa <ATCMD_MQTT_Connect_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	e023      	b.n	8001c0e <ATCMD_MQTT_Connect_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	3328      	adds	r3, #40	@ 0x28
 8001bce:	443b      	add	r3, r7
 8001bd0:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001bd4:	68fd      	ldr	r5, [r7, #12]
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3328      	adds	r3, #40	@ 0x28
 8001bde:	443b      	add	r3, r7
 8001be0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe faf1 	bl	80001cc <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4629      	mov	r1, r5
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f007 fcee 	bl	80095d2 <strncmp>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <ATCMD_MQTT_Connect_Callback+0x84>
			{
				rspType = i;
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	613b      	str	r3, [r7, #16]
				break;
 8001c02:	e008      	b.n	8001c16 <ATCMD_MQTT_Connect_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	75fb      	strb	r3, [r7, #23]
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d9d7      	bls.n	8001bc6 <ATCMD_MQTT_Connect_Callback+0x46>
			}
		}
		if(rspType == 1)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d112      	bne.n	8001c42 <ATCMD_MQTT_Connect_Callback+0xc2>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8001c1c:	2232      	movs	r2, #50	@ 0x32
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <ATCMD_MQTT_Connect_Callback+0x130>)
 8001c22:	f007 fcb2 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0], ',', ATCMD_CMD_CR);
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	230d      	movs	r3, #13
 8001c2a:	222c      	movs	r2, #44	@ 0x2c
 8001c2c:	4920      	ldr	r1, [pc, #128]	@ (8001cb0 <ATCMD_MQTT_Connect_Callback+0x130>)
 8001c2e:	f005 fa09 	bl	8007044 <Str_Cpy_Marker>
			g_mqtt_result = Convert_String_To_Integer(s_tempBuff);
 8001c32:	481f      	ldr	r0, [pc, #124]	@ (8001cb0 <ATCMD_MQTT_Connect_Callback+0x130>)
 8001c34:	f005 f93a 	bl	8006eac <Convert_String_To_Integer>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <ATCMD_MQTT_Connect_Callback+0x134>)
 8001c3e:	801a      	strh	r2, [r3, #0]
			break;
 8001c40:	e009      	b.n	8001c56 <ATCMD_MQTT_Connect_Callback+0xd6>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	210a      	movs	r1, #10
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fcb6 	bl	80095b8 <strchr>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]
	while(p)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ac      	bne.n	8001bb0 <ATCMD_MQTT_Connect_Callback+0x30>
	}
	switch(rspType)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <ATCMD_MQTT_Connect_Callback+0xe2>
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d004      	beq.n	8001c6a <ATCMD_MQTT_Connect_Callback+0xea>
 8001c60:	e012      	b.n	8001c88 <ATCMD_MQTT_Connect_Callback+0x108>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001c68:	e018      	b.n	8001c9c <ATCMD_MQTT_Connect_Callback+0x11c>
	case 1:
		if( g_mqtt_result == 0)
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <ATCMD_MQTT_Connect_Callback+0x134>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <ATCMD_MQTT_Connect_Callback+0x100>
		{
			ret = ATCMD_RSP_FINISH;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount = 0;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <ATCMD_MQTT_Connect_Callback+0x138>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
		}
		else
			ret = ATCMD_RSP_ERROR;
		break;
 8001c7e:	e00d      	b.n	8001c9c <ATCMD_MQTT_Connect_Callback+0x11c>
			ret = ATCMD_RSP_ERROR;
 8001c80:	23ff      	movs	r3, #255	@ 0xff
 8001c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001c86:	e009      	b.n	8001c9c <ATCMD_MQTT_Connect_Callback+0x11c>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 8001c88:	23ff      	movs	r3, #255	@ 0xff
 8001c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <ATCMD_MQTT_Connect_Callback+0x138>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <ATCMD_MQTT_Connect_Callback+0x138>)
 8001c98:	701a      	strb	r2, [r3, #0]
		break;
 8001c9a:	bf00      	nop
	}
	return ret;
 8001c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ca0:	b25b      	sxtb	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3728      	adds	r7, #40	@ 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08009810 	.word	0x08009810
 8001cb0:	200001c8 	.word	0x200001c8
 8001cb4:	200001bc 	.word	0x200001bc
 8001cb8:	200001b9 	.word	0x200001b9

08001cbc <ATCMD_MQTT_Subtopic_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Subtopic_Callback(uint8_t* rsp)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001cc4:	23ff      	movs	r3, #255	@ 0xff
 8001cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[4] = {">","OK","+CMQTTSUBTOPIC: ", "ERROR"};
 8001cca:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <ATCMD_MQTT_Subtopic_Callback+0x13c>)
 8001ccc:	f107 0414 	add.w	r4, r7, #20
 8001cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t volatile i  = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	74fb      	strb	r3, [r7, #19]
	int32_t volatile rspType = -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	60fb      	str	r3, [r7, #12]
	uint8_t* volatile p = rsp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60bb      	str	r3, [r7, #8]
	while(p)
 8001ce4:	e03c      	b.n	8001d60 <ATCMD_MQTT_Subtopic_Callback+0xa4>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b0d      	cmp	r3, #13
 8001cf2:	d0f8      	beq.n	8001ce6 <ATCMD_MQTT_Subtopic_Callback+0x2a>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b0a      	cmp	r3, #10
 8001cfa:	d0f4      	beq.n	8001ce6 <ATCMD_MQTT_Subtopic_Callback+0x2a>
		}
		for ( i = 0; i < 4; i ++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	74fb      	strb	r3, [r7, #19]
 8001d00:	e023      	b.n	8001d4a <ATCMD_MQTT_Subtopic_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	3328      	adds	r3, #40	@ 0x28
 8001d0a:	443b      	add	r3, r7
 8001d0c:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8001d10:	68bd      	ldr	r5, [r7, #8]
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	3328      	adds	r3, #40	@ 0x28
 8001d1a:	443b      	add	r3, r7
 8001d1c:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa53 	bl	80001cc <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f007 fc50 	bl	80095d2 <strncmp>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <ATCMD_MQTT_Subtopic_Callback+0x84>
			{
				rspType = i;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
				break;
 8001d3e:	e008      	b.n	8001d52 <ATCMD_MQTT_Subtopic_Callback+0x96>
		for ( i = 0; i < 4; i ++)
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	74fb      	strb	r3, [r7, #19]
 8001d4a:	7cfb      	ldrb	r3, [r7, #19]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9d7      	bls.n	8001d02 <ATCMD_MQTT_Subtopic_Callback+0x46>
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	210a      	movs	r1, #10
 8001d56:	4618      	mov	r0, r3
 8001d58:	f007 fc2e 	bl	80095b8 <strchr>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60bb      	str	r3, [r7, #8]
	while(p)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1c2      	bne.n	8001cec <ATCMD_MQTT_Subtopic_Callback+0x30>
	}
	switch(rspType)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d02f      	beq.n	8001dcc <ATCMD_MQTT_Subtopic_Callback+0x110>
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	dc31      	bgt.n	8001dd4 <ATCMD_MQTT_Subtopic_Callback+0x118>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <ATCMD_MQTT_Subtopic_Callback+0xbe>
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d022      	beq.n	8001dbe <ATCMD_MQTT_Subtopic_Callback+0x102>
 8001d78:	e02c      	b.n	8001dd4 <ATCMD_MQTT_Subtopic_Callback+0x118>
	{
	case 0:

		ret = ATCMD_RSP_WAIT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		s_txBuf = ATCMD_A7672_MQTT_Get_SubTopic();
 8001d80:	f001 f9a4 	bl	80030cc <ATCMD_A7672_MQTT_Get_SubTopic>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <ATCMD_MQTT_Subtopic_Callback+0x140>)
 8001d88:	6013      	str	r3, [r2, #0]
		strcat((char*)s_txBuf, ATCMD_CMD_END);
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <ATCMD_MQTT_Subtopic_Callback+0x140>)
 8001d8c:	681c      	ldr	r4, [r3, #0]
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f7fe fa1c 	bl	80001cc <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4423      	add	r3, r4
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <ATCMD_MQTT_Subtopic_Callback+0x144>)
 8001d9a:	8811      	ldrh	r1, [r2, #0]
 8001d9c:	7892      	ldrb	r2, [r2, #2]
 8001d9e:	8019      	strh	r1, [r3, #0]
 8001da0:	709a      	strb	r2, [r3, #2]
		Uart_Transmit_Data_Dma((uint32_t)s_txBuf, strlen((char*)s_txBuf));
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <ATCMD_MQTT_Subtopic_Callback+0x140>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461c      	mov	r4, r3
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <ATCMD_MQTT_Subtopic_Callback+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fa0d 	bl	80001cc <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f005 fec2 	bl	8007b40 <Uart_Transmit_Data_Dma>
		break;
 8001dbc:	e014      	b.n	8001de8 <ATCMD_MQTT_Subtopic_Callback+0x12c>
	case 1:
		ret = ATCMD_RSP_FINISH;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <ATCMD_MQTT_Subtopic_Callback+0x148>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
		break;
 8001dca:	e00d      	b.n	8001de8 <ATCMD_MQTT_Subtopic_Callback+0x12c>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001dd2:	e009      	b.n	8001de8 <ATCMD_MQTT_Subtopic_Callback+0x12c>

	case 3:
	default:
		ret = ATCMD_RSP_ERROR;
 8001dd4:	23ff      	movs	r3, #255	@ 0xff
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <ATCMD_MQTT_Subtopic_Callback+0x148>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <ATCMD_MQTT_Subtopic_Callback+0x148>)
 8001de4:	701a      	strb	r2, [r3, #0]
		break;
 8001de6:	bf00      	nop
	}
	return ret;
 8001de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dec:	b25b      	sxtb	r3, r3
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bdb0      	pop	{r4, r5, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08009834 	.word	0x08009834
 8001dfc:	200001c4 	.word	0x200001c4
 8001e00:	0800981c 	.word	0x0800981c
 8001e04:	200001b9 	.word	0x200001b9

08001e08 <ATCMD_MQTT_Subscribe_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Subscribe_Callback(uint8_t* rsp)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001e10:	23ff      	movs	r3, #255	@ 0xff
 8001e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK","+CMQTTSUB: ", "ERROR"};
 8001e16:	4a47      	ldr	r2, [pc, #284]	@ (8001f34 <ATCMD_MQTT_Subscribe_Callback+0x12c>)
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
	static uint16_t mqtt_result;
	while(p)
 8001e30:	e052      	b.n	8001ed8 <ATCMD_MQTT_Subscribe_Callback+0xd0>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b0d      	cmp	r3, #13
 8001e3e:	d0f8      	beq.n	8001e32 <ATCMD_MQTT_Subscribe_Callback+0x2a>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b0a      	cmp	r3, #10
 8001e46:	d0f4      	beq.n	8001e32 <ATCMD_MQTT_Subscribe_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	e023      	b.n	8001e96 <ATCMD_MQTT_Subscribe_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	3328      	adds	r3, #40	@ 0x28
 8001e56:	443b      	add	r3, r7
 8001e58:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001e5c:	68fd      	ldr	r5, [r7, #12]
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	3328      	adds	r3, #40	@ 0x28
 8001e66:	443b      	add	r3, r7
 8001e68:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe f9ad 	bl	80001cc <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4629      	mov	r1, r5
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f007 fbaa 	bl	80095d2 <strncmp>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <ATCMD_MQTT_Subscribe_Callback+0x84>
			{
				rspType = i;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	613b      	str	r3, [r7, #16]
				break;
 8001e8a:	e008      	b.n	8001e9e <ATCMD_MQTT_Subscribe_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	75fb      	strb	r3, [r7, #23]
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d9d7      	bls.n	8001e4e <ATCMD_MQTT_Subscribe_Callback+0x46>
			}
		}
		if(rspType == 1)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d112      	bne.n	8001eca <ATCMD_MQTT_Subscribe_Callback+0xc2>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8001ea4:	2232      	movs	r2, #50	@ 0x32
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <ATCMD_MQTT_Subscribe_Callback+0x130>)
 8001eaa:	f007 fb6e 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0], ',', ATCMD_CMD_CR);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	230d      	movs	r3, #13
 8001eb2:	222c      	movs	r2, #44	@ 0x2c
 8001eb4:	4920      	ldr	r1, [pc, #128]	@ (8001f38 <ATCMD_MQTT_Subscribe_Callback+0x130>)
 8001eb6:	f005 f8c5 	bl	8007044 <Str_Cpy_Marker>
			mqtt_result = Convert_String_To_Integer(s_tempBuff);
 8001eba:	481f      	ldr	r0, [pc, #124]	@ (8001f38 <ATCMD_MQTT_Subscribe_Callback+0x130>)
 8001ebc:	f004 fff6 	bl	8006eac <Convert_String_To_Integer>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <ATCMD_MQTT_Subscribe_Callback+0x134>)
 8001ec6:	801a      	strh	r2, [r3, #0]
			break;
 8001ec8:	e009      	b.n	8001ede <ATCMD_MQTT_Subscribe_Callback+0xd6>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	210a      	movs	r1, #10
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fb72 	bl	80095b8 <strchr>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]
	while(p)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ac      	bne.n	8001e38 <ATCMD_MQTT_Subscribe_Callback+0x30>
	}
	switch(rspType)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <ATCMD_MQTT_Subscribe_Callback+0xe2>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d004      	beq.n	8001ef2 <ATCMD_MQTT_Subscribe_Callback+0xea>
 8001ee8:	e012      	b.n	8001f10 <ATCMD_MQTT_Subscribe_Callback+0x108>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8001ef0:	e018      	b.n	8001f24 <ATCMD_MQTT_Subscribe_Callback+0x11c>
	case 1:
		if(mqtt_result != 0)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <ATCMD_MQTT_Subscribe_Callback+0x134>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <ATCMD_MQTT_Subscribe_Callback+0xfa>
		{
			ret = ATCMD_RSP_ERROR;
 8001efa:	23ff      	movs	r3, #255	@ 0xff
 8001efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		{
			ret = ATCMD_RSP_FINISH;
			g_errorCount = 0;
		}

		break;
 8001f00:	e010      	b.n	8001f24 <ATCMD_MQTT_Subscribe_Callback+0x11c>
			ret = ATCMD_RSP_FINISH;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount = 0;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <ATCMD_MQTT_Subscribe_Callback+0x138>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
		break;
 8001f0e:	e009      	b.n	8001f24 <ATCMD_MQTT_Subscribe_Callback+0x11c>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 8001f10:	23ff      	movs	r3, #255	@ 0xff
 8001f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <ATCMD_MQTT_Subscribe_Callback+0x138>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <ATCMD_MQTT_Subscribe_Callback+0x138>)
 8001f20:	701a      	strb	r2, [r3, #0]
		break;
 8001f22:	bf00      	nop
	}
	return ret;
 8001f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f28:	b25b      	sxtb	r3, r3
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3728      	adds	r7, #40	@ 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	08009850 	.word	0x08009850
 8001f38:	200001c8 	.word	0x200001c8
 8001f3c:	200003f4 	.word	0x200003f4
 8001f40:	200001b9 	.word	0x200001b9

08001f44 <ATCMD_Check_Module_Certs_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_Check_Module_Certs_Callback(uint8_t* rsp)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8001f4c:	23ff      	movs	r3, #255	@ 0xff
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"+CCERTLIST: ","OK", "ERROR"};
 8001f52:	4a53      	ldr	r2, [pc, #332]	@ (80020a0 <ATCMD_Check_Module_Certs_Callback+0x15c>)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
	static uint8_t count;
	count = 0;
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
	while(p)
 8001f72:	e063      	b.n	800203c <ATCMD_Check_Module_Certs_Callback+0xf8>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b0d      	cmp	r3, #13
 8001f80:	d0f8      	beq.n	8001f74 <ATCMD_Check_Module_Certs_Callback+0x30>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b0a      	cmp	r3, #10
 8001f88:	d0f4      	beq.n	8001f74 <ATCMD_Check_Module_Certs_Callback+0x30>
		}
		for ( i = 0; i < 3; i ++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
 8001f8e:	e023      	b.n	8001fd8 <ATCMD_Check_Module_Certs_Callback+0x94>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3328      	adds	r3, #40	@ 0x28
 8001f98:	443b      	add	r3, r7
 8001f9a:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8001f9e:	68fd      	ldr	r5, [r7, #12]
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	3328      	adds	r3, #40	@ 0x28
 8001fa8:	443b      	add	r3, r7
 8001faa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe f90c 	bl	80001cc <strlen>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f007 fb09 	bl	80095d2 <strncmp>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <ATCMD_Check_Module_Certs_Callback+0x8a>
			{
				rspType = i;
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	613b      	str	r3, [r7, #16]
				break;
 8001fcc:	e008      	b.n	8001fe0 <ATCMD_Check_Module_Certs_Callback+0x9c>
		for ( i = 0; i < 3; i ++)
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	75fb      	strb	r3, [r7, #23]
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d9d7      	bls.n	8001f90 <ATCMD_Check_Module_Certs_Callback+0x4c>
			}

		}
		if(rspType == 0)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d123      	bne.n	800202e <ATCMD_Check_Module_Certs_Callback+0xea>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8001fe6:	2232      	movs	r2, #50	@ 0x32
 8001fe8:	2100      	movs	r1, #0
 8001fea:	482f      	ldr	r0, [pc, #188]	@ (80020a8 <ATCMD_Check_Module_Certs_Callback+0x164>)
 8001fec:	f007 facd 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0], '\"', '\"');
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	2322      	movs	r3, #34	@ 0x22
 8001ff4:	2222      	movs	r2, #34	@ 0x22
 8001ff6:	492c      	ldr	r1, [pc, #176]	@ (80020a8 <ATCMD_Check_Module_Certs_Callback+0x164>)
 8001ff8:	f005 f824 	bl	8007044 <Str_Cpy_Marker>
			strncpy((char*)&g_certificates.certs[count][0], (char*)s_tempBuff, strlen((char*)s_tempBuff));
 8001ffc:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009a      	lsls	r2, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	4a27      	ldr	r2, [pc, #156]	@ (80020ac <ATCMD_Check_Module_Certs_Callback+0x168>)
 800200e:	189c      	adds	r4, r3, r2
 8002010:	4825      	ldr	r0, [pc, #148]	@ (80020a8 <ATCMD_Check_Module_Certs_Callback+0x164>)
 8002012:	f7fe f8db 	bl	80001cc <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4923      	ldr	r1, [pc, #140]	@ (80020a8 <ATCMD_Check_Module_Certs_Callback+0x164>)
 800201c:	4620      	mov	r0, r4
 800201e:	f007 faea 	bl	80095f6 <strncpy>
			count++;
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 800202c:	701a      	strb	r2, [r3, #0]
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	210a      	movs	r1, #10
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fac0 	bl	80095b8 <strchr>
 8002038:	4603      	mov	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
	while(p)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d19b      	bne.n	8001f7a <ATCMD_Check_Module_Certs_Callback+0x36>
	}
	switch(rspType)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <ATCMD_Check_Module_Certs_Callback+0x10a>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d00c      	beq.n	8002066 <ATCMD_Check_Module_Certs_Callback+0x122>
 800204c:	e017      	b.n	800207e <ATCMD_Check_Module_Certs_Callback+0x13a>
	{
	case 0:
		ret = ATCMD_RSP_FINISH;
 800204e:	2302      	movs	r3, #2
 8002050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_certificates.certCount = count;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <ATCMD_Check_Module_Certs_Callback+0x168>)
 800205a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		g_errorCount = 0;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <ATCMD_Check_Module_Certs_Callback+0x16c>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
		break;
 8002064:	e015      	b.n	8002092 <ATCMD_Check_Module_Certs_Callback+0x14e>
	case 1:
		ret = ATCMD_RSP_FINISH;
 8002066:	2302      	movs	r3, #2
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_certificates.certCount = count;
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <ATCMD_Check_Module_Certs_Callback+0x160>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <ATCMD_Check_Module_Certs_Callback+0x168>)
 8002072:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
		g_errorCount = 0;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <ATCMD_Check_Module_Certs_Callback+0x16c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
		break;
 800207c:	e009      	b.n	8002092 <ATCMD_Check_Module_Certs_Callback+0x14e>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 800207e:	23ff      	movs	r3, #255	@ 0xff
 8002080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <ATCMD_Check_Module_Certs_Callback+0x16c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <ATCMD_Check_Module_Certs_Callback+0x16c>)
 800208e:	701a      	strb	r2, [r3, #0]
		break;
 8002090:	bf00      	nop
	}
	return ret;
 8002092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002096:	b25b      	sxtb	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bdb0      	pop	{r4, r5, r7, pc}
 80020a0:	0800986c 	.word	0x0800986c
 80020a4:	200003f6 	.word	0x200003f6
 80020a8:	200001c8 	.word	0x200001c8
 80020ac:	20000154 	.word	0x20000154
 80020b0:	200001b9 	.word	0x200001b9

080020b4 <ATCMD_MQTT_Pubtopic_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Pubtopic_Callback(uint8_t* rsp)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 80020bc:	23ff      	movs	r3, #255	@ 0xff
 80020be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[4] = {">","OK","+CMQTTTOPIC: ", "ERROR"};
 80020c2:	4b4e      	ldr	r3, [pc, #312]	@ (80021fc <ATCMD_MQTT_Pubtopic_Callback+0x148>)
 80020c4:	f107 0414 	add.w	r4, r7, #20
 80020c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t volatile i  = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	74fb      	strb	r3, [r7, #19]
	int32_t volatile rspType = -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	60fb      	str	r3, [r7, #12]
	uint8_t* volatile p = rsp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60bb      	str	r3, [r7, #8]
	while(p)
 80020dc:	e03c      	b.n	8002158 <ATCMD_MQTT_Pubtopic_Callback+0xa4>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b0d      	cmp	r3, #13
 80020ea:	d0f8      	beq.n	80020de <ATCMD_MQTT_Pubtopic_Callback+0x2a>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b0a      	cmp	r3, #10
 80020f2:	d0f4      	beq.n	80020de <ATCMD_MQTT_Pubtopic_Callback+0x2a>
		}
		for ( i = 0; i < 4; i ++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	74fb      	strb	r3, [r7, #19]
 80020f8:	e023      	b.n	8002142 <ATCMD_MQTT_Pubtopic_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	3328      	adds	r3, #40	@ 0x28
 8002102:	443b      	add	r3, r7
 8002104:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8002108:	68bd      	ldr	r5, [r7, #8]
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3328      	adds	r3, #40	@ 0x28
 8002112:	443b      	add	r3, r7
 8002114:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f857 	bl	80001cc <strlen>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4629      	mov	r1, r5
 8002124:	4620      	mov	r0, r4
 8002126:	f007 fa54 	bl	80095d2 <strncmp>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <ATCMD_MQTT_Pubtopic_Callback+0x84>
			{
				rspType = i;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	60fb      	str	r3, [r7, #12]
				break;
 8002136:	e008      	b.n	800214a <ATCMD_MQTT_Pubtopic_Callback+0x96>
		for ( i = 0; i < 4; i ++)
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	74fb      	strb	r3, [r7, #19]
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b03      	cmp	r3, #3
 8002148:	d9d7      	bls.n	80020fa <ATCMD_MQTT_Pubtopic_Callback+0x46>
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	210a      	movs	r1, #10
 800214e:	4618      	mov	r0, r3
 8002150:	f007 fa32 	bl	80095b8 <strchr>
 8002154:	4603      	mov	r3, r0
 8002156:	60bb      	str	r3, [r7, #8]
	while(p)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1c2      	bne.n	80020e4 <ATCMD_MQTT_Pubtopic_Callback+0x30>
	}
	switch(rspType)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d036      	beq.n	80021d2 <ATCMD_MQTT_Pubtopic_Callback+0x11e>
 8002164:	2b02      	cmp	r3, #2
 8002166:	dc38      	bgt.n	80021da <ATCMD_MQTT_Pubtopic_Callback+0x126>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <ATCMD_MQTT_Pubtopic_Callback+0xbe>
 800216c:	2b01      	cmp	r3, #1
 800216e:	d029      	beq.n	80021c4 <ATCMD_MQTT_Pubtopic_Callback+0x110>
 8002170:	e033      	b.n	80021da <ATCMD_MQTT_Pubtopic_Callback+0x126>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 8002172:	2303      	movs	r3, #3
 8002174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		s_txBuf = ATCMD_A7672_MQTT_Get_PubTopic();
 8002178:	f000 ffd0 	bl	800311c <ATCMD_A7672_MQTT_Get_PubTopic>
 800217c:	4603      	mov	r3, r0
 800217e:	4a20      	ldr	r2, [pc, #128]	@ (8002200 <ATCMD_MQTT_Pubtopic_Callback+0x14c>)
 8002180:	6013      	str	r3, [r2, #0]
		memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8002182:	2232      	movs	r2, #50	@ 0x32
 8002184:	2100      	movs	r1, #0
 8002186:	481f      	ldr	r0, [pc, #124]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 8002188:	f007 f9ff 	bl	800958a <memset>
		strcpy((char*)s_tempBuff,(char*)s_txBuf);
 800218c:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <ATCMD_MQTT_Pubtopic_Callback+0x14c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	481c      	ldr	r0, [pc, #112]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 8002194:	f007 fa66 	bl	8009664 <strcpy>
		strcat((char*)s_tempBuff, "\r");
 8002198:	481a      	ldr	r0, [pc, #104]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 800219a:	f7fe f817 	bl	80001cc <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b18      	ldr	r3, [pc, #96]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 80021a4:	4413      	add	r3, r2
 80021a6:	4918      	ldr	r1, [pc, #96]	@ (8002208 <ATCMD_MQTT_Pubtopic_Callback+0x154>)
 80021a8:	461a      	mov	r2, r3
 80021aa:	460b      	mov	r3, r1
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	8013      	strh	r3, [r2, #0]
		Uart_Transmit_Data_Dma((uint32_t)s_tempBuff, strlen((char*)s_tempBuff));
 80021b0:	4c14      	ldr	r4, [pc, #80]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 80021b2:	4814      	ldr	r0, [pc, #80]	@ (8002204 <ATCMD_MQTT_Pubtopic_Callback+0x150>)
 80021b4:	f7fe f80a 	bl	80001cc <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4619      	mov	r1, r3
 80021bc:	4620      	mov	r0, r4
 80021be:	f005 fcbf 	bl	8007b40 <Uart_Transmit_Data_Dma>
		break;
 80021c2:	e014      	b.n	80021ee <ATCMD_MQTT_Pubtopic_Callback+0x13a>
	case 1:
		ret = ATCMD_RSP_FINISH;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount=0;
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <ATCMD_MQTT_Pubtopic_Callback+0x158>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
		break;
 80021d0:	e00d      	b.n	80021ee <ATCMD_MQTT_Pubtopic_Callback+0x13a>
	case 2:
		ret = ATCMD_RSP_ERROR;
 80021d2:	23ff      	movs	r3, #255	@ 0xff
 80021d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 80021d8:	e009      	b.n	80021ee <ATCMD_MQTT_Pubtopic_Callback+0x13a>
	case 3:
	default:
		ret = ATCMD_RSP_ERROR;
 80021da:	23ff      	movs	r3, #255	@ 0xff
 80021dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <ATCMD_MQTT_Pubtopic_Callback+0x158>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <ATCMD_MQTT_Pubtopic_Callback+0x158>)
 80021ea:	701a      	strb	r2, [r3, #0]
		break;
 80021ec:	bf00      	nop
	}
	return ret;
 80021ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021f2:	b25b      	sxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3728      	adds	r7, #40	@ 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdb0      	pop	{r4, r5, r7, pc}
 80021fc:	0800988c 	.word	0x0800988c
 8002200:	200001c4 	.word	0x200001c4
 8002204:	200001c8 	.word	0x200001c8
 8002208:	08009878 	.word	0x08009878
 800220c:	200001b9 	.word	0x200001b9

08002210 <ATCMD_MQTT_PubPayload_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_PubPayload_Callback(uint8_t* rsp)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8002218:	23ff      	movs	r3, #255	@ 0xff
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[4] = {">","OK","+CMQTTPAYLOAD: ", "ERROR"};
 800221e:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <ATCMD_MQTT_PubPayload_Callback+0x13c>)
 8002220:	f107 0414 	add.w	r4, r7, #20
 8002224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t volatile i  = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	74fb      	strb	r3, [r7, #19]
	int32_t volatile rspType = -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	60fb      	str	r3, [r7, #12]
	uint8_t* volatile p = rsp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60bb      	str	r3, [r7, #8]
	while(p)
 8002238:	e03c      	b.n	80022b4 <ATCMD_MQTT_PubPayload_Callback+0xa4>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	60bb      	str	r3, [r7, #8]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b0d      	cmp	r3, #13
 8002246:	d0f8      	beq.n	800223a <ATCMD_MQTT_PubPayload_Callback+0x2a>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b0a      	cmp	r3, #10
 800224e:	d0f4      	beq.n	800223a <ATCMD_MQTT_PubPayload_Callback+0x2a>
		}
		for ( i = 0; i < 4; i ++)
 8002250:	2300      	movs	r3, #0
 8002252:	74fb      	strb	r3, [r7, #19]
 8002254:	e023      	b.n	800229e <ATCMD_MQTT_PubPayload_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	3328      	adds	r3, #40	@ 0x28
 800225e:	443b      	add	r3, r7
 8002260:	f853 4c14 	ldr.w	r4, [r3, #-20]
 8002264:	68bd      	ldr	r5, [r7, #8]
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	3328      	adds	r3, #40	@ 0x28
 800226e:	443b      	add	r3, r7
 8002270:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ffa9 	bl	80001cc <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4629      	mov	r1, r5
 8002280:	4620      	mov	r0, r4
 8002282:	f007 f9a6 	bl	80095d2 <strncmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <ATCMD_MQTT_PubPayload_Callback+0x84>
			{
				rspType = i;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	60fb      	str	r3, [r7, #12]
				break;
 8002292:	e008      	b.n	80022a6 <ATCMD_MQTT_PubPayload_Callback+0x96>
		for ( i = 0; i < 4; i ++)
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	74fb      	strb	r3, [r7, #19]
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d9d7      	bls.n	8002256 <ATCMD_MQTT_PubPayload_Callback+0x46>
			}
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	210a      	movs	r1, #10
 80022aa:	4618      	mov	r0, r3
 80022ac:	f007 f984 	bl	80095b8 <strchr>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60bb      	str	r3, [r7, #8]
	while(p)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1c2      	bne.n	8002240 <ATCMD_MQTT_PubPayload_Callback+0x30>
	}
	switch(rspType)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d02f      	beq.n	8002320 <ATCMD_MQTT_PubPayload_Callback+0x110>
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	dc31      	bgt.n	8002328 <ATCMD_MQTT_PubPayload_Callback+0x118>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <ATCMD_MQTT_PubPayload_Callback+0xbe>
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d022      	beq.n	8002312 <ATCMD_MQTT_PubPayload_Callback+0x102>
 80022cc:	e02c      	b.n	8002328 <ATCMD_MQTT_PubPayload_Callback+0x118>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		s_txBuf = Uart_Get_Transmit_Buffer();
 80022d4:	f005 fcc0 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <ATCMD_MQTT_PubPayload_Callback+0x140>)
 80022dc:	6013      	str	r3, [r2, #0]
		strcat((char*)s_txBuf, ATCMD_CMD_END);
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <ATCMD_MQTT_PubPayload_Callback+0x140>)
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fd ff72 	bl	80001cc <strlen>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4423      	add	r3, r4
 80022ec:	4a19      	ldr	r2, [pc, #100]	@ (8002354 <ATCMD_MQTT_PubPayload_Callback+0x144>)
 80022ee:	8811      	ldrh	r1, [r2, #0]
 80022f0:	7892      	ldrb	r2, [r2, #2]
 80022f2:	8019      	strh	r1, [r3, #0]
 80022f4:	709a      	strb	r2, [r3, #2]
		Uart_Transmit_Data_Dma((uint32_t)s_txBuf, strlen((char*)s_txBuf));
 80022f6:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <ATCMD_MQTT_PubPayload_Callback+0x140>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461c      	mov	r4, r3
 80022fc:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <ATCMD_MQTT_PubPayload_Callback+0x140>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ff63 	bl	80001cc <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	4619      	mov	r1, r3
 800230a:	4620      	mov	r0, r4
 800230c:	f005 fc18 	bl	8007b40 <Uart_Transmit_Data_Dma>
		break;
 8002310:	e014      	b.n	800233c <ATCMD_MQTT_PubPayload_Callback+0x12c>
	case 1:
		ret = ATCMD_RSP_FINISH;
 8002312:	2302      	movs	r3, #2
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount = 0;
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <ATCMD_MQTT_PubPayload_Callback+0x148>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
		break;
 800231e:	e00d      	b.n	800233c <ATCMD_MQTT_PubPayload_Callback+0x12c>
	case 2:
		ret = ATCMD_RSP_ERROR;
 8002320:	23ff      	movs	r3, #255	@ 0xff
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8002326:	e009      	b.n	800233c <ATCMD_MQTT_PubPayload_Callback+0x12c>
	case 3:
	default:
		ret = ATCMD_RSP_ERROR;
 8002328:	23ff      	movs	r3, #255	@ 0xff
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <ATCMD_MQTT_PubPayload_Callback+0x148>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <ATCMD_MQTT_PubPayload_Callback+0x148>)
 8002338:	701a      	strb	r2, [r3, #0]
		break;
 800233a:	bf00      	nop
	}
	return ret;
 800233c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002340:	b25b      	sxtb	r3, r3
}
 8002342:	4618      	mov	r0, r3
 8002344:	3728      	adds	r7, #40	@ 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bdb0      	pop	{r4, r5, r7, pc}
 800234a:	bf00      	nop
 800234c:	080098ac 	.word	0x080098ac
 8002350:	200001c4 	.word	0x200001c4
 8002354:	0800981c 	.word	0x0800981c
 8002358:	200001b9 	.word	0x200001b9

0800235c <ATCMD_MQTT_Publish_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_MQTT_Publish_Callback(uint8_t* rsp)
{
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 8002364:	23ff      	movs	r3, #255	@ 0xff
 8002366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"OK","+CMQTTPUB: ", "ERROR"};
 800236a:	4a47      	ldr	r2, [pc, #284]	@ (8002488 <ATCMD_MQTT_Publish_Callback+0x12c>)
 800236c:	f107 0318 	add.w	r3, r7, #24
 8002370:	ca07      	ldmia	r2, {r0, r1, r2}
 8002372:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60fb      	str	r3, [r7, #12]

	while(p)
 8002384:	e052      	b.n	800242c <ATCMD_MQTT_Publish_Callback+0xd0>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b0d      	cmp	r3, #13
 8002392:	d0f8      	beq.n	8002386 <ATCMD_MQTT_Publish_Callback+0x2a>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b0a      	cmp	r3, #10
 800239a:	d0f4      	beq.n	8002386 <ATCMD_MQTT_Publish_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 800239c:	2300      	movs	r3, #0
 800239e:	75fb      	strb	r3, [r7, #23]
 80023a0:	e023      	b.n	80023ea <ATCMD_MQTT_Publish_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	3328      	adds	r3, #40	@ 0x28
 80023aa:	443b      	add	r3, r7
 80023ac:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80023b0:	68fd      	ldr	r5, [r7, #12]
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3328      	adds	r3, #40	@ 0x28
 80023ba:	443b      	add	r3, r7
 80023bc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fd ff03 	bl	80001cc <strlen>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4629      	mov	r1, r5
 80023cc:	4620      	mov	r0, r4
 80023ce:	f007 f900 	bl	80095d2 <strncmp>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <ATCMD_MQTT_Publish_Callback+0x84>
			{
				rspType = i;
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	613b      	str	r3, [r7, #16]
				break;
 80023de:	e008      	b.n	80023f2 <ATCMD_MQTT_Publish_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	75fb      	strb	r3, [r7, #23]
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d9d7      	bls.n	80023a2 <ATCMD_MQTT_Publish_Callback+0x46>
			}

		}
		if(rspType == 1)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d112      	bne.n	800241e <ATCMD_MQTT_Publish_Callback+0xc2>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 80023f8:	2232      	movs	r2, #50	@ 0x32
 80023fa:	2100      	movs	r1, #0
 80023fc:	4823      	ldr	r0, [pc, #140]	@ (800248c <ATCMD_MQTT_Publish_Callback+0x130>)
 80023fe:	f007 f8c4 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0],',', ATCMD_CMD_CR);
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	230d      	movs	r3, #13
 8002406:	222c      	movs	r2, #44	@ 0x2c
 8002408:	4920      	ldr	r1, [pc, #128]	@ (800248c <ATCMD_MQTT_Publish_Callback+0x130>)
 800240a:	f004 fe1b 	bl	8007044 <Str_Cpy_Marker>
			g_mqtt_result = Convert_String_To_Integer(s_tempBuff);
 800240e:	481f      	ldr	r0, [pc, #124]	@ (800248c <ATCMD_MQTT_Publish_Callback+0x130>)
 8002410:	f004 fd4c 	bl	8006eac <Convert_String_To_Integer>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <ATCMD_MQTT_Publish_Callback+0x134>)
 800241a:	801a      	strh	r2, [r3, #0]
			break;
 800241c:	e009      	b.n	8002432 <ATCMD_MQTT_Publish_Callback+0xd6>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	210a      	movs	r1, #10
 8002422:	4618      	mov	r0, r3
 8002424:	f007 f8c8 	bl	80095b8 <strchr>
 8002428:	4603      	mov	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
	while(p)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ac      	bne.n	800238c <ATCMD_MQTT_Publish_Callback+0x30>
	}
	switch(rspType)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <ATCMD_MQTT_Publish_Callback+0xe2>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d004      	beq.n	8002446 <ATCMD_MQTT_Publish_Callback+0xea>
 800243c:	e012      	b.n	8002464 <ATCMD_MQTT_Publish_Callback+0x108>
	{
	case 0:
		ret = ATCMD_RSP_WAIT;
 800243e:	2303      	movs	r3, #3
 8002440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 8002444:	e018      	b.n	8002478 <ATCMD_MQTT_Publish_Callback+0x11c>
	case 1:
		if(g_mqtt_result != 0)
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <ATCMD_MQTT_Publish_Callback+0x134>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <ATCMD_MQTT_Publish_Callback+0xfa>
		{
			ret = ATCMD_RSP_ERROR;
 800244e:	23ff      	movs	r3, #255	@ 0xff
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		{
			ret = ATCMD_RSP_FINISH;
			g_errorCount = 0;
		}

		break;
 8002454:	e010      	b.n	8002478 <ATCMD_MQTT_Publish_Callback+0x11c>
			ret = ATCMD_RSP_FINISH;
 8002456:	2302      	movs	r3, #2
 8002458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount = 0;
 800245c:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <ATCMD_MQTT_Publish_Callback+0x138>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
		break;
 8002462:	e009      	b.n	8002478 <ATCMD_MQTT_Publish_Callback+0x11c>

	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 8002464:	23ff      	movs	r3, #255	@ 0xff
 8002466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <ATCMD_MQTT_Publish_Callback+0x138>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <ATCMD_MQTT_Publish_Callback+0x138>)
 8002474:	701a      	strb	r2, [r3, #0]
		break;
 8002476:	bf00      	nop
	}
	return ret;
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800247c:	b25b      	sxtb	r3, r3
}
 800247e:	4618      	mov	r0, r3
 8002480:	3728      	adds	r7, #40	@ 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bdb0      	pop	{r4, r5, r7, pc}
 8002486:	bf00      	nop
 8002488:	080098c8 	.word	0x080098c8
 800248c:	200001c8 	.word	0x200001c8
 8002490:	200001bc 	.word	0x200001bc
 8002494:	200001b9 	.word	0x200001b9

08002498 <ATCMD_Pdp_Context_Check_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_rsp_t ATCMD_Pdp_Context_Check_Callback(uint8_t* rsp)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	atcmd_rsp_t volatile ret = ATCMD_RSP_ERROR;
 80024a0:	23ff      	movs	r3, #255	@ 0xff
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	char* volatile rspStrTable[3] = {"+CGATT:","OK", "ERROR"};
 80024a6:	4a4a      	ldr	r2, [pc, #296]	@ (80025d0 <ATCMD_Pdp_Context_Check_Callback+0x138>)
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t volatile i  = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
	int32_t volatile rspType = -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	613b      	str	r3, [r7, #16]
	uint8_t* volatile p = rsp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60fb      	str	r3, [r7, #12]
	static uint8_t s_gprsConnectStatus;
	while(p)
 80024c0:	e052      	b.n	8002568 <ATCMD_Pdp_Context_Check_Callback+0xd0>
	{
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
		{
			p++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
		while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b0d      	cmp	r3, #13
 80024ce:	d0f8      	beq.n	80024c2 <ATCMD_Pdp_Context_Check_Callback+0x2a>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b0a      	cmp	r3, #10
 80024d6:	d0f4      	beq.n	80024c2 <ATCMD_Pdp_Context_Check_Callback+0x2a>
		}
		for ( i = 0; i < 3; i ++)
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
 80024dc:	e023      	b.n	8002526 <ATCMD_Pdp_Context_Check_Callback+0x8e>
		{
			if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3328      	adds	r3, #40	@ 0x28
 80024e6:	443b      	add	r3, r7
 80024e8:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80024ec:	68fd      	ldr	r5, [r7, #12]
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	3328      	adds	r3, #40	@ 0x28
 80024f6:	443b      	add	r3, r7
 80024f8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd fe65 	bl	80001cc <strlen>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4629      	mov	r1, r5
 8002508:	4620      	mov	r0, r4
 800250a:	f007 f862 	bl	80095d2 <strncmp>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <ATCMD_Pdp_Context_Check_Callback+0x84>
			{
				rspType = i;
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	613b      	str	r3, [r7, #16]
				break;
 800251a:	e008      	b.n	800252e <ATCMD_Pdp_Context_Check_Callback+0x96>
		for ( i = 0; i < 3; i ++)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	75fb      	strb	r3, [r7, #23]
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d9d7      	bls.n	80024de <ATCMD_Pdp_Context_Check_Callback+0x46>
			}
		}
		if(rspType == 0)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d112      	bne.n	800255a <ATCMD_Pdp_Context_Check_Callback+0xc2>
		{
			memset(s_tempBuff, '\0', sizeof(s_tempBuff));
 8002534:	2232      	movs	r2, #50	@ 0x32
 8002536:	2100      	movs	r1, #0
 8002538:	4826      	ldr	r0, [pc, #152]	@ (80025d4 <ATCMD_Pdp_Context_Check_Callback+0x13c>)
 800253a:	f007 f826 	bl	800958a <memset>
			Str_Cpy_Marker(p, &s_tempBuff[0],' ', ATCMD_CMD_CR);
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	230d      	movs	r3, #13
 8002542:	2220      	movs	r2, #32
 8002544:	4923      	ldr	r1, [pc, #140]	@ (80025d4 <ATCMD_Pdp_Context_Check_Callback+0x13c>)
 8002546:	f004 fd7d 	bl	8007044 <Str_Cpy_Marker>
			s_gprsConnectStatus = Convert_String_To_Integer(s_tempBuff);
 800254a:	4822      	ldr	r0, [pc, #136]	@ (80025d4 <ATCMD_Pdp_Context_Check_Callback+0x13c>)
 800254c:	f004 fcae 	bl	8006eac <Convert_String_To_Integer>
 8002550:	4603      	mov	r3, r0
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <ATCMD_Pdp_Context_Check_Callback+0x140>)
 8002556:	701a      	strb	r2, [r3, #0]
			break;
 8002558:	e009      	b.n	800256e <ATCMD_Pdp_Context_Check_Callback+0xd6>
		}
		p = (uint8_t*)strchr((char*)p, 0x0a);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	210a      	movs	r1, #10
 800255e:	4618      	mov	r0, r3
 8002560:	f007 f82a 	bl	80095b8 <strchr>
 8002564:	4603      	mov	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]
	while(p)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ac      	bne.n	80024c8 <ATCMD_Pdp_Context_Check_Callback+0x30>
	}
	switch(rspType)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <ATCMD_Pdp_Context_Check_Callback+0xe2>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d015      	beq.n	80025a4 <ATCMD_Pdp_Context_Check_Callback+0x10c>
 8002578:	e018      	b.n	80025ac <ATCMD_Pdp_Context_Check_Callback+0x114>
	{
	case 0:
		if(s_gprsConnectStatus == 0)
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <ATCMD_Pdp_Context_Check_Callback+0x140>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <ATCMD_Pdp_Context_Check_Callback+0xfe>
		{
			ret = ATCMD_RSP_ERROR;
 8002582:	23ff      	movs	r3, #255	@ 0xff
 8002584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount++;
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <ATCMD_Pdp_Context_Check_Callback+0x144>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <ATCMD_Pdp_Context_Check_Callback+0x144>)
 8002592:	701a      	strb	r2, [r3, #0]
		else
		{
			ret = ATCMD_RSP_FINISH;
			g_errorCount=0;
		}
		break;
 8002594:	e014      	b.n	80025c0 <ATCMD_Pdp_Context_Check_Callback+0x128>
			ret = ATCMD_RSP_FINISH;
 8002596:	2302      	movs	r3, #2
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			g_errorCount=0;
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <ATCMD_Pdp_Context_Check_Callback+0x144>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		break;
 80025a2:	e00d      	b.n	80025c0 <ATCMD_Pdp_Context_Check_Callback+0x128>

	case 1:

		ret = ATCMD_RSP_WAIT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		break;
 80025aa:	e009      	b.n	80025c0 <ATCMD_Pdp_Context_Check_Callback+0x128>
	case 2:
	default:
		ret = ATCMD_RSP_ERROR;
 80025ac:	23ff      	movs	r3, #255	@ 0xff
 80025ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		g_errorCount++;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <ATCMD_Pdp_Context_Check_Callback+0x144>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <ATCMD_Pdp_Context_Check_Callback+0x144>)
 80025bc:	701a      	strb	r2, [r3, #0]
	break;
 80025be:	bf00      	nop
	}
	return ret;
 80025c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c4:	b25b      	sxtb	r3, r3
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3728      	adds	r7, #40	@ 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	080098dc 	.word	0x080098dc
 80025d4:	200001c8 	.word	0x200001c8
 80025d8:	200003f7 	.word	0x200003f7
 80025dc:	200001b9 	.word	0x200001b9

080025e0 <Urc_Sim_Check_Handler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
int32_t Urc_Sim_Check_Handler(uint8_t *rspStr, uint16_t len)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
	if(!strncmp((char*)rspStr, "+CPIN: SIM REMOVED",  18))
 80025ec:	2212      	movs	r2, #18
 80025ee:	4910      	ldr	r1, [pc, #64]	@ (8002630 <Urc_Sim_Check_Handler+0x50>)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f006 ffee 	bl	80095d2 <strncmp>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <Urc_Sim_Check_Handler+0x28>
	{
		g_simPresent = 0;
 80025fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <Urc_Sim_Check_Handler+0x54>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
		return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e00e      	b.n	8002626 <Urc_Sim_Check_Handler+0x46>
	}
	if(!strncmp((char*)rspStr, "+CPIN: READY", 12))
 8002608:	220c      	movs	r2, #12
 800260a:	490b      	ldr	r1, [pc, #44]	@ (8002638 <Urc_Sim_Check_Handler+0x58>)
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f006 ffe0 	bl	80095d2 <strncmp>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <Urc_Sim_Check_Handler+0x42>
	{
		g_simPresent = 1;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <Urc_Sim_Check_Handler+0x54>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
		return 0;
 800261e:	2300      	movs	r3, #0
 8002620:	e001      	b.n	8002626 <Urc_Sim_Check_Handler+0x46>
	}
	return -1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	080098e8 	.word	0x080098e8
 8002634:	200001bb 	.word	0x200001bb
 8002638:	080096bc 	.word	0x080096bc

0800263c <Urc_Module_Ready_Handler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
int32_t Urc_Module_Ready_Handler(uint8_t *rspStr, uint16_t len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
	if(!strncmp((char*)rspStr, "PB DONE", 7))
 8002648:	2207      	movs	r2, #7
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <Urc_Module_Ready_Handler+0x38>)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f006 ffc0 	bl	80095d2 <strncmp>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d104      	bne.n	8002662 <Urc_Module_Ready_Handler+0x26>
	{
		g_pbDone = 1;
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <Urc_Module_Ready_Handler+0x3c>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
		return 0;
 800265e:	2300      	movs	r3, #0
 8002660:	e004      	b.n	800266c <Urc_Module_Ready_Handler+0x30>
	}
	else
	{
		g_pbDone = 0;
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <Urc_Module_Ready_Handler+0x3c>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
	}
		return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	080098fc 	.word	0x080098fc
 8002678:	200001ba 	.word	0x200001ba

0800267c <Urc_Module_Data_Handler>:
* <hr>
*
*******************************************************************************/

int32_t Urc_Module_Data_Handler(uint8_t* rspStr, uint16_t len)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b08a      	sub	sp, #40	@ 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
	char* volatile rspStrTable[4] = {"+CMQTTRXSTART:","+CMQTTRXTOPIC:","+CMQTTRXPAYLOAD:", "+CMQTTRXEND:"};
 8002688:	4b30      	ldr	r3, [pc, #192]	@ (800274c <Urc_Module_Data_Handler+0xd0>)
 800268a:	f107 0418 	add.w	r4, r7, #24
 800268e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t volatile i  = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	75fb      	strb	r3, [r7, #23]
		int32_t volatile rspType = -1;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	613b      	str	r3, [r7, #16]
		uint8_t* volatile p = rspStr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
		while(p)
 80026a2:	e04b      	b.n	800273c <Urc_Module_Data_Handler+0xc0>
		{
			while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
			{
				p++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
			while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b0d      	cmp	r3, #13
 80026b0:	d0f8      	beq.n	80026a4 <Urc_Module_Data_Handler+0x28>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d0f4      	beq.n	80026a4 <Urc_Module_Data_Handler+0x28>
			}
			for ( i = 0; i < 4; i ++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
 80026be:	e023      	b.n	8002708 <Urc_Module_Data_Handler+0x8c>
			{
				if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	3328      	adds	r3, #40	@ 0x28
 80026c8:	443b      	add	r3, r7
 80026ca:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80026ce:	68fd      	ldr	r5, [r7, #12]
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	3328      	adds	r3, #40	@ 0x28
 80026d8:	443b      	add	r3, r7
 80026da:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd74 	bl	80001cc <strlen>
 80026e4:	4603      	mov	r3, r0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4629      	mov	r1, r5
 80026ea:	4620      	mov	r0, r4
 80026ec:	f006 ff71 	bl	80095d2 <strncmp>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <Urc_Module_Data_Handler+0x82>
				{
					rspType = i;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	613b      	str	r3, [r7, #16]
					break;
 80026fc:	e008      	b.n	8002710 <Urc_Module_Data_Handler+0x94>
			for ( i = 0; i < 4; i ++)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3301      	adds	r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	75fb      	strb	r3, [r7, #23]
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d9d7      	bls.n	80026c0 <Urc_Module_Data_Handler+0x44>
				}
			}
			if(rspType == 2)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d10b      	bne.n	800272e <Urc_Module_Data_Handler+0xb2>
			{
				Str_Cpy_Marker(p, s_pubBuff, ATCMD_CMD_LF, ATCMD_CMD_CR);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	230d      	movs	r3, #13
 800271a:	220a      	movs	r2, #10
 800271c:	490c      	ldr	r1, [pc, #48]	@ (8002750 <Urc_Module_Data_Handler+0xd4>)
 800271e:	f004 fc91 	bl	8007044 <Str_Cpy_Marker>
				s_mqttCredentials.msg_handler(s_pubBuff);
 8002722:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <Urc_Module_Data_Handler+0xd8>)
 8002724:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002728:	4809      	ldr	r0, [pc, #36]	@ (8002750 <Urc_Module_Data_Handler+0xd4>)
 800272a:	4798      	blx	r3
				break;
 800272c:	e009      	b.n	8002742 <Urc_Module_Data_Handler+0xc6>
			}
			p = (uint8_t*)strchr((char*)p, 0x0a);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	210a      	movs	r1, #10
 8002732:	4618      	mov	r0, r3
 8002734:	f006 ff40 	bl	80095b8 <strchr>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
		while(p)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1b3      	bne.n	80026aa <Urc_Module_Data_Handler+0x2e>
		}
		return 0;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3728      	adds	r7, #40	@ 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	08009948 	.word	0x08009948
 8002750:	20000200 	.word	0x20000200
 8002754:	2000060c 	.word	0x2000060c

08002758 <Urc_Module_Mqtt_Conn_Handler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
int32_t Urc_Module_Mqtt_Conn_Handler(uint8_t* rspStr, uint16_t len)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
char* volatile rspStrTable[2] = {"+CMQTTCONNLOST", "+CMQTTNONET"};
 8002764:	4a2c      	ldr	r2, [pc, #176]	@ (8002818 <Urc_Module_Mqtt_Conn_Handler+0xc0>)
 8002766:	f107 0318 	add.w	r3, r7, #24
 800276a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276e:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t volatile i = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
uint8_t* volatile p = rspStr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	613b      	str	r3, [r7, #16]
int32_t volatile rspType = -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	60fb      	str	r3, [r7, #12]
while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8002780:	e002      	b.n	8002788 <Urc_Module_Mqtt_Conn_Handler+0x30>
{
	p++;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3301      	adds	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
while ( ATCMD_CMD_CR == *p || ATCMD_CMD_LF == *p )
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b0d      	cmp	r3, #13
 800278e:	d0f8      	beq.n	8002782 <Urc_Module_Mqtt_Conn_Handler+0x2a>
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d0f4      	beq.n	8002782 <Urc_Module_Mqtt_Conn_Handler+0x2a>
}
	for ( i = 0; i < 2; i ++)
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
 800279c:	e023      	b.n	80027e6 <Urc_Module_Mqtt_Conn_Handler+0x8e>
	{
		if ( !strncmp(rspStrTable[i], ( char * )p, strlen(rspStrTable[i])))
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	3320      	adds	r3, #32
 80027a6:	443b      	add	r3, r7
 80027a8:	f853 4c08 	ldr.w	r4, [r3, #-8]
 80027ac:	693d      	ldr	r5, [r7, #16]
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3320      	adds	r3, #32
 80027b6:	443b      	add	r3, r7
 80027b8:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd05 	bl	80001cc <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4629      	mov	r1, r5
 80027c8:	4620      	mov	r0, r4
 80027ca:	f006 ff02 	bl	80095d2 <strncmp>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <Urc_Module_Mqtt_Conn_Handler+0x84>
		{
			rspType = i;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	60fb      	str	r3, [r7, #12]
			break;
 80027da:	e008      	b.n	80027ee <Urc_Module_Mqtt_Conn_Handler+0x96>
	for ( i = 0; i < 2; i ++)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	75fb      	strb	r3, [r7, #23]
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d9d7      	bls.n	800279e <Urc_Module_Mqtt_Conn_Handler+0x46>
		}
	}
	if(rspType == 1)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d104      	bne.n	80027fe <Urc_Module_Mqtt_Conn_Handler+0xa6>
	{
		s_mqttCredentials.connectionStatus = MQTT_DISCONNECTED;
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <Urc_Module_Mqtt_Conn_Handler+0xc4>)
 80027f6:	2203      	movs	r2, #3
 80027f8:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 80027fc:	e006      	b.n	800280c <Urc_Module_Mqtt_Conn_Handler+0xb4>
	}
	else if( rspType == 2)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d103      	bne.n	800280c <Urc_Module_Mqtt_Conn_Handler+0xb4>
	{
		s_mqttCredentials.connectionStatus = MQTT_NOT_CONNECTED;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <Urc_Module_Mqtt_Conn_Handler+0xc4>)
 8002806:	2200      	movs	r2, #0
 8002808:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
	}
return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	08009974 	.word	0x08009974
 800281c:	2000060c 	.word	0x2000060c

08002820 <ATCMD_A7672_Urc_Queue_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_A7672_Urc_Queue_Init( void )
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8002826:	af00      	add	r7, sp, #0
	atcmd_urc_queue_struct_t urcQueueStruct = {
 8002828:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800282c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002830:	4618      	mov	r0, r3
 8002832:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002836:	461a      	mov	r2, r3
 8002838:	2100      	movs	r1, #0
 800283a:	f006 fea6 	bl	800958a <memset>
 800283e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002842:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002846:	4a9f      	ldr	r2, [pc, #636]	@ (8002ac4 <ATCMD_A7672_Urc_Queue_Init+0x2a4>)
 8002848:	461c      	mov	r4, r3
 800284a:	ca07      	ldmia	r2, {r0, r1, r2}
 800284c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002850:	330c      	adds	r3, #12
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	821a      	strh	r2, [r3, #16]
 800285e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002862:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8002866:	4998      	ldr	r1, [pc, #608]	@ (8002ac8 <ATCMD_A7672_Urc_Queue_Init+0x2a8>)
 8002868:	f102 0324 	add.w	r3, r2, #36	@ 0x24
 800286c:	c903      	ldmia	r1, {r0, r1}
 800286e:	6018      	str	r0, [r3, #0]
 8002870:	3304      	adds	r3, #4
 8002872:	8019      	strh	r1, [r3, #0]
 8002874:	3302      	adds	r3, #2
 8002876:	0c09      	lsrs	r1, r1, #16
 8002878:	7019      	strb	r1, [r3, #0]
 800287a:	f102 032b 	add.w	r3, r2, #43	@ 0x2b
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	f8c3 2013 	str.w	r2, [r3, #19]
 800288e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002892:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002896:	4a8d      	ldr	r2, [pc, #564]	@ (8002acc <ATCMD_A7672_Urc_Queue_Init+0x2ac>)
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
 800289a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800289e:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 80028a2:	4a8b      	ldr	r2, [pc, #556]	@ (8002ad0 <ATCMD_A7672_Urc_Queue_Init+0x2b0>)
 80028a4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80028a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028aa:	c303      	stmia	r3!, {r0, r1}
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	f104 0352 	add.w	r3, r4, #82	@ 0x52
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028c2:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 80028c6:	4a83      	ldr	r2, [pc, #524]	@ (8002ad4 <ATCMD_A7672_Urc_Queue_Init+0x2b4>)
 80028c8:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80028cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ce:	c303      	stmia	r3!, {r0, r1}
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	f104 0375 	add.w	r3, r4, #117	@ 0x75
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	751a      	strb	r2, [r3, #20]
 80028e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80028e8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80028ec:	497a      	ldr	r1, [pc, #488]	@ (8002ad8 <ATCMD_A7672_Urc_Queue_Init+0x2b8>)
 80028ee:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 80028f2:	c903      	ldmia	r1, {r0, r1}
 80028f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80028f8:	3398      	adds	r3, #152	@ 0x98
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	611a      	str	r2, [r3, #16]
 8002906:	829a      	strh	r2, [r3, #20]
 8002908:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800290c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002910:	4a72      	ldr	r2, [pc, #456]	@ (8002adc <ATCMD_A7672_Urc_Queue_Init+0x2bc>)
 8002912:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002916:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800291a:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 800291e:	4a70      	ldr	r2, [pc, #448]	@ (8002ae0 <ATCMD_A7672_Urc_Queue_Init+0x2c0>)
 8002920:	f104 03b4 	add.w	r3, r4, #180	@ 0xb4
 8002924:	ca07      	ldmia	r2, {r0, r1, r2}
 8002926:	c303      	stmia	r3!, {r0, r1}
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	f104 03bd 	add.w	r3, r4, #189	@ 0xbd
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	751a      	strb	r2, [r3, #20]
 800293c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002940:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8002944:	4967      	ldr	r1, [pc, #412]	@ (8002ae4 <ATCMD_A7672_Urc_Queue_Init+0x2c4>)
 8002946:	f102 03d8 	add.w	r3, r2, #216	@ 0xd8
 800294a:	c903      	ldmia	r1, {r0, r1}
 800294c:	6018      	str	r0, [r3, #0]
 800294e:	3304      	adds	r3, #4
 8002950:	8019      	strh	r1, [r3, #0]
 8002952:	3302      	adds	r3, #2
 8002954:	0c09      	lsrs	r1, r1, #16
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	f102 03df 	add.w	r3, r2, #223	@ 0xdf
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
 8002968:	f8c3 2013 	str.w	r2, [r3, #19]
 800296c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002970:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8002974:	495c      	ldr	r1, [pc, #368]	@ (8002ae8 <ATCMD_A7672_Urc_Queue_Init+0x2c8>)
 8002976:	f102 03fc 	add.w	r3, r2, #252	@ 0xfc
 800297a:	c903      	ldmia	r1, {r0, r1}
 800297c:	6018      	str	r0, [r3, #0]
 800297e:	3304      	adds	r3, #4
 8002980:	8019      	strh	r1, [r3, #0]
 8002982:	3302      	adds	r3, #2
 8002984:	0c09      	lsrs	r1, r1, #16
 8002986:	7019      	strb	r1, [r3, #0]
 8002988:	f202 1303 	addw	r3, r2, #259	@ 0x103
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	f8c3 2013 	str.w	r2, [r3, #19]
 800299c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029a0:	f5a3 7508 	sub.w	r5, r3, #544	@ 0x220
 80029a4:	4b51      	ldr	r3, [pc, #324]	@ (8002aec <ATCMD_A7672_Urc_Queue_Init+0x2cc>)
 80029a6:	f505 7490 	add.w	r4, r5, #288	@ 0x120
 80029aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ac:	c407      	stmia	r4!, {r0, r1, r2}
 80029ae:	8023      	strh	r3, [r4, #0]
 80029b0:	3402      	adds	r4, #2
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	7023      	strb	r3, [r4, #0]
 80029b6:	f205 132f 	addw	r3, r5, #303	@ 0x12f
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	f8c3 200b 	str.w	r2, [r3, #11]
 80029c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80029ce:	4a48      	ldr	r2, [pc, #288]	@ (8002af0 <ATCMD_A7672_Urc_Queue_Init+0x2d0>)
 80029d0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80029d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80029d8:	f5a3 7508 	sub.w	r5, r3, #544	@ 0x220
 80029dc:	4b45      	ldr	r3, [pc, #276]	@ (8002af4 <ATCMD_A7672_Urc_Queue_Init+0x2d4>)
 80029de:	f505 74a2 	add.w	r4, r5, #324	@ 0x144
 80029e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e4:	c407      	stmia	r4!, {r0, r1, r2}
 80029e6:	8023      	strh	r3, [r4, #0]
 80029e8:	3402      	adds	r4, #2
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	7023      	strb	r3, [r4, #0]
 80029ee:	f205 1353 	addw	r3, r5, #339	@ 0x153
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	f8c3 200b 	str.w	r2, [r3, #11]
 80029fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a02:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002a06:	4a3a      	ldr	r2, [pc, #232]	@ (8002af0 <ATCMD_A7672_Urc_Queue_Init+0x2d0>)
 8002a08:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 8002a0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a10:	f5a3 7608 	sub.w	r6, r3, #544	@ 0x220
 8002a14:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <ATCMD_A7672_Urc_Queue_Init+0x2d8>)
 8002a16:	f506 74b4 	add.w	r4, r6, #360	@ 0x168
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	7023      	strb	r3, [r4, #0]
 8002a24:	f206 1379 	addw	r3, r6, #377	@ 0x179
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	731a      	strb	r2, [r3, #12]
 8002a32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a36:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <ATCMD_A7672_Urc_Queue_Init+0x2d0>)
 8002a3c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8002a40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a44:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <ATCMD_A7672_Urc_Queue_Init+0x2dc>)
 8002a4a:	f504 75c6 	add.w	r5, r4, #396	@ 0x18c
 8002a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a54:	f504 73ce 	add.w	r3, r4, #412	@ 0x19c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	819a      	strh	r2, [r3, #12]
 8002a62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a66:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002a6a:	4a25      	ldr	r2, [pc, #148]	@ (8002b00 <ATCMD_A7672_Urc_Queue_Init+0x2e0>)
 8002a6c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8002a70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a74:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <ATCMD_A7672_Urc_Queue_Init+0x2e4>)
 8002a7a:	f503 74d8 	add.w	r4, r3, #432	@ 0x1b0
 8002a7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	821a      	strh	r2, [r3, #16]
 8002a94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002a98:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002a9c:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <ATCMD_A7672_Urc_Queue_Init+0x2e0>)
 8002a9e:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
 8002aa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002aa6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002aaa:	220d      	movs	r2, #13
 8002aac:	f8a3 221c 	strh.w	r2, [r3, #540]	@ 0x21c
						{"+CMQTTCONNLOST:", Urc_Module_Mqtt_Conn_Handler},
						{"+CMQTTNONET", Urc_Module_Mqtt_Conn_Handler},
				},
				.urcQueueCount =13,
		};
	ATCMD_Add_Urc_Queue(&urcQueueStruct);
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fed8 	bl	8005868 <ATCMD_Add_Urc_Queue>
}
 8002ab8:	bf00      	nop
 8002aba:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	0800997c 	.word	0x0800997c
 8002ac8:	0800999c 	.word	0x0800999c
 8002acc:	080025e1 	.word	0x080025e1
 8002ad0:	080099bc 	.word	0x080099bc
 8002ad4:	080099dc 	.word	0x080099dc
 8002ad8:	080099fc 	.word	0x080099fc
 8002adc:	0800263d 	.word	0x0800263d
 8002ae0:	08009a1c 	.word	0x08009a1c
 8002ae4:	08009a3c 	.word	0x08009a3c
 8002ae8:	08009a5c 	.word	0x08009a5c
 8002aec:	08009a7c 	.word	0x08009a7c
 8002af0:	0800267d 	.word	0x0800267d
 8002af4:	08009a9c 	.word	0x08009a9c
 8002af8:	08009abc 	.word	0x08009abc
 8002afc:	08009adc 	.word	0x08009adc
 8002b00:	08002759 	.word	0x08002759
 8002b04:	08009afc 	.word	0x08009afc

08002b08 <ATCMD_A7672_Module_Ready>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Module_Ready( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0d6      	sub	sp, #344	@ 0x158
 8002b0c:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint8_t volatile retVal = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
	atcmd_at_command_t atCommand[2] = {
 8002b1a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002b1e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b22:	4a1e      	ldr	r2, [pc, #120]	@ (8002b9c <ATCMD_A7672_Module_Ready+0x94>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	4611      	mov	r1, r2
 8002b28:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f006 fda1 	bl	8009674 <memcpy>
			{"ATE0"ATCMD_CMD_END, NULL, 2, 120, ATCMD_CMD1_OK},
			{"AT"ATCMD_CMD_END, NULL, 0, 3, ATCMD_CMD2_OK},
	};

	ATCMD_AT_Command_Queue_Init();
 8002b32:	f002 fd05 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <ATCMD_A7672_Module_Ready+0x98>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 2);
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2102      	movs	r1, #2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fe02 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	g_cmdQueue.cmdQueueWrite = 0;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <ATCMD_A7672_Module_Ready+0x98>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8002b56:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d112      	bne.n	8002b86 <ATCMD_A7672_Module_Ready+0x7e>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8002b60:	bf00      	nop
 8002b62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <ATCMD_A7672_Module_Ready+0x98>)
 8002b64:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1fa      	bne.n	8002b62 <ATCMD_A7672_Module_Ready+0x5a>
		if( ATCMD_CMD2_OK == g_cmdQueue.currentCmdStatus )
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <ATCMD_A7672_Module_Ready+0x98>)
 8002b6e:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d103      	bne.n	8002b7e <ATCMD_A7672_Module_Ready+0x76>
		{
			retVal = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
 8002b7c:	e006      	b.n	8002b8c <ATCMD_A7672_Module_Ready+0x84>
		}
		else
			retVal = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
 8002b84:	e002      	b.n	8002b8c <ATCMD_A7672_Module_Ready+0x84>
	}
	else
		retVal = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156

	return retVal;
 8002b8c:	f897 3156 	ldrb.w	r3, [r7, #342]	@ 0x156
 8002b90:	b2db      	uxtb	r3, r3
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	08009b1c 	.word	0x08009b1c
 8002ba0:	200007a4 	.word	0x200007a4

08002ba4 <ATCMD_A7672_Get_NTP_HostName>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Get_NTP_HostName( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0d6      	sub	sp, #344	@ 0x158
 8002ba8:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8002baa:	2302      	movs	r3, #2
 8002bac:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	uint8_t volatile retVal = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156

	atcmd_at_command_t atCommand[] = {
 8002bb6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002bba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c38 <ATCMD_A7672_Get_NTP_HostName+0x94>)
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f006 fd53 	bl	8009674 <memcpy>

			{"AT+CTZU=1"ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD1_OK},
			{"AT+CNTP?"ATCMD_CMD_END, ATCMD_CNTP_Callback, 0, 120, ATCMD_CMD2_OK},
	};

	ATCMD_AT_Command_Queue_Init();
 8002bce:	f002 fcb7 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <ATCMD_A7672_Get_NTP_HostName+0x98>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 2);
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 fdb4 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
	g_cmdQueue.cmdQueueWrite = 0;
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <ATCMD_A7672_Get_NTP_HostName+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8002bf2:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d112      	bne.n	8002c22 <ATCMD_A7672_Get_NTP_HostName+0x7e>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8002bfc:	bf00      	nop
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <ATCMD_A7672_Get_NTP_HostName+0x98>)
 8002c00:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1fa      	bne.n	8002bfe <ATCMD_A7672_Get_NTP_HostName+0x5a>
		if( ATCMD_CMD2_OK == g_cmdQueue.currentCmdStatus )
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <ATCMD_A7672_Get_NTP_HostName+0x98>)
 8002c0a:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <ATCMD_A7672_Get_NTP_HostName+0x76>
		{
			retVal = 1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
 8002c18:	e006      	b.n	8002c28 <ATCMD_A7672_Get_NTP_HostName+0x84>
		}
		else
			retVal = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156
 8002c20:	e002      	b.n	8002c28 <ATCMD_A7672_Get_NTP_HostName+0x84>
	}
	else
		retVal = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f887 3156 	strb.w	r3, [r7, #342]	@ 0x156

	return retVal;
 8002c28:	f897 3156 	ldrb.w	r3, [r7, #342]	@ 0x156
 8002c2c:	b2db      	uxtb	r3, r3
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	08009c6c 	.word	0x08009c6c
 8002c3c:	200007a4 	.word	0x200007a4

08002c40 <ATCMD_A7672_Update_Modem_DateTime>:
* <tr><td> 13/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Update_Modem_DateTime( void ){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b0ac      	sub	sp, #176	@ 0xb0
 8002c44:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8002c46:	2302      	movs	r3, #2
 8002c48:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
//	char i = 0;
	atcmd_at_command_t atCommand[1] = {
 8002c52:	4a24      	ldr	r2, [pc, #144]	@ (8002ce4 <ATCMD_A7672_Update_Modem_DateTime+0xa4>)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4611      	mov	r1, r2
 8002c58:	22a8      	movs	r2, #168	@ 0xa8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 fd0a 	bl	8009674 <memcpy>
			{"AT+CNTP=\"216.239.35.8\",32", NULL, 0, 3, ATCMD_CMD1_OK},
	};

//	strcat((char*)atCommand[0].atCmd, ntpHostName);
	strcat((char*)atCommand[0].atCmd, ATCMD_CMD_END);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fab2 	bl	80001cc <strlen>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce8 <ATCMD_A7672_Update_Modem_DateTime+0xa8>)
 8002c72:	8811      	ldrh	r1, [r2, #0]
 8002c74:	7892      	ldrb	r2, [r2, #2]
 8002c76:	8019      	strh	r1, [r3, #0]
 8002c78:	709a      	strb	r2, [r3, #2]
	ATCMD_AT_Command_Queue_Init();
 8002c7a:	f002 fc61 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <ATCMD_A7672_Update_Modem_DateTime+0xac>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fd5e 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8002c96:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <ATCMD_A7672_Update_Modem_DateTime+0xac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status ){
 8002c9e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d112      	bne.n	8002cce <ATCMD_A7672_Update_Modem_DateTime+0x8e>
		while( 0 != g_cmdQueue.commandCount ){}
 8002ca8:	bf00      	nop
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <ATCMD_A7672_Update_Modem_DateTime+0xac>)
 8002cac:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1fa      	bne.n	8002caa <ATCMD_A7672_Update_Modem_DateTime+0x6a>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus ){
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <ATCMD_A7672_Update_Modem_DateTime+0xac>)
 8002cb6:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d103      	bne.n	8002cc6 <ATCMD_A7672_Update_Modem_DateTime+0x86>
			retVal = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002cc4:	e006      	b.n	8002cd4 <ATCMD_A7672_Update_Modem_DateTime+0x94>
		}
		else
			retVal = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002ccc:	e002      	b.n	8002cd4 <ATCMD_A7672_Update_Modem_DateTime+0x94>
	}
	else
		retVal = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	return retVal;
 8002cd4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002cd8:	b2db      	uxtb	r3, r3
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	37b0      	adds	r7, #176	@ 0xb0
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08009e68 	.word	0x08009e68
 8002ce8:	08009e64 	.word	0x08009e64
 8002cec:	200007a4 	.word	0x200007a4

08002cf0 <ATCMD_A7672_Get_DateTime>:
* <tr><td> 13/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Get_DateTime( void ){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0ac      	sub	sp, #176	@ 0xb0
 8002cf4:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 8002d02:	4a23      	ldr	r2, [pc, #140]	@ (8002d90 <ATCMD_A7672_Get_DateTime+0xa0>)
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	4611      	mov	r1, r2
 8002d08:	22a8      	movs	r2, #168	@ 0xa8
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 fcb2 	bl	8009674 <memcpy>
			{"AT+CCLK?"ATCMD_CMD_END, ATCMD_GetDateTime_Callback, 0, 120, ATCMD_CMD1_OK},
	};
	ATCMD_AT_Command_Queue_Init();
 8002d10:	f002 fc16 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <ATCMD_A7672_Get_DateTime+0xa4>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8002d1c:	1d3b      	adds	r3, r7, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 fd13 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <ATCMD_A7672_Get_DateTime+0xa4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status ){
 8002d34:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d11e      	bne.n	8002d7c <ATCMD_A7672_Get_DateTime+0x8c>
		while( 0 != g_cmdQueue.commandCount ){}
 8002d3e:	bf00      	nop
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <ATCMD_A7672_Get_DateTime+0xa4>)
 8002d42:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1fa      	bne.n	8002d40 <ATCMD_A7672_Get_DateTime+0x50>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus ){
 8002d4a:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <ATCMD_A7672_Get_DateTime+0xa4>)
 8002d4c:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10f      	bne.n	8002d74 <ATCMD_A7672_Get_DateTime+0x84>
			if(!strncmp(dateTime,"70/01/01,00",11))
 8002d54:	220b      	movs	r2, #11
 8002d56:	4910      	ldr	r1, [pc, #64]	@ (8002d98 <ATCMD_A7672_Get_DateTime+0xa8>)
 8002d58:	4810      	ldr	r0, [pc, #64]	@ (8002d9c <ATCMD_A7672_Get_DateTime+0xac>)
 8002d5a:	f006 fc3a 	bl	80095d2 <strncmp>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <ATCMD_A7672_Get_DateTime+0x7c>
				retVal = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002d6a:	e00a      	b.n	8002d82 <ATCMD_A7672_Get_DateTime+0x92>
			else
				retVal = 1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002d72:	e006      	b.n	8002d82 <ATCMD_A7672_Get_DateTime+0x92>
		}
		else
			retVal = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8002d7a:	e002      	b.n	8002d82 <ATCMD_A7672_Get_DateTime+0x92>
	}
	else
		retVal = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	return retVal;
 8002d82:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	37b0      	adds	r7, #176	@ 0xb0
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08009f1c 	.word	0x08009f1c
 8002d94:	200007a4 	.word	0x200007a4
 8002d98:	08009f10 	.word	0x08009f10
 8002d9c:	2000076c 	.word	0x2000076c

08002da0 <ATCMD_A7672_Module_Check>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Module_Check( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 8002da6:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	uint8_t volatile retVal = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6

	atcmd_at_command_t atCommand[4] = {
 8002db4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002db8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <ATCMD_A7672_Module_Check+0x98>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f006 fc54 	bl	8009674 <memcpy>
			{"AT+CREG?"ATCMD_CMD_END, ATCMD_Creg_Status_Callback, 0, 3, ATCMD_CMD2_OK},
			{"AT+CMGF=1"ATCMD_CMD_END, NULL, 0, 3, ATCMD_CMD3_OK},
			{"AT+CMGD=1,4"ATCMD_CMD_END, NULL, 0, 3, ATCMD_CMD4_OK},
	};

	ATCMD_AT_Command_Queue_Init();
 8002dcc:	f002 fbb8 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <ATCMD_A7672_Module_Check+0x9c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 4);
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2104      	movs	r1, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fcb5 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	g_cmdQueue.cmdQueueWrite = 0;
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <ATCMD_A7672_Module_Check+0x9c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8002df0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d112      	bne.n	8002e20 <ATCMD_A7672_Module_Check+0x80>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8002dfa:	bf00      	nop
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e3c <ATCMD_A7672_Module_Check+0x9c>)
 8002dfe:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1fa      	bne.n	8002dfc <ATCMD_A7672_Module_Check+0x5c>
		if( ATCMD_CMD4_OK == g_cmdQueue.currentCmdStatus )
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <ATCMD_A7672_Module_Check+0x9c>)
 8002e08:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d103      	bne.n	8002e18 <ATCMD_A7672_Module_Check+0x78>
		{
			retVal = 1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
 8002e16:	e006      	b.n	8002e26 <ATCMD_A7672_Module_Check+0x86>
		}
		else
			retVal = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
 8002e1e:	e002      	b.n	8002e26 <ATCMD_A7672_Module_Check+0x86>
	}
	else
		retVal = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6

	return retVal;
 8002e26:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 8002e2a:	b2db      	uxtb	r3, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	0800a06c 	.word	0x0800a06c
 8002e3c:	200007a4 	.word	0x200007a4

08002e40 <ATCMD_A7672_HTTP_Set_DevName>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Set_DevName( const char* devName)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	if( devName == NULL )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <ATCMD_A7672_HTTP_Set_DevName+0x12>
	{
		return 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e009      	b.n	8002e66 <ATCMD_A7672_HTTP_Set_DevName+0x26>
	}
	memset(s_httpCredentials.devName, '\0', sizeof(s_httpCredentials.devName));
 8002e52:	2211      	movs	r2, #17
 8002e54:	2100      	movs	r1, #0
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <ATCMD_A7672_HTTP_Set_DevName+0x30>)
 8002e58:	f006 fb97 	bl	800958a <memset>
	strcat((char*)s_httpCredentials.devName, devName);
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4804      	ldr	r0, [pc, #16]	@ (8002e70 <ATCMD_A7672_HTTP_Set_DevName+0x30>)
 8002e60:	f006 fb9b 	bl	800959a <strcat>
//	strcat((char*)s_httpCredentials.devName, "\"");
	return 1;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003f8 	.word	0x200003f8

08002e74 <ATCMD_A7672_HTTP_Get_DevName>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t * ATCMD_A7672_HTTP_Get_DevName( void )
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
	return &s_httpCredentials.devName[0];
 8002e78:	4b02      	ldr	r3, [pc, #8]	@ (8002e84 <ATCMD_A7672_HTTP_Get_DevName+0x10>)
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	200003f8 	.word	0x200003f8

08002e88 <ATCMD_A7672_HTTP_Set_CertURL>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Set_CertURL( const char* certURL )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	if( NULL == certURL )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <ATCMD_A7672_HTTP_Set_CertURL+0x12>
	{
		return 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e019      	b.n	8002ece <ATCMD_A7672_HTTP_Set_CertURL+0x46>
	}
	memset(s_httpCredentials.certURL, '\0', sizeof(s_httpCredentials.certURL));
 8002e9a:	2264      	movs	r2, #100	@ 0x64
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	480e      	ldr	r0, [pc, #56]	@ (8002ed8 <ATCMD_A7672_HTTP_Set_CertURL+0x50>)
 8002ea0:	f006 fb73 	bl	800958a <memset>
	strcpy((char*)s_httpCredentials.certURL, "\"");
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <ATCMD_A7672_HTTP_Set_CertURL+0x50>)
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <ATCMD_A7672_HTTP_Set_CertURL+0x54>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	8013      	strh	r3, [r2, #0]
	strcat((char*)s_httpCredentials.certURL, certURL);
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	480a      	ldr	r0, [pc, #40]	@ (8002ed8 <ATCMD_A7672_HTTP_Set_CertURL+0x50>)
 8002eb0:	f006 fb73 	bl	800959a <strcat>
	strcat((char*)s_httpCredentials.certURL, "\"");
 8002eb4:	4808      	ldr	r0, [pc, #32]	@ (8002ed8 <ATCMD_A7672_HTTP_Set_CertURL+0x50>)
 8002eb6:	f7fd f989 	bl	80001cc <strlen>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <ATCMD_A7672_HTTP_Set_CertURL+0x50>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4906      	ldr	r1, [pc, #24]	@ (8002edc <ATCMD_A7672_HTTP_Set_CertURL+0x54>)
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	8013      	strh	r3, [r2, #0]
	return 1;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000409 	.word	0x20000409
 8002edc:	0800a30c 	.word	0x0800a30c

08002ee0 <ATCMD_A7672_HTTP_Set_PrivKeyURL>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Set_PrivKeyURL( const char* privKeyURL )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	if( NULL == privKeyURL )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x12>
	{
		return 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e021      	b.n	8002f36 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x56>
	}
	memset(s_httpCredentials.privKeyURL, '\0', sizeof(s_httpCredentials.privKeyURL));
 8002ef2:	2264      	movs	r2, #100	@ 0x64
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4812      	ldr	r0, [pc, #72]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002ef8:	f006 fb47 	bl	800958a <memset>
	strcat((char*)s_httpCredentials.privKeyURL, "\"");
 8002efc:	4810      	ldr	r0, [pc, #64]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002efe:	f7fd f965 	bl	80001cc <strlen>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002f08:	4413      	add	r3, r2
 8002f0a:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x64>)
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	8013      	strh	r3, [r2, #0]
	strcat((char*)s_httpCredentials.privKeyURL, privKeyURL);
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	480a      	ldr	r0, [pc, #40]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002f18:	f006 fb3f 	bl	800959a <strcat>
	strcat((char*)s_httpCredentials.privKeyURL, "\"");
 8002f1c:	4808      	ldr	r0, [pc, #32]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002f1e:	f7fd f955 	bl	80001cc <strlen>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x60>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	4906      	ldr	r1, [pc, #24]	@ (8002f44 <ATCMD_A7672_HTTP_Set_PrivKeyURL+0x64>)
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	460b      	mov	r3, r1
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	8013      	strh	r3, [r2, #0]
	return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000046d 	.word	0x2000046d
 8002f44:	0800a30c 	.word	0x0800a30c

08002f48 <ATCMD_A7672_HTTP_Set_DevProvURL>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Set_DevProvURL( const char* devProvURL )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	if( NULL == devProvURL )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <ATCMD_A7672_HTTP_Set_DevProvURL+0x12>
	{
		return 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e021      	b.n	8002f9e <ATCMD_A7672_HTTP_Set_DevProvURL+0x56>
	}
	memset( s_httpCredentials.devProvURL, '\0', sizeof(s_httpCredentials.devProvURL));
 8002f5a:	2264      	movs	r2, #100	@ 0x64
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4812      	ldr	r0, [pc, #72]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f60:	f006 fb13 	bl	800958a <memset>
	strcat((char*)s_httpCredentials.devProvURL, "\"");
 8002f64:	4810      	ldr	r0, [pc, #64]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f66:	f7fd f931 	bl	80001cc <strlen>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f70:	4413      	add	r3, r2
 8002f72:	490e      	ldr	r1, [pc, #56]	@ (8002fac <ATCMD_A7672_HTTP_Set_DevProvURL+0x64>)
 8002f74:	461a      	mov	r2, r3
 8002f76:	460b      	mov	r3, r1
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	8013      	strh	r3, [r2, #0]
	strcat((char*)s_httpCredentials.devProvURL, devProvURL);
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	480a      	ldr	r0, [pc, #40]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f80:	f006 fb0b 	bl	800959a <strcat>
	strcat((char*)s_httpCredentials.devProvURL, "\"");
 8002f84:	4808      	ldr	r0, [pc, #32]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f86:	f7fd f921 	bl	80001cc <strlen>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <ATCMD_A7672_HTTP_Set_DevProvURL+0x60>)
 8002f90:	4413      	add	r3, r2
 8002f92:	4906      	ldr	r1, [pc, #24]	@ (8002fac <ATCMD_A7672_HTTP_Set_DevProvURL+0x64>)
 8002f94:	461a      	mov	r2, r3
 8002f96:	460b      	mov	r3, r1
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	8013      	strh	r3, [r2, #0]
	return 1;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000535 	.word	0x20000535
 8002fac:	0800a30c 	.word	0x0800a30c

08002fb0 <ATCMD_A7672_HTTP_Set_RootCAURL>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Set_RootCAURL( const char* rootCAURL )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	if( NULL == rootCAURL )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <ATCMD_A7672_HTTP_Set_RootCAURL+0x12>
	{
		return 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e021      	b.n	8003006 <ATCMD_A7672_HTTP_Set_RootCAURL+0x56>
	}
	memset( s_httpCredentials.rootCaURL, '\0', sizeof(s_httpCredentials.rootCaURL));
 8002fc2:	2264      	movs	r2, #100	@ 0x64
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4812      	ldr	r0, [pc, #72]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002fc8:	f006 fadf 	bl	800958a <memset>
	strcat((char*)s_httpCredentials.rootCaURL, "\"");
 8002fcc:	4810      	ldr	r0, [pc, #64]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002fce:	f7fd f8fd 	bl	80001cc <strlen>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002fd8:	4413      	add	r3, r2
 8002fda:	490e      	ldr	r1, [pc, #56]	@ (8003014 <ATCMD_A7672_HTTP_Set_RootCAURL+0x64>)
 8002fdc:	461a      	mov	r2, r3
 8002fde:	460b      	mov	r3, r1
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	8013      	strh	r3, [r2, #0]
	strcat((char*)s_httpCredentials.rootCaURL, rootCAURL);
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	480a      	ldr	r0, [pc, #40]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002fe8:	f006 fad7 	bl	800959a <strcat>
	strcat((char*)s_httpCredentials.rootCaURL, "\"");
 8002fec:	4808      	ldr	r0, [pc, #32]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002fee:	f7fd f8ed 	bl	80001cc <strlen>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <ATCMD_A7672_HTTP_Set_RootCAURL+0x60>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4906      	ldr	r1, [pc, #24]	@ (8003014 <ATCMD_A7672_HTTP_Set_RootCAURL+0x64>)
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	460b      	mov	r3, r1
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	8013      	strh	r3, [r2, #0]
	return 1;
 8003004:	2301      	movs	r3, #1
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000599 	.word	0x20000599
 8003014:	0800a30c 	.word	0x0800a30c

08003018 <ATCMD_A7672_MQTT_Set_URL>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTT_Set_URL(const char* mqttUrl)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	if (NULL == mqttUrl)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <ATCMD_A7672_MQTT_Set_URL+0x12>
		return 0;
 8003026:	2300      	movs	r3, #0
 8003028:	e00e      	b.n	8003048 <ATCMD_A7672_MQTT_Set_URL+0x30>
	memset(s_mqttCredentials.mqttURL,'\0', sizeof(s_mqttCredentials.mqttURL));
 800302a:	2264      	movs	r2, #100	@ 0x64
 800302c:	2100      	movs	r1, #0
 800302e:	4808      	ldr	r0, [pc, #32]	@ (8003050 <ATCMD_A7672_MQTT_Set_URL+0x38>)
 8003030:	f006 faab 	bl	800958a <memset>
	strncpy((char*)s_mqttCredentials.mqttURL, mqttUrl, strlen(mqttUrl));
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd f8c9 	bl	80001cc <strlen>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4803      	ldr	r0, [pc, #12]	@ (8003050 <ATCMD_A7672_MQTT_Set_URL+0x38>)
 8003042:	f006 fad8 	bl	80095f6 <strncpy>
	return 1;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2000060c 	.word	0x2000060c

08003054 <ATCMD_A7672_MQTT_Set_Port>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTT_Set_Port(const char* mqttPort)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	if (NULL == mqttPort)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <ATCMD_A7672_MQTT_Set_Port+0x12>
		return 0;
 8003062:	2300      	movs	r3, #0
 8003064:	e00e      	b.n	8003084 <ATCMD_A7672_MQTT_Set_Port+0x30>
	memset(s_mqttCredentials.mqttPort,'\0', sizeof(s_mqttCredentials.mqttPort));
 8003066:	220a      	movs	r2, #10
 8003068:	2100      	movs	r1, #0
 800306a:	4808      	ldr	r0, [pc, #32]	@ (800308c <ATCMD_A7672_MQTT_Set_Port+0x38>)
 800306c:	f006 fa8d 	bl	800958a <memset>
	strncpy((char*)s_mqttCredentials.mqttPort, mqttPort, strlen(mqttPort));
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd f8ab 	bl	80001cc <strlen>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4803      	ldr	r0, [pc, #12]	@ (800308c <ATCMD_A7672_MQTT_Set_Port+0x38>)
 800307e:	f006 faba 	bl	80095f6 <strncpy>
	return 1;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000670 	.word	0x20000670

08003090 <ATCMD_A7672_MQTT_Set_SubTopic>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTT_Set_SubTopic(const char* mqttSubTopic)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	if (NULL == mqttSubTopic)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <ATCMD_A7672_MQTT_Set_SubTopic+0x12>
		return 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	e00e      	b.n	80030c0 <ATCMD_A7672_MQTT_Set_SubTopic+0x30>
	memset(s_mqttCredentials.mqttSubTopic,'\0', sizeof(s_mqttCredentials.mqttSubTopic));
 80030a2:	2264      	movs	r2, #100	@ 0x64
 80030a4:	2100      	movs	r1, #0
 80030a6:	4808      	ldr	r0, [pc, #32]	@ (80030c8 <ATCMD_A7672_MQTT_Set_SubTopic+0x38>)
 80030a8:	f006 fa6f 	bl	800958a <memset>
	strncpy((char*)s_mqttCredentials.mqttSubTopic, mqttSubTopic, strlen(mqttSubTopic));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd f88d 	bl	80001cc <strlen>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4803      	ldr	r0, [pc, #12]	@ (80030c8 <ATCMD_A7672_MQTT_Set_SubTopic+0x38>)
 80030ba:	f006 fa9c 	bl	80095f6 <strncpy>
	return 1;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	2000067a 	.word	0x2000067a

080030cc <ATCMD_A7672_MQTT_Get_SubTopic>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t* ATCMD_A7672_MQTT_Get_SubTopic( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
	return &s_mqttCredentials.mqttSubTopic[0];
 80030d0:	4b02      	ldr	r3, [pc, #8]	@ (80030dc <ATCMD_A7672_MQTT_Get_SubTopic+0x10>)
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	2000067a 	.word	0x2000067a

080030e0 <ATCMD_A7672_MQTT_Set_PubTopic>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTT_Set_PubTopic(const char* mqttPubTopic)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	if (NULL == mqttPubTopic)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <ATCMD_A7672_MQTT_Set_PubTopic+0x12>
		return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e00e      	b.n	8003110 <ATCMD_A7672_MQTT_Set_PubTopic+0x30>
	memset(s_mqttCredentials.mqttPubTopic,'\0', sizeof(s_mqttCredentials.mqttPubTopic));
 80030f2:	2264      	movs	r2, #100	@ 0x64
 80030f4:	2100      	movs	r1, #0
 80030f6:	4808      	ldr	r0, [pc, #32]	@ (8003118 <ATCMD_A7672_MQTT_Set_PubTopic+0x38>)
 80030f8:	f006 fa47 	bl	800958a <memset>
	strncpy((char*)s_mqttCredentials.mqttPubTopic, mqttPubTopic, strlen(mqttPubTopic));
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd f865 	bl	80001cc <strlen>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4803      	ldr	r0, [pc, #12]	@ (8003118 <ATCMD_A7672_MQTT_Set_PubTopic+0x38>)
 800310a:	f006 fa74 	bl	80095f6 <strncpy>
	return 1;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200006de 	.word	0x200006de

0800311c <ATCMD_A7672_MQTT_Get_PubTopic>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t* ATCMD_A7672_MQTT_Get_PubTopic( void )
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
	return &s_mqttCredentials.mqttPubTopic[0];
 8003120:	4b02      	ldr	r3, [pc, #8]	@ (800312c <ATCMD_A7672_MQTT_Get_PubTopic+0x10>)
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	200006de 	.word	0x200006de

08003130 <ATCMD_A7672_MQTT_Get_Connection_Status>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
mqtt_conn_status_t ATCMD_A7672_MQTT_Get_Connection_Status( void )
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
	return s_mqttCredentials.connectionStatus;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <ATCMD_A7672_MQTT_Get_Connection_Status+0x14>)
 8003136:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	2000060c 	.word	0x2000060c

08003148 <ATCMD_A7672_MQTT_Set_Connection_Status>:
 * </table><br><br>
 * <hr>
 *
 *******************************************************************************/
 void ATCMD_A7672_MQTT_Set_Connection_Status( mqtt_conn_status_t conn_status)
 {
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
 	s_mqttCredentials.connectionStatus = conn_status;
 8003152:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <ATCMD_A7672_MQTT_Set_Connection_Status+0x20>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f882 313c 	strb.w	r3, [r2, #316]	@ 0x13c
 }
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	2000060c 	.word	0x2000060c

0800316c <ATCMD_A7672_Register_Message_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_A7672_Register_Message_Callback(msg_handler_t msg_handler)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	s_mqttCredentials.msg_handler = msg_handler;
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <ATCMD_A7672_Register_Message_Callback+0x1c>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	2000060c 	.word	0x2000060c

0800318c <ATCMD_A7672_Resgister_Status_Send_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_A7672_Resgister_Status_Send_Callback(status_timeout_handler_t timeout_handler, uint32_t timeout_mins)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
	s_mqttCredentials.timeout_handler = timeout_handler;
 8003196:	4a0c      	ldr	r2, [pc, #48]	@ (80031c8 <ATCMD_A7672_Resgister_Status_Send_Callback+0x3c>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
	s_mqttCredentials.status_timeout = timeout_mins*60;
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <ATCMD_A7672_Resgister_Status_Send_Callback+0x3c>)
 80031ac:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
	g_pingTimeout = s_mqttCredentials.status_timeout;
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <ATCMD_A7672_Resgister_Status_Send_Callback+0x3c>)
 80031b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <ATCMD_A7672_Resgister_Status_Send_Callback+0x40>)
 80031b8:	6013      	str	r3, [r2, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	2000060c 	.word	0x2000060c
 80031cc:	20000754 	.word	0x20000754

080031d0 <ATCMD_A7672_Register_Error_Callback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_A7672_Register_Error_Callback(modem_error_handler_t error_handler, uint8_t errorCount)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
	g_modemErrorStatus.errorCountThreshold = errorCount;
 80031dc:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <ATCMD_A7672_Register_Error_Callback+0x24>)
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	7013      	strb	r3, [r2, #0]
	g_modemErrorStatus.modem_error_handler = error_handler;
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <ATCMD_A7672_Register_Error_Callback+0x24>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6053      	str	r3, [r2, #4]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	20000784 	.word	0x20000784

080031f8 <ATCMD_A7672_Module_On>:
* <hr>
*
*******************************************************************************/

uint8_t ATCMD_A7672_Module_On(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	Gpio_Set(A7672_POWER_GPIO, A7672_POWER_PIN);
 80031fc:	210b      	movs	r1, #11
 80031fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003202:	f004 fa51 	bl	80076a8 <Gpio_Set>
	if(Gpio_Read(A7672_POWER_STATUS_GPIO, A7672_POWER_STATUS_PIN)==1)
 8003206:	2107      	movs	r1, #7
 8003208:	4807      	ldr	r0, [pc, #28]	@ (8003228 <ATCMD_A7672_Module_On+0x30>)
 800320a:	f004 fa80 	bl	800770e <Gpio_Read>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <ATCMD_A7672_Module_On+0x2a>
	{
		Gpio_Clear(A7672_POWER_GPIO, A7672_POWER_PIN);
 8003214:	210b      	movs	r1, #11
 8003216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800321a:	f004 fa5e 	bl	80076da <Gpio_Clear>
		return 1;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <ATCMD_A7672_Module_On+0x2c>
	}
	else
		return 0;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	48000800 	.word	0x48000800

0800322c <ATCMD_A7672_Provision_Device>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Provision_Device( void )
{
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	f2ad 4da4 	subw	sp, sp, #1188	@ 0x4a4
 8003232:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8003234:	2302      	movs	r3, #2
 8003236:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
	uint8_t volatile retVal = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	f887 349e 	strb.w	r3, [r7, #1182]	@ 0x49e

	atcmd_at_command_t atCommand[7] = {
 8003240:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003244:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003248:	4618      	mov	r0, r3
 800324a:	f44f 6393 	mov.w	r3, #1176	@ 0x498
 800324e:	461a      	mov	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	f006 f99a 	bl	800958a <memset>
 8003256:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800325a:	f2a3 459c 	subw	r5, r3, #1180	@ 0x49c
 800325e:	4ac4      	ldr	r2, [pc, #784]	@ (8003570 <ATCMD_A7672_Provision_Device+0x344>)
 8003260:	462b      	mov	r3, r5
 8003262:	4614      	mov	r4, r2
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	6861      	ldr	r1, [r4, #4]
 8003268:	68a2      	ldr	r2, [r4, #8]
 800326a:	c307      	stmia	r3!, {r0, r1, r2}
 800326c:	89a2      	ldrh	r2, [r4, #12]
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	f105 030e 	add.w	r3, r5, #14
 8003274:	2288      	movs	r2, #136	@ 0x88
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f006 f986 	bl	800958a <memset>
 800327e:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003282:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003286:	2278      	movs	r2, #120	@ 0x78
 8003288:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800328c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003290:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003294:	2201      	movs	r2, #1
 8003296:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800329a:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800329e:	f2a3 469c 	subw	r6, r3, #1180	@ 0x49c
 80032a2:	4bb4      	ldr	r3, [pc, #720]	@ (8003574 <ATCMD_A7672_Provision_Device+0x348>)
 80032a4:	f106 04a8 	add.w	r4, r6, #168	@ 0xa8
 80032a8:	461d      	mov	r5, r3
 80032aa:	6828      	ldr	r0, [r5, #0]
 80032ac:	6869      	ldr	r1, [r5, #4]
 80032ae:	68aa      	ldr	r2, [r5, #8]
 80032b0:	68eb      	ldr	r3, [r5, #12]
 80032b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b4:	8a2b      	ldrh	r3, [r5, #16]
 80032b6:	7caa      	ldrb	r2, [r5, #18]
 80032b8:	8023      	strh	r3, [r4, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	70a3      	strb	r3, [r4, #2]
 80032be:	f106 03bb 	add.w	r3, r6, #187	@ 0xbb
 80032c2:	2283      	movs	r2, #131	@ 0x83
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f006 f95f 	bl	800958a <memset>
 80032cc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80032d0:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80032d4:	2278      	movs	r2, #120	@ 0x78
 80032d6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 80032da:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80032de:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 80032e8:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80032ec:	f2a3 469c 	subw	r6, r3, #1180	@ 0x49c
 80032f0:	4ba1      	ldr	r3, [pc, #644]	@ (8003578 <ATCMD_A7672_Provision_Device+0x34c>)
 80032f2:	f506 74a8 	add.w	r4, r6, #336	@ 0x150
 80032f6:	461d      	mov	r5, r3
 80032f8:	6828      	ldr	r0, [r5, #0]
 80032fa:	6869      	ldr	r1, [r5, #4]
 80032fc:	68aa      	ldr	r2, [r5, #8]
 80032fe:	68eb      	ldr	r3, [r5, #12]
 8003300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003302:	6928      	ldr	r0, [r5, #16]
 8003304:	6969      	ldr	r1, [r5, #20]
 8003306:	c403      	stmia	r4!, {r0, r1}
 8003308:	f506 73b4 	add.w	r3, r6, #360	@ 0x168
 800330c:	227e      	movs	r2, #126	@ 0x7e
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f006 f93a 	bl	800958a <memset>
 8003316:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800331a:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 800331e:	2278      	movs	r2, #120	@ 0x78
 8003320:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 8003324:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003328:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 800332c:	2203      	movs	r2, #3
 800332e:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
 8003332:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003336:	f2a3 469c 	subw	r6, r3, #1180	@ 0x49c
 800333a:	4b8f      	ldr	r3, [pc, #572]	@ (8003578 <ATCMD_A7672_Provision_Device+0x34c>)
 800333c:	f506 74fc 	add.w	r4, r6, #504	@ 0x1f8
 8003340:	461d      	mov	r5, r3
 8003342:	6828      	ldr	r0, [r5, #0]
 8003344:	6869      	ldr	r1, [r5, #4]
 8003346:	68aa      	ldr	r2, [r5, #8]
 8003348:	68eb      	ldr	r3, [r5, #12]
 800334a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334c:	6928      	ldr	r0, [r5, #16]
 800334e:	6969      	ldr	r1, [r5, #20]
 8003350:	c403      	stmia	r4!, {r0, r1}
 8003352:	f506 7304 	add.w	r3, r6, #528	@ 0x210
 8003356:	227e      	movs	r2, #126	@ 0x7e
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f006 f915 	bl	800958a <memset>
 8003360:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003364:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003368:	2278      	movs	r2, #120	@ 0x78
 800336a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 800336e:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003372:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003376:	2204      	movs	r2, #4
 8003378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 800337c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003380:	f2a3 469c 	subw	r6, r3, #1180	@ 0x49c
 8003384:	4b7c      	ldr	r3, [pc, #496]	@ (8003578 <ATCMD_A7672_Provision_Device+0x34c>)
 8003386:	f506 7428 	add.w	r4, r6, #672	@ 0x2a0
 800338a:	461d      	mov	r5, r3
 800338c:	6828      	ldr	r0, [r5, #0]
 800338e:	6869      	ldr	r1, [r5, #4]
 8003390:	68aa      	ldr	r2, [r5, #8]
 8003392:	68eb      	ldr	r3, [r5, #12]
 8003394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003396:	6928      	ldr	r0, [r5, #16]
 8003398:	6969      	ldr	r1, [r5, #20]
 800339a:	c403      	stmia	r4!, {r0, r1}
 800339c:	f506 732e 	add.w	r3, r6, #696	@ 0x2b8
 80033a0:	227e      	movs	r2, #126	@ 0x7e
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f006 f8f0 	bl	800958a <memset>
 80033aa:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033ae:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80033b2:	2278      	movs	r2, #120	@ 0x78
 80033b4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 80033b8:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033bc:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80033c0:	2205      	movs	r2, #5
 80033c2:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
 80033c6:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033ca:	f2a3 469c 	subw	r6, r3, #1180	@ 0x49c
 80033ce:	4b6b      	ldr	r3, [pc, #428]	@ (800357c <ATCMD_A7672_Provision_Device+0x350>)
 80033d0:	f506 7452 	add.w	r4, r6, #840	@ 0x348
 80033d4:	461d      	mov	r5, r3
 80033d6:	6828      	ldr	r0, [r5, #0]
 80033d8:	6869      	ldr	r1, [r5, #4]
 80033da:	68aa      	ldr	r2, [r5, #8]
 80033dc:	68eb      	ldr	r3, [r5, #12]
 80033de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e0:	8a2b      	ldrh	r3, [r5, #16]
 80033e2:	8023      	strh	r3, [r4, #0]
 80033e4:	f206 335a 	addw	r3, r6, #858	@ 0x35a
 80033e8:	2284      	movs	r2, #132	@ 0x84
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f006 f8cc 	bl	800958a <memset>
 80033f2:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80033f6:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80033fa:	4a61      	ldr	r2, [pc, #388]	@ (8003580 <ATCMD_A7672_Provision_Device+0x354>)
 80033fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
 8003400:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003404:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003408:	2278      	movs	r2, #120	@ 0x78
 800340a:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
 800340e:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8003412:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8003416:	2206      	movs	r2, #6
 8003418:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD3_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD4_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD5_OK},
			{"AT+HTTPACTION=1"ATCMD_CMD_END, ATCMD_HttpAction_Get_Callback,0, 120, ATCMD_CMD6_OK},
	};
	strcat((char*)atCommand[1].atCmd, (char*)s_httpCredentials.devProvURL);
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	33a8      	adds	r3, #168	@ 0xa8
 8003420:	4958      	ldr	r1, [pc, #352]	@ (8003584 <ATCMD_A7672_Provision_Device+0x358>)
 8003422:	4618      	mov	r0, r3
 8003424:	f006 f8b9 	bl	800959a <strcat>
	strcat((char*)atCommand[1].atCmd, ATCMD_CMD_END);
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	33a8      	adds	r3, #168	@ 0xa8
 800342c:	4618      	mov	r0, r3
 800342e:	f7fc fecd 	bl	80001cc <strlen>
 8003432:	4603      	mov	r3, r0
 8003434:	461a      	mov	r2, r3
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	33a8      	adds	r3, #168	@ 0xa8
 800343a:	4413      	add	r3, r2
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <ATCMD_A7672_Provision_Device+0x35c>)
 800343e:	8811      	ldrh	r1, [r2, #0]
 8003440:	7892      	ldrb	r2, [r2, #2]
 8003442:	8019      	strh	r1, [r3, #0]
 8003444:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[2].atCmd, "\"ThingName: ");
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800344c:	4618      	mov	r0, r3
 800344e:	f7fc febd 	bl	80001cc <strlen>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800345c:	4413      	add	r3, r2
 800345e:	4a4b      	ldr	r2, [pc, #300]	@ (800358c <ATCMD_A7672_Provision_Device+0x360>)
 8003460:	461c      	mov	r4, r3
 8003462:	4613      	mov	r3, r2
 8003464:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003466:	6020      	str	r0, [r4, #0]
 8003468:	6061      	str	r1, [r4, #4]
 800346a:	60a2      	str	r2, [r4, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	7323      	strb	r3, [r4, #12]
	strcat((char*)atCommand[2].atCmd, (char*)s_httpCredentials.devName);
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003476:	4946      	ldr	r1, [pc, #280]	@ (8003590 <ATCMD_A7672_Provision_Device+0x364>)
 8003478:	4618      	mov	r0, r3
 800347a:	f006 f88e 	bl	800959a <strcat>
	strcat((char*)atCommand[2].atCmd, ATCMD_CMD_END);
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003484:	4618      	mov	r0, r3
 8003486:	f7fc fea1 	bl	80001cc <strlen>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003494:	4413      	add	r3, r2
 8003496:	4a3c      	ldr	r2, [pc, #240]	@ (8003588 <ATCMD_A7672_Provision_Device+0x35c>)
 8003498:	8811      	ldrh	r1, [r2, #0]
 800349a:	7892      	ldrb	r2, [r2, #2]
 800349c:	8019      	strh	r1, [r3, #0]
 800349e:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[3].atCmd, "\"ThingTypeName: IoT-Devices\"\r");
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc fe90 	bl	80001cc <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80034b6:	4413      	add	r3, r2
 80034b8:	4a36      	ldr	r2, [pc, #216]	@ (8003594 <ATCMD_A7672_Provision_Device+0x368>)
 80034ba:	461d      	mov	r5, r3
 80034bc:	4614      	mov	r4, r2
 80034be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c0:	6028      	str	r0, [r5, #0]
 80034c2:	6069      	str	r1, [r5, #4]
 80034c4:	60aa      	str	r2, [r5, #8]
 80034c6:	60eb      	str	r3, [r5, #12]
 80034c8:	cc07      	ldmia	r4!, {r0, r1, r2}
 80034ca:	6128      	str	r0, [r5, #16]
 80034cc:	6169      	str	r1, [r5, #20]
 80034ce:	61aa      	str	r2, [r5, #24]
 80034d0:	8823      	ldrh	r3, [r4, #0]
 80034d2:	83ab      	strh	r3, [r5, #28]
	strcat((char*)atCommand[4].atCmd, "\"ThingGroupName: Home-Devices\"\r");
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc fe76 	bl	80001cc <strlen>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80034ea:	4413      	add	r3, r2
 80034ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003598 <ATCMD_A7672_Provision_Device+0x36c>)
 80034ee:	461c      	mov	r4, r3
 80034f0:	4615      	mov	r5, r2
 80034f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f4:	6020      	str	r0, [r4, #0]
 80034f6:	6061      	str	r1, [r4, #4]
 80034f8:	60a2      	str	r2, [r4, #8]
 80034fa:	60e3      	str	r3, [r4, #12]
 80034fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034fe:	6120      	str	r0, [r4, #16]
 8003500:	6161      	str	r1, [r4, #20]
 8003502:	61a2      	str	r2, [r4, #24]
 8003504:	61e3      	str	r3, [r4, #28]

	ATCMD_AT_Command_Queue_Init();
 8003506:	f002 f81b 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 800350a:	4b24      	ldr	r3, [pc, #144]	@ (800359c <ATCMD_A7672_Provision_Device+0x370>)
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 6);
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2106      	movs	r1, #6
 8003516:	4618      	mov	r0, r3
 8003518:	f002 f918 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
	g_cmdQueue.cmdQueueWrite = 0;
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <ATCMD_A7672_Provision_Device+0x370>)
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 800352a:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b03      	cmp	r3, #3
 8003532:	d112      	bne.n	800355a <ATCMD_A7672_Provision_Device+0x32e>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8003534:	bf00      	nop
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <ATCMD_A7672_Provision_Device+0x370>)
 8003538:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1fa      	bne.n	8003536 <ATCMD_A7672_Provision_Device+0x30a>
		if( ATCMD_CMD6_OK == g_cmdQueue.currentCmdStatus )
 8003540:	4b16      	ldr	r3, [pc, #88]	@ (800359c <ATCMD_A7672_Provision_Device+0x370>)
 8003542:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8003546:	2b06      	cmp	r3, #6
 8003548:	d103      	bne.n	8003552 <ATCMD_A7672_Provision_Device+0x326>
		{
			retVal = 1;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 349e 	strb.w	r3, [r7, #1182]	@ 0x49e
 8003550:	e006      	b.n	8003560 <ATCMD_A7672_Provision_Device+0x334>
		}
		else
			retVal = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 349e 	strb.w	r3, [r7, #1182]	@ 0x49e
 8003558:	e002      	b.n	8003560 <ATCMD_A7672_Provision_Device+0x334>
	}
	else
		retVal = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 349e 	strb.w	r3, [r7, #1182]	@ 0x49e

	return retVal;
 8003560:	f897 349e 	ldrb.w	r3, [r7, #1182]	@ 0x49e
 8003564:	b2db      	uxtb	r3, r3
}
 8003566:	4618      	mov	r0, r3
 8003568:	f207 47a4 	addw	r7, r7, #1188	@ 0x4a4
 800356c:	46bd      	mov	sp, r7
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003570:	0800a360 	.word	0x0800a360
 8003574:	0800a370 	.word	0x0800a370
 8003578:	0800a384 	.word	0x0800a384
 800357c:	0800a39c 	.word	0x0800a39c
 8003580:	08001175 	.word	0x08001175
 8003584:	20000535 	.word	0x20000535
 8003588:	08009e64 	.word	0x08009e64
 800358c:	0800a310 	.word	0x0800a310
 8003590:	200003f8 	.word	0x200003f8
 8003594:	0800a320 	.word	0x0800a320
 8003598:	0800a340 	.word	0x0800a340
 800359c:	200007a4 	.word	0x200007a4

080035a0 <ATCMD_A7672_HTTP_Terminate>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_HTTP_Terminate( void )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0ac      	sub	sp, #176	@ 0xb0
 80035a4:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 80035a6:	2302      	movs	r3, #2
 80035a8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 80035b2:	4a27      	ldr	r2, [pc, #156]	@ (8003650 <ATCMD_A7672_HTTP_Terminate+0xb0>)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4611      	mov	r1, r2
 80035b8:	22a8      	movs	r2, #168	@ 0xa8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f006 f85a 	bl	8009674 <memcpy>
			{"AT+HTTPTERM"ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD1_OK},
		};

	ATCMD_AT_Command_Queue_Init();
 80035c0:	f001 ffbe 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 80035c4:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <ATCMD_A7672_HTTP_Terminate+0xb4>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 f8bb 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <ATCMD_A7672_HTTP_Terminate+0xb4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 80035e4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d125      	bne.n	800363a <ATCMD_A7672_HTTP_Terminate+0x9a>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 80035ee:	bf00      	nop
 80035f0:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <ATCMD_A7672_HTTP_Terminate+0xb4>)
 80035f2:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1fa      	bne.n	80035f0 <ATCMD_A7672_HTTP_Terminate+0x50>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 80035fa:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <ATCMD_A7672_HTTP_Terminate+0xb4>)
 80035fc:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8003600:	2b01      	cmp	r3, #1
 8003602:	d116      	bne.n	8003632 <ATCMD_A7672_HTTP_Terminate+0x92>
		{
			memset(g_httpResponse.httpResponseBytes, '\0', sizeof(g_httpResponse.httpResponseBytes));
 8003604:	2205      	movs	r2, #5
 8003606:	2100      	movs	r1, #0
 8003608:	4813      	ldr	r0, [pc, #76]	@ (8003658 <ATCMD_A7672_HTTP_Terminate+0xb8>)
 800360a:	f005 ffbe 	bl	800958a <memset>
			memset(g_httpResponse.httpResponseCode, '\0', sizeof(g_httpResponse.httpResponseCode));
 800360e:	2204      	movs	r2, #4
 8003610:	2100      	movs	r1, #0
 8003612:	4812      	ldr	r0, [pc, #72]	@ (800365c <ATCMD_A7672_HTTP_Terminate+0xbc>)
 8003614:	f005 ffb9 	bl	800958a <memset>
			g_httpResponse.bytesToRead = 0;
 8003618:	4b10      	ldr	r3, [pc, #64]	@ (800365c <ATCMD_A7672_HTTP_Terminate+0xbc>)
 800361a:	2200      	movs	r2, #0
 800361c:	815a      	strh	r2, [r3, #10]
			g_httpResponse.responseCode = 0;
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <ATCMD_A7672_HTTP_Terminate+0xbc>)
 8003620:	2200      	movs	r2, #0
 8003622:	819a      	strh	r2, [r3, #12]
			g_httpResponse.fileType = NO_FILE;
 8003624:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <ATCMD_A7672_HTTP_Terminate+0xbc>)
 8003626:	2200      	movs	r2, #0
 8003628:	739a      	strb	r2, [r3, #14]
			retVal = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8003630:	e006      	b.n	8003640 <ATCMD_A7672_HTTP_Terminate+0xa0>
		}
		else
			retVal = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8003638:	e002      	b.n	8003640 <ATCMD_A7672_HTTP_Terminate+0xa0>
	}
	else
		retVal = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	return retVal;
 8003640:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003644:	b2db      	uxtb	r3, r3
}
 8003646:	4618      	mov	r0, r3
 8003648:	37b0      	adds	r7, #176	@ 0xb0
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	0800a3b0 	.word	0x0800a3b0
 8003654:	200007a4 	.word	0x200007a4
 8003658:	200000fc 	.word	0x200000fc
 800365c:	200000f8 	.word	0x200000f8

08003660 <ATCMD_A7672_HTTP_Read>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t *ATCMD_A7672_HTTP_Read(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0ac      	sub	sp, #176	@ 0xb0
 8003664:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8003666:	2302      	movs	r3, #2
 8003668:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	atcmd_at_command_t atCommand[1] = {
 800366c:	4a27      	ldr	r2, [pc, #156]	@ (800370c <ATCMD_A7672_HTTP_Read+0xac>)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	4611      	mov	r1, r2
 8003672:	22a8      	movs	r2, #168	@ 0xa8
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fffd 	bl	8009674 <memcpy>
			{"AT+HTTPREAD=0,", ATCMD_HttpRead_Callback, 0, 120, ATCMD_CMD1_OK},
		};
	if ((g_httpResponse.bytesToRead == 0) || (g_httpResponse.responseCode != 200))
 800367a:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <ATCMD_A7672_HTTP_Read+0xb0>)
 800367c:	895b      	ldrh	r3, [r3, #10]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <ATCMD_A7672_HTTP_Read+0x2a>
 8003682:	4b23      	ldr	r3, [pc, #140]	@ (8003710 <ATCMD_A7672_HTTP_Read+0xb0>)
 8003684:	899b      	ldrh	r3, [r3, #12]
 8003686:	2bc8      	cmp	r3, #200	@ 0xc8
 8003688:	d001      	beq.n	800368e <ATCMD_A7672_HTTP_Read+0x2e>
	{
		return NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	e03a      	b.n	8003704 <ATCMD_A7672_HTTP_Read+0xa4>
	}
	strcat((char*)atCommand[0].atCmd, (char*)&g_httpResponse.httpResponseBytes[0]);
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	4920      	ldr	r1, [pc, #128]	@ (8003714 <ATCMD_A7672_HTTP_Read+0xb4>)
 8003692:	4618      	mov	r0, r3
 8003694:	f005 ff81 	bl	800959a <strcat>
	strcat((char*)atCommand[0].atCmd, ATCMD_CMD_END);
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc fd96 	bl	80001cc <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	4413      	add	r3, r2
 80036a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <ATCMD_A7672_HTTP_Read+0xb8>)
 80036aa:	8811      	ldrh	r1, [r2, #0]
 80036ac:	7892      	ldrb	r2, [r2, #2]
 80036ae:	8019      	strh	r1, [r3, #0]
 80036b0:	709a      	strb	r2, [r3, #2]
	ATCMD_AT_Command_Queue_Init();
 80036b2:	f001 ff45 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 80036b6:	4b19      	ldr	r3, [pc, #100]	@ (800371c <ATCMD_A7672_HTTP_Read+0xbc>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	2101      	movs	r1, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f002 f842 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 80036ce:	4b13      	ldr	r3, [pc, #76]	@ (800371c <ATCMD_A7672_HTTP_Read+0xbc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 80036d6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d110      	bne.n	8003702 <ATCMD_A7672_HTTP_Read+0xa2>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 80036e0:	bf00      	nop
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <ATCMD_A7672_HTTP_Read+0xbc>)
 80036e4:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1fa      	bne.n	80036e2 <ATCMD_A7672_HTTP_Read+0x82>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <ATCMD_A7672_HTTP_Read+0xbc>)
 80036ee:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d103      	bne.n	80036fe <ATCMD_A7672_HTTP_Read+0x9e>
		{

		 return Uart_Get_Transmit_Buffer();
 80036f6:	f004 faaf 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 80036fa:	4603      	mov	r3, r0
 80036fc:	e002      	b.n	8003704 <ATCMD_A7672_HTTP_Read+0xa4>
		}
		else
			return NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <ATCMD_A7672_HTTP_Read+0xa4>
	}
	else
		return NULL;
 8003702:	2300      	movs	r3, #0

}
 8003704:	4618      	mov	r0, r3
 8003706:	37b0      	adds	r7, #176	@ 0xb0
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0800a458 	.word	0x0800a458
 8003710:	200000f8 	.word	0x200000f8
 8003714:	200000fc 	.word	0x200000fc
 8003718:	08009e64 	.word	0x08009e64
 800371c:	200007a4 	.word	0x200007a4

08003720 <ATCMD_A7672_Download_Certificate>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Download_Certificate( void )
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
 8003726:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8003728:	2302      	movs	r3, #2
 800372a:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	uint8_t volatile retVal = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	atcmd_at_command_t atCommand[8] = {
 8003734:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003738:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800373c:	4618      	mov	r0, r3
 800373e:	f44f 63a8 	mov.w	r3, #1344	@ 0x540
 8003742:	461a      	mov	r2, r3
 8003744:	2100      	movs	r1, #0
 8003746:	f005 ff20 	bl	800958a <memset>
 800374a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800374e:	f2a3 5544 	subw	r5, r3, #1348	@ 0x544
 8003752:	4ae3      	ldr	r2, [pc, #908]	@ (8003ae0 <ATCMD_A7672_Download_Certificate+0x3c0>)
 8003754:	462b      	mov	r3, r5
 8003756:	4614      	mov	r4, r2
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	6861      	ldr	r1, [r4, #4]
 800375c:	68a2      	ldr	r2, [r4, #8]
 800375e:	c307      	stmia	r3!, {r0, r1, r2}
 8003760:	89a2      	ldrh	r2, [r4, #12]
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	f105 030e 	add.w	r3, r5, #14
 8003768:	2288      	movs	r2, #136	@ 0x88
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f005 ff0c 	bl	800958a <memset>
 8003772:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003776:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800377a:	2278      	movs	r2, #120	@ 0x78
 800377c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003780:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003784:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003788:	2201      	movs	r2, #1
 800378a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800378e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003792:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003796:	4bd3      	ldr	r3, [pc, #844]	@ (8003ae4 <ATCMD_A7672_Download_Certificate+0x3c4>)
 8003798:	f106 04a8 	add.w	r4, r6, #168	@ 0xa8
 800379c:	461d      	mov	r5, r3
 800379e:	6828      	ldr	r0, [r5, #0]
 80037a0:	6869      	ldr	r1, [r5, #4]
 80037a2:	68aa      	ldr	r2, [r5, #8]
 80037a4:	68eb      	ldr	r3, [r5, #12]
 80037a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037a8:	6928      	ldr	r0, [r5, #16]
 80037aa:	6969      	ldr	r1, [r5, #20]
 80037ac:	c403      	stmia	r4!, {r0, r1}
 80037ae:	7e2b      	ldrb	r3, [r5, #24]
 80037b0:	7023      	strb	r3, [r4, #0]
 80037b2:	f106 03c1 	add.w	r3, r6, #193	@ 0xc1
 80037b6:	227d      	movs	r2, #125	@ 0x7d
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fee5 	bl	800958a <memset>
 80037c0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80037c4:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80037c8:	2278      	movs	r2, #120	@ 0x78
 80037ca:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 80037ce:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80037d2:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 80037dc:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80037e0:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 80037e4:	4bc0      	ldr	r3, [pc, #768]	@ (8003ae8 <ATCMD_A7672_Download_Certificate+0x3c8>)
 80037e6:	f506 74a8 	add.w	r4, r6, #336	@ 0x150
 80037ea:	461d      	mov	r5, r3
 80037ec:	6828      	ldr	r0, [r5, #0]
 80037ee:	6869      	ldr	r1, [r5, #4]
 80037f0:	68aa      	ldr	r2, [r5, #8]
 80037f2:	68eb      	ldr	r3, [r5, #12]
 80037f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f6:	8a2b      	ldrh	r3, [r5, #16]
 80037f8:	7caa      	ldrb	r2, [r5, #18]
 80037fa:	8023      	strh	r3, [r4, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	70a3      	strb	r3, [r4, #2]
 8003800:	f206 1363 	addw	r3, r6, #355	@ 0x163
 8003804:	2283      	movs	r2, #131	@ 0x83
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f005 febe 	bl	800958a <memset>
 800380e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003812:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003816:	2278      	movs	r2, #120	@ 0x78
 8003818:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 800381c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003820:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003824:	2203      	movs	r2, #3
 8003826:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
 800382a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800382e:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003832:	4bae      	ldr	r3, [pc, #696]	@ (8003aec <ATCMD_A7672_Download_Certificate+0x3cc>)
 8003834:	f506 74fc 	add.w	r4, r6, #504	@ 0x1f8
 8003838:	461d      	mov	r5, r3
 800383a:	6828      	ldr	r0, [r5, #0]
 800383c:	6869      	ldr	r1, [r5, #4]
 800383e:	68aa      	ldr	r2, [r5, #8]
 8003840:	68eb      	ldr	r3, [r5, #12]
 8003842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003844:	6928      	ldr	r0, [r5, #16]
 8003846:	6969      	ldr	r1, [r5, #20]
 8003848:	c403      	stmia	r4!, {r0, r1}
 800384a:	f506 7304 	add.w	r3, r6, #528	@ 0x210
 800384e:	227e      	movs	r2, #126	@ 0x7e
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f005 fe99 	bl	800958a <memset>
 8003858:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800385c:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003860:	2278      	movs	r2, #120	@ 0x78
 8003862:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 8003866:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800386a:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800386e:	2204      	movs	r2, #4
 8003870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8003874:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003878:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 800387c:	4b9b      	ldr	r3, [pc, #620]	@ (8003aec <ATCMD_A7672_Download_Certificate+0x3cc>)
 800387e:	f506 7428 	add.w	r4, r6, #672	@ 0x2a0
 8003882:	461d      	mov	r5, r3
 8003884:	6828      	ldr	r0, [r5, #0]
 8003886:	6869      	ldr	r1, [r5, #4]
 8003888:	68aa      	ldr	r2, [r5, #8]
 800388a:	68eb      	ldr	r3, [r5, #12]
 800388c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800388e:	6928      	ldr	r0, [r5, #16]
 8003890:	6969      	ldr	r1, [r5, #20]
 8003892:	c403      	stmia	r4!, {r0, r1}
 8003894:	f506 732e 	add.w	r3, r6, #696	@ 0x2b8
 8003898:	227e      	movs	r2, #126	@ 0x7e
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f005 fe74 	bl	800958a <memset>
 80038a2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80038a6:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80038aa:	2278      	movs	r2, #120	@ 0x78
 80038ac:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 80038b0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80038b4:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
 80038be:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80038c2:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 80038c6:	4b89      	ldr	r3, [pc, #548]	@ (8003aec <ATCMD_A7672_Download_Certificate+0x3cc>)
 80038c8:	f506 7452 	add.w	r4, r6, #840	@ 0x348
 80038cc:	461d      	mov	r5, r3
 80038ce:	6828      	ldr	r0, [r5, #0]
 80038d0:	6869      	ldr	r1, [r5, #4]
 80038d2:	68aa      	ldr	r2, [r5, #8]
 80038d4:	68eb      	ldr	r3, [r5, #12]
 80038d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d8:	6928      	ldr	r0, [r5, #16]
 80038da:	6969      	ldr	r1, [r5, #20]
 80038dc:	c403      	stmia	r4!, {r0, r1}
 80038de:	f506 7358 	add.w	r3, r6, #864	@ 0x360
 80038e2:	227e      	movs	r2, #126	@ 0x7e
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f005 fe4f 	bl	800958a <memset>
 80038ec:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80038f0:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80038f4:	2278      	movs	r2, #120	@ 0x78
 80038f6:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
 80038fa:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80038fe:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003902:	2206      	movs	r2, #6
 8003904:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
 8003908:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800390c:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003910:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <ATCMD_A7672_Download_Certificate+0x3d0>)
 8003912:	f506 747c 	add.w	r4, r6, #1008	@ 0x3f0
 8003916:	461d      	mov	r5, r3
 8003918:	6828      	ldr	r0, [r5, #0]
 800391a:	6869      	ldr	r1, [r5, #4]
 800391c:	68aa      	ldr	r2, [r5, #8]
 800391e:	68eb      	ldr	r3, [r5, #12]
 8003920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003922:	8a2b      	ldrh	r3, [r5, #16]
 8003924:	8023      	strh	r3, [r4, #0]
 8003926:	f206 4302 	addw	r3, r6, #1026	@ 0x402
 800392a:	2284      	movs	r2, #132	@ 0x84
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f005 fe2b 	bl	800958a <memset>
 8003934:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003938:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800393c:	4a6d      	ldr	r2, [pc, #436]	@ (8003af4 <ATCMD_A7672_Download_Certificate+0x3d4>)
 800393e:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
 8003942:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003946:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800394a:	2278      	movs	r2, #120	@ 0x78
 800394c:	f8c3 2490 	str.w	r2, [r3, #1168]	@ 0x490
 8003950:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003954:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003958:	2207      	movs	r2, #7
 800395a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD4_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD5_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD6_OK},
			{"AT+HTTPACTION=1"ATCMD_CMD_END, ATCMD_HttpAction_Get_Callback,0, 120, ATCMD_CMD7_OK},
	};
	strcat((char*)atCommand[2].atCmd, (char*)s_httpCredentials.certURL);
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003964:	4964      	ldr	r1, [pc, #400]	@ (8003af8 <ATCMD_A7672_Download_Certificate+0x3d8>)
 8003966:	4618      	mov	r0, r3
 8003968:	f005 fe17 	bl	800959a <strcat>
	strcat((char*)atCommand[2].atCmd, ATCMD_CMD_END);
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fc2a 	bl	80001cc <strlen>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003982:	4413      	add	r3, r2
 8003984:	4a5d      	ldr	r2, [pc, #372]	@ (8003afc <ATCMD_A7672_Download_Certificate+0x3dc>)
 8003986:	8811      	ldrh	r1, [r2, #0]
 8003988:	7892      	ldrb	r2, [r2, #2]
 800398a:	8019      	strh	r1, [r3, #0]
 800398c:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[3].atCmd, "\"Bucket_name: rcs-iot-device-provisioning\"\r");
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fc19 	bl	80001cc <strlen>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80039a4:	4413      	add	r3, r2
 80039a6:	4a56      	ldr	r2, [pc, #344]	@ (8003b00 <ATCMD_A7672_Download_Certificate+0x3e0>)
 80039a8:	4614      	mov	r4, r2
 80039aa:	469c      	mov	ip, r3
 80039ac:	f104 0e20 	add.w	lr, r4, #32
 80039b0:	4665      	mov	r5, ip
 80039b2:	4626      	mov	r6, r4
 80039b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039b6:	6028      	str	r0, [r5, #0]
 80039b8:	6069      	str	r1, [r5, #4]
 80039ba:	60aa      	str	r2, [r5, #8]
 80039bc:	60eb      	str	r3, [r5, #12]
 80039be:	3410      	adds	r4, #16
 80039c0:	f10c 0c10 	add.w	ip, ip, #16
 80039c4:	4574      	cmp	r4, lr
 80039c6:	d1f3      	bne.n	80039b0 <ATCMD_A7672_Download_Certificate+0x290>
 80039c8:	4665      	mov	r5, ip
 80039ca:	4623      	mov	r3, r4
 80039cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039ce:	6028      	str	r0, [r5, #0]
 80039d0:	6069      	str	r1, [r5, #4]
 80039d2:	60aa      	str	r2, [r5, #8]
	strcat((char*)atCommand[4].atCmd, "\"Key_name: ");
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fbf6 	bl	80001cc <strlen>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80039ea:	4413      	add	r3, r2
 80039ec:	4a45      	ldr	r2, [pc, #276]	@ (8003b04 <ATCMD_A7672_Download_Certificate+0x3e4>)
 80039ee:	461c      	mov	r4, r3
 80039f0:	4613      	mov	r3, r2
 80039f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039f4:	6020      	str	r0, [r4, #0]
 80039f6:	6061      	str	r1, [r4, #4]
 80039f8:	60a2      	str	r2, [r4, #8]
	strcat((char*)atCommand[4].atCmd, (char*)s_httpCredentials.devName);
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003a00:	4941      	ldr	r1, [pc, #260]	@ (8003b08 <ATCMD_A7672_Download_Certificate+0x3e8>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f005 fdc9 	bl	800959a <strcat>
	strcat((char*)atCommand[4].atCmd, ATCMD_CMD_END);
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fbdc 	bl	80001cc <strlen>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a36      	ldr	r2, [pc, #216]	@ (8003afc <ATCMD_A7672_Download_Certificate+0x3dc>)
 8003a22:	8811      	ldrh	r1, [r2, #0]
 8003a24:	7892      	ldrb	r2, [r2, #2]
 8003a26:	8019      	strh	r1, [r3, #0]
 8003a28:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[5].atCmd, "\"Certificate_name: certificate.pem\"\r");
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fbcb 	bl	80001cc <strlen>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8003a40:	4413      	add	r3, r2
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <ATCMD_A7672_Download_Certificate+0x3ec>)
 8003a44:	4614      	mov	r4, r2
 8003a46:	469c      	mov	ip, r3
 8003a48:	f104 0e20 	add.w	lr, r4, #32
 8003a4c:	4665      	mov	r5, ip
 8003a4e:	4626      	mov	r6, r4
 8003a50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a52:	6028      	str	r0, [r5, #0]
 8003a54:	6069      	str	r1, [r5, #4]
 8003a56:	60aa      	str	r2, [r5, #8]
 8003a58:	60eb      	str	r3, [r5, #12]
 8003a5a:	3410      	adds	r4, #16
 8003a5c:	f10c 0c10 	add.w	ip, ip, #16
 8003a60:	4574      	cmp	r4, lr
 8003a62:	d1f3      	bne.n	8003a4c <ATCMD_A7672_Download_Certificate+0x32c>
 8003a64:	4663      	mov	r3, ip
 8003a66:	4622      	mov	r2, r4
 8003a68:	6810      	ldr	r0, [r2, #0]
 8003a6a:	6018      	str	r0, [r3, #0]
 8003a6c:	7912      	ldrb	r2, [r2, #4]
 8003a6e:	711a      	strb	r2, [r3, #4]

	ATCMD_AT_Command_Queue_Init();
 8003a70:	f001 fd66 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 8003a74:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <ATCMD_A7672_Download_Certificate+0x3f0>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 7);
 8003a7c:	1d3b      	adds	r3, r7, #4
 8003a7e:	2107      	movs	r1, #7
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fe63 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	g_cmdQueue.cmdQueueWrite = 0;
 8003a8c:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <ATCMD_A7672_Download_Certificate+0x3f0>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8003a94:	f897 3547 	ldrb.w	r3, [r7, #1351]	@ 0x547
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d115      	bne.n	8003aca <ATCMD_A7672_Download_Certificate+0x3aa>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8003a9e:	bf00      	nop
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <ATCMD_A7672_Download_Certificate+0x3f0>)
 8003aa2:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1fa      	bne.n	8003aa0 <ATCMD_A7672_Download_Certificate+0x380>
		if( ATCMD_CMD7_OK == g_cmdQueue.currentCmdStatus )
 8003aaa:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <ATCMD_A7672_Download_Certificate+0x3f0>)
 8003aac:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	d106      	bne.n	8003ac2 <ATCMD_A7672_Download_Certificate+0x3a2>
		{
			g_httpResponse.fileType = CERTIFICATE_FILE;
 8003ab4:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <ATCMD_A7672_Download_Certificate+0x3f4>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	739a      	strb	r2, [r3, #14]
			retVal = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 8003ac0:	e006      	b.n	8003ad0 <ATCMD_A7672_Download_Certificate+0x3b0>
		}
		else
			retVal = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 8003ac8:	e002      	b.n	8003ad0 <ATCMD_A7672_Download_Certificate+0x3b0>
	}
	else
		retVal = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	return retVal;
 8003ad0:	f897 3546 	ldrb.w	r3, [r7, #1350]	@ 0x546
 8003ad4:	b2db      	uxtb	r3, r3
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f207 574c 	addw	r7, r7, #1356	@ 0x54c
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae0:	0800a360 	.word	0x0800a360
 8003ae4:	0800a560 	.word	0x0800a560
 8003ae8:	0800a370 	.word	0x0800a370
 8003aec:	0800a384 	.word	0x0800a384
 8003af0:	0800a39c 	.word	0x0800a39c
 8003af4:	08001175 	.word	0x08001175
 8003af8:	20000409 	.word	0x20000409
 8003afc:	08009e64 	.word	0x08009e64
 8003b00:	0800a500 	.word	0x0800a500
 8003b04:	0800a52c 	.word	0x0800a52c
 8003b08:	200003f8 	.word	0x200003f8
 8003b0c:	0800a538 	.word	0x0800a538
 8003b10:	200007a4 	.word	0x200007a4
 8003b14:	200000f8 	.word	0x200000f8

08003b18 <ATCMD_A7672_Download_Private_Key>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Download_Private_Key( void )
{
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
 8003b1e:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	uint8_t volatile retVal = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	atcmd_at_command_t atCommand[8] = {
 8003b2c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b30:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003b34:	4618      	mov	r0, r3
 8003b36:	f44f 63a8 	mov.w	r3, #1344	@ 0x540
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f005 fd24 	bl	800958a <memset>
 8003b42:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b46:	f2a3 5544 	subw	r5, r3, #1348	@ 0x544
 8003b4a:	4ae2      	ldr	r2, [pc, #904]	@ (8003ed4 <ATCMD_A7672_Download_Private_Key+0x3bc>)
 8003b4c:	462b      	mov	r3, r5
 8003b4e:	4614      	mov	r4, r2
 8003b50:	6820      	ldr	r0, [r4, #0]
 8003b52:	6861      	ldr	r1, [r4, #4]
 8003b54:	68a2      	ldr	r2, [r4, #8]
 8003b56:	c307      	stmia	r3!, {r0, r1, r2}
 8003b58:	89a2      	ldrh	r2, [r4, #12]
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	f105 030e 	add.w	r3, r5, #14
 8003b60:	2288      	movs	r2, #136	@ 0x88
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fd10 	bl	800958a <memset>
 8003b6a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b6e:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003b72:	2278      	movs	r2, #120	@ 0x78
 8003b74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003b78:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b7c:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8003b86:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003b8a:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003b8e:	4bd2      	ldr	r3, [pc, #840]	@ (8003ed8 <ATCMD_A7672_Download_Private_Key+0x3c0>)
 8003b90:	f106 04a8 	add.w	r4, r6, #168	@ 0xa8
 8003b94:	461d      	mov	r5, r3
 8003b96:	6828      	ldr	r0, [r5, #0]
 8003b98:	6869      	ldr	r1, [r5, #4]
 8003b9a:	68aa      	ldr	r2, [r5, #8]
 8003b9c:	68eb      	ldr	r3, [r5, #12]
 8003b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ba0:	6928      	ldr	r0, [r5, #16]
 8003ba2:	6969      	ldr	r1, [r5, #20]
 8003ba4:	c403      	stmia	r4!, {r0, r1}
 8003ba6:	7e2b      	ldrb	r3, [r5, #24]
 8003ba8:	7023      	strb	r3, [r4, #0]
 8003baa:	f106 03c1 	add.w	r3, r6, #193	@ 0xc1
 8003bae:	227d      	movs	r2, #125	@ 0x7d
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f005 fce9 	bl	800958a <memset>
 8003bb8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003bbc:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003bc0:	2278      	movs	r2, #120	@ 0x78
 8003bc2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8003bc6:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003bca:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 8003bd4:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003bd8:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003bdc:	4bbf      	ldr	r3, [pc, #764]	@ (8003edc <ATCMD_A7672_Download_Private_Key+0x3c4>)
 8003bde:	f506 74a8 	add.w	r4, r6, #336	@ 0x150
 8003be2:	461d      	mov	r5, r3
 8003be4:	6828      	ldr	r0, [r5, #0]
 8003be6:	6869      	ldr	r1, [r5, #4]
 8003be8:	68aa      	ldr	r2, [r5, #8]
 8003bea:	68eb      	ldr	r3, [r5, #12]
 8003bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bee:	8a2b      	ldrh	r3, [r5, #16]
 8003bf0:	7caa      	ldrb	r2, [r5, #18]
 8003bf2:	8023      	strh	r3, [r4, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	70a3      	strb	r3, [r4, #2]
 8003bf8:	f206 1363 	addw	r3, r6, #355	@ 0x163
 8003bfc:	2283      	movs	r2, #131	@ 0x83
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f005 fcc2 	bl	800958a <memset>
 8003c06:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c0a:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003c0e:	2278      	movs	r2, #120	@ 0x78
 8003c10:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 8003c14:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c18:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
 8003c22:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c26:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003c2a:	4bad      	ldr	r3, [pc, #692]	@ (8003ee0 <ATCMD_A7672_Download_Private_Key+0x3c8>)
 8003c2c:	f506 74fc 	add.w	r4, r6, #504	@ 0x1f8
 8003c30:	461d      	mov	r5, r3
 8003c32:	6828      	ldr	r0, [r5, #0]
 8003c34:	6869      	ldr	r1, [r5, #4]
 8003c36:	68aa      	ldr	r2, [r5, #8]
 8003c38:	68eb      	ldr	r3, [r5, #12]
 8003c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3c:	6928      	ldr	r0, [r5, #16]
 8003c3e:	6969      	ldr	r1, [r5, #20]
 8003c40:	c403      	stmia	r4!, {r0, r1}
 8003c42:	f506 7304 	add.w	r3, r6, #528	@ 0x210
 8003c46:	227e      	movs	r2, #126	@ 0x7e
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f005 fc9d 	bl	800958a <memset>
 8003c50:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c54:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003c58:	2278      	movs	r2, #120	@ 0x78
 8003c5a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 8003c5e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c62:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003c66:	2204      	movs	r2, #4
 8003c68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8003c6c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c70:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003c74:	4b9a      	ldr	r3, [pc, #616]	@ (8003ee0 <ATCMD_A7672_Download_Private_Key+0x3c8>)
 8003c76:	f506 7428 	add.w	r4, r6, #672	@ 0x2a0
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	6828      	ldr	r0, [r5, #0]
 8003c7e:	6869      	ldr	r1, [r5, #4]
 8003c80:	68aa      	ldr	r2, [r5, #8]
 8003c82:	68eb      	ldr	r3, [r5, #12]
 8003c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c86:	6928      	ldr	r0, [r5, #16]
 8003c88:	6969      	ldr	r1, [r5, #20]
 8003c8a:	c403      	stmia	r4!, {r0, r1}
 8003c8c:	f506 732e 	add.w	r3, r6, #696	@ 0x2b8
 8003c90:	227e      	movs	r2, #126	@ 0x7e
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 fc78 	bl	800958a <memset>
 8003c9a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003c9e:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003ca2:	2278      	movs	r2, #120	@ 0x78
 8003ca4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 8003ca8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003cac:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003cb0:	2205      	movs	r2, #5
 8003cb2:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
 8003cb6:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003cba:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003cbe:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <ATCMD_A7672_Download_Private_Key+0x3c8>)
 8003cc0:	f506 7452 	add.w	r4, r6, #840	@ 0x348
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	6828      	ldr	r0, [r5, #0]
 8003cc8:	6869      	ldr	r1, [r5, #4]
 8003cca:	68aa      	ldr	r2, [r5, #8]
 8003ccc:	68eb      	ldr	r3, [r5, #12]
 8003cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd0:	6928      	ldr	r0, [r5, #16]
 8003cd2:	6969      	ldr	r1, [r5, #20]
 8003cd4:	c403      	stmia	r4!, {r0, r1}
 8003cd6:	f506 7358 	add.w	r3, r6, #864	@ 0x360
 8003cda:	227e      	movs	r2, #126	@ 0x7e
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fc53 	bl	800958a <memset>
 8003ce4:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003ce8:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003cec:	2278      	movs	r2, #120	@ 0x78
 8003cee:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
 8003cf2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003cf6:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003cfa:	2206      	movs	r2, #6
 8003cfc:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
 8003d00:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003d04:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003d08:	4b76      	ldr	r3, [pc, #472]	@ (8003ee4 <ATCMD_A7672_Download_Private_Key+0x3cc>)
 8003d0a:	f506 747c 	add.w	r4, r6, #1008	@ 0x3f0
 8003d0e:	461d      	mov	r5, r3
 8003d10:	6828      	ldr	r0, [r5, #0]
 8003d12:	6869      	ldr	r1, [r5, #4]
 8003d14:	68aa      	ldr	r2, [r5, #8]
 8003d16:	68eb      	ldr	r3, [r5, #12]
 8003d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1a:	8a2b      	ldrh	r3, [r5, #16]
 8003d1c:	8023      	strh	r3, [r4, #0]
 8003d1e:	f206 4302 	addw	r3, r6, #1026	@ 0x402
 8003d22:	2284      	movs	r2, #132	@ 0x84
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fc2f 	bl	800958a <memset>
 8003d2c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003d30:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003d34:	4a6c      	ldr	r2, [pc, #432]	@ (8003ee8 <ATCMD_A7672_Download_Private_Key+0x3d0>)
 8003d36:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
 8003d3a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003d3e:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003d42:	2278      	movs	r2, #120	@ 0x78
 8003d44:	f8c3 2490 	str.w	r2, [r3, #1168]	@ 0x490
 8003d48:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003d4c:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003d50:	2207      	movs	r2, #7
 8003d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD4_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD5_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD6_OK},
			{"AT+HTTPACTION=1"ATCMD_CMD_END, ATCMD_HttpAction_Get_Callback,0, 120, ATCMD_CMD7_OK},
	};
	strcat((char*)atCommand[2].atCmd, (char*)s_httpCredentials.privKeyURL);
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d5c:	4963      	ldr	r1, [pc, #396]	@ (8003eec <ATCMD_A7672_Download_Private_Key+0x3d4>)
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 fc1b 	bl	800959a <strcat>
	strcat((char*)atCommand[2].atCmd, ATCMD_CMD_END);
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fa2e 	bl	80001cc <strlen>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef0 <ATCMD_A7672_Download_Private_Key+0x3d8>)
 8003d7e:	8811      	ldrh	r1, [r2, #0]
 8003d80:	7892      	ldrb	r2, [r2, #2]
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[3].atCmd, "\"Bucket_name: rcs-iot-device-provisioning\"\r");
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fa1d 	bl	80001cc <strlen>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a55      	ldr	r2, [pc, #340]	@ (8003ef4 <ATCMD_A7672_Download_Private_Key+0x3dc>)
 8003da0:	4614      	mov	r4, r2
 8003da2:	469c      	mov	ip, r3
 8003da4:	f104 0e20 	add.w	lr, r4, #32
 8003da8:	4665      	mov	r5, ip
 8003daa:	4626      	mov	r6, r4
 8003dac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003dae:	6028      	str	r0, [r5, #0]
 8003db0:	6069      	str	r1, [r5, #4]
 8003db2:	60aa      	str	r2, [r5, #8]
 8003db4:	60eb      	str	r3, [r5, #12]
 8003db6:	3410      	adds	r4, #16
 8003db8:	f10c 0c10 	add.w	ip, ip, #16
 8003dbc:	4574      	cmp	r4, lr
 8003dbe:	d1f3      	bne.n	8003da8 <ATCMD_A7672_Download_Private_Key+0x290>
 8003dc0:	4665      	mov	r5, ip
 8003dc2:	4623      	mov	r3, r4
 8003dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dc6:	6028      	str	r0, [r5, #0]
 8003dc8:	6069      	str	r1, [r5, #4]
 8003dca:	60aa      	str	r2, [r5, #8]
	strcat((char*)atCommand[4].atCmd, "\"Key_name: ");
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc f9fa 	bl	80001cc <strlen>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003de2:	4413      	add	r3, r2
 8003de4:	4a44      	ldr	r2, [pc, #272]	@ (8003ef8 <ATCMD_A7672_Download_Private_Key+0x3e0>)
 8003de6:	461c      	mov	r4, r3
 8003de8:	4613      	mov	r3, r2
 8003dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dec:	6020      	str	r0, [r4, #0]
 8003dee:	6061      	str	r1, [r4, #4]
 8003df0:	60a2      	str	r2, [r4, #8]
	strcat((char*)atCommand[4].atCmd, (char*)s_httpCredentials.devName);
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003df8:	4940      	ldr	r1, [pc, #256]	@ (8003efc <ATCMD_A7672_Download_Private_Key+0x3e4>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f005 fbcd 	bl	800959a <strcat>
	strcat((char*)atCommand[4].atCmd, ATCMD_CMD_END);
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc f9e0 	bl	80001cc <strlen>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	1d3b      	adds	r3, r7, #4
 8003e12:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003e16:	4413      	add	r3, r2
 8003e18:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <ATCMD_A7672_Download_Private_Key+0x3d8>)
 8003e1a:	8811      	ldrh	r1, [r2, #0]
 8003e1c:	7892      	ldrb	r2, [r2, #2]
 8003e1e:	8019      	strh	r1, [r3, #0]
 8003e20:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[5].atCmd, "\"privatekey_name: private.pem.key\"\r");
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc f9cf 	bl	80001cc <strlen>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	461a      	mov	r2, r3
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8003e38:	4413      	add	r3, r2
 8003e3a:	4a31      	ldr	r2, [pc, #196]	@ (8003f00 <ATCMD_A7672_Download_Private_Key+0x3e8>)
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	469c      	mov	ip, r3
 8003e40:	f104 0e20 	add.w	lr, r4, #32
 8003e44:	4665      	mov	r5, ip
 8003e46:	4626      	mov	r6, r4
 8003e48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003e4a:	6028      	str	r0, [r5, #0]
 8003e4c:	6069      	str	r1, [r5, #4]
 8003e4e:	60aa      	str	r2, [r5, #8]
 8003e50:	60eb      	str	r3, [r5, #12]
 8003e52:	3410      	adds	r4, #16
 8003e54:	f10c 0c10 	add.w	ip, ip, #16
 8003e58:	4574      	cmp	r4, lr
 8003e5a:	d1f3      	bne.n	8003e44 <ATCMD_A7672_Download_Private_Key+0x32c>
 8003e5c:	4663      	mov	r3, ip
 8003e5e:	4622      	mov	r2, r4
 8003e60:	6810      	ldr	r0, [r2, #0]
 8003e62:	6018      	str	r0, [r3, #0]

	ATCMD_AT_Command_Queue_Init();
 8003e64:	f001 fb6c 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 8003e68:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <ATCMD_A7672_Download_Private_Key+0x3ec>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 7);
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	2107      	movs	r1, #7
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 fc69 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	g_cmdQueue.cmdQueueWrite = 0;
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <ATCMD_A7672_Download_Private_Key+0x3ec>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8003e88:	f897 3547 	ldrb.w	r3, [r7, #1351]	@ 0x547
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d115      	bne.n	8003ebe <ATCMD_A7672_Download_Private_Key+0x3a6>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8003e92:	bf00      	nop
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <ATCMD_A7672_Download_Private_Key+0x3ec>)
 8003e96:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1fa      	bne.n	8003e94 <ATCMD_A7672_Download_Private_Key+0x37c>
		if( ATCMD_CMD7_OK == g_cmdQueue.currentCmdStatus )
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <ATCMD_A7672_Download_Private_Key+0x3ec>)
 8003ea0:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8003ea4:	2b07      	cmp	r3, #7
 8003ea6:	d106      	bne.n	8003eb6 <ATCMD_A7672_Download_Private_Key+0x39e>
		{
			g_httpResponse.fileType = PRIVATEKEY_FILE;
 8003ea8:	4b17      	ldr	r3, [pc, #92]	@ (8003f08 <ATCMD_A7672_Download_Private_Key+0x3f0>)
 8003eaa:	2203      	movs	r2, #3
 8003eac:	739a      	strb	r2, [r3, #14]
			retVal = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 8003eb4:	e006      	b.n	8003ec4 <ATCMD_A7672_Download_Private_Key+0x3ac>
		}
		else
			retVal = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 8003ebc:	e002      	b.n	8003ec4 <ATCMD_A7672_Download_Private_Key+0x3ac>
	}
	else
		retVal = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	return retVal;
 8003ec4:	f897 3546 	ldrb.w	r3, [r7, #1350]	@ 0x546
 8003ec8:	b2db      	uxtb	r3, r3
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f207 574c 	addw	r7, r7, #1356	@ 0x54c
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed4:	0800a360 	.word	0x0800a360
 8003ed8:	0800a560 	.word	0x0800a560
 8003edc:	0800a370 	.word	0x0800a370
 8003ee0:	0800a384 	.word	0x0800a384
 8003ee4:	0800a39c 	.word	0x0800a39c
 8003ee8:	08001175 	.word	0x08001175
 8003eec:	2000046d 	.word	0x2000046d
 8003ef0:	08009e64 	.word	0x08009e64
 8003ef4:	0800a500 	.word	0x0800a500
 8003ef8:	0800a52c 	.word	0x0800a52c
 8003efc:	200003f8 	.word	0x200003f8
 8003f00:	0800a57c 	.word	0x0800a57c
 8003f04:	200007a4 	.word	0x200007a4
 8003f08:	200000f8 	.word	0x200000f8

08003f0c <ATCMD_A7672_Download_Root_Ca>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Download_Root_Ca( void )
{
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0e:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
 8003f12:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8003f14:	2302      	movs	r3, #2
 8003f16:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	uint8_t volatile retVal = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	atcmd_at_command_t atCommand[8] = {
 8003f20:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003f24:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f44f 63a8 	mov.w	r3, #1344	@ 0x540
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2100      	movs	r1, #0
 8003f32:	f005 fb2a 	bl	800958a <memset>
 8003f36:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003f3a:	f2a3 5544 	subw	r5, r3, #1348	@ 0x544
 8003f3e:	4ae2      	ldr	r2, [pc, #904]	@ (80042c8 <ATCMD_A7672_Download_Root_Ca+0x3bc>)
 8003f40:	462b      	mov	r3, r5
 8003f42:	4614      	mov	r4, r2
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	6861      	ldr	r1, [r4, #4]
 8003f48:	68a2      	ldr	r2, [r4, #8]
 8003f4a:	c307      	stmia	r3!, {r0, r1, r2}
 8003f4c:	89a2      	ldrh	r2, [r4, #12]
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	f105 030e 	add.w	r3, r5, #14
 8003f54:	2288      	movs	r2, #136	@ 0x88
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 fb16 	bl	800958a <memset>
 8003f5e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003f62:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003f66:	2278      	movs	r2, #120	@ 0x78
 8003f68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003f6c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003f70:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 8003f7a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003f7e:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003f82:	4bd2      	ldr	r3, [pc, #840]	@ (80042cc <ATCMD_A7672_Download_Root_Ca+0x3c0>)
 8003f84:	f106 04a8 	add.w	r4, r6, #168	@ 0xa8
 8003f88:	461d      	mov	r5, r3
 8003f8a:	6828      	ldr	r0, [r5, #0]
 8003f8c:	6869      	ldr	r1, [r5, #4]
 8003f8e:	68aa      	ldr	r2, [r5, #8]
 8003f90:	68eb      	ldr	r3, [r5, #12]
 8003f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f94:	6928      	ldr	r0, [r5, #16]
 8003f96:	6969      	ldr	r1, [r5, #20]
 8003f98:	c403      	stmia	r4!, {r0, r1}
 8003f9a:	7e2b      	ldrb	r3, [r5, #24]
 8003f9c:	7023      	strb	r3, [r4, #0]
 8003f9e:	f106 03c1 	add.w	r3, r6, #193	@ 0xc1
 8003fa2:	227d      	movs	r2, #125	@ 0x7d
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f005 faef 	bl	800958a <memset>
 8003fac:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003fb0:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003fb4:	2278      	movs	r2, #120	@ 0x78
 8003fb6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8003fba:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003fbe:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 8003fc8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003fcc:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8003fd0:	4bbf      	ldr	r3, [pc, #764]	@ (80042d0 <ATCMD_A7672_Download_Root_Ca+0x3c4>)
 8003fd2:	f506 74a8 	add.w	r4, r6, #336	@ 0x150
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	6828      	ldr	r0, [r5, #0]
 8003fda:	6869      	ldr	r1, [r5, #4]
 8003fdc:	68aa      	ldr	r2, [r5, #8]
 8003fde:	68eb      	ldr	r3, [r5, #12]
 8003fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe2:	8a2b      	ldrh	r3, [r5, #16]
 8003fe4:	7caa      	ldrb	r2, [r5, #18]
 8003fe6:	8023      	strh	r3, [r4, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	70a3      	strb	r3, [r4, #2]
 8003fec:	f206 1363 	addw	r3, r6, #355	@ 0x163
 8003ff0:	2283      	movs	r2, #131	@ 0x83
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f005 fac8 	bl	800958a <memset>
 8003ffa:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8003ffe:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004002:	2278      	movs	r2, #120	@ 0x78
 8004004:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 8004008:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800400c:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004010:	2203      	movs	r2, #3
 8004012:	f883 21f4 	strb.w	r2, [r3, #500]	@ 0x1f4
 8004016:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800401a:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 800401e:	4bad      	ldr	r3, [pc, #692]	@ (80042d4 <ATCMD_A7672_Download_Root_Ca+0x3c8>)
 8004020:	f506 74fc 	add.w	r4, r6, #504	@ 0x1f8
 8004024:	461d      	mov	r5, r3
 8004026:	6828      	ldr	r0, [r5, #0]
 8004028:	6869      	ldr	r1, [r5, #4]
 800402a:	68aa      	ldr	r2, [r5, #8]
 800402c:	68eb      	ldr	r3, [r5, #12]
 800402e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004030:	6928      	ldr	r0, [r5, #16]
 8004032:	6969      	ldr	r1, [r5, #20]
 8004034:	c403      	stmia	r4!, {r0, r1}
 8004036:	f506 7304 	add.w	r3, r6, #528	@ 0x210
 800403a:	227e      	movs	r2, #126	@ 0x7e
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f005 faa3 	bl	800958a <memset>
 8004044:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004048:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800404c:	2278      	movs	r2, #120	@ 0x78
 800404e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 8004052:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004056:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 800405a:	2204      	movs	r2, #4
 800405c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
 8004060:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004064:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 8004068:	4b9a      	ldr	r3, [pc, #616]	@ (80042d4 <ATCMD_A7672_Download_Root_Ca+0x3c8>)
 800406a:	f506 7428 	add.w	r4, r6, #672	@ 0x2a0
 800406e:	461d      	mov	r5, r3
 8004070:	6828      	ldr	r0, [r5, #0]
 8004072:	6869      	ldr	r1, [r5, #4]
 8004074:	68aa      	ldr	r2, [r5, #8]
 8004076:	68eb      	ldr	r3, [r5, #12]
 8004078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800407a:	6928      	ldr	r0, [r5, #16]
 800407c:	6969      	ldr	r1, [r5, #20]
 800407e:	c403      	stmia	r4!, {r0, r1}
 8004080:	f506 732e 	add.w	r3, r6, #696	@ 0x2b8
 8004084:	227e      	movs	r2, #126	@ 0x7e
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f005 fa7e 	bl	800958a <memset>
 800408e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004092:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004096:	2278      	movs	r2, #120	@ 0x78
 8004098:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 800409c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80040a0:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80040a4:	2205      	movs	r2, #5
 80040a6:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
 80040aa:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80040ae:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 80040b2:	4b88      	ldr	r3, [pc, #544]	@ (80042d4 <ATCMD_A7672_Download_Root_Ca+0x3c8>)
 80040b4:	f506 7452 	add.w	r4, r6, #840	@ 0x348
 80040b8:	461d      	mov	r5, r3
 80040ba:	6828      	ldr	r0, [r5, #0]
 80040bc:	6869      	ldr	r1, [r5, #4]
 80040be:	68aa      	ldr	r2, [r5, #8]
 80040c0:	68eb      	ldr	r3, [r5, #12]
 80040c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c4:	6928      	ldr	r0, [r5, #16]
 80040c6:	6969      	ldr	r1, [r5, #20]
 80040c8:	c403      	stmia	r4!, {r0, r1}
 80040ca:	f506 7358 	add.w	r3, r6, #864	@ 0x360
 80040ce:	227e      	movs	r2, #126	@ 0x7e
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 fa59 	bl	800958a <memset>
 80040d8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80040dc:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80040e0:	2278      	movs	r2, #120	@ 0x78
 80040e2:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
 80040e6:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80040ea:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80040ee:	2206      	movs	r2, #6
 80040f0:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
 80040f4:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80040f8:	f2a3 5644 	subw	r6, r3, #1348	@ 0x544
 80040fc:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <ATCMD_A7672_Download_Root_Ca+0x3cc>)
 80040fe:	f506 747c 	add.w	r4, r6, #1008	@ 0x3f0
 8004102:	461d      	mov	r5, r3
 8004104:	6828      	ldr	r0, [r5, #0]
 8004106:	6869      	ldr	r1, [r5, #4]
 8004108:	68aa      	ldr	r2, [r5, #8]
 800410a:	68eb      	ldr	r3, [r5, #12]
 800410c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410e:	8a2b      	ldrh	r3, [r5, #16]
 8004110:	8023      	strh	r3, [r4, #0]
 8004112:	f206 4302 	addw	r3, r6, #1026	@ 0x402
 8004116:	2284      	movs	r2, #132	@ 0x84
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f005 fa35 	bl	800958a <memset>
 8004120:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004124:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004128:	4a6c      	ldr	r2, [pc, #432]	@ (80042dc <ATCMD_A7672_Download_Root_Ca+0x3d0>)
 800412a:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
 800412e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004132:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004136:	2278      	movs	r2, #120	@ 0x78
 8004138:	f8c3 2490 	str.w	r2, [r3, #1168]	@ 0x490
 800413c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8004140:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8004144:	2207      	movs	r2, #7
 8004146:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD4_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD5_OK},
			{"AT+HTTPPARA=\"USERDATA\",", NULL, 0, 120, ATCMD_CMD6_OK},
			{"AT+HTTPACTION=1"ATCMD_CMD_END, ATCMD_HttpAction_Get_Callback,0, 120, ATCMD_CMD7_OK},
	};
	strcat((char*)atCommand[2].atCmd, (char*)s_httpCredentials.pubKeyURL);
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004150:	4963      	ldr	r1, [pc, #396]	@ (80042e0 <ATCMD_A7672_Download_Root_Ca+0x3d4>)
 8004152:	4618      	mov	r0, r3
 8004154:	f005 fa21 	bl	800959a <strcat>
	strcat((char*)atCommand[2].atCmd, ATCMD_CMD_END);
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f834 	bl	80001cc <strlen>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800416e:	4413      	add	r3, r2
 8004170:	4a5c      	ldr	r2, [pc, #368]	@ (80042e4 <ATCMD_A7672_Download_Root_Ca+0x3d8>)
 8004172:	8811      	ldrh	r1, [r2, #0]
 8004174:	7892      	ldrb	r2, [r2, #2]
 8004176:	8019      	strh	r1, [r3, #0]
 8004178:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[3].atCmd, "\"Bucket_name: rcs-iot-device-provisioning\"\r");
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f823 	bl	80001cc <strlen>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004190:	4413      	add	r3, r2
 8004192:	4a55      	ldr	r2, [pc, #340]	@ (80042e8 <ATCMD_A7672_Download_Root_Ca+0x3dc>)
 8004194:	4614      	mov	r4, r2
 8004196:	469c      	mov	ip, r3
 8004198:	f104 0e20 	add.w	lr, r4, #32
 800419c:	4665      	mov	r5, ip
 800419e:	4626      	mov	r6, r4
 80041a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041a2:	6028      	str	r0, [r5, #0]
 80041a4:	6069      	str	r1, [r5, #4]
 80041a6:	60aa      	str	r2, [r5, #8]
 80041a8:	60eb      	str	r3, [r5, #12]
 80041aa:	3410      	adds	r4, #16
 80041ac:	f10c 0c10 	add.w	ip, ip, #16
 80041b0:	4574      	cmp	r4, lr
 80041b2:	d1f3      	bne.n	800419c <ATCMD_A7672_Download_Root_Ca+0x290>
 80041b4:	4665      	mov	r5, ip
 80041b6:	4623      	mov	r3, r4
 80041b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041ba:	6028      	str	r0, [r5, #0]
 80041bc:	6069      	str	r1, [r5, #4]
 80041be:	60aa      	str	r2, [r5, #8]
	strcat((char*)atCommand[4].atCmd, "\"Key_name: ");
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f800 	bl	80001cc <strlen>
 80041cc:	4603      	mov	r3, r0
 80041ce:	461a      	mov	r2, r3
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80041d6:	4413      	add	r3, r2
 80041d8:	4a44      	ldr	r2, [pc, #272]	@ (80042ec <ATCMD_A7672_Download_Root_Ca+0x3e0>)
 80041da:	461c      	mov	r4, r3
 80041dc:	4613      	mov	r3, r2
 80041de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041e0:	6020      	str	r0, [r4, #0]
 80041e2:	6061      	str	r1, [r4, #4]
 80041e4:	60a2      	str	r2, [r4, #8]
	strcat((char*)atCommand[4].atCmd, (char*)s_httpCredentials.devName);
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80041ec:	4940      	ldr	r1, [pc, #256]	@ (80042f0 <ATCMD_A7672_Download_Root_Ca+0x3e4>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f005 f9d3 	bl	800959a <strcat>
	strcat((char*)atCommand[4].atCmd, ATCMD_CMD_END);
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fb ffe6 	bl	80001cc <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800420a:	4413      	add	r3, r2
 800420c:	4a35      	ldr	r2, [pc, #212]	@ (80042e4 <ATCMD_A7672_Download_Root_Ca+0x3d8>)
 800420e:	8811      	ldrh	r1, [r2, #0]
 8004210:	7892      	ldrb	r2, [r2, #2]
 8004212:	8019      	strh	r1, [r3, #0]
 8004214:	709a      	strb	r2, [r3, #2]
	strcat((char*)atCommand[5].atCmd, "\"publickey_name: public.key.pem\"\r");
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800421c:	4618      	mov	r0, r3
 800421e:	f7fb ffd5 	bl	80001cc <strlen>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800422c:	4413      	add	r3, r2
 800422e:	4a31      	ldr	r2, [pc, #196]	@ (80042f4 <ATCMD_A7672_Download_Root_Ca+0x3e8>)
 8004230:	4614      	mov	r4, r2
 8004232:	469c      	mov	ip, r3
 8004234:	f104 0e20 	add.w	lr, r4, #32
 8004238:	4665      	mov	r5, ip
 800423a:	4626      	mov	r6, r4
 800423c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800423e:	6028      	str	r0, [r5, #0]
 8004240:	6069      	str	r1, [r5, #4]
 8004242:	60aa      	str	r2, [r5, #8]
 8004244:	60eb      	str	r3, [r5, #12]
 8004246:	3410      	adds	r4, #16
 8004248:	f10c 0c10 	add.w	ip, ip, #16
 800424c:	4574      	cmp	r4, lr
 800424e:	d1f3      	bne.n	8004238 <ATCMD_A7672_Download_Root_Ca+0x32c>
 8004250:	4662      	mov	r2, ip
 8004252:	4623      	mov	r3, r4
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	8013      	strh	r3, [r2, #0]


	ATCMD_AT_Command_Queue_Init();
 8004258:	f001 f972 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 800425c:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <ATCMD_A7672_Download_Root_Ca+0x3ec>)
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 4);
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	2104      	movs	r1, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fa6f 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3547 	strb.w	r3, [r7, #1351]	@ 0x547
	g_cmdQueue.cmdQueueWrite = 0;
 8004274:	4b20      	ldr	r3, [pc, #128]	@ (80042f8 <ATCMD_A7672_Download_Root_Ca+0x3ec>)
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 800427c:	f897 3547 	ldrb.w	r3, [r7, #1351]	@ 0x547
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b03      	cmp	r3, #3
 8004284:	d115      	bne.n	80042b2 <ATCMD_A7672_Download_Root_Ca+0x3a6>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004286:	bf00      	nop
 8004288:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <ATCMD_A7672_Download_Root_Ca+0x3ec>)
 800428a:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1fa      	bne.n	8004288 <ATCMD_A7672_Download_Root_Ca+0x37c>
		if( ATCMD_CMD4_OK == g_cmdQueue.currentCmdStatus )
 8004292:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <ATCMD_A7672_Download_Root_Ca+0x3ec>)
 8004294:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004298:	2b04      	cmp	r3, #4
 800429a:	d106      	bne.n	80042aa <ATCMD_A7672_Download_Root_Ca+0x39e>
		{
			g_httpResponse.fileType = ROOTCA_FILE;
 800429c:	4b17      	ldr	r3, [pc, #92]	@ (80042fc <ATCMD_A7672_Download_Root_Ca+0x3f0>)
 800429e:	2204      	movs	r2, #4
 80042a0:	739a      	strb	r2, [r3, #14]
			retVal = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 80042a8:	e006      	b.n	80042b8 <ATCMD_A7672_Download_Root_Ca+0x3ac>
		}
		else
			retVal = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546
 80042b0:	e002      	b.n	80042b8 <ATCMD_A7672_Download_Root_Ca+0x3ac>
	}
	else
		retVal = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3546 	strb.w	r3, [r7, #1350]	@ 0x546

	return retVal;
 80042b8:	f897 3546 	ldrb.w	r3, [r7, #1350]	@ 0x546
 80042bc:	b2db      	uxtb	r3, r3
}
 80042be:	4618      	mov	r0, r3
 80042c0:	f207 574c 	addw	r7, r7, #1356	@ 0x54c
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c8:	0800a360 	.word	0x0800a360
 80042cc:	0800a560 	.word	0x0800a560
 80042d0:	0800a370 	.word	0x0800a370
 80042d4:	0800a384 	.word	0x0800a384
 80042d8:	0800a39c 	.word	0x0800a39c
 80042dc:	08001175 	.word	0x08001175
 80042e0:	200004d1 	.word	0x200004d1
 80042e4:	08009e64 	.word	0x08009e64
 80042e8:	0800a500 	.word	0x0800a500
 80042ec:	0800a52c 	.word	0x0800a52c
 80042f0:	200003f8 	.word	0x200003f8
 80042f4:	0800a5a0 	.word	0x0800a5a0
 80042f8:	200007a4 	.word	0x200007a4
 80042fc:	200000f8 	.word	0x200000f8

08004300 <ATCMD_A7672_CertKey_Module_Download>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_CertKey_Module_Download( void )
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b0ac      	sub	sp, #176	@ 0xb0
 8004304:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004306:	2302      	movs	r3, #2
 8004308:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 8004312:	4a64      	ldr	r2, [pc, #400]	@ (80044a4 <ATCMD_A7672_CertKey_Module_Download+0x1a4>)
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	4611      	mov	r1, r2
 8004318:	22a8      	movs	r2, #168	@ 0xa8
 800431a:	4618      	mov	r0, r3
 800431c:	f005 f9aa 	bl	8009674 <memcpy>
			{"AT+CCERTDOWN=", ATCMD_CertDownload_Callback, 0, 120, ATCMD_CMD1_OK},
			};
	if ((g_httpResponse.bytesToRead == 0) || (g_httpResponse.responseCode != 200) || (g_httpResponse.fileType == NO_FILE))
 8004320:	4b61      	ldr	r3, [pc, #388]	@ (80044a8 <ATCMD_A7672_CertKey_Module_Download+0x1a8>)
 8004322:	895b      	ldrh	r3, [r3, #10]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <ATCMD_A7672_CertKey_Module_Download+0x38>
 8004328:	4b5f      	ldr	r3, [pc, #380]	@ (80044a8 <ATCMD_A7672_CertKey_Module_Download+0x1a8>)
 800432a:	899b      	ldrh	r3, [r3, #12]
 800432c:	2bc8      	cmp	r3, #200	@ 0xc8
 800432e:	d103      	bne.n	8004338 <ATCMD_A7672_CertKey_Module_Download+0x38>
 8004330:	4b5d      	ldr	r3, [pc, #372]	@ (80044a8 <ATCMD_A7672_CertKey_Module_Download+0x1a8>)
 8004332:	7b9b      	ldrb	r3, [r3, #14]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <ATCMD_A7672_CertKey_Module_Download+0x3c>
	{
		return 0;
 8004338:	2300      	movs	r3, #0
 800433a:	e0af      	b.n	800449c <ATCMD_A7672_CertKey_Module_Download+0x19c>
	}
	switch(g_httpResponse.fileType)
 800433c:	4b5a      	ldr	r3, [pc, #360]	@ (80044a8 <ATCMD_A7672_CertKey_Module_Download+0x1a8>)
 800433e:	7b9b      	ldrb	r3, [r3, #14]
 8004340:	3b01      	subs	r3, #1
 8004342:	2b03      	cmp	r3, #3
 8004344:	d86c      	bhi.n	8004420 <ATCMD_A7672_CertKey_Module_Download+0x120>
 8004346:	a201      	add	r2, pc, #4	@ (adr r2, 800434c <ATCMD_A7672_CertKey_Module_Download+0x4c>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	080043c3 	.word	0x080043c3
 8004354:	08004393 	.word	0x08004393
 8004358:	080043f3 	.word	0x080043f3
	{
	case CERTIFICATE_FILE:
		strcat((char*)atCommand[0].atCmd, "\"certificate.pem\",");
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f7fb ff34 	bl	80001cc <strlen>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	4413      	add	r3, r2
 800436c:	4a4f      	ldr	r2, [pc, #316]	@ (80044ac <ATCMD_A7672_CertKey_Module_Download+0x1ac>)
 800436e:	461d      	mov	r5, r3
 8004370:	4614      	mov	r4, r2
 8004372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004374:	6028      	str	r0, [r5, #0]
 8004376:	6069      	str	r1, [r5, #4]
 8004378:	60aa      	str	r2, [r5, #8]
 800437a:	60eb      	str	r3, [r5, #12]
 800437c:	8823      	ldrh	r3, [r4, #0]
 800437e:	78a2      	ldrb	r2, [r4, #2]
 8004380:	822b      	strh	r3, [r5, #16]
 8004382:	4613      	mov	r3, r2
 8004384:	74ab      	strb	r3, [r5, #18]
		strcat((char*)atCommand[0].atCmd, (char*)g_httpResponse.httpResponseBytes);
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4949      	ldr	r1, [pc, #292]	@ (80044b0 <ATCMD_A7672_CertKey_Module_Download+0x1b0>)
 800438a:	4618      	mov	r0, r3
 800438c:	f005 f905 	bl	800959a <strcat>
		break;
 8004390:	e047      	b.n	8004422 <ATCMD_A7672_CertKey_Module_Download+0x122>
	case PRIVATEKEY_FILE:
		strcat((char*)atCommand[0].atCmd, "\"privatekey.pem\",");
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	4618      	mov	r0, r3
 8004396:	f7fb ff19 	bl	80001cc <strlen>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	4413      	add	r3, r2
 80043a2:	4a44      	ldr	r2, [pc, #272]	@ (80044b4 <ATCMD_A7672_CertKey_Module_Download+0x1b4>)
 80043a4:	461d      	mov	r5, r3
 80043a6:	4614      	mov	r4, r2
 80043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043aa:	6028      	str	r0, [r5, #0]
 80043ac:	6069      	str	r1, [r5, #4]
 80043ae:	60aa      	str	r2, [r5, #8]
 80043b0:	60eb      	str	r3, [r5, #12]
 80043b2:	8823      	ldrh	r3, [r4, #0]
 80043b4:	822b      	strh	r3, [r5, #16]
		strcat((char*)atCommand[0].atCmd, (char*)g_httpResponse.httpResponseBytes);
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	493d      	ldr	r1, [pc, #244]	@ (80044b0 <ATCMD_A7672_CertKey_Module_Download+0x1b0>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f005 f8ed 	bl	800959a <strcat>
		break;
 80043c0:	e02f      	b.n	8004422 <ATCMD_A7672_CertKey_Module_Download+0x122>
	case PUBLICKEY_FILE:
		strcat((char*)atCommand[0].atCmd, "\"publickey.pem\",");
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fb ff01 	bl	80001cc <strlen>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	4a39      	ldr	r2, [pc, #228]	@ (80044b8 <ATCMD_A7672_CertKey_Module_Download+0x1b8>)
 80043d4:	461d      	mov	r5, r3
 80043d6:	4614      	mov	r4, r2
 80043d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043da:	6028      	str	r0, [r5, #0]
 80043dc:	6069      	str	r1, [r5, #4]
 80043de:	60aa      	str	r2, [r5, #8]
 80043e0:	60eb      	str	r3, [r5, #12]
 80043e2:	7823      	ldrb	r3, [r4, #0]
 80043e4:	742b      	strb	r3, [r5, #16]
		strcat((char*)atCommand[0].atCmd, (char*)g_httpResponse.httpResponseBytes);
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	4931      	ldr	r1, [pc, #196]	@ (80044b0 <ATCMD_A7672_CertKey_Module_Download+0x1b0>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f005 f8d5 	bl	800959a <strcat>
		break;
 80043f0:	e017      	b.n	8004422 <ATCMD_A7672_CertKey_Module_Download+0x122>
	case ROOTCA_FILE:
		strcat((char*)atCommand[0].atCmd, "\"RootCA.pem\"");
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fb fee9 	bl	80001cc <strlen>
 80043fa:	4603      	mov	r3, r0
 80043fc:	461a      	mov	r2, r3
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	4413      	add	r3, r2
 8004402:	4a2e      	ldr	r2, [pc, #184]	@ (80044bc <ATCMD_A7672_CertKey_Module_Download+0x1bc>)
 8004404:	461c      	mov	r4, r3
 8004406:	4613      	mov	r3, r2
 8004408:	cb07      	ldmia	r3!, {r0, r1, r2}
 800440a:	6020      	str	r0, [r4, #0]
 800440c:	6061      	str	r1, [r4, #4]
 800440e:	60a2      	str	r2, [r4, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	7323      	strb	r3, [r4, #12]
		strcat((char*)atCommand[0].atCmd, (char*)g_httpResponse.httpResponseBytes);
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	4926      	ldr	r1, [pc, #152]	@ (80044b0 <ATCMD_A7672_CertKey_Module_Download+0x1b0>)
 8004418:	4618      	mov	r0, r3
 800441a:	f005 f8be 	bl	800959a <strcat>
		break;
 800441e:	e000      	b.n	8004422 <ATCMD_A7672_CertKey_Module_Download+0x122>
	default:
		break;
 8004420:	bf00      	nop
	}
	strcat((char*)atCommand[0].atCmd, ATCMD_CMD_END);
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	4618      	mov	r0, r3
 8004426:	f7fb fed1 	bl	80001cc <strlen>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	4413      	add	r3, r2
 8004432:	4a23      	ldr	r2, [pc, #140]	@ (80044c0 <ATCMD_A7672_CertKey_Module_Download+0x1c0>)
 8004434:	8811      	ldrh	r1, [r2, #0]
 8004436:	7892      	ldrb	r2, [r2, #2]
 8004438:	8019      	strh	r1, [r3, #0]
 800443a:	709a      	strb	r2, [r3, #2]
	ATCMD_AT_Command_Queue_Init();
 800443c:	f001 f880 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004440:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <ATCMD_A7672_CertKey_Module_Download+0x1c4>)
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	2101      	movs	r1, #1
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f97d 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <ATCMD_A7672_CertKey_Module_Download+0x1c4>)
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004460:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d112      	bne.n	8004490 <ATCMD_A7672_CertKey_Module_Download+0x190>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 800446a:	bf00      	nop
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <ATCMD_A7672_CertKey_Module_Download+0x1c4>)
 800446e:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1fa      	bne.n	800446c <ATCMD_A7672_CertKey_Module_Download+0x16c>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 8004476:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <ATCMD_A7672_CertKey_Module_Download+0x1c4>)
 8004478:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 800447c:	2b01      	cmp	r3, #1
 800447e:	d103      	bne.n	8004488 <ATCMD_A7672_CertKey_Module_Download+0x188>
		{
			retVal = 1;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004486:	e006      	b.n	8004496 <ATCMD_A7672_CertKey_Module_Download+0x196>
		}
		else
			retVal = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800448e:	e002      	b.n	8004496 <ATCMD_A7672_CertKey_Module_Download+0x196>
	}
	else
		retVal = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	return retVal;
 8004496:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800449a:	b2db      	uxtb	r3, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	37b0      	adds	r7, #176	@ 0xb0
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bdb0      	pop	{r4, r5, r7, pc}
 80044a4:	0800a610 	.word	0x0800a610
 80044a8:	200000f8 	.word	0x200000f8
 80044ac:	0800a5c4 	.word	0x0800a5c4
 80044b0:	200000fc 	.word	0x200000fc
 80044b4:	0800a5d8 	.word	0x0800a5d8
 80044b8:	0800a5ec 	.word	0x0800a5ec
 80044bc:	0800a600 	.word	0x0800a600
 80044c0:	08009e64 	.word	0x08009e64
 80044c4:	200007a4 	.word	0x200007a4

080044c8 <ATCMD_A7672_Get_IMEI_Number>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
gsm_gprs_status_t* ATCMD_A7672_Get_IMEI_Number( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b0ac      	sub	sp, #176	@ 0xb0
 80044cc:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 80044ce:	2302      	movs	r3, #2
 80044d0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		uint8_t volatile retVal = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

		atcmd_at_command_t atCommand[1] = {
 80044da:	4a20      	ldr	r2, [pc, #128]	@ (800455c <ATCMD_A7672_Get_IMEI_Number+0x94>)
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	4611      	mov	r1, r2
 80044e0:	22a8      	movs	r2, #168	@ 0xa8
 80044e2:	4618      	mov	r0, r3
 80044e4:	f005 f8c6 	bl	8009674 <memcpy>
				{"ATI"ATCMD_CMD_END, ATCMD_Get_IMEI_Callback, 0, 120, ATCMD_CMD1_OK},
			};

		ATCMD_AT_Command_Queue_Init();
 80044e8:	f001 f82a 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

		g_cmdQueue.cmdQueueWrite = 1;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <ATCMD_A7672_Get_IMEI_Number+0x98>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
		status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f927 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		g_cmdQueue.cmdQueueWrite = 0;
 8004504:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <ATCMD_A7672_Get_IMEI_Number+0x98>)
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
		if( ATCMD_QUEUE_OPER_OK == status )
 800450c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b03      	cmp	r3, #3
 8004514:	d112      	bne.n	800453c <ATCMD_A7672_Get_IMEI_Number+0x74>
		{
			while( 0 != g_cmdQueue.commandCount ){}
 8004516:	bf00      	nop
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <ATCMD_A7672_Get_IMEI_Number+0x98>)
 800451a:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1fa      	bne.n	8004518 <ATCMD_A7672_Get_IMEI_Number+0x50>
			if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <ATCMD_A7672_Get_IMEI_Number+0x98>)
 8004524:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004528:	2b01      	cmp	r3, #1
 800452a:	d103      	bne.n	8004534 <ATCMD_A7672_Get_IMEI_Number+0x6c>
			{
				retVal = 1;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004532:	e006      	b.n	8004542 <ATCMD_A7672_Get_IMEI_Number+0x7a>
			}
			else
				retVal = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800453a:	e002      	b.n	8004542 <ATCMD_A7672_Get_IMEI_Number+0x7a>
		}
		else
			retVal = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
		if( retVal ){
 8004542:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <ATCMD_A7672_Get_IMEI_Number+0x88>
			return  &g_moduleStatus;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <ATCMD_A7672_Get_IMEI_Number+0x9c>)
 800454e:	e000      	b.n	8004552 <ATCMD_A7672_Get_IMEI_Number+0x8a>

		}
		else
			return NULL;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	37b0      	adds	r7, #176	@ 0xb0
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	0800a6b8 	.word	0x0800a6b8
 8004560:	200007a4 	.word	0x200007a4
 8004564:	20000108 	.word	0x20000108

08004568 <ATCMD_A7672_Get_Signal_Strength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint16_t ATCMD_A7672_Get_Signal_Strength(void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b0ac      	sub	sp, #176	@ 0xb0
 800456c:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 800456e:	2302      	movs	r3, #2
 8004570:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 800457a:	4a21      	ldr	r2, [pc, #132]	@ (8004600 <ATCMD_A7672_Get_Signal_Strength+0x98>)
 800457c:	1d3b      	adds	r3, r7, #4
 800457e:	4611      	mov	r1, r2
 8004580:	22a8      	movs	r2, #168	@ 0xa8
 8004582:	4618      	mov	r0, r3
 8004584:	f005 f876 	bl	8009674 <memcpy>
			{"AT+CSQ"ATCMD_CMD_END, ATCMD_Get_Signal_Strength_Callback, 0, 9, ATCMD_CMD1_OK},
		};
	ATCMD_AT_Command_Queue_Init();
 8004588:	f000 ffda 	bl	8005540 <ATCMD_AT_Command_Queue_Init>

	g_cmdQueue.cmdQueueWrite = 1;
 800458c:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <ATCMD_A7672_Get_Signal_Strength+0x9c>)
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f8d7 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 80045a4:	4b17      	ldr	r3, [pc, #92]	@ (8004604 <ATCMD_A7672_Get_Signal_Strength+0x9c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 80045ac:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d112      	bne.n	80045dc <ATCMD_A7672_Get_Signal_Strength+0x74>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 80045b6:	bf00      	nop
 80045b8:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <ATCMD_A7672_Get_Signal_Strength+0x9c>)
 80045ba:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1fa      	bne.n	80045b8 <ATCMD_A7672_Get_Signal_Strength+0x50>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <ATCMD_A7672_Get_Signal_Strength+0x9c>)
 80045c4:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d103      	bne.n	80045d4 <ATCMD_A7672_Get_Signal_Strength+0x6c>
		{
			retVal = 1;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80045d2:	e006      	b.n	80045e2 <ATCMD_A7672_Get_Signal_Strength+0x7a>
		}
		else
			retVal = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 80045da:	e002      	b.n	80045e2 <ATCMD_A7672_Get_Signal_Strength+0x7a>
	}
	else
		retVal = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	if(retVal == 1)
 80045e2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d103      	bne.n	80045f4 <ATCMD_A7672_Get_Signal_Strength+0x8c>
	{
		return g_moduleStatus.sigStrength;
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <ATCMD_A7672_Get_Signal_Strength+0xa0>)
 80045ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80045f2:	e000      	b.n	80045f6 <ATCMD_A7672_Get_Signal_Strength+0x8e>
	}

	return 0;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	37b0      	adds	r7, #176	@ 0xb0
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	0800a760 	.word	0x0800a760
 8004604:	200007a4 	.word	0x200007a4
 8004608:	20000108 	.word	0x20000108

0800460c <ATCMD_A7672_Check_Module_Certificates>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
ssl_certs_t* ATCMD_A7672_Check_Module_Certificates( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0ac      	sub	sp, #176	@ 0xb0
 8004610:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004612:	2302      	movs	r3, #2
 8004614:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	atcmd_at_command_t atCommand[1] = {
 8004618:	4a18      	ldr	r2, [pc, #96]	@ (800467c <ATCMD_A7672_Check_Module_Certificates+0x70>)
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	4611      	mov	r1, r2
 800461e:	22a8      	movs	r2, #168	@ 0xa8
 8004620:	4618      	mov	r0, r3
 8004622:	f005 f827 	bl	8009674 <memcpy>
			{"AT+CCERTLIST"ATCMD_CMD_END, ATCMD_Check_Module_Certs_Callback, 0, 120, ATCMD_CMD1_OK},
		};
	ATCMD_AT_Command_Queue_Init();
 8004626:	f000 ff8b 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 800462a:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <ATCMD_A7672_Check_Module_Certificates+0x74>)
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8004632:	1d3b      	adds	r3, r7, #4
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f888 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8004642:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <ATCMD_A7672_Check_Module_Certificates+0x74>)
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 800464a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b03      	cmp	r3, #3
 8004652:	d10e      	bne.n	8004672 <ATCMD_A7672_Check_Module_Certificates+0x66>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004654:	bf00      	nop
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <ATCMD_A7672_Check_Module_Certificates+0x74>)
 8004658:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1fa      	bne.n	8004656 <ATCMD_A7672_Check_Module_Certificates+0x4a>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <ATCMD_A7672_Check_Module_Certificates+0x74>)
 8004662:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <ATCMD_A7672_Check_Module_Certificates+0x62>
		{
			return &g_certificates;
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <ATCMD_A7672_Check_Module_Certificates+0x78>)
 800466c:	e002      	b.n	8004674 <ATCMD_A7672_Check_Module_Certificates+0x68>
		}
		else
			return NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <ATCMD_A7672_Check_Module_Certificates+0x68>
	}
	else
		return NULL;
 8004672:	2300      	movs	r3, #0

}
 8004674:	4618      	mov	r0, r3
 8004676:	37b0      	adds	r7, #176	@ 0xb0
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0800a958 	.word	0x0800a958
 8004680:	200007a4 	.word	0x200007a4
 8004684:	20000154 	.word	0x20000154

08004688 <ATCMD_A7672_Is_Module_Certificate>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Is_Module_Certificate(const char* certName)
{
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < g_certificates.certCount; i ++)
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e018      	b.n	80046cc <ATCMD_A7672_Is_Module_Certificate+0x44>
	{
		if(!strncmp((char*)&g_certificates.certs[i][0], certName, strlen(certName)))
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	4a0f      	ldr	r2, [pc, #60]	@ (80046e4 <ATCMD_A7672_Is_Module_Certificate+0x5c>)
 80046a8:	189c      	adds	r4, r3, r2
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fb fd8e 	bl	80001cc <strlen>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4620      	mov	r0, r4
 80046b8:	f004 ff8b 	bl	80095d2 <strncmp>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <ATCMD_A7672_Is_Module_Certificate+0x3e>
		{
			return 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e00a      	b.n	80046dc <ATCMD_A7672_Is_Module_Certificate+0x54>
	for (i = 0; i < g_certificates.certCount; i ++)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <ATCMD_A7672_Is_Module_Certificate+0x5c>)
 80046ce:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	dcdf      	bgt.n	800469a <ATCMD_A7672_Is_Module_Certificate+0x12>
		}
	}
	return 0;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd90      	pop	{r4, r7, pc}
 80046e4:	20000154 	.word	0x20000154

080046e8 <ATCMD_A7672_Sslconf_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Sslconf_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80046ee:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
	uint8_t volatile retVal = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 334e 	strb.w	r3, [r7, #846]	@ 0x34e

	atcmd_at_command_t atCommand[5] = {
 80046fc:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8004700:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8004704:	4a1e      	ldr	r2, [pc, #120]	@ (8004780 <ATCMD_A7672_Sslconf_Init+0x98>)
 8004706:	4618      	mov	r0, r3
 8004708:	4611      	mov	r1, r2
 800470a:	f44f 7352 	mov.w	r3, #840	@ 0x348
 800470e:	461a      	mov	r2, r3
 8004710:	f004 ffb0 	bl	8009674 <memcpy>
			{"AT+CSSLCFG=\"clientcert\",0,\"certificate.pem\""ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD3_OK},
			{"AT+CSSLCFG=\"cacert\",0,\"RootCA.pem\""ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD4_OK},
			{"AT+CSSLCFG=\"clientkey\",0,\"privatekey.pem\""ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD5_OK},
		};

	ATCMD_AT_Command_Queue_Init();
 8004714:	f000 ff14 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004718:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <ATCMD_A7672_Sslconf_Init+0x9c>)
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 5);
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	2105      	movs	r1, #5
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f811 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 800472a:	4603      	mov	r3, r0
 800472c:	f887 334f 	strb.w	r3, [r7, #847]	@ 0x34f
	g_cmdQueue.cmdQueueWrite = 0;
 8004730:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <ATCMD_A7672_Sslconf_Init+0x9c>)
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004738:	f897 334f 	ldrb.w	r3, [r7, #847]	@ 0x34f
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d112      	bne.n	8004768 <ATCMD_A7672_Sslconf_Init+0x80>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004742:	bf00      	nop
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <ATCMD_A7672_Sslconf_Init+0x9c>)
 8004746:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1fa      	bne.n	8004744 <ATCMD_A7672_Sslconf_Init+0x5c>
		if( ATCMD_CMD5_OK == g_cmdQueue.currentCmdStatus )
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <ATCMD_A7672_Sslconf_Init+0x9c>)
 8004750:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004754:	2b05      	cmp	r3, #5
 8004756:	d103      	bne.n	8004760 <ATCMD_A7672_Sslconf_Init+0x78>
		{
			retVal = 1;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 334e 	strb.w	r3, [r7, #846]	@ 0x34e
 800475e:	e006      	b.n	800476e <ATCMD_A7672_Sslconf_Init+0x86>
		}
		else
			retVal = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 334e 	strb.w	r3, [r7, #846]	@ 0x34e
 8004766:	e002      	b.n	800476e <ATCMD_A7672_Sslconf_Init+0x86>
	}
	else
		retVal = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	f887 334e 	strb.w	r3, [r7, #846]	@ 0x34e
	return retVal;
 800476e:	f897 334e 	ldrb.w	r3, [r7, #846]	@ 0x34e
 8004772:	b2db      	uxtb	r3, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	0800aaa8 	.word	0x0800aaa8
 8004784:	200007a4 	.word	0x200007a4

08004788 <ATCMD_A7672_MQTTS_Connect>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint16_t ATCMD_A7672_MQTTS_Connect(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 800478e:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004790:	2302      	movs	r3, #2
 8004792:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	uint8_t volatile retVal = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6

	atcmd_at_command_t atCommand[4] = {
 800479c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80047a0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80047a4:	4a60      	ldr	r2, [pc, #384]	@ (8004928 <ATCMD_A7672_MQTTS_Connect+0x1a0>)
 80047a6:	4618      	mov	r0, r3
 80047a8:	4611      	mov	r1, r2
 80047aa:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80047ae:	461a      	mov	r2, r3
 80047b0:	f004 ff60 	bl	8009674 <memcpy>
			{"AT+CMQTTSTART"ATCMD_CMD_END, ATCMD_MQTT_Start_Callback, 0, 120, ATCMD_CMD1_OK},
			{"AT+CMQTTACCQ=0,", ATCMD_MQTT_Accquire_Client_Callback, 0, 120, ATCMD_CMD2_OK},
			{"AT+CMQTTSSLCFG=0,0"ATCMD_CMD_END, NULL, 0, 120, ATCMD_CMD3_OK},
			{"AT+CMQTTCONNECT=0,", ATCMD_MQTT_Connect_Callback, 0, 120, ATCMD_CMD4_OK},
		};
	strcat((char*)atCommand[1].atCmd, "\"");
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	33a8      	adds	r3, #168	@ 0xa8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fb fd07 	bl	80001cc <strlen>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	33a8      	adds	r3, #168	@ 0xa8
 80047c6:	4413      	add	r3, r2
 80047c8:	4958      	ldr	r1, [pc, #352]	@ (800492c <ATCMD_A7672_MQTTS_Connect+0x1a4>)
 80047ca:	461a      	mov	r2, r3
 80047cc:	460b      	mov	r3, r1
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	8013      	strh	r3, [r2, #0]
	strcat((char*)atCommand[1].atCmd, (char*)s_httpCredentials.devName);
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	33a8      	adds	r3, #168	@ 0xa8
 80047d6:	4956      	ldr	r1, [pc, #344]	@ (8004930 <ATCMD_A7672_MQTTS_Connect+0x1a8>)
 80047d8:	4618      	mov	r0, r3
 80047da:	f004 fede 	bl	800959a <strcat>
	strcat((char*)atCommand[1].atCmd, "\",1\r\n");
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	33a8      	adds	r3, #168	@ 0xa8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fb fcf2 	bl	80001cc <strlen>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	33a8      	adds	r3, #168	@ 0xa8
 80047f0:	4413      	add	r3, r2
 80047f2:	4a50      	ldr	r2, [pc, #320]	@ (8004934 <ATCMD_A7672_MQTTS_Connect+0x1ac>)
 80047f4:	6810      	ldr	r0, [r2, #0]
 80047f6:	6018      	str	r0, [r3, #0]
 80047f8:	8892      	ldrh	r2, [r2, #4]
 80047fa:	809a      	strh	r2, [r3, #4]
	strcat((char*)atCommand[3].atCmd, "\"");
 80047fc:	1d3b      	adds	r3, r7, #4
 80047fe:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fce2 	bl	80001cc <strlen>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	1d3b      	adds	r3, r7, #4
 800480e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004812:	4413      	add	r3, r2
 8004814:	4945      	ldr	r1, [pc, #276]	@ (800492c <ATCMD_A7672_MQTTS_Connect+0x1a4>)
 8004816:	461a      	mov	r2, r3
 8004818:	460b      	mov	r3, r1
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	8013      	strh	r3, [r2, #0]
	strcat((char*)atCommand[3].atCmd, (char*)s_mqttCredentials.mqttURL);
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004824:	4944      	ldr	r1, [pc, #272]	@ (8004938 <ATCMD_A7672_MQTTS_Connect+0x1b0>)
 8004826:	4618      	mov	r0, r3
 8004828:	f004 feb7 	bl	800959a <strcat>
	strcat((char*)atCommand[3].atCmd, ":");
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004832:	4618      	mov	r0, r3
 8004834:	f7fb fcca 	bl	80001cc <strlen>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004842:	4413      	add	r3, r2
 8004844:	493d      	ldr	r1, [pc, #244]	@ (800493c <ATCMD_A7672_MQTTS_Connect+0x1b4>)
 8004846:	461a      	mov	r2, r3
 8004848:	460b      	mov	r3, r1
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	8013      	strh	r3, [r2, #0]
	strcat((char*)atCommand[3].atCmd, (char*)s_mqttCredentials.mqttPort);
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004854:	493a      	ldr	r1, [pc, #232]	@ (8004940 <ATCMD_A7672_MQTTS_Connect+0x1b8>)
 8004856:	4618      	mov	r0, r3
 8004858:	f004 fe9f 	bl	800959a <strcat>
	strcat((char*)atCommand[3].atCmd, "\"");
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004862:	4618      	mov	r0, r3
 8004864:	f7fb fcb2 	bl	80001cc <strlen>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004872:	4413      	add	r3, r2
 8004874:	492d      	ldr	r1, [pc, #180]	@ (800492c <ATCMD_A7672_MQTTS_Connect+0x1a4>)
 8004876:	461a      	mov	r2, r3
 8004878:	460b      	mov	r3, r1
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	8013      	strh	r3, [r2, #0]
	strcat((char*)atCommand[3].atCmd, ",60,1\r\n"); /*<< Keep Alive is set to 60 and Clean Session Flag is set to 1*/
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004884:	4618      	mov	r0, r3
 8004886:	f7fb fca1 	bl	80001cc <strlen>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004894:	4413      	add	r3, r2
 8004896:	492b      	ldr	r1, [pc, #172]	@ (8004944 <ATCMD_A7672_MQTTS_Connect+0x1bc>)
 8004898:	461a      	mov	r2, r3
 800489a:	460b      	mov	r3, r1
 800489c:	cb03      	ldmia	r3!, {r0, r1}
 800489e:	6010      	str	r0, [r2, #0]
 80048a0:	6051      	str	r1, [r2, #4]

	ATCMD_AT_Command_Queue_Init();
 80048a2:	f000 fe4d 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 80048a6:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <ATCMD_A7672_MQTTS_Connect+0x1c0>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 4);
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	2104      	movs	r1, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ff4a 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	g_cmdQueue.cmdQueueWrite = 0;
 80048be:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <ATCMD_A7672_MQTTS_Connect+0x1c0>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 80048c6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d112      	bne.n	80048f6 <ATCMD_A7672_MQTTS_Connect+0x16e>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 80048d0:	bf00      	nop
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <ATCMD_A7672_MQTTS_Connect+0x1c0>)
 80048d4:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1fa      	bne.n	80048d2 <ATCMD_A7672_MQTTS_Connect+0x14a>
		if( ATCMD_CMD4_OK == g_cmdQueue.currentCmdStatus )
 80048dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <ATCMD_A7672_MQTTS_Connect+0x1c0>)
 80048de:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d103      	bne.n	80048ee <ATCMD_A7672_MQTTS_Connect+0x166>
		{
			retVal = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
 80048ec:	e006      	b.n	80048fc <ATCMD_A7672_MQTTS_Connect+0x174>

		}
		else
			retVal = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
 80048f4:	e002      	b.n	80048fc <ATCMD_A7672_MQTTS_Connect+0x174>
	}
	else
		retVal = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
	if(retVal == 1)
 80048fc:	f897 32a6 	ldrb.w	r3, [r7, #678]	@ 0x2a6
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d104      	bne.n	8004910 <ATCMD_A7672_MQTTS_Connect+0x188>
	{
		s_mqttCredentials.connectionStatus = MQTT_CONNECTED;
 8004906:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <ATCMD_A7672_MQTTS_Connect+0x1b0>)
 8004908:	2202      	movs	r2, #2
 800490a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 800490e:	e003      	b.n	8004918 <ATCMD_A7672_MQTTS_Connect+0x190>
	}
	else{
		s_mqttCredentials.connectionStatus = MQTT_DISCONNECTED;
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <ATCMD_A7672_MQTTS_Connect+0x1b0>)
 8004912:	2203      	movs	r2, #3
 8004914:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
	}
	return g_mqtt_result;
 8004918:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <ATCMD_A7672_MQTTS_Connect+0x1c4>)
 800491a:	881b      	ldrh	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	0800ae04 	.word	0x0800ae04
 800492c:	0800a30c 	.word	0x0800a30c
 8004930:	200003f8 	.word	0x200003f8
 8004934:	0800adf0 	.word	0x0800adf0
 8004938:	2000060c 	.word	0x2000060c
 800493c:	0800adf8 	.word	0x0800adf8
 8004940:	20000670 	.word	0x20000670
 8004944:	0800adfc 	.word	0x0800adfc
 8004948:	200007a4 	.word	0x200007a4
 800494c:	200001bc 	.word	0x200001bc

08004950 <ATCMD_A7672_MQTTS_Disonnect>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTTS_Disonnect(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004956:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004958:	2302      	movs	r3, #2
 800495a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
	uint8_t volatile retVal = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe

	atcmd_at_command_t atCommand[3] = {
 8004964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800496c:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <ATCMD_A7672_MQTTS_Disonnect+0x98>)
 800496e:	4618      	mov	r0, r3
 8004970:	4611      	mov	r1, r2
 8004972:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8004976:	461a      	mov	r2, r3
 8004978:	f004 fe7c 	bl	8009674 <memcpy>
			{"AT+CMQTTDISC=0,120"ATCMD_CMD_END, NULL, 0, 12, ATCMD_CMD1_OK},
			{"AT+CMQTTREL=0"ATCMD_CMD_END, NULL, 0, 12, ATCMD_CMD2_OK},
			{"AT+CMQTTSTOP"ATCMD_CMD_END, NULL, 0, 12, ATCMD_CMD3_OK},
		};

	ATCMD_AT_Command_Queue_Init();
 800497c:	f000 fde0 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <ATCMD_A7672_MQTTS_Disonnect+0x9c>)
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 3);
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	2103      	movs	r1, #3
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fedd 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
	g_cmdQueue.cmdQueueWrite = 0;
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <ATCMD_A7672_MQTTS_Disonnect+0x9c>)
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 80049a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d112      	bne.n	80049d0 <ATCMD_A7672_MQTTS_Disonnect+0x80>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 80049aa:	bf00      	nop
 80049ac:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <ATCMD_A7672_MQTTS_Disonnect+0x9c>)
 80049ae:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1fa      	bne.n	80049ac <ATCMD_A7672_MQTTS_Disonnect+0x5c>
		if( ATCMD_CMD3_OK == g_cmdQueue.currentCmdStatus )
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <ATCMD_A7672_MQTTS_Disonnect+0x9c>)
 80049b8:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d103      	bne.n	80049c8 <ATCMD_A7672_MQTTS_Disonnect+0x78>
		{
			retVal = 1;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
 80049c6:	e006      	b.n	80049d6 <ATCMD_A7672_MQTTS_Disonnect+0x86>
		}
		else
			retVal = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
 80049ce:	e002      	b.n	80049d6 <ATCMD_A7672_MQTTS_Disonnect+0x86>
	}
	else
		retVal = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
	return retVal;
 80049d6:	f897 31fe 	ldrb.w	r3, [r7, #510]	@ 0x1fe
 80049da:	b2db      	uxtb	r3, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	0800b0a4 	.word	0x0800b0a4
 80049ec:	200007a4 	.word	0x200007a4

080049f0 <ATCMD_A7672_MQTTS_Subscribe>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTTS_Subscribe(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0d6      	sub	sp, #344	@ 0x158
 80049f4:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 80049f6:	2302      	movs	r3, #2
 80049f8:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155
	uint8_t volatile retVal = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
	uint16_t len = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156

	atcmd_at_command_t atCommand[2] = {
 8004a08:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8004a0c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004a10:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac8 <ATCMD_A7672_MQTTS_Subscribe+0xd8>)
 8004a12:	4618      	mov	r0, r3
 8004a14:	4611      	mov	r1, r2
 8004a16:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f004 fe2a 	bl	8009674 <memcpy>
			{"AT+CMQTTSUBTOPIC=0,", ATCMD_MQTT_Subtopic_Callback, 0, 12, ATCMD_CMD1_OK},
			{"AT+CMQTTSUB=0"ATCMD_CMD_END, ATCMD_MQTT_Subscribe_Callback, 0, 120, ATCMD_CMD2_OK},
		};
	len = (uint16_t)strlen((char*)s_mqttCredentials.mqttSubTopic);
 8004a20:	482a      	ldr	r0, [pc, #168]	@ (8004acc <ATCMD_A7672_MQTTS_Subscribe+0xdc>)
 8004a22:	f7fb fbd3 	bl	80001cc <strlen>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
	Convert_Integer_To_String(s_tempStr, len);
 8004a2c:	f8b7 3156 	ldrh.w	r3, [r7, #342]	@ 0x156
 8004a30:	4619      	mov	r1, r3
 8004a32:	4827      	ldr	r0, [pc, #156]	@ (8004ad0 <ATCMD_A7672_MQTTS_Subscribe+0xe0>)
 8004a34:	f002 fab6 	bl	8006fa4 <Convert_Integer_To_String>
	strcat((char*)atCommand[0].atCmd, (char*)s_tempStr);
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	4925      	ldr	r1, [pc, #148]	@ (8004ad0 <ATCMD_A7672_MQTTS_Subscribe+0xe0>)
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 fdac 	bl	800959a <strcat>
	strcat((char*)atCommand[0].atCmd, ",1\r\n");
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fbc1 	bl	80001cc <strlen>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	1d3b      	adds	r3, r7, #4
 8004a50:	4413      	add	r3, r2
 8004a52:	4a20      	ldr	r2, [pc, #128]	@ (8004ad4 <ATCMD_A7672_MQTTS_Subscribe+0xe4>)
 8004a54:	6810      	ldr	r0, [r2, #0]
 8004a56:	6018      	str	r0, [r3, #0]
 8004a58:	7912      	ldrb	r2, [r2, #4]
 8004a5a:	711a      	strb	r2, [r3, #4]


	ATCMD_AT_Command_Queue_Init();
 8004a5c:	f000 fd70 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004a60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <ATCMD_A7672_MQTTS_Subscribe+0xe8>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 2);
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fe6d 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3155 	strb.w	r3, [r7, #341]	@ 0x155
	g_cmdQueue.cmdQueueWrite = 0;
 8004a78:	4b17      	ldr	r3, [pc, #92]	@ (8004ad8 <ATCMD_A7672_MQTTS_Subscribe+0xe8>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004a80:	f897 3155 	ldrb.w	r3, [r7, #341]	@ 0x155
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d112      	bne.n	8004ab0 <ATCMD_A7672_MQTTS_Subscribe+0xc0>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004a8a:	bf00      	nop
 8004a8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <ATCMD_A7672_MQTTS_Subscribe+0xe8>)
 8004a8e:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1fa      	bne.n	8004a8c <ATCMD_A7672_MQTTS_Subscribe+0x9c>
		if( ATCMD_CMD2_OK == g_cmdQueue.currentCmdStatus )
 8004a96:	4b10      	ldr	r3, [pc, #64]	@ (8004ad8 <ATCMD_A7672_MQTTS_Subscribe+0xe8>)
 8004a98:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d103      	bne.n	8004aa8 <ATCMD_A7672_MQTTS_Subscribe+0xb8>
		{
			retVal = 1;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 8004aa6:	e006      	b.n	8004ab6 <ATCMD_A7672_MQTTS_Subscribe+0xc6>
		}
		else
			retVal = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
 8004aae:	e002      	b.n	8004ab6 <ATCMD_A7672_MQTTS_Subscribe+0xc6>
	}
	else
		retVal = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3154 	strb.w	r3, [r7, #340]	@ 0x154
	return retVal;
 8004ab6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004aba:	b2db      	uxtb	r3, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0800b2a4 	.word	0x0800b2a4
 8004acc:	2000067a 	.word	0x2000067a
 8004ad0:	20000600 	.word	0x20000600
 8004ad4:	0800b29c 	.word	0x0800b29c
 8004ad8:	200007a4 	.word	0x200007a4

08004adc <ATCMD_A7672_MQTTS_Publish>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_MQTTS_Publish(char* publishPayload)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004aec:	6018      	str	r0, [r3, #0]
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004aee:	2302      	movs	r3, #2
 8004af0:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
	uint8_t volatile retVal = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
	uint16_t len = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206

	atcmd_at_command_t atCommand[3] = {
 8004b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b08:	4a5f      	ldr	r2, [pc, #380]	@ (8004c88 <ATCMD_A7672_MQTTS_Publish+0x1ac>)
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8004b12:	461a      	mov	r2, r3
 8004b14:	f004 fdae 	bl	8009674 <memcpy>
			{"AT+CMQTTTOPIC=0,", ATCMD_MQTT_Pubtopic_Callback, 3, 120, ATCMD_CMD1_OK},
			{"AT+CMQTTPAYLOAD=0,", ATCMD_MQTT_PubPayload_Callback, 3, 120, ATCMD_CMD2_OK},
			{"AT+CMQTTPUB=0,1,60"ATCMD_CMD_END, ATCMD_MQTT_Publish_Callback, 3, 120, ATCMD_CMD3_OK},
		};
	len = (uint16_t)strlen((char*)s_mqttCredentials.mqttPubTopic);
 8004b18:	485c      	ldr	r0, [pc, #368]	@ (8004c8c <ATCMD_A7672_MQTTS_Publish+0x1b0>)
 8004b1a:	f7fb fb57 	bl	80001cc <strlen>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
	memset(s_tempStr, '\0', sizeof(s_tempStr));
 8004b24:	2206      	movs	r2, #6
 8004b26:	2100      	movs	r1, #0
 8004b28:	4859      	ldr	r0, [pc, #356]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004b2a:	f004 fd2e 	bl	800958a <memset>
	Convert_Integer_To_String(s_tempStr, len);
 8004b2e:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8004b32:	4619      	mov	r1, r3
 8004b34:	4856      	ldr	r0, [pc, #344]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004b36:	f002 fa35 	bl	8006fa4 <Convert_Integer_To_String>
	strcat((char*)atCommand[0].atCmd, (char*)s_tempStr);
 8004b3a:	f107 030c 	add.w	r3, r7, #12
 8004b3e:	4954      	ldr	r1, [pc, #336]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004b40:	4618      	mov	r0, r3
 8004b42:	f004 fd2a 	bl	800959a <strcat>
	strcat((char*)atCommand[0].atCmd, "\r\n");
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fb fb3e 	bl	80001cc <strlen>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	f107 030c 	add.w	r3, r7, #12
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c94 <ATCMD_A7672_MQTTS_Publish+0x1b8>)
 8004b5c:	8811      	ldrh	r1, [r2, #0]
 8004b5e:	7892      	ldrb	r2, [r2, #2]
 8004b60:	8019      	strh	r1, [r3, #0]
 8004b62:	709a      	strb	r2, [r3, #2]
	s_tempPtr = Uart_Get_Transmit_Buffer();
 8004b64:	f003 f878 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8004c98 <ATCMD_A7672_MQTTS_Publish+0x1bc>)
 8004b6c:	6013      	str	r3, [r2, #0]
	len = (uint16_t)strlen(publishPayload);
 8004b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	f7fb fb28 	bl	80001cc <strlen>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
	memset(s_tempStr, '\0', sizeof(s_tempStr));
 8004b82:	2206      	movs	r2, #6
 8004b84:	2100      	movs	r1, #0
 8004b86:	4842      	ldr	r0, [pc, #264]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004b88:	f004 fcff 	bl	800958a <memset>
	Convert_Integer_To_String(s_tempStr, len);
 8004b8c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8004b90:	4619      	mov	r1, r3
 8004b92:	483f      	ldr	r0, [pc, #252]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004b94:	f002 fa06 	bl	8006fa4 <Convert_Integer_To_String>
	if((char*)s_tempPtr != publishPayload)
 8004b98:	4b3f      	ldr	r3, [pc, #252]	@ (8004c98 <ATCMD_A7672_MQTTS_Publish+0x1bc>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ba0:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d025      	beq.n	8004bf6 <ATCMD_A7672_MQTTS_Publish+0x11a>
	{
		memset((char*)s_tempPtr, '\0', sizeof(s_tempPtr));
 8004baa:	4b3b      	ldr	r3, [pc, #236]	@ (8004c98 <ATCMD_A7672_MQTTS_Publish+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f004 fce9 	bl	800958a <memset>
		strncpy((char*)s_tempPtr, publishPayload, len);
 8004bb8:	4b37      	ldr	r3, [pc, #220]	@ (8004c98 <ATCMD_A7672_MQTTS_Publish+0x1bc>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 8004bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	f004 fd14 	bl	80095f6 <strncpy>
		strcat((char*)s_tempStr, "\r\n");
 8004bce:	4830      	ldr	r0, [pc, #192]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004bd0:	f7fb fafc 	bl	80001cc <strlen>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <ATCMD_A7672_MQTTS_Publish+0x1b8>)
 8004bde:	8811      	ldrh	r1, [r2, #0]
 8004be0:	7892      	ldrb	r2, [r2, #2]
 8004be2:	8019      	strh	r1, [r3, #0]
 8004be4:	709a      	strb	r2, [r3, #2]
		strcat((char*)atCommand[1].atCmd, (char*)s_tempStr);
 8004be6:	f107 030c 	add.w	r3, r7, #12
 8004bea:	33a8      	adds	r3, #168	@ 0xa8
 8004bec:	4928      	ldr	r1, [pc, #160]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 fcd3 	bl	800959a <strcat>
 8004bf4:	e012      	b.n	8004c1c <ATCMD_A7672_MQTTS_Publish+0x140>
	}
	else
	{
		strcat((char*)s_tempStr, "\r\n");
 8004bf6:	4826      	ldr	r0, [pc, #152]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004bf8:	f7fb fae8 	bl	80001cc <strlen>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b23      	ldr	r3, [pc, #140]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004c02:	4413      	add	r3, r2
 8004c04:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <ATCMD_A7672_MQTTS_Publish+0x1b8>)
 8004c06:	8811      	ldrh	r1, [r2, #0]
 8004c08:	7892      	ldrb	r2, [r2, #2]
 8004c0a:	8019      	strh	r1, [r3, #0]
 8004c0c:	709a      	strb	r2, [r3, #2]
		strcat((char*)atCommand[1].atCmd, (char*)s_tempStr);
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	33a8      	adds	r3, #168	@ 0xa8
 8004c14:	491e      	ldr	r1, [pc, #120]	@ (8004c90 <ATCMD_A7672_MQTTS_Publish+0x1b4>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f004 fcbf 	bl	800959a <strcat>
	}

	ATCMD_AT_Command_Queue_Init();
 8004c1c:	f000 fc90 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004c20:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <ATCMD_A7672_MQTTS_Publish+0x1c0>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 3);
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	2103      	movs	r1, #3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd8c 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 3205 	strb.w	r3, [r7, #517]	@ 0x205
	g_cmdQueue.cmdQueueWrite = 0;
 8004c3a:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <ATCMD_A7672_MQTTS_Publish+0x1c0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004c42:	f897 3205 	ldrb.w	r3, [r7, #517]	@ 0x205
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d112      	bne.n	8004c72 <ATCMD_A7672_MQTTS_Publish+0x196>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004c4c:	bf00      	nop
 8004c4e:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <ATCMD_A7672_MQTTS_Publish+0x1c0>)
 8004c50:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1fa      	bne.n	8004c4e <ATCMD_A7672_MQTTS_Publish+0x172>
		if( ATCMD_CMD3_OK == g_cmdQueue.currentCmdStatus )
 8004c58:	4b10      	ldr	r3, [pc, #64]	@ (8004c9c <ATCMD_A7672_MQTTS_Publish+0x1c0>)
 8004c5a:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d103      	bne.n	8004c6a <ATCMD_A7672_MQTTS_Publish+0x18e>
		{
			retVal = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
 8004c68:	e006      	b.n	8004c78 <ATCMD_A7672_MQTTS_Publish+0x19c>
		}
		else
			retVal = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
 8004c70:	e002      	b.n	8004c78 <ATCMD_A7672_MQTTS_Publish+0x19c>
	}
	else
		retVal = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 3204 	strb.w	r3, [r7, #516]	@ 0x204
	return retVal;
 8004c78:	f897 3204 	ldrb.w	r3, [r7, #516]	@ 0x204
 8004c7c:	b2db      	uxtb	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	0800b3f4 	.word	0x0800b3f4
 8004c8c:	200006de 	.word	0x200006de
 8004c90:	20000600 	.word	0x20000600
 8004c94:	08009e64 	.word	0x08009e64
 8004c98:	20000608 	.word	0x20000608
 8004c9c:	200007a4 	.word	0x200007a4

08004ca0 <getSignalStrengthPtr>:



uint8_t* getSignalStrengthPtr(void){
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	return &g_moduleStatus.sigStrength;
 8004ca4:	4b02      	ldr	r3, [pc, #8]	@ (8004cb0 <getSignalStrengthPtr+0x10>)
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000135 	.word	0x20000135

08004cb4 <ATCMD_A7672_Check_Pdp_Context>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Check_Pdp_Context( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0ac      	sub	sp, #176	@ 0xb0
 8004cb8:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d3c <ATCMD_A7672_Check_Pdp_Context+0x88>)
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	4611      	mov	r1, r2
 8004ccc:	22a8      	movs	r2, #168	@ 0xa8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fcd0 	bl	8009674 <memcpy>
		{"AT+CGATT?"ATCMD_CMD_END, ATCMD_Pdp_Context_Check_Callback, 0, 11, ATCMD_CMD1_OK},
		};

	ATCMD_AT_Command_Queue_Init();
 8004cd4:	f000 fc34 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004cd8:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <ATCMD_A7672_Check_Pdp_Context+0x8c>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fd31 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <ATCMD_A7672_Check_Pdp_Context+0x8c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004cf8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d112      	bne.n	8004d28 <ATCMD_A7672_Check_Pdp_Context+0x74>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004d02:	bf00      	nop
 8004d04:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <ATCMD_A7672_Check_Pdp_Context+0x8c>)
 8004d06:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1fa      	bne.n	8004d04 <ATCMD_A7672_Check_Pdp_Context+0x50>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <ATCMD_A7672_Check_Pdp_Context+0x8c>)
 8004d10:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d103      	bne.n	8004d20 <ATCMD_A7672_Check_Pdp_Context+0x6c>
		{
			retVal = 1;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004d1e:	e006      	b.n	8004d2e <ATCMD_A7672_Check_Pdp_Context+0x7a>
		}
		else
			retVal = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004d26:	e002      	b.n	8004d2e <ATCMD_A7672_Check_Pdp_Context+0x7a>
	}
	else
		retVal = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	return retVal;
 8004d2e:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8004d32:	b2db      	uxtb	r3, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	37b0      	adds	r7, #176	@ 0xb0
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800b5ec 	.word	0x0800b5ec
 8004d40:	200007a4 	.word	0x200007a4

08004d44 <ATCMD_A7672_Set_Pdp_Context>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t ATCMD_A7672_Set_Pdp_Context( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ac      	sub	sp, #176	@ 0xb0
 8004d48:	af00      	add	r7, sp, #0
	atcmd_queue_status_t volatile status = ATCMD_QUEUE_ERROR;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t volatile retVal = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae

	atcmd_at_command_t atCommand[1] = {
 8004d56:	4a1d      	ldr	r2, [pc, #116]	@ (8004dcc <ATCMD_A7672_Set_Pdp_Context+0x88>)
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	22a8      	movs	r2, #168	@ 0xa8
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f004 fc88 	bl	8009674 <memcpy>
		{"AT+CGACT=1,1"ATCMD_CMD_END, NULL, 0, 11, ATCMD_CMD1_OK},
		};

	ATCMD_AT_Command_Queue_Init();
 8004d64:	f000 fbec 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
	g_cmdQueue.cmdQueueWrite = 1;
 8004d68:	4b19      	ldr	r3, [pc, #100]	@ (8004dd0 <ATCMD_A7672_Set_Pdp_Context+0x8c>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	status = ATCMD_Add_AT_Cmd_Queue(&atCommand[0], 1);
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fce9 	bl	800574c <ATCMD_Add_AT_Cmd_Queue>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	g_cmdQueue.cmdQueueWrite = 0;
 8004d80:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <ATCMD_A7672_Set_Pdp_Context+0x8c>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	if( ATCMD_QUEUE_OPER_OK == status )
 8004d88:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d112      	bne.n	8004db8 <ATCMD_A7672_Set_Pdp_Context+0x74>
	{
		while( 0 != g_cmdQueue.commandCount ){}
 8004d92:	bf00      	nop
 8004d94:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <ATCMD_A7672_Set_Pdp_Context+0x8c>)
 8004d96:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1fa      	bne.n	8004d94 <ATCMD_A7672_Set_Pdp_Context+0x50>
		if( ATCMD_CMD1_OK == g_cmdQueue.currentCmdStatus )
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <ATCMD_A7672_Set_Pdp_Context+0x8c>)
 8004da0:	f893 3547 	ldrb.w	r3, [r3, #1351]	@ 0x547
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d103      	bne.n	8004db0 <ATCMD_A7672_Set_Pdp_Context+0x6c>
		{
			retVal = 1;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004dae:	e006      	b.n	8004dbe <ATCMD_A7672_Set_Pdp_Context+0x7a>
		}
		else
			retVal = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8004db6:	e002      	b.n	8004dbe <ATCMD_A7672_Set_Pdp_Context+0x7a>
	}
	else
		retVal = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	return retVal;
 8004dbe:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8004dc2:	b2db      	uxtb	r3, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	37b0      	adds	r7, #176	@ 0xb0
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	0800b694 	.word	0x0800b694
 8004dd0:	200007a4 	.word	0x200007a4

08004dd4 <ATCMD_Core_Init>:
* <hr>
*
*******************************************************************************/

int8_t ATCMD_Core_Init( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
	if(osKernelAddThread( ATCMD_Processor_Thread, 3) < 1)
 8004dd8:	2103      	movs	r1, #3
 8004dda:	4806      	ldr	r0, [pc, #24]	@ (8004df4 <ATCMD_Core_Init+0x20>)
 8004ddc:	f004 fa7e 	bl	80092dc <osKernelAddThread>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dc02      	bgt.n	8004dec <ATCMD_Core_Init+0x18>
		return -1;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	e000      	b.n	8004dee <ATCMD_Core_Init+0x1a>
return 0;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	08004fb5 	.word	0x08004fb5

08004df8 <Rsp_Time_Out_Timer_Start>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void Rsp_Time_Out_Timer_Start( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
	g_delayTimerStart = 0;
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <Rsp_Time_Out_Timer_Start+0x3c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
	g_responseTimeOut = g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].rspDelay;
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <Rsp_Time_Out_Timer_Start+0x40>)
 8004e04:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <Rsp_Time_Out_Timer_Start+0x40>)
 8004e0c:	23a8      	movs	r3, #168	@ 0xa8
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	33a0      	adds	r3, #160	@ 0xa0
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <Rsp_Time_Out_Timer_Start+0x44>)
 8004e1a:	6013      	str	r3, [r2, #0]
	g_timeOutFlag = 0;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <Rsp_Time_Out_Timer_Start+0x48>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
	g_delayTimerStart = 1;
 8004e22:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <Rsp_Time_Out_Timer_Start+0x3c>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000078d 	.word	0x2000078d
 8004e38:	200007a4 	.word	0x200007a4
 8004e3c:	20000790 	.word	0x20000790
 8004e40:	2000078c 	.word	0x2000078c

08004e44 <Rsp_Time_Out_Timer_Stop>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void Rsp_Time_Out_Timer_Stop( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
	g_delayTimerStart = 0;
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <Rsp_Time_Out_Timer_Stop+0x20>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	g_responseTimeOut = 0;
 8004e4e:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <Rsp_Time_Out_Timer_Stop+0x24>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
	g_timeOutFlag = 0;
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <Rsp_Time_Out_Timer_Stop+0x28>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	2000078d 	.word	0x2000078d
 8004e68:	20000790 	.word	0x20000790
 8004e6c:	2000078c 	.word	0x2000078c

08004e70 <Send_AT_Command>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void Send_AT_Command( atcmd_at_command_t *cmd )
{
 8004e70:	b590      	push	{r4, r7, lr}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	g_cmdQueue.repeatCount = cmd->repCount;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <Send_AT_Command+0x48>)
 8004e80:	f883 2543 	strb.w	r2, [r3, #1347]	@ 0x543
	s_atExecute = 1;
 8004e84:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <Send_AT_Command+0x4c>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
	Uart_Transmit_Data_Dma((uint32_t)cmd->atCmd, strlen((const char*)cmd->atCmd));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb f99b 	bl	80001cc <strlen>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f002 fe50 	bl	8007b40 <Uart_Transmit_Data_Dma>
	g_timeOutFlag =1;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <Send_AT_Command+0x50>)
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
	Rsp_Time_Out_Timer_Start();
 8004ea6:	f7ff ffa7 	bl	8004df8 <Rsp_Time_Out_Timer_Start>
	s_modemRspWait = 1;
 8004eaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <Send_AT_Command+0x54>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	200007a4 	.word	0x200007a4
 8004ebc:	2000079c 	.word	0x2000079c
 8004ec0:	2000078c 	.word	0x2000078c
 8004ec4:	2000079d 	.word	0x2000079d

08004ec8 <Global_Urc_Handler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static uint8_t Global_Urc_Handler( uint8_t *rspStr, uint16_t len)
{
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	807b      	strh	r3, [r7, #2]
	uint8_t retVal = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73bb      	strb	r3, [r7, #14]
	uint8_t *p = rspStr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	60bb      	str	r3, [r7, #8]
	while(p)
 8004ee0:	e05e      	b.n	8004fa0 <Global_Urc_Handler+0xd8>
	{
		while((ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p))
		{
			p++;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60bb      	str	r3, [r7, #8]
		while((ATCMD_CMD_CR == *p) || (ATCMD_CMD_LF == *p))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b0d      	cmp	r3, #13
 8004eee:	d0f8      	beq.n	8004ee2 <Global_Urc_Handler+0x1a>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b0a      	cmp	r3, #10
 8004ef6:	d0f4      	beq.n	8004ee2 <Global_Urc_Handler+0x1a>
		}
		for(i = 0; i < g_urcEntityQueue.urcQueueCount; i++ )
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73bb      	strb	r3, [r7, #14]
 8004efc:	e047      	b.n	8004f8e <Global_Urc_Handler+0xc6>
		{
			if(!strncmp((char*)g_urcEntityQueue.urcQueue[i].urcStr, (char*)p,
 8004efe:	7bba      	ldrb	r2, [r7, #14]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4a29      	ldr	r2, [pc, #164]	@ (8004fb0 <Global_Urc_Handler+0xe8>)
 8004f0a:	189c      	adds	r4, r3, r2
					strlen((char*)g_urcEntityQueue.urcQueue[i].urcStr)))
 8004f0c:	7bba      	ldrb	r2, [r7, #14]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <Global_Urc_Handler+0xe8>)
 8004f18:	4413      	add	r3, r2
			if(!strncmp((char*)g_urcEntityQueue.urcQueue[i].urcStr, (char*)p,
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb f956 	bl	80001cc <strlen>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	4620      	mov	r0, r4
 8004f28:	f004 fb53 	bl	80095d2 <strncmp>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d128      	bne.n	8004f84 <Global_Urc_Handler+0xbc>
			{
				if( g_urcEntityQueue.urcQueue[i].urcCallback )
 8004f32:	7bba      	ldrb	r2, [r7, #14]
 8004f34:	491e      	ldr	r1, [pc, #120]	@ (8004fb0 <Global_Urc_Handler+0xe8>)
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3320      	adds	r3, #32
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <Global_Urc_Handler+0xaa>
				{
					if ( 0 > (g_urcEntityQueue.urcQueue[i].urcCallback(p, len)))
 8004f48:	7bba      	ldrb	r2, [r7, #14]
 8004f4a:	4919      	ldr	r1, [pc, #100]	@ (8004fb0 <Global_Urc_Handler+0xe8>)
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3320      	adds	r3, #32
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	68b8      	ldr	r0, [r7, #8]
 8004f60:	4798      	blx	r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da01      	bge.n	8004f6c <Global_Urc_Handler+0xa4>
						return 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e01d      	b.n	8004fa8 <Global_Urc_Handler+0xe0>
					else
						retVal = 1;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
 8004f70:	e001      	b.n	8004f76 <Global_Urc_Handler+0xae>
				}
				else
					retVal = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
				memset(rspStr,'\0', A7672_UART_BUFFSIZE_CONF);
 8004f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f004 fb04 	bl	800958a <memset>
				break;
 8004f82:	e00b      	b.n	8004f9c <Global_Urc_Handler+0xd4>
			}
			else
				retVal = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < g_urcEntityQueue.urcQueueCount; i++ )
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	73bb      	strb	r3, [r7, #14]
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <Global_Urc_Handler+0xe8>)
 8004f94:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3b0      	bcc.n	8004efe <Global_Urc_Handler+0x36>
		}
		p = (uint8_t*)memchr(p, 0x0a, 0);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
	while(p)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1a0      	bne.n	8004ee8 <Global_Urc_Handler+0x20>
	}
	return retVal;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	20000cec 	.word	0x20000cec

08004fb4 <ATCMD_Processor_Thread>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_Processor_Thread( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	static uint8_t ret = 0;
	while(1)
	{
		if(( g_recvdBytes = Uart_Receive_Data(&g_rcvPtr)) > 0)
 8004fb8:	4895      	ldr	r0, [pc, #596]	@ (8005210 <ATCMD_Processor_Thread+0x25c>)
 8004fba:	f002 fdf9 	bl	8007bb0 <Uart_Receive_Data>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4a94      	ldr	r2, [pc, #592]	@ (8005214 <ATCMD_Processor_Thread+0x260>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b93      	ldr	r3, [pc, #588]	@ (8005214 <ATCMD_Processor_Thread+0x260>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80d5 	beq.w	8005178 <ATCMD_Processor_Thread+0x1c4>
		{
			s_processingResponse = 1;
 8004fce:	4b92      	ldr	r3, [pc, #584]	@ (8005218 <ATCMD_Processor_Thread+0x264>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
			ret = Global_Urc_Handler(g_rcvPtr, g_recvdBytes);
 8004fd4:	4b8e      	ldr	r3, [pc, #568]	@ (8005210 <ATCMD_Processor_Thread+0x25c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8005214 <ATCMD_Processor_Thread+0x260>)
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff ff71 	bl	8004ec8 <Global_Urc_Handler>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b8c      	ldr	r3, [pc, #560]	@ (800521c <ATCMD_Processor_Thread+0x268>)
 8004fec:	701a      	strb	r2, [r3, #0]
			if(( 0 == ret ) && ( 1 == s_atExecute ))
 8004fee:	4b8b      	ldr	r3, [pc, #556]	@ (800521c <ATCMD_Processor_Thread+0x268>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 80c0 	bne.w	8005178 <ATCMD_Processor_Thread+0x1c4>
 8004ff8:	4b89      	ldr	r3, [pc, #548]	@ (8005220 <ATCMD_Processor_Thread+0x26c>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f040 80bb 	bne.w	8005178 <ATCMD_Processor_Thread+0x1c4>
			{
				Rsp_Time_Out_Timer_Stop();
 8005002:	f7ff ff1f 	bl	8004e44 <Rsp_Time_Out_Timer_Stop>
				if( g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].rspFunc )
 8005006:	4b87      	ldr	r3, [pc, #540]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005008:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 800500c:	4619      	mov	r1, r3
 800500e:	4a85      	ldr	r2, [pc, #532]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005010:	23a8      	movs	r3, #168	@ 0xa8
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	3398      	adds	r3, #152	@ 0x98
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 809d 	beq.w	800515c <ATCMD_Processor_Thread+0x1a8>
				{
					g_cmdQueue.currentCmdRet = g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].rspFunc(g_rcvPtr);
 8005022:	4b80      	ldr	r3, [pc, #512]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005024:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005028:	4619      	mov	r1, r3
 800502a:	4a7e      	ldr	r2, [pc, #504]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800502c:	23a8      	movs	r3, #168	@ 0xa8
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3398      	adds	r3, #152	@ 0x98
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a75      	ldr	r2, [pc, #468]	@ (8005210 <ATCMD_Processor_Thread+0x25c>)
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
 8005040:	4603      	mov	r3, r0
 8005042:	461a      	mov	r2, r3
 8005044:	4b77      	ldr	r3, [pc, #476]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005046:	f883 2546 	strb.w	r2, [r3, #1350]	@ 0x546
					s_modemStatus = ATCMD_MODEM_RSP_WAIT;
 800504a:	4b77      	ldr	r3, [pc, #476]	@ (8005228 <ATCMD_Processor_Thread+0x274>)
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
					switch(g_cmdQueue.currentCmdRet)
 8005050:	4b74      	ldr	r3, [pc, #464]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005052:	f993 3546 	ldrsb.w	r3, [r3, #1350]	@ 0x546
 8005056:	3301      	adds	r3, #1
 8005058:	2b04      	cmp	r3, #4
 800505a:	d87c      	bhi.n	8005156 <ATCMD_Processor_Thread+0x1a2>
 800505c:	a201      	add	r2, pc, #4	@ (adr r2, 8005064 <ATCMD_Processor_Thread+0xb0>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005079 	.word	0x08005079
 8005068:	080050cb 	.word	0x080050cb
 800506c:	0800512d 	.word	0x0800512d
 8005070:	080050cb 	.word	0x080050cb
 8005074:	08005121 	.word	0x08005121
					{
					case ATCMD_RSP_ERROR:
						if((g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].repCount) > 0)
 8005078:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800507a:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 800507e:	4619      	mov	r1, r3
 8005080:	4a68      	ldr	r2, [pc, #416]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005082:	23a8      	movs	r3, #168	@ 0xa8
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	339c      	adds	r3, #156	@ 0x9c
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d018      	beq.n	80050c4 <ATCMD_Processor_Thread+0x110>
						{
							g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].repCount--;
 8005092:	4b64      	ldr	r3, [pc, #400]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005094:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005098:	4962      	ldr	r1, [pc, #392]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800509a:	22a8      	movs	r2, #168	@ 0xa8
 800509c:	fb03 f202 	mul.w	r2, r3, r2
 80050a0:	440a      	add	r2, r1
 80050a2:	329c      	adds	r2, #156	@ 0x9c
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	3a01      	subs	r2, #1
 80050a8:	b2d0      	uxtb	r0, r2
 80050aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050ac:	21a8      	movs	r1, #168	@ 0xa8
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	4413      	add	r3, r2
 80050b4:	339c      	adds	r3, #156	@ 0x9c
 80050b6:	4602      	mov	r2, r0
 80050b8:	701a      	strb	r2, [r3, #0]
							g_cmdQueue.currentCmdStatus = ATCMD_NOK_OPER;
 80050ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2547 	strb.w	r2, [r3, #1351]	@ 0x547
						}
						else
							ATCMD_AT_Command_Queue_Init();

						break;
 80050c2:	e04b      	b.n	800515c <ATCMD_Processor_Thread+0x1a8>
							ATCMD_AT_Command_Queue_Init();
 80050c4:	f000 fa3c 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
						break;
 80050c8:	e048      	b.n	800515c <ATCMD_Processor_Thread+0x1a8>
					case ATCMD_RSP_CONTINUE:
					case ATCMD_RSP_FINISH:
						if( g_cmdQueue.commandCount > 0)
 80050ca:	4b56      	ldr	r3, [pc, #344]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050cc:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d042      	beq.n	800515a <ATCMD_Processor_Thread+0x1a6>
						{
							g_cmdQueue.commandCount--;
 80050d4:	4b53      	ldr	r3, [pc, #332]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050d6:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80050da:	3b01      	subs	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b51      	ldr	r3, [pc, #324]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050e0:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
							g_cmdQueue.currentCmdStatus = g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].successStatus;
 80050e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050e6:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 80050ea:	4619      	mov	r1, r3
 80050ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050ee:	23a8      	movs	r3, #168	@ 0xa8
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	4413      	add	r3, r2
 80050f6:	33a4      	adds	r3, #164	@ 0xa4
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80050fc:	f883 2547 	strb.w	r2, [r3, #1351]	@ 0x547
							g_cmdQueue.currentCmd = (g_cmdQueue.currentCmd + 1)%ATCMD_CMD_QUEUE;
 8005100:	4b48      	ldr	r3, [pc, #288]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005102:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005106:	3301      	adds	r3, #1
 8005108:	425a      	negs	r2, r3
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	f002 0207 	and.w	r2, r2, #7
 8005112:	bf58      	it	pl
 8005114:	4253      	negpl	r3, r2
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b42      	ldr	r3, [pc, #264]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800511a:	f883 2542 	strb.w	r2, [r3, #1346]	@ 0x542
						}
						break;
 800511e:	e01c      	b.n	800515a <ATCMD_Processor_Thread+0x1a6>
					case ATCMD_RSP_WAIT:
						s_modemStatus = ATCMD_MODEM_IDLE;
 8005120:	4b41      	ldr	r3, [pc, #260]	@ (8005228 <ATCMD_Processor_Thread+0x274>)
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]
						Rsp_Time_Out_Timer_Start();
 8005126:	f7ff fe67 	bl	8004df8 <Rsp_Time_Out_Timer_Start>
						break;
 800512a:	e017      	b.n	800515c <ATCMD_Processor_Thread+0x1a8>
					case ATCMD_RSP_FUN_OVER:
						g_cmdQueue.commandCount = 0;
 800512c:	4b3d      	ldr	r3, [pc, #244]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
						g_cmdQueue.currentCmdStatus = g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].successStatus;
 8005134:	4b3b      	ldr	r3, [pc, #236]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 8005136:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 800513a:	4619      	mov	r1, r3
 800513c:	4a39      	ldr	r2, [pc, #228]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800513e:	23a8      	movs	r3, #168	@ 0xa8
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	4413      	add	r3, r2
 8005146:	33a4      	adds	r3, #164	@ 0xa4
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	4b36      	ldr	r3, [pc, #216]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800514c:	f883 2547 	strb.w	r2, [r3, #1351]	@ 0x547
						Rsp_Time_Out_Timer_Stop();
 8005150:	f7ff fe78 	bl	8004e44 <Rsp_Time_Out_Timer_Stop>
						break;
 8005154:	e002      	b.n	800515c <ATCMD_Processor_Thread+0x1a8>

					default:
						break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <ATCMD_Processor_Thread+0x1a8>
						break;
 800515a:	bf00      	nop
						}
					}
				if(g_cmdQueue.currentCmdRet != ATCMD_RSP_WAIT)
 800515c:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 800515e:	f993 3546 	ldrsb.w	r3, [r3, #1350]	@ 0x546
 8005162:	2b03      	cmp	r3, #3
 8005164:	d002      	beq.n	800516c <ATCMD_Processor_Thread+0x1b8>
					s_atExecute = 0;
 8005166:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <ATCMD_Processor_Thread+0x26c>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
				s_modemRspWait = 0;
 800516c:	4b2f      	ldr	r3, [pc, #188]	@ (800522c <ATCMD_Processor_Thread+0x278>)
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
				s_responseRecvd = 1;
 8005172:	4b2f      	ldr	r3, [pc, #188]	@ (8005230 <ATCMD_Processor_Thread+0x27c>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
				}
			}
		 s_processingResponse =0;
 8005178:	4b27      	ldr	r3, [pc, #156]	@ (8005218 <ATCMD_Processor_Thread+0x264>)
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
		 switch(s_modemStatus)
 800517e:	4b2a      	ldr	r3, [pc, #168]	@ (8005228 <ATCMD_Processor_Thread+0x274>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b03      	cmp	r3, #3
 8005184:	f200 80e4 	bhi.w	8005350 <ATCMD_Processor_Thread+0x39c>
 8005188:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <ATCMD_Processor_Thread+0x1dc>)
 800518a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518e:	bf00      	nop
 8005190:	0800533d 	.word	0x0800533d
 8005194:	08005235 	.word	0x08005235
 8005198:	080051a1 	.word	0x080051a1
 800519c:	08005323 	.word	0x08005323
		 {
		 case ATCMD_MODEM_EXECUTE_AT:
			 if((g_cmdQueue.commandCount > 0) && (g_cmdQueue.cmdQueueWrite == 0) && (s_atExecute == 0 )&& (g_cmdQueue.currentCmd <= g_cmdQueue.lastCmd))
 80051a0:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051a2:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80d4 	beq.w	8005354 <ATCMD_Processor_Thread+0x3a0>
 80051ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051ae:	f893 3545 	ldrb.w	r3, [r3, #1349]	@ 0x545
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 80ce 	bne.w	8005354 <ATCMD_Processor_Thread+0x3a0>
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <ATCMD_Processor_Thread+0x26c>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 80c9 	bne.w	8005354 <ATCMD_Processor_Thread+0x3a0>
 80051c2:	4b18      	ldr	r3, [pc, #96]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051c4:	f893 2542 	ldrb.w	r2, [r3, #1346]	@ 0x542
 80051c8:	4b16      	ldr	r3, [pc, #88]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051ca:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80051ce:	429a      	cmp	r2, r3
 80051d0:	f200 80c0 	bhi.w	8005354 <ATCMD_Processor_Thread+0x3a0>
			 {
				 g_rcvPtr = Uart_Get_Current_Buffer();
 80051d4:	f002 fd2a 	bl	8007c2c <Uart_Get_Current_Buffer>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <ATCMD_Processor_Thread+0x25c>)
 80051dc:	6013      	str	r3, [r2, #0]
				 memset(g_rcvPtr, '\0', A7672_UART_BUFFSIZE_CONF);
 80051de:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <ATCMD_Processor_Thread+0x25c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f004 f9ce 	bl	800958a <memset>
				 Send_AT_Command(&g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd]);
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051f0:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 80051f4:	461a      	mov	r2, r3
 80051f6:	23a8      	movs	r3, #168	@ 0xa8
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	4a09      	ldr	r2, [pc, #36]	@ (8005224 <ATCMD_Processor_Thread+0x270>)
 80051fe:	4413      	add	r3, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fe35 	bl	8004e70 <Send_AT_Command>
				 s_modemStatus = ATCMD_MODEM_RSP_WAIT;
 8005206:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <ATCMD_Processor_Thread+0x274>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 800520c:	e0a2      	b.n	8005354 <ATCMD_Processor_Thread+0x3a0>
 800520e:	bf00      	nop
 8005210:	20000798 	.word	0x20000798
 8005214:	20000794 	.word	0x20000794
 8005218:	2000079e 	.word	0x2000079e
 800521c:	200007a2 	.word	0x200007a2
 8005220:	2000079c 	.word	0x2000079c
 8005224:	200007a4 	.word	0x200007a4
 8005228:	20000000 	.word	0x20000000
 800522c:	2000079d 	.word	0x2000079d
 8005230:	200007a0 	.word	0x200007a0
		 case ATCMD_MODEM_RSP_WAIT:
			 if((1 == g_timeOutFlag) && (1 == s_modemRspWait))
 8005234:	4b54      	ldr	r3, [pc, #336]	@ (8005388 <ATCMD_Processor_Thread+0x3d4>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d164      	bne.n	8005306 <ATCMD_Processor_Thread+0x352>
 800523c:	4b53      	ldr	r3, [pc, #332]	@ (800538c <ATCMD_Processor_Thread+0x3d8>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d160      	bne.n	8005306 <ATCMD_Processor_Thread+0x352>
			 {
				 if(g_cmdQueue.repeatCount > 0)
 8005244:	4b52      	ldr	r3, [pc, #328]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005246:	f893 3543 	ldrb.w	r3, [r3, #1347]	@ 0x543
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <ATCMD_Processor_Thread+0x2c8>
				 {
					 g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].repCount--;
 800524e:	4b50      	ldr	r3, [pc, #320]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005250:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005254:	494e      	ldr	r1, [pc, #312]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005256:	22a8      	movs	r2, #168	@ 0xa8
 8005258:	fb03 f202 	mul.w	r2, r3, r2
 800525c:	440a      	add	r2, r1
 800525e:	329c      	adds	r2, #156	@ 0x9c
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	3a01      	subs	r2, #1
 8005264:	b2d0      	uxtb	r0, r2
 8005266:	4a4a      	ldr	r2, [pc, #296]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005268:	21a8      	movs	r1, #168	@ 0xa8
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	4413      	add	r3, r2
 8005270:	339c      	adds	r3, #156	@ 0x9c
 8005272:	4602      	mov	r2, r0
 8005274:	701a      	strb	r2, [r3, #0]
					 s_atExecute = 0;
 8005276:	4b47      	ldr	r3, [pc, #284]	@ (8005394 <ATCMD_Processor_Thread+0x3e0>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
				 }
				 if((g_cmdQueue.atCmdQueue[g_cmdQueue.currentCmd].repCount == 0) && (g_cmdQueue.commandCount > 0))
 800527c:	4b44      	ldr	r3, [pc, #272]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 800527e:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005282:	4619      	mov	r1, r3
 8005284:	4a42      	ldr	r2, [pc, #264]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005286:	23a8      	movs	r3, #168	@ 0xa8
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	339c      	adds	r3, #156	@ 0x9c
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11e      	bne.n	80052d4 <ATCMD_Processor_Thread+0x320>
 8005296:	4b3e      	ldr	r3, [pc, #248]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 8005298:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800529c:	2b00      	cmp	r3, #0
 800529e:	d019      	beq.n	80052d4 <ATCMD_Processor_Thread+0x320>
				 {
					 g_cmdQueue.currentCmd = (g_cmdQueue.currentCmd + 1) % ATCMD_CMD_QUEUE;
 80052a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 80052a2:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 80052a6:	3301      	adds	r3, #1
 80052a8:	425a      	negs	r2, r3
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	f002 0207 	and.w	r2, r2, #7
 80052b2:	bf58      	it	pl
 80052b4:	4253      	negpl	r3, r2
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b35      	ldr	r3, [pc, #212]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 80052ba:	f883 2542 	strb.w	r2, [r3, #1346]	@ 0x542
					 g_cmdQueue.commandCount--;
 80052be:	4b34      	ldr	r3, [pc, #208]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 80052c0:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	4b31      	ldr	r3, [pc, #196]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 80052ca:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
					 s_atExecute = 0;
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <ATCMD_Processor_Thread+0x3e0>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
				 }
				 s_noResponseCount++;
 80052d4:	4b30      	ldr	r3, [pc, #192]	@ (8005398 <ATCMD_Processor_Thread+0x3e4>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3301      	adds	r3, #1
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005398 <ATCMD_Processor_Thread+0x3e4>)
 80052de:	701a      	strb	r2, [r3, #0]
				 if(s_noResponseCount > 2)
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <ATCMD_Processor_Thread+0x3e4>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d903      	bls.n	80052f0 <ATCMD_Processor_Thread+0x33c>
				 {
					 s_modemStatus = ATCMD_MODEM_NO_RSP;
 80052e8:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <ATCMD_Processor_Thread+0x3e8>)
 80052ea:	2203      	movs	r2, #3
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <ATCMD_Processor_Thread+0x342>
				 }
				 else
					 s_modemStatus = ATCMD_MODEM_EXECUTE_AT;
 80052f0:	4b2a      	ldr	r3, [pc, #168]	@ (800539c <ATCMD_Processor_Thread+0x3e8>)
 80052f2:	2202      	movs	r2, #2
 80052f4:	701a      	strb	r2, [r3, #0]
				 s_responseRecvd = 0;
 80052f6:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <ATCMD_Processor_Thread+0x3ec>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
				 s_modemRspWait = 0;
 80052fc:	4b23      	ldr	r3, [pc, #140]	@ (800538c <ATCMD_Processor_Thread+0x3d8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	701a      	strb	r2, [r3, #0]
				 Rsp_Time_Out_Timer_Stop();
 8005302:	f7ff fd9f 	bl	8004e44 <Rsp_Time_Out_Timer_Stop>
			 }
			 if( 1 == s_responseRecvd )
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <ATCMD_Processor_Thread+0x3ec>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d124      	bne.n	8005358 <ATCMD_Processor_Thread+0x3a4>
			 {
				 s_modemStatus = ATCMD_MODEM_EXECUTE_AT;
 800530e:	4b23      	ldr	r3, [pc, #140]	@ (800539c <ATCMD_Processor_Thread+0x3e8>)
 8005310:	2202      	movs	r2, #2
 8005312:	701a      	strb	r2, [r3, #0]
				 s_responseRecvd = 0;
 8005314:	4b22      	ldr	r3, [pc, #136]	@ (80053a0 <ATCMD_Processor_Thread+0x3ec>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
				 s_noResponseCount = 0;
 800531a:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <ATCMD_Processor_Thread+0x3e4>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 8005320:	e01a      	b.n	8005358 <ATCMD_Processor_Thread+0x3a4>
		 case ATCMD_MODEM_NO_RSP:
			 g_resetModuleFlag = 1;
 8005322:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <ATCMD_Processor_Thread+0x3f0>)
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]
			 g_cmdQueue.currentCmdStatus = ATCMD_NOK_OPER;
 8005328:	4b19      	ldr	r3, [pc, #100]	@ (8005390 <ATCMD_Processor_Thread+0x3dc>)
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2547 	strb.w	r2, [r3, #1351]	@ 0x547
			 ATCMD_AT_Command_Queue_Init();
 8005330:	f000 f906 	bl	8005540 <ATCMD_AT_Command_Queue_Init>
			 s_modemStatus = ATCMD_MODEM_EXECUTE_AT;
 8005334:	4b19      	ldr	r3, [pc, #100]	@ (800539c <ATCMD_Processor_Thread+0x3e8>)
 8005336:	2202      	movs	r2, #2
 8005338:	701a      	strb	r2, [r3, #0]
			 break;
 800533a:	e010      	b.n	800535e <ATCMD_Processor_Thread+0x3aa>
		 case ATCMD_MODEM_IDLE:
			 if( g_timeOutFlag == 1 )
 800533c:	4b12      	ldr	r3, [pc, #72]	@ (8005388 <ATCMD_Processor_Thread+0x3d4>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10b      	bne.n	800535c <ATCMD_Processor_Thread+0x3a8>
			 {

				 Rsp_Time_Out_Timer_Stop();
 8005344:	f7ff fd7e 	bl	8004e44 <Rsp_Time_Out_Timer_Stop>
				 s_modemStatus = ATCMD_MODEM_NO_RSP;
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <ATCMD_Processor_Thread+0x3e8>)
 800534a:	2203      	movs	r2, #3
 800534c:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 800534e:	e005      	b.n	800535c <ATCMD_Processor_Thread+0x3a8>
		 default:
			 break;
 8005350:	bf00      	nop
 8005352:	e004      	b.n	800535e <ATCMD_Processor_Thread+0x3aa>
			 break;
 8005354:	bf00      	nop
 8005356:	e002      	b.n	800535e <ATCMD_Processor_Thread+0x3aa>
			 break;
 8005358:	bf00      	nop
 800535a:	e000      	b.n	800535e <ATCMD_Processor_Thread+0x3aa>
			 break;
 800535c:	bf00      	nop
		}
		 if((g_errorCount > g_modemErrorStatus.errorCountThreshold)&&(g_modemErrorStatus.errorCountThreshold != 0))
 800535e:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <ATCMD_Processor_Thread+0x3f4>)
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <ATCMD_Processor_Thread+0x3f8>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	f4bf ae26 	bcs.w	8004fb8 <ATCMD_Processor_Thread+0x4>
 800536c:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <ATCMD_Processor_Thread+0x3f4>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f43f ae21 	beq.w	8004fb8 <ATCMD_Processor_Thread+0x4>
		 {
			 g_modemErrorStatus.modem_error_handler(&g_errorCount);
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <ATCMD_Processor_Thread+0x3f4>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	480c      	ldr	r0, [pc, #48]	@ (80053ac <ATCMD_Processor_Thread+0x3f8>)
 800537c:	4798      	blx	r3
			 g_errorCount = 0;
 800537e:	4b0b      	ldr	r3, [pc, #44]	@ (80053ac <ATCMD_Processor_Thread+0x3f8>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
		if(( g_recvdBytes = Uart_Receive_Data(&g_rcvPtr)) > 0)
 8005384:	e618      	b.n	8004fb8 <ATCMD_Processor_Thread+0x4>
 8005386:	bf00      	nop
 8005388:	2000078c 	.word	0x2000078c
 800538c:	2000079d 	.word	0x2000079d
 8005390:	200007a4 	.word	0x200007a4
 8005394:	2000079c 	.word	0x2000079c
 8005398:	2000079f 	.word	0x2000079f
 800539c:	20000000 	.word	0x20000000
 80053a0:	200007a0 	.word	0x200007a0
 80053a4:	200007a1 	.word	0x200007a1
 80053a8:	20000784 	.word	0x20000784
 80053ac:	200001b9 	.word	0x200001b9

080053b0 <ATCMD_Queue_Full_Check>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static uint8_t ATCMD_Queue_Full_Check( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
	if ( ATCMD_CMD_QUEUE <= g_cmdQueue.commandCount )
 80053b4:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <ATCMD_Queue_Full_Check+0x20>)
 80053b6:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d901      	bls.n	80053c2 <ATCMD_Queue_Full_Check+0x12>
	{
		return 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <ATCMD_Queue_Full_Check+0x14>
	}
	else {
		return 0;
 80053c2:	2300      	movs	r3, #0
	}
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	200007a4 	.word	0x200007a4

080053d4 <ATCMD_Command_Remove>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void ATCMD_Command_Remove(atcmd_at_command_t *atCommand)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	memset(atCommand->atCmd, '\0', sizeof(atCommand->atCmd));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2296      	movs	r2, #150	@ 0x96
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f004 f8d1 	bl	800958a <memset>
	atCommand->repCount = 0;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	atCommand->rspDelay = 0;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	atCommand->rspFunc = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	atCommand->successStatus = ATCMD_NOK_OPER;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <ATCMD_Add_AT_Cmd>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_queue_status_t ATCMD_Add_AT_Cmd( atcmd_at_command_t *atCommand)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	if(ATCMD_Queue_Full_Check())
 8005418:	f7ff ffca 	bl	80053b0 <ATCMD_Queue_Full_Check>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <ATCMD_Add_AT_Cmd+0x16>
		return ATCMD_QUEUE_FULL;
 8005422:	2300      	movs	r3, #0
 8005424:	e084      	b.n	8005530 <ATCMD_Add_AT_Cmd+0x120>

	if( 0 < g_cmdQueue.commandCount )
 8005426:	4b44      	ldr	r3, [pc, #272]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005428:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <ATCMD_Add_AT_Cmd+0x3e>
	{
		g_cmdQueue.lastCmd = (g_cmdQueue.lastCmd + 1) % ATCMD_CMD_QUEUE;
 8005430:	4b41      	ldr	r3, [pc, #260]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005432:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8005436:	3301      	adds	r3, #1
 8005438:	425a      	negs	r2, r3
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	f002 0207 	and.w	r2, r2, #7
 8005442:	bf58      	it	pl
 8005444:	4253      	negpl	r3, r2
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 800544a:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
	}

	memset(g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].atCmd, '\0', sizeof(g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].atCmd));
 800544e:	4b3a      	ldr	r3, [pc, #232]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005450:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8005454:	461a      	mov	r2, r3
 8005456:	23a8      	movs	r3, #168	@ 0xa8
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	4a36      	ldr	r2, [pc, #216]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 800545e:	4413      	add	r3, r2
 8005460:	2296      	movs	r2, #150	@ 0x96
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f004 f890 	bl	800958a <memset>
	strcpy((char*)g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].atCmd, (char*)atCommand->atCmd);
 800546a:	4b33      	ldr	r3, [pc, #204]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 800546c:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8005470:	461a      	mov	r2, r3
 8005472:	23a8      	movs	r3, #168	@ 0xa8
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	4a2f      	ldr	r2, [pc, #188]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 800547a:	4413      	add	r3, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f004 f8ef 	bl	8009664 <strcpy>
	g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].repCount = atCommand->repCount;
 8005486:	4b2c      	ldr	r3, [pc, #176]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005488:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 800548c:	4618      	mov	r0, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 109c 	ldrb.w	r1, [r3, #156]	@ 0x9c
 8005494:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005496:	23a8      	movs	r3, #168	@ 0xa8
 8005498:	fb00 f303 	mul.w	r3, r0, r3
 800549c:	4413      	add	r3, r2
 800549e:	339c      	adds	r3, #156	@ 0x9c
 80054a0:	460a      	mov	r2, r1
 80054a2:	701a      	strb	r2, [r3, #0]
	if( NULL != atCommand->rspFunc )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <ATCMD_Add_AT_Cmd+0xbc>
	{
		g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].rspFunc = atCommand->rspFunc;
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054b0:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80054b4:	4618      	mov	r0, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80054bc:	491e      	ldr	r1, [pc, #120]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054be:	23a8      	movs	r3, #168	@ 0xa8
 80054c0:	fb00 f303 	mul.w	r3, r0, r3
 80054c4:	440b      	add	r3, r1
 80054c6:	3398      	adds	r3, #152	@ 0x98
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e00b      	b.n	80054e4 <ATCMD_Add_AT_Cmd+0xd4>
	}
	else
	{
		g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].rspFunc = ATCMD_Default_Callback;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054ce:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80054d2:	4619      	mov	r1, r3
 80054d4:	4a18      	ldr	r2, [pc, #96]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054d6:	23a8      	movs	r3, #168	@ 0xa8
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3398      	adds	r3, #152	@ 0x98
 80054e0:	4a16      	ldr	r2, [pc, #88]	@ (800553c <ATCMD_Add_AT_Cmd+0x12c>)
 80054e2:	601a      	str	r2, [r3, #0]
	}
	g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].rspDelay = atCommand->rspDelay;
 80054e4:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054e6:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80054ea:	4618      	mov	r0, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80054f2:	4911      	ldr	r1, [pc, #68]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 80054f4:	23a8      	movs	r3, #168	@ 0xa8
 80054f6:	fb00 f303 	mul.w	r3, r0, r3
 80054fa:	440b      	add	r3, r1
 80054fc:	33a0      	adds	r3, #160	@ 0xa0
 80054fe:	601a      	str	r2, [r3, #0]
	g_cmdQueue.atCmdQueue[g_cmdQueue.lastCmd].successStatus = atCommand->successStatus;
 8005500:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005502:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8005506:	4618      	mov	r0, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 10a4 	ldrb.w	r1, [r3, #164]	@ 0xa4
 800550e:	4a0a      	ldr	r2, [pc, #40]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005510:	23a8      	movs	r3, #168	@ 0xa8
 8005512:	fb00 f303 	mul.w	r3, r0, r3
 8005516:	4413      	add	r3, r2
 8005518:	33a4      	adds	r3, #164	@ 0xa4
 800551a:	460a      	mov	r2, r1
 800551c:	701a      	strb	r2, [r3, #0]
	g_cmdQueue.commandCount++;
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 8005520:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8005524:	3301      	adds	r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <ATCMD_Add_AT_Cmd+0x128>)
 800552a:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
	return ATCMD_QUEUE_OPER_OK;
 800552e:	2303      	movs	r3, #3
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200007a4 	.word	0x200007a4
 800553c:	08000bb9 	.word	0x08000bb9

08005540 <ATCMD_AT_Command_Queue_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_AT_Command_Queue_Init( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
	static uint8_t i =0;
	for(i = 0; i < ATCMD_CMD_QUEUE; i++)
 8005544:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e03e      	b.n	80055ca <ATCMD_AT_Command_Queue_Init+0x8a>
	{
		memset(g_cmdQueue.atCmdQueue[i].atCmd, '\0', sizeof(g_cmdQueue.atCmdQueue[i].atCmd));
 800554c:	4b32      	ldr	r3, [pc, #200]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	23a8      	movs	r3, #168	@ 0xa8
 8005554:	fb02 f303 	mul.w	r3, r2, r3
 8005558:	4a30      	ldr	r2, [pc, #192]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 800555a:	4413      	add	r3, r2
 800555c:	2296      	movs	r2, #150	@ 0x96
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f004 f812 	bl	800958a <memset>
		g_cmdQueue.atCmdQueue[i].repCount = 0;
 8005566:	4b2c      	ldr	r3, [pc, #176]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	4a2b      	ldr	r2, [pc, #172]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 800556e:	23a8      	movs	r3, #168	@ 0xa8
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	339c      	adds	r3, #156	@ 0x9c
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
		g_cmdQueue.atCmdQueue[i].rspDelay = 0;
 800557c:	4b26      	ldr	r3, [pc, #152]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	4a26      	ldr	r2, [pc, #152]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 8005584:	23a8      	movs	r3, #168	@ 0xa8
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
 800558c:	33a0      	adds	r3, #160	@ 0xa0
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
		g_cmdQueue.atCmdQueue[i].rspFunc = NULL;
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4a20      	ldr	r2, [pc, #128]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 800559a:	23a8      	movs	r3, #168	@ 0xa8
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	3398      	adds	r3, #152	@ 0x98
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
		g_cmdQueue.atCmdQueue[i].successStatus = 0;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4a1b      	ldr	r2, [pc, #108]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055b0:	23a8      	movs	r3, #168	@ 0xa8
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	33a4      	adds	r3, #164	@ 0xa4
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < ATCMD_CMD_QUEUE; i++)
 80055be:	4b16      	ldr	r3, [pc, #88]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	4b13      	ldr	r3, [pc, #76]	@ (8005618 <ATCMD_AT_Command_Queue_Init+0xd8>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b07      	cmp	r3, #7
 80055d0:	d9bc      	bls.n	800554c <ATCMD_AT_Command_Queue_Init+0xc>
	}

	g_cmdQueue.firstCmd = 0;
 80055d2:	4b12      	ldr	r3, [pc, #72]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2540 	strb.w	r2, [r3, #1344]	@ 0x540
	g_cmdQueue.lastCmd = 0;
 80055da:	4b10      	ldr	r3, [pc, #64]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
	g_cmdQueue.currentCmd = 0;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2542 	strb.w	r2, [r3, #1346]	@ 0x542
	g_cmdQueue.repeatCount = 0;
 80055ea:	4b0c      	ldr	r3, [pc, #48]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2543 	strb.w	r2, [r3, #1347]	@ 0x543
	g_cmdQueue.commandCount = 0;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
	g_cmdQueue.cmdQueueWrite = 0;
 80055fa:	4b08      	ldr	r3, [pc, #32]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2545 	strb.w	r2, [r3, #1349]	@ 0x545
	g_cmdQueue.currentCmdRet = ATCMD_RSP_ERROR;
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 8005604:	22ff      	movs	r2, #255	@ 0xff
 8005606:	f883 2546 	strb.w	r2, [r3, #1350]	@ 0x546
	g_cmdQueue.currentCmdStatus = ATCMD_NOK_OPER;
 800560a:	4b04      	ldr	r3, [pc, #16]	@ (800561c <ATCMD_AT_Command_Queue_Init+0xdc>)
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2547 	strb.w	r2, [r3, #1351]	@ 0x547
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000f0c 	.word	0x20000f0c
 800561c:	200007a4 	.word	0x200007a4

08005620 <ATCMD_Del_AT_Cmd_Head>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_queue_status_t ATCMD_Del_AT_Cmd_Head( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	if( g_cmdQueue.firstCmd == g_cmdQueue.currentCmd )
 8005624:	4b47      	ldr	r3, [pc, #284]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005626:	f893 2540 	ldrb.w	r2, [r3, #1344]	@ 0x540
 800562a:	4b46      	ldr	r3, [pc, #280]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800562c:	f893 3542 	ldrb.w	r3, [r3, #1346]	@ 0x542
 8005630:	429a      	cmp	r2, r3
 8005632:	d101      	bne.n	8005638 <ATCMD_Del_AT_Cmd_Head+0x18>
	{
		return ATCMD_QUEUE_ERROR;
 8005634:	2302      	movs	r3, #2
 8005636:	e083      	b.n	8005740 <ATCMD_Del_AT_Cmd_Head+0x120>
	}

	if( 0 == g_cmdQueue.commandCount )
 8005638:	4b42      	ldr	r3, [pc, #264]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800563a:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <ATCMD_Del_AT_Cmd_Head+0x26>
	{
		return ATCMD_QUEUE_EMPTY;
 8005642:	2301      	movs	r3, #1
 8005644:	e07c      	b.n	8005740 <ATCMD_Del_AT_Cmd_Head+0x120>
	}

	if( g_cmdQueue.currentCmd < g_cmdQueue.firstCmd )
 8005646:	4b3f      	ldr	r3, [pc, #252]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005648:	f893 2542 	ldrb.w	r2, [r3, #1346]	@ 0x542
 800564c:	4b3d      	ldr	r3, [pc, #244]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800564e:	f893 3540 	ldrb.w	r3, [r3, #1344]	@ 0x540
 8005652:	429a      	cmp	r2, r3
 8005654:	d247      	bcs.n	80056e6 <ATCMD_Del_AT_Cmd_Head+0xc6>
	{
		for( i = g_cmdQueue.firstCmd; i < ATCMD_CMD_QUEUE; i++ )
 8005656:	4b3b      	ldr	r3, [pc, #236]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005658:	f893 2540 	ldrb.w	r2, [r3, #1344]	@ 0x540
 800565c:	4b3a      	ldr	r3, [pc, #232]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e018      	b.n	8005694 <ATCMD_Del_AT_Cmd_Head+0x74>
		{
			ATCMD_Command_Remove(&g_cmdQueue.atCmdQueue[i]);
 8005662:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	23a8      	movs	r3, #168	@ 0xa8
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	4a35      	ldr	r2, [pc, #212]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005670:	4413      	add	r3, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff feae 	bl	80053d4 <ATCMD_Command_Remove>
			g_cmdQueue.commandCount--;
 8005678:	4b32      	ldr	r3, [pc, #200]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800567a:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800567e:	3b01      	subs	r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005684:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
		for( i = g_cmdQueue.firstCmd; i < ATCMD_CMD_QUEUE; i++ )
 8005688:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	b2da      	uxtb	r2, r3
 8005690:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	4b2c      	ldr	r3, [pc, #176]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b07      	cmp	r3, #7
 800569a:	d9e2      	bls.n	8005662 <ATCMD_Del_AT_Cmd_Head+0x42>
		}
		for( i = 0; i < g_cmdQueue.currentCmd; i++ )
 800569c:	4b2a      	ldr	r3, [pc, #168]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e018      	b.n	80056d6 <ATCMD_Del_AT_Cmd_Head+0xb6>
		{
			ATCMD_Command_Remove(&g_cmdQueue.atCmdQueue[i]);
 80056a4:	4b28      	ldr	r3, [pc, #160]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	23a8      	movs	r3, #168	@ 0xa8
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	4a24      	ldr	r2, [pc, #144]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 80056b2:	4413      	add	r3, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fe8d 	bl	80053d4 <ATCMD_Command_Remove>
			g_cmdQueue.commandCount--;
 80056ba:	4b22      	ldr	r3, [pc, #136]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 80056bc:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 80056c6:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
		for( i = 0; i < g_cmdQueue.currentCmd; i++ )
 80056ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 80056d8:	f893 2542 	ldrb.w	r2, [r3, #1346]	@ 0x542
 80056dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d8df      	bhi.n	80056a4 <ATCMD_Del_AT_Cmd_Head+0x84>
 80056e4:	e025      	b.n	8005732 <ATCMD_Del_AT_Cmd_Head+0x112>
		}
	}
	else
	{
		for(i = g_cmdQueue.firstCmd; i < g_cmdQueue.currentCmd; i++)
 80056e6:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 80056e8:	f893 2540 	ldrb.w	r2, [r3, #1344]	@ 0x540
 80056ec:	4b16      	ldr	r3, [pc, #88]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e018      	b.n	8005724 <ATCMD_Del_AT_Cmd_Head+0x104>
		{
			ATCMD_Command_Remove( &g_cmdQueue.atCmdQueue[i]);
 80056f2:	4b15      	ldr	r3, [pc, #84]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	23a8      	movs	r3, #168	@ 0xa8
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005700:	4413      	add	r3, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fe66 	bl	80053d4 <ATCMD_Command_Remove>
			g_cmdQueue.commandCount--;
 8005708:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800570a:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 800570e:	3b01      	subs	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005714:	f883 2544 	strb.w	r2, [r3, #1348]	@ 0x544
		for(i = g_cmdQueue.firstCmd; i < g_cmdQueue.currentCmd; i++)
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005726:	f893 2542 	ldrb.w	r2, [r3, #1346]	@ 0x542
 800572a:	4b07      	ldr	r3, [pc, #28]	@ (8005748 <ATCMD_Del_AT_Cmd_Head+0x128>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d8df      	bhi.n	80056f2 <ATCMD_Del_AT_Cmd_Head+0xd2>
		}
	}
	g_cmdQueue.firstCmd = g_cmdQueue.currentCmd;
 8005732:	4b04      	ldr	r3, [pc, #16]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 8005734:	f893 2542 	ldrb.w	r2, [r3, #1346]	@ 0x542
 8005738:	4b02      	ldr	r3, [pc, #8]	@ (8005744 <ATCMD_Del_AT_Cmd_Head+0x124>)
 800573a:	f883 2540 	strb.w	r2, [r3, #1344]	@ 0x540
	return ATCMD_QUEUE_OPER_OK;
 800573e:	2303      	movs	r3, #3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200007a4 	.word	0x200007a4
 8005748:	20000f0d 	.word	0x20000f0d

0800574c <ATCMD_Add_AT_Cmd_Queue>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_queue_status_t ATCMD_Add_AT_Cmd_Queue( atcmd_at_command_t *atCommand, uint16_t commandCount)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
	static uint16_t i;
	i = commandCount;
 8005758:	4a15      	ldr	r2, [pc, #84]	@ (80057b0 <ATCMD_Add_AT_Cmd_Queue+0x64>)
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	8013      	strh	r3, [r2, #0]
	if( ATCMD_CMD_QUEUE < (g_cmdQueue.commandCount + commandCount))
 800575e:	4b15      	ldr	r3, [pc, #84]	@ (80057b4 <ATCMD_Add_AT_Cmd_Queue+0x68>)
 8005760:	f893 3544 	ldrb.w	r3, [r3, #1348]	@ 0x544
 8005764:	461a      	mov	r2, r3
 8005766:	887b      	ldrh	r3, [r7, #2]
 8005768:	4413      	add	r3, r2
 800576a:	2b08      	cmp	r3, #8
 800576c:	dd01      	ble.n	8005772 <ATCMD_Add_AT_Cmd_Queue+0x26>
	{
		return ATCMD_QUEUE_ERROR;
 800576e:	2302      	movs	r3, #2
 8005770:	e01a      	b.n	80057a8 <ATCMD_Add_AT_Cmd_Queue+0x5c>
	}
	ATCMD_Del_AT_Cmd_Head();
 8005772:	f7ff ff55 	bl	8005620 <ATCMD_Del_AT_Cmd_Head>
	while(i)
 8005776:	e012      	b.n	800579e <ATCMD_Add_AT_Cmd_Queue+0x52>
	{
		ATCMD_Add_AT_Cmd(&atCommand[commandCount - i]);
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <ATCMD_Add_AT_Cmd_Queue+0x64>)
 800577c:	8812      	ldrh	r2, [r2, #0]
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	23a8      	movs	r3, #168	@ 0xa8
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fe3f 	bl	8005410 <ATCMD_Add_AT_Cmd>
		i--;
 8005792:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <ATCMD_Add_AT_Cmd_Queue+0x64>)
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <ATCMD_Add_AT_Cmd_Queue+0x64>)
 800579c:	801a      	strh	r2, [r3, #0]
	while(i)
 800579e:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <ATCMD_Add_AT_Cmd_Queue+0x64>)
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e8      	bne.n	8005778 <ATCMD_Add_AT_Cmd_Queue+0x2c>
	}
	return ATCMD_QUEUE_OPER_OK;
 80057a6:	2303      	movs	r3, #3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000f0e 	.word	0x20000f0e
 80057b4:	200007a4 	.word	0x200007a4

080057b8 <ATCMD_Urc_Queue_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_Urc_Queue_Init( atcmd_urc_queue_struct_t *urcQueue)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
	urcQueue->urcQueueCount = 0;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 221c 	strh.w	r2, [r3, #540]	@ 0x21c

	for(i = 0; i < ATCMD_URC_QUEUE; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e018      	b.n	8005804 <ATCMD_Urc_Queue_Init+0x4c>
	{
		memset(urcQueue->urcQueue[i].urcStr, '\0', sizeof(uint8_t)*30);
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	4413      	add	r3, r2
 80057e0:	221e      	movs	r2, #30
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f003 fed0 	bl	800958a <memset>
		urcQueue->urcQueue[i].urcCallback = NULL;
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3320      	adds	r3, #32
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
	for(i = 0; i < ATCMD_URC_QUEUE; i++)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3301      	adds	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b0e      	cmp	r3, #14
 8005808:	d9e3      	bls.n	80057d2 <ATCMD_Urc_Queue_Init+0x1a>
	}
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <ATCMD_Add_Urc>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static atcmd_queue_status_t ATCMD_Add_Urc( atcmd_urc_queue_t *UrcQueue, uint8_t position )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
	if( position > ATCMD_URC_QUEUE )
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d901      	bls.n	800582a <ATCMD_Add_Urc+0x16>
	{
		return ATCMD_QUEUE_ERROR;
 8005826:	2302      	movs	r3, #2
 8005828:	e017      	b.n	800585a <ATCMD_Add_Urc+0x46>
	}
	strcpy((char*)g_urcEntityQueue.urcQueue[position].urcStr, (char*)UrcQueue->urcStr);
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4a0b      	ldr	r2, [pc, #44]	@ (8005864 <ATCMD_Add_Urc+0x50>)
 8005836:	4413      	add	r3, r2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f003 ff11 	bl	8009664 <strcpy>
	g_urcEntityQueue.urcQueue[position].urcCallback = UrcQueue->urcCallback;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a19      	ldr	r1, [r3, #32]
 8005848:	4806      	ldr	r0, [pc, #24]	@ (8005864 <ATCMD_Add_Urc+0x50>)
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4403      	add	r3, r0
 8005854:	3320      	adds	r3, #32
 8005856:	6019      	str	r1, [r3, #0]
	return ATCMD_QUEUE_OPER_OK;
 8005858:	2303      	movs	r3, #3
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000cec 	.word	0x20000cec

08005868 <ATCMD_Add_Urc_Queue>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
atcmd_queue_status_t ATCMD_Add_Urc_Queue( atcmd_urc_queue_struct_t *urcQueueStruct)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	73fb      	strb	r3, [r7, #15]
	ATCMD_Urc_Queue_Init(&g_urcEntityQueue);
 8005874:	4820      	ldr	r0, [pc, #128]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 8005876:	f7ff ff9f 	bl	80057b8 <ATCMD_Urc_Queue_Init>
	if( g_urcEntityQueue.urcQueueCount + urcQueueStruct->urcQueueCount > ATCMD_URC_QUEUE)
 800587a:	4b1f      	ldr	r3, [pc, #124]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 800587c:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 8005888:	4413      	add	r3, r2
 800588a:	2b0f      	cmp	r3, #15
 800588c:	dd01      	ble.n	8005892 <ATCMD_Add_Urc_Queue+0x2a>
	{
		return ATCMD_QUEUE_ERROR;
 800588e:	2302      	movs	r3, #2
 8005890:	e02e      	b.n	80058f0 <ATCMD_Add_Urc_Queue+0x88>
	}
	for( i = 0; i < urcQueueStruct->urcQueueCount; i++ )
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e018      	b.n	80058ca <ATCMD_Add_Urc_Queue+0x62>
	{
		ATCMD_Add_Urc(&urcQueueStruct->urcQueue[g_urcEntityQueue.urcQueueCount + i], g_urcEntityQueue.urcQueueCount + i);
 8005898:	4b17      	ldr	r3, [pc, #92]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 800589a:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 800589e:	461a      	mov	r2, r3
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	441a      	add	r2, r3
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	18d0      	adds	r0, r2, r3
 80058b0:	4b11      	ldr	r3, [pc, #68]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 80058b2:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	4413      	add	r3, r2
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	f7ff ffa8 	bl	8005814 <ATCMD_Add_Urc>
	for( i = 0; i < urcQueueStruct->urcQueueCount; i++ )
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	3301      	adds	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3df      	bcc.n	8005898 <ATCMD_Add_Urc_Queue+0x30>
	}
	g_urcEntityQueue.urcQueueCount = g_urcEntityQueue.urcQueueCount + urcQueueStruct->urcQueueCount;
 80058d8:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 80058da:	f8b3 221c 	ldrh.w	r2, [r3, #540]	@ 0x21c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8b3 321c 	ldrh.w	r3, [r3, #540]	@ 0x21c
 80058e4:	4413      	add	r3, r2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <ATCMD_Add_Urc_Queue+0x90>)
 80058ea:	f8a3 221c 	strh.w	r2, [r3, #540]	@ 0x21c
	return ATCMD_QUEUE_OPER_OK;
 80058ee:	2303      	movs	r3, #3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000cec 	.word	0x20000cec

080058fc <HashCal>:

//- Calculates Hash Value and returns Unsigned long type Hash Value
//- Which can further help us search the data from the Memory

static unsigned long HashCal(char *str) // This is a local function
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 8005904:	f241 5305 	movw	r3, #5381	@ 0x1505
 8005908:	60fb      	str	r3, [r7, #12]
    unsigned short int c ;
    while(c = *str++)
 800590a:	e006      	b.n	800591a <HashCal+0x1e>
        hash = ((hash << 5) + hash) + c;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	441a      	add	r2, r3
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	4413      	add	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
    while(c = *str++)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	817b      	strh	r3, [r7, #10]
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HashCal+0x10>
    return hash;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <strcopy>:

static int strcopy(char *buffer, char *start, char end, const int maxLen, unsigned short int length)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
	unsigned short int charCount=0;
 8005948:	2300      	movs	r3, #0
 800594a:	82fb      	strh	r3, [r7, #22]
  if(length==0)
 800594c:	8c3b      	ldrh	r3, [r7, #32]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d121      	bne.n	8005996 <strcopy+0x5e>
  {
       do
       {
		   *buffer++ = *start++;
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	1c53      	adds	r3, r2, #1
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	60f9      	str	r1, [r7, #12]
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
		   charCount++;
 8005962:	8afb      	ldrh	r3, [r7, #22]
 8005964:	3301      	adds	r3, #1
 8005966:	82fb      	strh	r3, [r7, #22]
		   if(charCount >=maxLen)
 8005968:	8afb      	ldrh	r3, [r7, #22]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	dc01      	bgt.n	8005974 <strcopy+0x3c>
			   return 0;
 8005970:	2300      	movs	r3, #0
 8005972:	e01f      	b.n	80059b4 <strcopy+0x7c>
       }while(*start != end);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	79fa      	ldrb	r2, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d1e9      	bne.n	8005952 <strcopy+0x1a>
 800597e:	e00f      	b.n	80059a0 <strcopy+0x68>
  }
 else
 {
     while(length !=0)
     {
         *buffer++ = *start++;
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	1c53      	adds	r3, r2, #1
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	1c59      	adds	r1, r3, #1
 800598a:	60f9      	str	r1, [r7, #12]
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	701a      	strb	r2, [r3, #0]
//         *start++;
//         *buffer++;
         length--;
 8005990:	8c3b      	ldrh	r3, [r7, #32]
 8005992:	3b01      	subs	r3, #1
 8005994:	843b      	strh	r3, [r7, #32]
     while(length !=0)
 8005996:	8c3b      	ldrh	r3, [r7, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1f1      	bne.n	8005980 <strcopy+0x48>
     }
     return 1;
 800599c:	2301      	movs	r3, #1
 800599e:	e009      	b.n	80059b4 <strcopy+0x7c>
 }
   *buffer++ = *start;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	60fa      	str	r2, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
//   *buffer++;
   *buffer ='\0';
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
   return 1;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <JSONStructInit>:
//----------------
//- Initializes the JSON Structure for parsing
//- returns error code

unsigned char JSONStructInit(struct jsonParser *jParser, char *buffer)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
    unsigned short int charCount = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	82fb      	strh	r3, [r7, #22]
    unsigned char err = JDATA_OK;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
    char *start = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]

    start = buffer;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	613b      	str	r3, [r7, #16]

    while((*start!='{')&&(*start!='['))
 80059da:	e00f      	b.n	80059fc <JSONStructInit+0x3c>
	{
    	start++;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	3301      	adds	r3, #1
 80059e0:	613b      	str	r3, [r7, #16]
    	charCount++;
 80059e2:	8afb      	ldrh	r3, [r7, #22]
 80059e4:	3301      	adds	r3, #1
 80059e6:	82fb      	strh	r3, [r7, #22]
    	if(charCount == MAXJSONBYTES )
 80059e8:	8afb      	ldrh	r3, [r7, #22]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ee:	d105      	bne.n	80059fc <JSONStructInit+0x3c>
    	{
    		charCount = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	82fb      	strh	r3, [r7, #22]
    		err = JDATA_NOK;
 80059f4:	2302      	movs	r3, #2
 80059f6:	73fb      	strb	r3, [r7, #15]
    		return err;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	e029      	b.n	8005a50 <JSONStructInit+0x90>
    while((*start!='{')&&(*start!='['))
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b7b      	cmp	r3, #123	@ 0x7b
 8005a02:	d003      	beq.n	8005a0c <JSONStructInit+0x4c>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a0a:	d1e7      	bne.n	80059dc <JSONStructInit+0x1c>
    	}
	}
    jParser->buffer = start;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	601a      	str	r2, [r3, #0]
    jParser->currP = start;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	609a      	str	r2, [r3, #8]
    jParser->numTokens = 0;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	615a      	str	r2, [r3, #20]
    jParser->currentPos = 0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	605a      	str	r2, [r3, #4]
    jParser->stackPos = 0;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
    if(*start == '{')
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b7b      	cmp	r3, #123	@ 0x7b
 8005a30:	d103      	bne.n	8005a3a <JSONStructInit+0x7a>
    	jParser->rootType = JDATA_OBJECT;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	761a      	strb	r2, [r3, #24]
 8005a38:	e006      	b.n	8005a48 <JSONStructInit+0x88>
    else if(*start == '[')
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a40:	d102      	bne.n	8005a48 <JSONStructInit+0x88>
    	jParser->rootType = JDATA_ARRAY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	761a      	strb	r2, [r3, #24]
    jParser->parserStatus = JSON_START;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	731a      	strb	r2, [r3, #12]
    return (err);
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <JSONParseData>:
//- Takes the jsonParser and jsonReadData as input to parse the JSON data
//- returns error


unsigned char JSONParseData(struct jsonParser *jParser)
{
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b08b      	sub	sp, #44	@ 0x2c
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
    char *start;
    char *end;
    char *tempStr;
    unsigned short int charCount=0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	827b      	strh	r3, [r7, #18]
    unsigned short int charFound = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	823b      	strh	r3, [r7, #16]
    char c;
    unsigned short int err = JDATA_OK;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	81bb      	strh	r3, [r7, #12]
    unsigned short int currentPos=0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	817b      	strh	r3, [r7, #10]
    unsigned short int success = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	813b      	strh	r3, [r7, #8]

    tempStr = jParser->currP;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

    if(jParser->rootType == JDATA_OBJECT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7e1b      	ldrb	r3, [r3, #24]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	f040 8247 	bne.w	8005f16 <JSONParseData+0x4ba>
    {
        while(*++tempStr!='\"')
 8005a88:	e00c      	b.n	8005aa4 <JSONParseData+0x48>
        {
            charCount++;
 8005a8a:	8a7b      	ldrh	r3, [r7, #18]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	827b      	strh	r3, [r7, #18]
            if(charCount>=MAXTOKENBYTES)
 8005a90:	8a7b      	ldrh	r3, [r7, #18]
 8005a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a94:	d906      	bls.n	8005aa4 <JSONParseData+0x48>
            {
                charCount=0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	827b      	strh	r3, [r7, #18]
                err = JDATA_NOK;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	81bb      	strh	r3, [r7, #12]
//                exit(1);
                return(1);
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f000 bc27 	b.w	80062f2 <JSONParseData+0x896>
        while(*++tempStr!='\"')
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b22      	cmp	r3, #34	@ 0x22
 8005ab0:	d1eb      	bne.n	8005a8a <JSONParseData+0x2e>
            }
        }                                       //Find the first \" after the '{' to find the start of json KEY
        start = tempStr;                        // start pointer is made equal to the address of first \"
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	61fb      	str	r3, [r7, #28]

        while(*++tempStr!=':')
 8005ab6:	e00c      	b.n	8005ad2 <JSONParseData+0x76>
        {
            charCount++;
 8005ab8:	8a7b      	ldrh	r3, [r7, #18]
 8005aba:	3301      	adds	r3, #1
 8005abc:	827b      	strh	r3, [r7, #18]
            if(charCount >=MAXTOKENBYTES)
 8005abe:	8a7b      	ldrh	r3, [r7, #18]
 8005ac0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac2:	d906      	bls.n	8005ad2 <JSONParseData+0x76>
            {
                charCount=0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	827b      	strh	r3, [r7, #18]
                err = JDATA_NOK;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	81bb      	strh	r3, [r7, #12]
//                exit(1);
                return(1);
 8005acc:	2301      	movs	r3, #1
 8005ace:	f000 bc10 	b.w	80062f2 <JSONParseData+0x896>
        while(*++tempStr!=':')
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b3a      	cmp	r3, #58	@ 0x3a
 8005ade:	d1eb      	bne.n	8005ab8 <JSONParseData+0x5c>
            }
        }                                       //Find the address of the ":" after the json key
        end = tempStr;                          //end pointer is made equal to the ":" before the value of the json key
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	61bb      	str	r3, [r7, #24]
        currentPos = jParser->numTokens;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	817b      	strh	r3, [r7, #10]
        success = strcopy(jParser->jData[currentPos].keyValue, start, '\"', 128, 0); // the value is stored in key value buffer of struct
 8005aea:	897a      	ldrh	r2, [r7, #10]
 8005aec:	4613      	mov	r3, r2
 8005aee:	015b      	lsls	r3, r3, #5
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	3318      	adds	r3, #24
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	1d18      	adds	r0, r3, #4
 8005afc:	2300      	movs	r3, #0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2380      	movs	r3, #128	@ 0x80
 8005b02:	2222      	movs	r2, #34	@ 0x22
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	f7ff ff17 	bl	8005938 <strcopy>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	813b      	strh	r3, [r7, #8]
        if(success!=1)
 8005b0e:	893b      	ldrh	r3, [r7, #8]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <JSONParseData+0xbc>
        {
//            exit(0);
            return(0);
 8005b14:	2300      	movs	r3, #0
 8005b16:	e3ec      	b.n	80062f2 <JSONParseData+0x896>
        }
        else
        jParser->jData[currentPos].hashValue = HashCal(jParser->jData[currentPos].keyValue);
 8005b18:	897a      	ldrh	r2, [r7, #10]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	015b      	lsls	r3, r3, #5
 8005b1e:	4413      	add	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	3318      	adds	r3, #24
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	3304      	adds	r3, #4
 8005b2a:	897c      	ldrh	r4, [r7, #10]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fee5 	bl	80058fc <HashCal>
 8005b32:	4601      	mov	r1, r0
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4623      	mov	r3, r4
 8005b38:	015b      	lsls	r3, r3, #5
 8005b3a:	4423      	add	r3, r4
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	339c      	adds	r3, #156	@ 0x9c
 8005b42:	6019      	str	r1, [r3, #0]
        // on successful storage into the struct the hash value
        // is calculated and stored in the respective struct
      start = end; // Address of the start pointer is made equal to the end pointer.
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	61fb      	str	r3, [r7, #28]
      c = *++end;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	73fb      	strb	r3, [r7, #15]
      charCount =0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	827b      	strh	r3, [r7, #18]
      while(c)
 8005b58:	e136      	b.n	8005dc8 <JSONParseData+0x36c>
      {
          charFound=0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	823b      	strh	r3, [r7, #16]
          switch(c)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	3b22      	subs	r3, #34	@ 0x22
 8005b62:	2b59      	cmp	r3, #89	@ 0x59
 8005b64:	f200 8116 	bhi.w	8005d94 <JSONParseData+0x338>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <JSONParseData+0x114>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005d25 	.word	0x08005d25
 8005b74:	08005d95 	.word	0x08005d95
 8005b78:	08005d95 	.word	0x08005d95
 8005b7c:	08005d95 	.word	0x08005d95
 8005b80:	08005d95 	.word	0x08005d95
 8005b84:	08005d95 	.word	0x08005d95
 8005b88:	08005d95 	.word	0x08005d95
 8005b8c:	08005d95 	.word	0x08005d95
 8005b90:	08005d95 	.word	0x08005d95
 8005b94:	08005d95 	.word	0x08005d95
 8005b98:	08005d95 	.word	0x08005d95
 8005b9c:	08005d79 	.word	0x08005d79
 8005ba0:	08005d79 	.word	0x08005d79
 8005ba4:	08005d95 	.word	0x08005d95
 8005ba8:	08005d79 	.word	0x08005d79
 8005bac:	08005d79 	.word	0x08005d79
 8005bb0:	08005d79 	.word	0x08005d79
 8005bb4:	08005d79 	.word	0x08005d79
 8005bb8:	08005d79 	.word	0x08005d79
 8005bbc:	08005d79 	.word	0x08005d79
 8005bc0:	08005d79 	.word	0x08005d79
 8005bc4:	08005d79 	.word	0x08005d79
 8005bc8:	08005d79 	.word	0x08005d79
 8005bcc:	08005d79 	.word	0x08005d79
 8005bd0:	08005d95 	.word	0x08005d95
 8005bd4:	08005d95 	.word	0x08005d95
 8005bd8:	08005d95 	.word	0x08005d95
 8005bdc:	08005d95 	.word	0x08005d95
 8005be0:	08005d95 	.word	0x08005d95
 8005be4:	08005d95 	.word	0x08005d95
 8005be8:	08005d95 	.word	0x08005d95
 8005bec:	08005d95 	.word	0x08005d95
 8005bf0:	08005d95 	.word	0x08005d95
 8005bf4:	08005d95 	.word	0x08005d95
 8005bf8:	08005d95 	.word	0x08005d95
 8005bfc:	08005d95 	.word	0x08005d95
 8005c00:	08005d5d 	.word	0x08005d5d
 8005c04:	08005d95 	.word	0x08005d95
 8005c08:	08005d95 	.word	0x08005d95
 8005c0c:	08005d95 	.word	0x08005d95
 8005c10:	08005d95 	.word	0x08005d95
 8005c14:	08005d95 	.word	0x08005d95
 8005c18:	08005d95 	.word	0x08005d95
 8005c1c:	08005d95 	.word	0x08005d95
 8005c20:	08005d41 	.word	0x08005d41
 8005c24:	08005d95 	.word	0x08005d95
 8005c28:	08005d95 	.word	0x08005d95
 8005c2c:	08005d95 	.word	0x08005d95
 8005c30:	08005d95 	.word	0x08005d95
 8005c34:	08005d95 	.word	0x08005d95
 8005c38:	08005d5d 	.word	0x08005d5d
 8005c3c:	08005d95 	.word	0x08005d95
 8005c40:	08005d95 	.word	0x08005d95
 8005c44:	08005d95 	.word	0x08005d95
 8005c48:	08005d95 	.word	0x08005d95
 8005c4c:	08005d95 	.word	0x08005d95
 8005c50:	08005d95 	.word	0x08005d95
 8005c54:	08005cd9 	.word	0x08005cd9
 8005c58:	08005d95 	.word	0x08005d95
 8005c5c:	08005d95 	.word	0x08005d95
 8005c60:	08005d95 	.word	0x08005d95
 8005c64:	08005d95 	.word	0x08005d95
 8005c68:	08005d95 	.word	0x08005d95
 8005c6c:	08005d95 	.word	0x08005d95
 8005c70:	08005d95 	.word	0x08005d95
 8005c74:	08005d95 	.word	0x08005d95
 8005c78:	08005d95 	.word	0x08005d95
 8005c7c:	08005d95 	.word	0x08005d95
 8005c80:	08005d5d 	.word	0x08005d5d
 8005c84:	08005d95 	.word	0x08005d95
 8005c88:	08005d95 	.word	0x08005d95
 8005c8c:	08005d95 	.word	0x08005d95
 8005c90:	08005d95 	.word	0x08005d95
 8005c94:	08005d95 	.word	0x08005d95
 8005c98:	08005d95 	.word	0x08005d95
 8005c9c:	08005d95 	.word	0x08005d95
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d95 	.word	0x08005d95
 8005ca8:	08005d95 	.word	0x08005d95
 8005cac:	08005d95 	.word	0x08005d95
 8005cb0:	08005d95 	.word	0x08005d95
 8005cb4:	08005d95 	.word	0x08005d95
 8005cb8:	08005d5d 	.word	0x08005d5d
 8005cbc:	08005d95 	.word	0x08005d95
 8005cc0:	08005d95 	.word	0x08005d95
 8005cc4:	08005d95 	.word	0x08005d95
 8005cc8:	08005d95 	.word	0x08005d95
 8005ccc:	08005d95 	.word	0x08005d95
 8005cd0:	08005d95 	.word	0x08005d95
 8005cd4:	08005cff 	.word	0x08005cff
          {
          case '[' :
            jParser->jData[currentPos].readDataType = JARRAY;    //if the '[' is encountered the DataType is marked as ARRAY type and
 8005cd8:	897a      	ldrh	r2, [r7, #10]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	015b      	lsls	r3, r3, #5
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;                    //stackPos variable in the structure is incremented
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	611a      	str	r2, [r3, #16]
            charFound = 1;                          //charFound variable is set as 1
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	823b      	strh	r3, [r7, #16]
            break;
 8005cfc:	e04d      	b.n	8005d9a <JSONParseData+0x33e>
          case '{' :
            jParser->jData[currentPos].readDataType = JOBJECT;   //if the '{' is encountered the DataType is marked as OBJECT type and
 8005cfe:	897a      	ldrh	r2, [r7, #10]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	4413      	add	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;                    //stackPos variable in the buffer structure is incremented
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	611a      	str	r2, [r3, #16]
            charFound =1;                           //charFound variable is set as 1
 8005d1e:	2301      	movs	r3, #1
 8005d20:	823b      	strh	r3, [r7, #16]
            break;
 8005d22:	e03a      	b.n	8005d9a <JSONParseData+0x33e>
          case '\"' :
            jParser->jData[currentPos].readDataType = JSTRING;   //if the '\"' is encountered the DataType is marked as STRING type and
 8005d24:	897a      	ldrh	r2, [r7, #10]
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	015b      	lsls	r3, r3, #5
 8005d2c:	4413      	add	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	440b      	add	r3, r1
 8005d32:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d36:	2202      	movs	r2, #2
 8005d38:	701a      	strb	r2, [r3, #0]
            charFound =1;                           // charFound variable is set to 1
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	823b      	strh	r3, [r7, #16]
            break;
 8005d3e:	e02c      	b.n	8005d9a <JSONParseData+0x33e>
          case 'n': case 'N':                       //if 'n' or 'N' is encountered the DataType is marked as NULL type and
            jParser->jData[currentPos].readDataType = JNULL;     // charFound variable is set to 1
 8005d40:	897a      	ldrh	r2, [r7, #10]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	015b      	lsls	r3, r3, #5
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	440b      	add	r3, r1
 8005d4e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d52:	2204      	movs	r2, #4
 8005d54:	701a      	strb	r2, [r3, #0]
            charFound =1;
 8005d56:	2301      	movs	r3, #1
 8005d58:	823b      	strh	r3, [r7, #16]
            break;
 8005d5a:	e01e      	b.n	8005d9a <JSONParseData+0x33e>
          case 't': case 'T': case 'f': case 'F':   //if 't' or 'T' or 'f' or 'F' is encountered the DataType  is marked as
            jParser->jData[currentPos].readDataType = JBOOLEAN;  //BOOLEAN and charFound variable is set to 1
 8005d5c:	897a      	ldrh	r2, [r7, #10]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	015b      	lsls	r3, r3, #5
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d6e:	2203      	movs	r2, #3
 8005d70:	701a      	strb	r2, [r3, #0]
            charFound =1;
 8005d72:	2301      	movs	r3, #1
 8005d74:	823b      	strh	r3, [r7, #16]
            break;
 8005d76:	e010      	b.n	8005d9a <JSONParseData+0x33e>
          case '-': case '.': case '0': case '1': case '2': case '3': case '4':
          case '5': case '6': case '7': case '8': case'9':   //if any of the numbers or negative sign or decimal point is
            jParser->jData[currentPos].readDataType = JNUMBER;            //encountered the DataType is marked as NUMBER variable and
 8005d78:	897a      	ldrh	r2, [r7, #10]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	015b      	lsls	r3, r3, #5
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	701a      	strb	r2, [r3, #0]
            charFound =1;                                    // charFound variable is set to 1
 8005d8e:	2301      	movs	r3, #1
 8005d90:	823b      	strh	r3, [r7, #16]
            break;
 8005d92:	e002      	b.n	8005d9a <JSONParseData+0x33e>

          default:
              err = JDATA_TOK_ERR;
 8005d94:	2303      	movs	r3, #3
 8005d96:	81bb      	strh	r3, [r7, #12]
            break;
 8005d98:	bf00      	nop

          }
          charCount++;
 8005d9a:	8a7b      	ldrh	r3, [r7, #18]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	827b      	strh	r3, [r7, #18]
       if(charFound)
 8005da0:	8a3b      	ldrh	r3, [r7, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <JSONParseData+0x350>
       {
        charFound =0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	823b      	strh	r3, [r7, #16]
        break;
 8005daa:	e011      	b.n	8005dd0 <JSONParseData+0x374>
       }
       else
        if(charCount>=MAXTOKENBYTES)
 8005dac:	8a7b      	ldrh	r3, [r7, #18]
 8005dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db0:	d904      	bls.n	8005dbc <JSONParseData+0x360>
       {
           charFound =0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	823b      	strh	r3, [r7, #16]
           return err;
 8005db6:	89bb      	ldrh	r3, [r7, #12]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e29a      	b.n	80062f2 <JSONParseData+0x896>
       }
       c = *++end;        // Increment the end pointer in the buffer
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	73fb      	strb	r3, [r7, #15]
      while(c)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f47f aec5 	bne.w	8005b5a <JSONParseData+0xfe>
    }                     // End of While loop to find the start of json Value
    start = end;          //The address of the start Variable is made equal to the address of the end pointer
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	61fb      	str	r3, [r7, #28]
    c = *++end;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	73fb      	strb	r3, [r7, #15]
    charCount = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	827b      	strh	r3, [r7, #18]
    while((jParser->stackPos>0)||((c !=',')&&(c!='}')&&(c!=']')))
 8005de4:	e041      	b.n	8005e6a <JSONParseData+0x40e>
    {
        switch(c)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b7d      	cmp	r3, #125	@ 0x7d
 8005dea:	d016      	beq.n	8005e1a <JSONParseData+0x3be>
 8005dec:	2b7d      	cmp	r3, #125	@ 0x7d
 8005dee:	dc28      	bgt.n	8005e42 <JSONParseData+0x3e6>
 8005df0:	2b7b      	cmp	r3, #123	@ 0x7b
 8005df2:	d006      	beq.n	8005e02 <JSONParseData+0x3a6>
 8005df4:	2b7b      	cmp	r3, #123	@ 0x7b
 8005df6:	dc24      	bgt.n	8005e42 <JSONParseData+0x3e6>
 8005df8:	2b5b      	cmp	r3, #91	@ 0x5b
 8005dfa:	d008      	beq.n	8005e0e <JSONParseData+0x3b2>
 8005dfc:	2b5d      	cmp	r3, #93	@ 0x5d
 8005dfe:	d016      	beq.n	8005e2e <JSONParseData+0x3d2>
            if(jParser->stackPos>0)
               jParser->stackPos--;
            //printf("Hit a closed square brackets\n");
            break;
        default:
            break;
 8005e00:	e01f      	b.n	8005e42 <JSONParseData+0x3e6>
            jParser->stackPos++;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	611a      	str	r2, [r3, #16]
            break;
 8005e0c:	e01e      	b.n	8005e4c <JSONParseData+0x3f0>
            jParser->stackPos++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	611a      	str	r2, [r3, #16]
            break;
 8005e18:	e018      	b.n	8005e4c <JSONParseData+0x3f0>
            if(jParser->stackPos>0)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <JSONParseData+0x3ea>
                jParser->stackPos--;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	1e5a      	subs	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	611a      	str	r2, [r3, #16]
            break;
 8005e2c:	e00b      	b.n	8005e46 <JSONParseData+0x3ea>
            if(jParser->stackPos>0)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <JSONParseData+0x3ee>
               jParser->stackPos--;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	611a      	str	r2, [r3, #16]
            break;
 8005e40:	e003      	b.n	8005e4a <JSONParseData+0x3ee>
            break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <JSONParseData+0x3f0>
            break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <JSONParseData+0x3f0>
            break;
 8005e4a:	bf00      	nop

        }   //the end pointer is incremented until the stackPos is 0 and ',' or '}' is found
        charCount++;
 8005e4c:	8a7b      	ldrh	r3, [r7, #18]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	827b      	strh	r3, [r7, #18]
        if(charCount>=MAXJSONBYTES)
 8005e52:	8a7b      	ldrh	r3, [r7, #18]
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e58:	d301      	bcc.n	8005e5e <JSONParseData+0x402>
            return JDATA_TOK_ERR;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e249      	b.n	80062f2 <JSONParseData+0x896>

      c=*++end;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	3301      	adds	r3, #1
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	73fb      	strb	r3, [r7, #15]
    while((jParser->stackPos>0)||((c !=',')&&(c!='}')&&(c!=']')))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1b9      	bne.n	8005de6 <JSONParseData+0x38a>
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b2c      	cmp	r3, #44	@ 0x2c
 8005e76:	d005      	beq.n	8005e84 <JSONParseData+0x428>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b7d      	cmp	r3, #125	@ 0x7d
 8005e7c:	d002      	beq.n	8005e84 <JSONParseData+0x428>
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b5d      	cmp	r3, #93	@ 0x5d
 8005e82:	d1b0      	bne.n	8005de6 <JSONParseData+0x38a>
     }   // End of While loop to find the first ',' or '}' or ']' after value of the json object
    charCount-=1;
 8005e84:	8a7b      	ldrh	r3, [r7, #18]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	827b      	strh	r3, [r7, #18]
     success = strcopy(jParser->jData[currentPos].jsonValue, start , *end, 256, charCount+2); // the value stored from start pointer to end pointer
 8005e8a:	897a      	ldrh	r2, [r7, #10]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	015b      	lsls	r3, r3, #5
 8005e90:	4413      	add	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	3398      	adds	r3, #152	@ 0x98
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f103 0008 	add.w	r0, r3, #8
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	8a7b      	ldrh	r3, [r7, #18]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	f7ff fd42 	bl	8005938 <strcopy>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	813b      	strh	r3, [r7, #8]
    jParser->currentPos = end - jParser->buffer;                           //is copied to the json struct jsonValue variable
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	605a      	str	r2, [r3, #4]
    jParser->currP= jParser->buffer + jParser->currentPos;                // the current position pointer is updated
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6852      	ldr	r2, [r2, #4]
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	609a      	str	r2, [r3, #8]
    jParser->numTokens++;// the number of tokens parsed are incremented
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	615a      	str	r2, [r3, #20]
    charCount =0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	827b      	strh	r3, [r7, #18]
    if(jParser->stackPos==0)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 8203 	bne.w	80062f0 <JSONParseData+0x894>
    {
        if(*end=='}')
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b7d      	cmp	r3, #125	@ 0x7d
 8005ef0:	d104      	bne.n	8005efc <JSONParseData+0x4a0>
        {
            jParser->parserStatus = JSON_END;                         // if '}' is encountered and the stackPos is 0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	731a      	strb	r2, [r3, #12]
            return JDATA_OK;                                          // the parser status is updated to JSON_END
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e1fa      	b.n	80062f2 <JSONParseData+0x896>
        }                                                              // and JDATA_OK is returned
        else if(*end == ',')
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b2c      	cmp	r3, #44	@ 0x2c
 8005f02:	d101      	bne.n	8005f08 <JSONParseData+0x4ac>
            return JDATA_OK;                                           // else if stackPos is 0 and ',' is encountered
 8005f04:	2301      	movs	r3, #1
 8005f06:	e1f4      	b.n	80062f2 <JSONParseData+0x896>
          else if (*end == ']')                                        // the parserStatus is unchanged from JSON_START
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b5d      	cmp	r3, #93	@ 0x5d
 8005f0e:	f040 81ef 	bne.w	80062f0 <JSONParseData+0x894>
              return JDATA_INVALID;                                    // JDATA_OK is returned.
 8005f12:	2304      	movs	r3, #4
 8005f14:	e1ed      	b.n	80062f2 <JSONParseData+0x896>
    }
//    printf("Object Parsing\n");
  } else if(jParser->rootType == JDATA_ARRAY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	7e1b      	ldrb	r3, [r3, #24]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	f040 81e8 	bne.w	80062f0 <JSONParseData+0x894>
  {
      start = tempStr;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	61fb      	str	r3, [r7, #28]
      end = tempStr;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	61bb      	str	r3, [r7, #24]
      charFound = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	823b      	strh	r3, [r7, #16]
      charCount = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	827b      	strh	r3, [r7, #18]
      err = JDATA_OK;
 8005f30:	2301      	movs	r3, #1
 8005f32:	81bb      	strh	r3, [r7, #12]
    currentPos = jParser->numTokens;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	817b      	strh	r3, [r7, #10]
     c= *++start;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	73fb      	strb	r3, [r7, #15]
     while(c)
 8005f46:	e130      	b.n	80061aa <JSONParseData+0x74e>
      {

          switch(c)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	3b22      	subs	r3, #34	@ 0x22
 8005f4c:	2b59      	cmp	r3, #89	@ 0x59
 8005f4e:	f200 8114 	bhi.w	800617a <JSONParseData+0x71e>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <JSONParseData+0x4fc>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08006145 	.word	0x08006145
 8005f5c:	0800617b 	.word	0x0800617b
 8005f60:	0800617b 	.word	0x0800617b
 8005f64:	0800617b 	.word	0x0800617b
 8005f68:	0800617b 	.word	0x0800617b
 8005f6c:	0800617b 	.word	0x0800617b
 8005f70:	0800617b 	.word	0x0800617b
 8005f74:	0800617b 	.word	0x0800617b
 8005f78:	0800617b 	.word	0x0800617b
 8005f7c:	0800617b 	.word	0x0800617b
 8005f80:	0800617b 	.word	0x0800617b
 8005f84:	08006161 	.word	0x08006161
 8005f88:	08006161 	.word	0x08006161
 8005f8c:	0800617b 	.word	0x0800617b
 8005f90:	0800617b 	.word	0x0800617b
 8005f94:	08006161 	.word	0x08006161
 8005f98:	08006161 	.word	0x08006161
 8005f9c:	08006161 	.word	0x08006161
 8005fa0:	08006161 	.word	0x08006161
 8005fa4:	08006161 	.word	0x08006161
 8005fa8:	08006161 	.word	0x08006161
 8005fac:	08006161 	.word	0x08006161
 8005fb0:	08006161 	.word	0x08006161
 8005fb4:	08006161 	.word	0x08006161
 8005fb8:	0800617b 	.word	0x0800617b
 8005fbc:	0800617b 	.word	0x0800617b
 8005fc0:	0800617b 	.word	0x0800617b
 8005fc4:	0800617b 	.word	0x0800617b
 8005fc8:	0800617b 	.word	0x0800617b
 8005fcc:	0800617b 	.word	0x0800617b
 8005fd0:	0800617b 	.word	0x0800617b
 8005fd4:	0800617b 	.word	0x0800617b
 8005fd8:	0800617b 	.word	0x0800617b
 8005fdc:	0800617b 	.word	0x0800617b
 8005fe0:	0800617b 	.word	0x0800617b
 8005fe4:	0800617b 	.word	0x0800617b
 8005fe8:	08006129 	.word	0x08006129
 8005fec:	0800617b 	.word	0x0800617b
 8005ff0:	0800617b 	.word	0x0800617b
 8005ff4:	0800617b 	.word	0x0800617b
 8005ff8:	0800617b 	.word	0x0800617b
 8005ffc:	0800617b 	.word	0x0800617b
 8006000:	0800617b 	.word	0x0800617b
 8006004:	0800617b 	.word	0x0800617b
 8006008:	0800610d 	.word	0x0800610d
 800600c:	0800617b 	.word	0x0800617b
 8006010:	0800617b 	.word	0x0800617b
 8006014:	0800617b 	.word	0x0800617b
 8006018:	0800617b 	.word	0x0800617b
 800601c:	0800617b 	.word	0x0800617b
 8006020:	08006129 	.word	0x08006129
 8006024:	0800617b 	.word	0x0800617b
 8006028:	0800617b 	.word	0x0800617b
 800602c:	0800617b 	.word	0x0800617b
 8006030:	0800617b 	.word	0x0800617b
 8006034:	0800617b 	.word	0x0800617b
 8006038:	0800617b 	.word	0x0800617b
 800603c:	080060e7 	.word	0x080060e7
 8006040:	0800617b 	.word	0x0800617b
 8006044:	0800617b 	.word	0x0800617b
 8006048:	0800617b 	.word	0x0800617b
 800604c:	0800617b 	.word	0x0800617b
 8006050:	0800617b 	.word	0x0800617b
 8006054:	0800617b 	.word	0x0800617b
 8006058:	0800617b 	.word	0x0800617b
 800605c:	0800617b 	.word	0x0800617b
 8006060:	0800617b 	.word	0x0800617b
 8006064:	0800617b 	.word	0x0800617b
 8006068:	08006129 	.word	0x08006129
 800606c:	0800617b 	.word	0x0800617b
 8006070:	0800617b 	.word	0x0800617b
 8006074:	0800617b 	.word	0x0800617b
 8006078:	0800617b 	.word	0x0800617b
 800607c:	0800617b 	.word	0x0800617b
 8006080:	0800617b 	.word	0x0800617b
 8006084:	0800617b 	.word	0x0800617b
 8006088:	0800610d 	.word	0x0800610d
 800608c:	0800617b 	.word	0x0800617b
 8006090:	0800617b 	.word	0x0800617b
 8006094:	0800617b 	.word	0x0800617b
 8006098:	0800617b 	.word	0x0800617b
 800609c:	0800617b 	.word	0x0800617b
 80060a0:	08006129 	.word	0x08006129
 80060a4:	0800617b 	.word	0x0800617b
 80060a8:	0800617b 	.word	0x0800617b
 80060ac:	0800617b 	.word	0x0800617b
 80060b0:	0800617b 	.word	0x0800617b
 80060b4:	0800617b 	.word	0x0800617b
 80060b8:	0800617b 	.word	0x0800617b
 80060bc:	080060c1 	.word	0x080060c1
          {
          case '{':
            jParser->jData[currentPos].readDataType = JOBJECT;
 80060c0:	897a      	ldrh	r2, [r7, #10]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	015b      	lsls	r3, r3, #5
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	611a      	str	r2, [r3, #16]
            charFound = 1;
 80060e0:	2301      	movs	r3, #1
 80060e2:	823b      	strh	r3, [r7, #16]
            break;
 80060e4:	e04c      	b.n	8006180 <JSONParseData+0x724>
          case '[':
            jParser->jData[currentPos].readDataType = JARRAY;
 80060e6:	897a      	ldrh	r2, [r7, #10]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	015b      	lsls	r3, r3, #5
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	440b      	add	r3, r1
 80060f4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
            jParser->stackPos++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]
            charFound =1;
 8006106:	2301      	movs	r3, #1
 8006108:	823b      	strh	r3, [r7, #16]
            break;
 800610a:	e039      	b.n	8006180 <JSONParseData+0x724>
          case 'n': case 'N':
            jParser->jData[currentPos].readDataType = JNULL;
 800610c:	897a      	ldrh	r2, [r7, #10]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	015b      	lsls	r3, r3, #5
 8006114:	4413      	add	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	440b      	add	r3, r1
 800611a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800611e:	2204      	movs	r2, #4
 8006120:	701a      	strb	r2, [r3, #0]
            charFound = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	823b      	strh	r3, [r7, #16]
            break;
 8006126:	e02b      	b.n	8006180 <JSONParseData+0x724>
          case 't': case 'T': case 'f': case 'F':
            jParser->jData[currentPos].readDataType = JBOOLEAN;
 8006128:	897a      	ldrh	r2, [r7, #10]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	015b      	lsls	r3, r3, #5
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	440b      	add	r3, r1
 8006136:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800613a:	2203      	movs	r2, #3
 800613c:	701a      	strb	r2, [r3, #0]
            charFound =1;
 800613e:	2301      	movs	r3, #1
 8006140:	823b      	strh	r3, [r7, #16]
            break;
 8006142:	e01d      	b.n	8006180 <JSONParseData+0x724>
          case '\"':
            jParser->jData[currentPos].readDataType = JSTRING;
 8006144:	897a      	ldrh	r2, [r7, #10]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	015b      	lsls	r3, r3, #5
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006156:	2202      	movs	r2, #2
 8006158:	701a      	strb	r2, [r3, #0]
            charFound =1;
 800615a:	2301      	movs	r3, #1
 800615c:	823b      	strh	r3, [r7, #16]
            break;
 800615e:	e00f      	b.n	8006180 <JSONParseData+0x724>
          case '-': case'.': case '1': case '2': case '3':
          case '4': case '5': case '6': case '7': case '8':
          case '9':
            jParser->jData[currentPos].readDataType = JNUMBER;
 8006160:	897a      	ldrh	r2, [r7, #10]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	015b      	lsls	r3, r3, #5
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	440b      	add	r3, r1
 800616e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006172:	2205      	movs	r2, #5
 8006174:	701a      	strb	r2, [r3, #0]
            charFound = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	823b      	strh	r3, [r7, #16]
          default:
            err = JDATA_TOK_ERR;
 800617a:	2303      	movs	r3, #3
 800617c:	81bb      	strh	r3, [r7, #12]
            break;
 800617e:	bf00      	nop
          }
          charCount++;
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	3301      	adds	r3, #1
 8006184:	827b      	strh	r3, [r7, #18]
          if(charFound)
 8006186:	8a3b      	ldrh	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <JSONParseData+0x736>
          {
              charFound=0;
 800618c:	2300      	movs	r3, #0
 800618e:	823b      	strh	r3, [r7, #16]
              break;
 8006190:	e00f      	b.n	80061b2 <JSONParseData+0x756>
          }
          if(charCount>=MAXTOKENBYTES)
 8006192:	8a7b      	ldrh	r3, [r7, #18]
 8006194:	2b7f      	cmp	r3, #127	@ 0x7f
 8006196:	d902      	bls.n	800619e <JSONParseData+0x742>
            return err;
 8006198:	89bb      	ldrh	r3, [r7, #12]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e0a9      	b.n	80062f2 <JSONParseData+0x896>
           c = *++start;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	73fb      	strb	r3, [r7, #15]
     while(c)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f aecb 	bne.w	8005f48 <JSONParseData+0x4ec>
      }
      charFound =0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	823b      	strh	r3, [r7, #16]
      end = start;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	61bb      	str	r3, [r7, #24]
      c= *++end;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3301      	adds	r3, #1
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	73fb      	strb	r3, [r7, #15]
      charCount=0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	827b      	strh	r3, [r7, #18]
       while((jParser->stackPos!=0)||((c !=',')&&(c!='}')&&(c!=']')))
 80061ca:	e040      	b.n	800624e <JSONParseData+0x7f2>
       {

           switch(c)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b7d      	cmp	r3, #125	@ 0x7d
 80061d0:	d016      	beq.n	8006200 <JSONParseData+0x7a4>
 80061d2:	2b7d      	cmp	r3, #125	@ 0x7d
 80061d4:	dc28      	bgt.n	8006228 <JSONParseData+0x7cc>
 80061d6:	2b7b      	cmp	r3, #123	@ 0x7b
 80061d8:	d006      	beq.n	80061e8 <JSONParseData+0x78c>
 80061da:	2b7b      	cmp	r3, #123	@ 0x7b
 80061dc:	dc24      	bgt.n	8006228 <JSONParseData+0x7cc>
 80061de:	2b5b      	cmp	r3, #91	@ 0x5b
 80061e0:	d008      	beq.n	80061f4 <JSONParseData+0x798>
 80061e2:	2b5d      	cmp	r3, #93	@ 0x5d
 80061e4:	d016      	beq.n	8006214 <JSONParseData+0x7b8>
               case ']':
                if(jParser->stackPos>0)
                    jParser->stackPos--;
                break;
               default:
                break;
 80061e6:	e01f      	b.n	8006228 <JSONParseData+0x7cc>
                   jParser->stackPos++;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]
                   break;
 80061f2:	e01e      	b.n	8006232 <JSONParseData+0x7d6>
                jParser->stackPos++;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]
                break;
 80061fe:	e018      	b.n	8006232 <JSONParseData+0x7d6>
                if(jParser->stackPos>0)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d011      	beq.n	800622c <JSONParseData+0x7d0>
                    jParser->stackPos--;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	1e5a      	subs	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	611a      	str	r2, [r3, #16]
                break;
 8006212:	e00b      	b.n	800622c <JSONParseData+0x7d0>
                if(jParser->stackPos>0)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <JSONParseData+0x7d4>
                    jParser->stackPos--;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	1e5a      	subs	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
                break;
 8006226:	e003      	b.n	8006230 <JSONParseData+0x7d4>
                break;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <JSONParseData+0x7d6>
                break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <JSONParseData+0x7d6>
                break;
 8006230:	bf00      	nop
           }
           charCount++;
 8006232:	8a7b      	ldrh	r3, [r7, #18]
 8006234:	3301      	adds	r3, #1
 8006236:	827b      	strh	r3, [r7, #18]
           if(charCount>MAXTOKENBYTES)
 8006238:	8a7b      	ldrh	r3, [r7, #18]
 800623a:	2b80      	cmp	r3, #128	@ 0x80
 800623c:	d901      	bls.n	8006242 <JSONParseData+0x7e6>
            return JDATA_TOK_ERR;
 800623e:	2303      	movs	r3, #3
 8006240:	e057      	b.n	80062f2 <JSONParseData+0x896>
          c = *++end;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3301      	adds	r3, #1
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	73fb      	strb	r3, [r7, #15]
       while((jParser->stackPos!=0)||((c !=',')&&(c!='}')&&(c!=']')))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1ba      	bne.n	80061cc <JSONParseData+0x770>
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b2c      	cmp	r3, #44	@ 0x2c
 800625a:	d005      	beq.n	8006268 <JSONParseData+0x80c>
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b7d      	cmp	r3, #125	@ 0x7d
 8006260:	d002      	beq.n	8006268 <JSONParseData+0x80c>
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b5d      	cmp	r3, #93	@ 0x5d
 8006266:	d1b1      	bne.n	80061cc <JSONParseData+0x770>
       }
    success = strcopy(jParser->jData[currentPos].jsonValue, start , *end, 256, charCount+2); // the value stored from start pointer to end pointer
 8006268:	897a      	ldrh	r2, [r7, #10]
 800626a:	4613      	mov	r3, r2
 800626c:	015b      	lsls	r3, r3, #5
 800626e:	4413      	add	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	3398      	adds	r3, #152	@ 0x98
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	f103 0008 	add.w	r0, r3, #8
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	8a7b      	ldrh	r3, [r7, #18]
 8006282:	3302      	adds	r3, #2
 8006284:	b29b      	uxth	r3, r3
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800628c:	69f9      	ldr	r1, [r7, #28]
 800628e:	f7ff fb53 	bl	8005938 <strcopy>
 8006292:	4603      	mov	r3, r0
 8006294:	813b      	strh	r3, [r7, #8]
    jParser->currentPos = end - jParser->buffer;                           //is copied to the json struct jsonValue variable
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	1ad2      	subs	r2, r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	605a      	str	r2, [r3, #4]
    jParser->currP = jParser->buffer + jParser->currentPos;                // the current position pointer is updated
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6852      	ldr	r2, [r2, #4]
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	609a      	str	r2, [r3, #8]
    jParser->numTokens++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	615a      	str	r2, [r3, #20]
    charCount =0;                                                           // the number of tokens parsed are incremented
 80062ba:	2300      	movs	r3, #0
 80062bc:	827b      	strh	r3, [r7, #18]
    if(jParser->stackPos==0)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d114      	bne.n	80062f0 <JSONParseData+0x894>
    {
        if(*end==']')
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b5d      	cmp	r3, #93	@ 0x5d
 80062cc:	d104      	bne.n	80062d8 <JSONParseData+0x87c>
        {
            jParser->parserStatus = JSON_END;                         // if '}' is encountered and the stackPos is 0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	731a      	strb	r2, [r3, #12]
            return JDATA_OK;                                          // the parser status is updated to JSON_END
 80062d4:	2301      	movs	r3, #1
 80062d6:	e00c      	b.n	80062f2 <JSONParseData+0x896>
        }                                                              // and JDATA_OK is returned
        else if(*end == ',')
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80062de:	d101      	bne.n	80062e4 <JSONParseData+0x888>
            return JDATA_OK;                                           // else if stackPos is 0 and ',' is encountered
 80062e0:	2301      	movs	r3, #1
 80062e2:	e006      	b.n	80062f2 <JSONParseData+0x896>
          else if (*end == '}')                                        // the parserStatus is unchanged from JSON_START
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b7d      	cmp	r3, #125	@ 0x7d
 80062ea:	d101      	bne.n	80062f0 <JSONParseData+0x894>
              return JDATA_INVALID;                                    // JDATA_OK is returned.
 80062ec:	2304      	movs	r3, #4
 80062ee:	e000      	b.n	80062f2 <JSONParseData+0x896>
    }
//    printf("Array Parsing!!!\n");
  }
return JDATA_OK;
 80062f0:	2301      	movs	r3, #1

}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3724      	adds	r7, #36	@ 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd90      	pop	{r4, r7, pc}
 80062fa:	bf00      	nop

080062fc <SearchToken>:
//-------------
//- This function takes the key to be searched in the Parsed json Data
//- returns pointer to the structure containing the needed key

struct jsonReadToken* SearchToken(struct jsonParser *jParser, const char *searchString)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	unsigned short int i = 0, tokens =0;
 8006306:	2300      	movs	r3, #0
 8006308:	82fb      	strh	r3, [r7, #22]
 800630a:	2300      	movs	r3, #0
 800630c:	82bb      	strh	r3, [r7, #20]
    unsigned long hashValue=0;
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]
    struct jsonReadToken *jData;

    tokens = jParser->numTokens;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	82bb      	strh	r3, [r7, #20]
    hashValue = HashCal((char*)searchString);
 8006318:	6838      	ldr	r0, [r7, #0]
 800631a:	f7ff faef 	bl	80058fc <HashCal>
 800631e:	6138      	str	r0, [r7, #16]
    for(i=0; i<tokens; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	82fb      	strh	r3, [r7, #22]
 8006324:	e02c      	b.n	8006380 <SearchToken+0x84>
    {
        if(hashValue == jParser->jData[i].hashValue)
 8006326:	8afa      	ldrh	r2, [r7, #22]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	015b      	lsls	r3, r3, #5
 800632e:	4413      	add	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	440b      	add	r3, r1
 8006334:	339c      	adds	r3, #156	@ 0x9c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d11d      	bne.n	800637a <SearchToken+0x7e>
        {
            if(strcmp(searchString,jParser->jData[i].keyValue)==0)
 800633e:	8afa      	ldrh	r2, [r7, #22]
 8006340:	4613      	mov	r3, r2
 8006342:	015b      	lsls	r3, r3, #5
 8006344:	4413      	add	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	3318      	adds	r3, #24
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	6838      	ldr	r0, [r7, #0]
 8006354:	f7f9 ff30 	bl	80001b8 <strcmp>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <SearchToken+0x7a>
            {jData = &jParser->jData[i];
 800635e:	8afa      	ldrh	r2, [r7, #22]
 8006360:	4613      	mov	r3, r2
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	4413      	add	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	3318      	adds	r3, #24
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	3304      	adds	r3, #4
 8006370:	60fb      	str	r3, [r7, #12]
                return jData;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	e009      	b.n	800638a <SearchToken+0x8e>
            }
            else
                return NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	e007      	b.n	800638a <SearchToken+0x8e>
    for(i=0; i<tokens; i++)
 800637a:	8afb      	ldrh	r3, [r7, #22]
 800637c:	3301      	adds	r3, #1
 800637e:	82fb      	strh	r3, [r7, #22]
 8006380:	8afa      	ldrh	r2, [r7, #22]
 8006382:	8abb      	ldrh	r3, [r7, #20]
 8006384:	429a      	cmp	r2, r3
 8006386:	d3ce      	bcc.n	8006326 <SearchToken+0x2a>
        }
    }
    return NULL;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <jwOpen>:
// - Open writing of JSON starting with rootType = JW_OBJECT
// - Initialize with user string buffer of length buflen
// - isPretty = JW_PRETTY adds \n and spaces to prettify output (else JW_COMPACT)
//
void jwOpen(JWC_DECL char *buffer, unsigned short int buflen, enum jwNodeType rootType, unsigned char isPretty)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4611      	mov	r1, r2
 800639e:	461a      	mov	r2, r3
 80063a0:	460b      	mov	r3, r1
 80063a2:	80fb      	strh	r3, [r7, #6]
 80063a4:	4613      	mov	r3, r2
 80063a6:	717b      	strb	r3, [r7, #5]
    memset(buffer, 0, buflen);      // zap the whole destination buffer
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	461a      	mov	r2, r3
 80063ac:	2100      	movs	r1, #0
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f003 f8eb 	bl	800958a <memset>
//	memorySet(buffer, 0, buflen);
    JWC(buffer) = buffer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	601a      	str	r2, [r3, #0]
    JWC(buflen) = buflen;
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]
    JWC(bufp) = buffer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	609a      	str	r2, [r3, #8]
    if(rootType == JW_ARRAY)
 80063c6:	797b      	ldrb	r3, [r7, #5]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d017      	beq.n	80063fc <jwOpen+0x6a>
//        fprintf(stderr, "Wrong root Type, cannot open");
        return;
    }
    else
    {
        JWC(nodeStack)[0].nodeType = rootType;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	797a      	ldrb	r2, [r7, #5]
 80063d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        JWC(nodeStack)[0].elementNo = 0;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	639a      	str	r2, [r3, #56]	@ 0x38
        JWC(stackpos) = 0;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	65da      	str	r2, [r3, #92]	@ 0x5c
        JWC(error) = JWRITE_OK;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	62da      	str	r2, [r3, #44]	@ 0x2c
        JWC(callNo) = 1;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
        JWC(isPretty) = isPretty;
 80063ec:	7e3a      	ldrb	r2, [r7, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	661a      	str	r2, [r3, #96]	@ 0x60
        jwPutch(JWC_PARAM '{');
 80063f2:	217b      	movs	r1, #123	@ 0x7b
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f992 	bl	800671e <jwPutch>
 80063fa:	e000      	b.n	80063fe <jwOpen+0x6c>
        return;
 80063fc:	bf00      	nop
    }
}
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <jwClose>:
// - Closes the root JSON object started by jwOpen()
// - returns error code
//

int jwClose(JWC_DECL0)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
    if(JWC(error) == JWRITE_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d113      	bne.n	800643c <jwClose+0x38>
    {
        if(JWC(stackpos) == 0)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <jwClose+0x32>
        {
//            enum jwNodeType node = JWC(nodeStack)[0].nodeType;  // commented since it not used
            if(JWC(isPretty))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <jwClose+0x28>
                jwPutch(JWC_PARAM '\n');
 8006424:	210a      	movs	r1, #10
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f979 	bl	800671e <jwPutch>
            jwPutch(JWC_PARAM '}');
 800642c:	217d      	movs	r1, #125	@ 0x7d
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f975 	bl	800671e <jwPutch>
 8006434:	e002      	b.n	800643c <jwClose+0x38>
        } else {
           JWC(error) = JWRITE_NEST_ERROR; // Nesting error, not all objects closed when jwClose() called
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2206      	movs	r2, #6
 800643a:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
    }
    return JWC(error);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <jwEnd>:
// jwEnd()
//---------
// - End the current object

int jwEnd( JWC_DECL0)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
    if(JWC(error) == JWRITE_OK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11c      	bne.n	8006492 <jwEnd+0x4a>
    {
        enum jwNodeType node;
        int lastElemNo = JWC(nodeStack)[JWC(stackpos)].elementNo;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	3306      	adds	r3, #6
 8006460:	00db      	lsls	r3, r3, #3
 8006462:	4413      	add	r3, r2
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	60fb      	str	r3, [r7, #12]
        node = jwPop(JWC_PARAM0);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f938 	bl	80066de <jwPop>
 800646e:	4603      	mov	r3, r0
 8006470:	72fb      	strb	r3, [r7, #11]
        if(lastElemNo > 0)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd02      	ble.n	800647e <jwEnd+0x36>
            jwPretty(JWC_PARAM0);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8e5 	bl	8006648 <jwPretty>
        jwPutch(JWC_PARAM(node == JW_OBJECT)? '}': ']');
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <jwEnd+0x40>
 8006484:	237d      	movs	r3, #125	@ 0x7d
 8006486:	e000      	b.n	800648a <jwEnd+0x42>
 8006488:	235d      	movs	r3, #93	@ 0x5d
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f946 	bl	800671e <jwPutch>

    }
    return JWC(error);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <jwObj_raw>:
//jwObjraw()
//----------
//- put raw string to object (i.e. contents of raw text without quotes)
//
void jwObj_raw(JWC_DECL char *key, char *value)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f98c 	bl	80067ca <_jwObj>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d103      	bne.n	80064c0 <jwObj_raw+0x22>
        jwPutraw(JWC_PARAM value);
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f96e 	bl	800679c <jwPutraw>
}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <jwObj_string>:
//jwObj_string()
//--------------
// - put "quoted" string to object
//
void jwObj_string(JWC_DECL char *key, char *value)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 80064d4:	68b9      	ldr	r1, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f977 	bl	80067ca <_jwObj>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <jwObj_string+0x22>
        jwPutstr(JWC_PARAM value);
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f93b 	bl	8006760 <jwPutstr>

}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <jwObj_int>:
//-----------
//- put integer value to the object
//

void jwObj_int(JWC_DECL char *key, int value)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
    modp_itoa10(value, JWC(tempbuf));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	330c      	adds	r3, #12
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f9fd 	bl	8006904 <modp_itoa10>
    jwObj_raw(JWC_PARAM key, JWC(tempbuf));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	330c      	adds	r3, #12
 800650e:	461a      	mov	r2, r3
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff ffc3 	bl	800649e <jwObj_raw>

}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <jwObj_double>:
//--------------
//- put double value to the object
//

void jwObj_double(JWC_DECL char *key, double value)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	ed87 0b00 	vstr	d0, [r7]
    modp_dtoa2(value, JWC(tempbuf), 2);
 800652e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006532:	f7fa faf1 	bl	8000b18 <__aeabi_d2f>
 8006536:	4602      	mov	r2, r0
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	330c      	adds	r3, #12
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	ee00 2a10 	vmov	s0, r2
 8006544:	f000 fa1c 	bl	8006980 <modp_dtoa2>
    jwObj_raw(JWC_PARAM key, JWC(tempbuf));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	330c      	adds	r3, #12
 800654c:	461a      	mov	r2, r3
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff ffa4 	bl	800649e <jwObj_raw>

}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <jwObj_object>:
//--------------
// - put object in Object
//

void jwObj_object(JWC_DECL char *key)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
    if(_jwObj(JWC_PARAM key) == JWRITE_OK)
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f92d 	bl	80067ca <_jwObj>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <jwObj_object+0x28>
    {
        jwPutch(JWC_PARAM '{');
 8006576:	217b      	movs	r1, #123	@ 0x7b
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f8d0 	bl	800671e <jwPutch>
        jwPush(JWC_PARAM JW_OBJECT);
 800657e:	2101      	movs	r1, #1
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f883 	bl	800668c <jwPush>
    }
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <jwObj_array>:
//jwObj_array()
//-------------
//- Put Array in object
//
void jwObj_array(JWC_DECL char *key)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b082      	sub	sp, #8
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
    if(_jwObj(JWC_PARAM key)==JWRITE_OK)
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f915 	bl	80067ca <_jwObj>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <jwObj_array+0x28>
    {
        jwPutch(JWC_PARAM '[');
 80065a6:	215b      	movs	r1, #91	@ 0x5b
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f8b8 	bl	800671e <jwPutch>
        jwPush(JWC_PARAM JW_ARRAY);
 80065ae:	2102      	movs	r1, #2
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f86b 	bl	800668c <jwPush>
    }
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <jwArr_raw>:
//jwArr_raw()
//-----------
//- put raw string to array (i.e. contents of raw text without quotes)
//
void jwArr_raw(JWC_DECL char *rawtext)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
    if(_jwArr(JWC_PARAM0)==JWRITE_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f945 	bl	8006858 <_jwArr>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <jwArr_raw+0x1e>
        jwPutraw(JWC_PARAM rawtext);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8e0 	bl	800679c <jwPutraw>
}
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <jwArr_int>:
//jwArr_int()
//-----------
//- inserts integer to the array
//
void jwArr_int(JWC_DECL int value)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
    modp_itoa10(value, JWC(tempbuf));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	330c      	adds	r3, #12
 80065f2:	4619      	mov	r1, r3
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f000 f985 	bl	8006904 <modp_itoa10>
    jwArr_raw(JWC_PARAM JWC(tempbuf));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	330c      	adds	r3, #12
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ffdc 	bl	80065be <jwArr_raw>
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <jwArr_double>:
//jwArr_double()
//--------------
//- insert integer to the array
//
void jwArr_double(JWC_DECL double value)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	ed87 0b00 	vstr	d0, [r7]
    modp_dtoa2(value, JWC(tempbuf), 2);
 800661a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800661e:	f7fa fa7b 	bl	8000b18 <__aeabi_d2f>
 8006622:	4602      	mov	r2, r0
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	330c      	adds	r3, #12
 8006628:	2102      	movs	r1, #2
 800662a:	4618      	mov	r0, r3
 800662c:	ee00 2a10 	vmov	s0, r2
 8006630:	f000 f9a6 	bl	8006980 <modp_dtoa2>
    jwArr_raw(JWC_PARAM JWC(tempbuf));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	330c      	adds	r3, #12
 8006638:	4619      	mov	r1, r3
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff ffbf 	bl	80065be <jwArr_raw>
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <jwPretty>:
//jwPretty()
//---------
//-  this introduces indentation to the JSON data
//
void jwPretty(JWC_DECL0)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	unsigned short int i;
    if(JWC(isPretty))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006654:	2b00      	cmp	r3, #0
 8006656:	d012      	beq.n	800667e <jwPretty+0x36>
    {
        jwPutch(JWC_PARAM '\n');
 8006658:	210a      	movs	r1, #10
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f85f 	bl	800671e <jwPutch>
        for(i=0; i<JWC(stackpos)+1; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	81fb      	strh	r3, [r7, #14]
 8006664:	e006      	b.n	8006674 <jwPretty+0x2c>
            jwPutraw(JWC_PARAM "    ");
 8006666:	4908      	ldr	r1, [pc, #32]	@ (8006688 <jwPretty+0x40>)
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f897 	bl	800679c <jwPutraw>
        for(i=0; i<JWC(stackpos)+1; i++)
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	3301      	adds	r3, #1
 8006672:	81fb      	strh	r3, [r7, #14]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	429a      	cmp	r2, r3
 800667c:	daf3      	bge.n	8006666 <jwPretty+0x1e>
    }
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	0800b860 	.word	0x0800b860

0800668c <jwPush>:
//--------
//- Push new object / array to the stack
//

void jwPush(JWC_DECL enum jwNodeType nodeType)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
    if((JWC(stackpos)+1)>= JWRITE_STACK_DEPTH)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800669c:	2b03      	cmp	r3, #3
 800669e:	dd03      	ble.n	80066a8 <jwPush+0x1c>
        JWC(error) = JWRITE_STACK_FULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2204      	movs	r2, #4
 80066a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    else
    {
        JWC(nodeStack[++JWC(stackpos)]).nodeType = nodeType;
        JWC(nodeStack[JWC(stackpos)]).elementNo = 0;
    }
}
 80066a6:	e014      	b.n	80066d2 <jwPush+0x46>
        JWC(nodeStack[++JWC(stackpos)]).nodeType = nodeType;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	3306      	adds	r3, #6
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	711a      	strb	r2, [r3, #4]
        JWC(nodeStack[JWC(stackpos)]).elementNo = 0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	3306      	adds	r3, #6
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4413      	add	r3, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <jwPop>:
//jwPop()
// - Pops the latest node from the stack
//

enum jwNodeType jwPop(JWC_DECL0)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
    enum jwNodeType retval = JWC(nodeStack[JWC(stackpos)]).nodeType;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	3306      	adds	r3, #6
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4413      	add	r3, r2
 80066f2:	791b      	ldrb	r3, [r3, #4]
 80066f4:	73fb      	strb	r3, [r7, #15]
    if(JWC(stackpos)==0)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <jwPop+0x28>
        JWC(error) = JWRITE_STACK_EMPTY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2205      	movs	r2, #5
 8006702:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006704:	e004      	b.n	8006710 <jwPop+0x32>
    else
        JWC(stackpos)--;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	65da      	str	r2, [r3, #92]	@ 0x5c
    return retval;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <jwPutch>:
//jwPutch()
//---------
//- Insert character to the object
//
void jwPutch(JWC_DECL char c)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
    if((unsigned int)(JWC(bufp)-JWC(buffer))>=JWC(buflen))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	429a      	cmp	r2, r3
 800673c:	d303      	bcc.n	8006746 <jwPutch+0x28>
    {
        JWC(error)= JWRITE_BUF_FULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    else
    {
        *JWC(bufp)++ = c;
    }
}
 8006744:	e006      	b.n	8006754 <jwPutch+0x36>
        *JWC(bufp)++ = c;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6091      	str	r1, [r2, #8]
 8006750:	78fa      	ldrb	r2, [r7, #3]
 8006752:	701a      	strb	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <jwPutstr>:
//jwPutstr()
//----------
//- Put string enclosed in quotes
//
void jwPutstr(JWC_DECL char *str)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
    jwPutch(JWC_PARAM '\"');
 800676a:	2122      	movs	r1, #34	@ 0x22
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ffd6 	bl	800671e <jwPutch>
    while(*str != '\0')
 8006772:	e007      	b.n	8006784 <jwPutstr+0x24>
    {
        jwPutch(JWC_PARAM *str++);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	603a      	str	r2, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff ffcd 	bl	800671e <jwPutch>
    while(*str != '\0')
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f3      	bne.n	8006774 <jwPutstr+0x14>
    }
    jwPutch(JWC_PARAM '\"');
 800678c:	2122      	movs	r1, #34	@ 0x22
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ffc5 	bl	800671e <jwPutch>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <jwPutraw>:
//jwPutraw()
//----------
//- put raw string in the data
//
void jwPutraw(JWC_DECL char *str)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
    while(*str !='\0')
 80067a6:	e007      	b.n	80067b8 <jwPutraw+0x1c>
            jwPutch(JWC_PARAM *str++);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	603a      	str	r2, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff ffb3 	bl	800671e <jwPutch>
    while(*str !='\0')
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f3      	bne.n	80067a8 <jwPutraw+0xc>
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <_jwObj>:
//- checks current node is OBJECT
//- adds comma if required
//- adds "key":
//
int _jwObj(JWC_DECL char *key)
{
 80067ca:	b590      	push	{r4, r7, lr}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
    if(JWC(error)==JWRITE_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d137      	bne.n	800684c <_jwObj+0x82>
    {
        JWC(callNo)++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	631a      	str	r2, [r3, #48]	@ 0x30
        if(JWC(nodeStack)[JWC(stackpos)].nodeType != JW_OBJECT)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	3306      	adds	r3, #6
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	791b      	ldrb	r3, [r3, #4]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d003      	beq.n	8006800 <_jwObj+0x36>
            JWC(error) = JWRITE_NOT_OBJECT;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2203      	movs	r2, #3
 80067fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80067fe:	e012      	b.n	8006826 <_jwObj+0x5c>
        else if(JWC(nodeStack)[JWC(stackpos)].elementNo++ > 0)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	1d8b      	adds	r3, r1, #6
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	1c50      	adds	r0, r2, #1
 8006810:	687c      	ldr	r4, [r7, #4]
 8006812:	1d8b      	adds	r3, r1, #6
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4423      	add	r3, r4
 8006818:	6098      	str	r0, [r3, #8]
 800681a:	2a00      	cmp	r2, #0
 800681c:	dd03      	ble.n	8006826 <_jwObj+0x5c>
            jwPutch(JWC_PARAM ',');
 800681e:	212c      	movs	r1, #44	@ 0x2c
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ff7c 	bl	800671e <jwPutch>
        jwPretty(JWC_PARAM0);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff0e 	bl	8006648 <jwPretty>
        jwPutstr(JWC_PARAM key);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ff96 	bl	8006760 <jwPutstr>
        jwPutch(JWC_PARAM ':');
 8006834:	213a      	movs	r1, #58	@ 0x3a
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff ff71 	bl	800671e <jwPutch>
        if(JWC(isPretty))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <_jwObj+0x82>
            jwPutch(JWC_PARAM ' ');
 8006844:	2120      	movs	r1, #32
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ff69 	bl	800671e <jwPutch>
    }
    return JWC(error);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bd90      	pop	{r4, r7, pc}

08006858 <_jwArr>:
//- checks current node is array
//- adds comma if required
//

int _jwArr(JWC_DECL0)
{
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    if(JWC(error)==JWRITE_OK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d127      	bne.n	80068b8 <_jwArr+0x60>
    {
        JWC(callNo)++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	631a      	str	r2, [r3, #48]	@ 0x30
        if(JWC(nodeStack)[JWC(stackpos)].nodeType != JW_ARRAY)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	3306      	adds	r3, #6
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d003      	beq.n	800688c <_jwArr+0x34>
            JWC(error)= JWRITE_NOT_ARRAY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800688a:	e012      	b.n	80068b2 <_jwArr+0x5a>
        else if(JWC(nodeStack)[JWC(stackpos)].elementNo++>0)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	1d8b      	adds	r3, r1, #6
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	1c50      	adds	r0, r2, #1
 800689c:	687c      	ldr	r4, [r7, #4]
 800689e:	1d8b      	adds	r3, r1, #6
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4423      	add	r3, r4
 80068a4:	6098      	str	r0, [r3, #8]
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	dd03      	ble.n	80068b2 <_jwArr+0x5a>
            jwPutch(JWC_PARAM ',');
 80068aa:	212c      	movs	r1, #44	@ 0x2c
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff36 	bl	800671e <jwPutch>
        jwPretty(JWC_PARAM0);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fec8 	bl	8006648 <jwPretty>
    }
    return JWC(error);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 80068bc:	4618      	mov	r0, r3
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd90      	pop	{r4, r7, pc}

080068c4 <strreverse>:

//MODP Value to String Functions
//------------------------------
//
static void strreverse(char *begin, char *end)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
    char aux;
    while(end > begin)
 80068ce:	e00d      	b.n	80068ec <strreverse+0x28>
    {
         aux = *end;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	73fb      	strb	r3, [r7, #15]
         *end-- = *begin;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	1e5a      	subs	r2, r3, #1
 80068da:	603a      	str	r2, [r7, #0]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	701a      	strb	r2, [r3, #0]
         *begin++ = aux;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	701a      	strb	r2, [r3, #0]
    while(end > begin)
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d8ed      	bhi.n	80068d0 <strreverse+0xc>
    }

}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <modp_itoa10>:

//modp_itoa10()
//- converts integer values to string
//
void modp_itoa10(int32_t value, char *str)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
    char *wstr = str;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	60fb      	str	r3, [r7, #12]
    //Take care of the sign
    unsigned int uvalue = (value<0)? -value : value;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	bfb8      	it	lt
 8006918:	425b      	neglt	r3, r3
 800691a:	60bb      	str	r3, [r7, #8]
    //Conversion , number is reversed
    do *wstr++ = (char)(48+(uvalue%10)); while(uvalue /= 10);
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4b17      	ldr	r3, [pc, #92]	@ (800697c <modp_itoa10+0x78>)
 8006920:	fba3 2301 	umull	r2, r3, r3, r1
 8006924:	08da      	lsrs	r2, r3, #3
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	1aca      	subs	r2, r1, r3
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1c59      	adds	r1, r3, #1
 8006936:	60f9      	str	r1, [r7, #12]
 8006938:	3230      	adds	r2, #48	@ 0x30
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4a0e      	ldr	r2, [pc, #56]	@ (800697c <modp_itoa10+0x78>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e5      	bne.n	800691c <modp_itoa10+0x18>
    if(value < 0) *wstr++ = '-';
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	da04      	bge.n	8006960 <modp_itoa10+0x5c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	60fa      	str	r2, [r7, #12]
 800695c:	222d      	movs	r2, #45	@ 0x2d
 800695e:	701a      	strb	r2, [r3, #0]
    *wstr='\0';
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]

    //Reverse string
    strreverse(str, wstr-1);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3b01      	subs	r3, #1
 800696a:	4619      	mov	r1, r3
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	f7ff ffa9 	bl	80068c4 <strreverse>
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	cccccccd 	.word	0xcccccccd

08006980 <modp_dtoa2>:
// - convert a floating point number to char-buffer with a variable precision format
// - No trailing zeros
//

void modp_dtoa2(float value, char *str, int prec)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08e      	sub	sp, #56	@ 0x38
 8006984:	af00      	add	r7, sp, #0
 8006986:	ed87 0a03 	vstr	s0, [r7, #12]
 800698a:	60b8      	str	r0, [r7, #8]
 800698c:	6079      	str	r1, [r7, #4]
    //if the input is larger than thres_max, revert to exponential
    const float thres_max = (float)(0x7FFFFFFF);
 800698e:	f04f 439e 	mov.w	r3, #1325400064	@ 0x4f000000
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned short int count;
    double diff = 0.0;
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    char *wstr = str;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
    unsigned short int neg=0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    unsigned short int whole;
    double tmp;
    uint32_t frac;

    //Hacky test for NaN
    if(!(value==value))
 80069a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80069ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80069b0:	eeb4 7a67 	vcmp.f32	s14, s15
 80069b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b8:	d00f      	beq.n	80069da <modp_dtoa2+0x5a>
    {
        str[0]='n'; str[1]='a'; str[2]='n';str[3]='\0';
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	226e      	movs	r2, #110	@ 0x6e
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	2261      	movs	r2, #97	@ 0x61
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3302      	adds	r3, #2
 80069cc:	226e      	movs	r2, #110	@ 0x6e
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	3303      	adds	r3, #3
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
        return;
 80069d8:	e137      	b.n	8006c4a <modp_dtoa2+0x2ca>
    }

    if(prec < 0){
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	da02      	bge.n	80069e6 <modp_dtoa2+0x66>
        prec = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	e004      	b.n	80069f0 <modp_dtoa2+0x70>

    }else if(prec > 9)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	dd01      	ble.n	80069f0 <modp_dtoa2+0x70>
    {
        //precision of >=10 can lead to overflow errors
        prec =9;
 80069ec:	2309      	movs	r3, #9
 80069ee:	607b      	str	r3, [r7, #4]
    }

    //We will work in positive values and deal with the negative sign issue later
    if(value < 0)
 80069f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80069f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fc:	d507      	bpl.n	8006a0e <modp_dtoa2+0x8e>
    {
        neg =1;
 80069fe:	2301      	movs	r3, #1
 8006a00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        value = -value;
 8006a02:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a06:	eef1 7a67 	vneg.f32	s15, s15
 8006a0a:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    whole = (int)value;
 8006a0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a16:	ee17 3a90 	vmov	r3, s15
 8006a1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    tmp = (value - whole)*pow10[prec];
 8006a1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a26:	ed97 7a03 	vldr	s14, [r7, #12]
 8006a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a2e:	ee17 0a90 	vmov	r0, s15
 8006a32:	f7f9 fd37 	bl	80004a4 <__aeabi_f2d>
 8006a36:	4a86      	ldr	r2, [pc, #536]	@ (8006c50 <modp_dtoa2+0x2d0>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4413      	add	r3, r2
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fd87 	bl	8000554 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    frac = (uint32_t)(tmp);
 8006a4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a52:	f7fa f841 	bl	8000ad8 <__aeabi_d2uiz>
 8006a56:	4603      	mov	r3, r0
 8006a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    diff = tmp - frac;
 8006a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a5c:	f7f9 fd00 	bl	8000460 <__aeabi_ui2d>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006a68:	f7f9 fbbc 	bl	80001e4 <__aeabi_dsub>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if(diff>0.5) {
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	4b76      	ldr	r3, [pc, #472]	@ (8006c54 <modp_dtoa2+0x2d4>)
 8006a7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006a7e:	f7f9 fff9 	bl	8000a74 <__aeabi_dcmpgt>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d016      	beq.n	8006ab6 <modp_dtoa2+0x136>
        ++frac;
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        //Handle rollover , e.g. case 0.99 with prec 1 is 1.0
        if(frac >= pow10[prec]){
 8006a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a90:	f7f9 fce6 	bl	8000460 <__aeabi_ui2d>
 8006a94:	4a6e      	ldr	r2, [pc, #440]	@ (8006c50 <modp_dtoa2+0x2d0>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 ffde 	bl	8000a60 <__aeabi_dcmpge>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01a      	beq.n	8006ae0 <modp_dtoa2+0x160>
            frac =0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
            ++whole;
 8006aae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006ab4:	e014      	b.n	8006ae0 <modp_dtoa2+0x160>
        }
    }else if(diff == 0.5 &&((frac==0)||(frac & 1))){
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	4b66      	ldr	r3, [pc, #408]	@ (8006c54 <modp_dtoa2+0x2d4>)
 8006abc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006ac0:	f7f9 ffb0 	bl	8000a24 <__aeabi_dcmpeq>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <modp_dtoa2+0x160>
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <modp_dtoa2+0x15a>
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <modp_dtoa2+0x160>
      ++frac;    // if halfway, round up if odd, OR if last digit is 0
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	3301      	adds	r3, #1
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    //- For very large numbers switch back to native sprintf for exponentials
    //- Anyone who wants to write code for this can do so
    //- Normal printf behavior is to print every whole number digit which can be 100s of
    //- characters overflowing your buffers == bad

    if(value > thres_max)
 8006ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ae4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af0:	f300 80aa 	bgt.w	8006c48 <modp_dtoa2+0x2c8>
    {
//        sprintf(str, "%e", neg ? -value : value);
        return;
    }

    if(prec==0)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d131      	bne.n	8006b5e <modp_dtoa2+0x1de>
    {
        diff = value - whole;
 8006afa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b0c:	ee17 0a90 	vmov	r0, s15
 8006b10:	f7f9 fcc8 	bl	80004a4 <__aeabi_f2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if(diff > 0.5)
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	4b4c      	ldr	r3, [pc, #304]	@ (8006c54 <modp_dtoa2+0x2d4>)
 8006b22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b26:	f7f9 ffa5 	bl	8000a74 <__aeabi_dcmpgt>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <modp_dtoa2+0x1b8>
        {
            //- greater than 0.5, round up
            ++whole;
 8006b30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b32:	3301      	adds	r3, #1
 8006b34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b36:	e05a      	b.n	8006bee <modp_dtoa2+0x26e>
        }else if ((diff==0.5)&&(whole&1))
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	4b45      	ldr	r3, [pc, #276]	@ (8006c54 <modp_dtoa2+0x2d4>)
 8006b3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b42:	f7f9 ff6f 	bl	8000a24 <__aeabi_dcmpeq>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d050      	beq.n	8006bee <modp_dtoa2+0x26e>
 8006b4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d04b      	beq.n	8006bee <modp_dtoa2+0x26e>
        {
            // exactly 0.5 and ODD then round up
            ++whole;
 8006b56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b58:	3301      	adds	r3, #1
 8006b5a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006b5c:	e047      	b.n	8006bee <modp_dtoa2+0x26e>
        }
    }else if(frac)
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d044      	beq.n	8006bee <modp_dtoa2+0x26e>
    {
        count = prec;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        //now do the fractional part, as an unsigned number
        // we know it is not 0 but we can have leading zeros, these
        // should be removed
        while(!(frac%10))
 8006b68:	e008      	b.n	8006b7c <modp_dtoa2+0x1fc>
        {
            --count;
 8006b6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            frac /=10;
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	4a39      	ldr	r2, [pc, #228]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
        while(!(frac%10))
 8006b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b7e:	4b36      	ldr	r3, [pc, #216]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006b80:	fba3 2301 	umull	r2, r3, r3, r1
 8006b84:	08da      	lsrs	r2, r3, #3
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	1aca      	subs	r2, r1, r3
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d0ea      	beq.n	8006b6a <modp_dtoa2+0x1ea>
        }

   // - Now do the fractional part, as an unsigned number
   do {
    --count;
 8006b94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b96:	3b01      	subs	r3, #1
 8006b98:	86fb      	strh	r3, [r7, #54]	@ 0x36
    *wstr++ = (char)(48+(frac %10));
 8006b9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba2:	08da      	lsrs	r2, r3, #3
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	1aca      	subs	r2, r1, r3
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	1c59      	adds	r1, r3, #1
 8006bb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bb6:	3230      	adds	r2, #48	@ 0x30
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
   } while(frac /=10);
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	4a26      	ldr	r2, [pc, #152]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e2      	bne.n	8006b94 <modp_dtoa2+0x214>

   //add extra 0s
   while(count-- > 0)
 8006bce:	e004      	b.n	8006bda <modp_dtoa2+0x25a>
        *wstr++ = '0';
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bd6:	2230      	movs	r2, #48	@ 0x30
 8006bd8:	701a      	strb	r2, [r3, #0]
   while(count-- > 0)
 8006bda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bdc:	1e5a      	subs	r2, r3, #1
 8006bde:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1f5      	bne.n	8006bd0 <modp_dtoa2+0x250>
   //- add decimal
   *wstr++ = '.';
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bea:	222e      	movs	r2, #46	@ 0x2e
 8006bec:	701a      	strb	r2, [r3, #0]

    //- do whole part
    //- Take care of the sign
    //- Conversion, Number is reversed
    //
    do *wstr++ = (char)(48 + (whole%10)); while(whole/=10);
 8006bee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006bf0:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf6:	08d9      	lsrs	r1, r3, #3
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c0c:	3230      	adds	r2, #48	@ 0x30
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c14:	4a10      	ldr	r2, [pc, #64]	@ (8006c58 <modp_dtoa2+0x2d8>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e4      	bne.n	8006bee <modp_dtoa2+0x26e>
    if(neg){
 8006c24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <modp_dtoa2+0x2b4>
        *wstr++ = '-';
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c30:	222d      	movs	r2, #45	@ 0x2d
 8006c32:	701a      	strb	r2, [r3, #0]
    }
    *wstr ='\0';
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]
//    printf(wstr);
    strreverse(str, wstr-1);
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68b8      	ldr	r0, [r7, #8]
 8006c42:	f7ff fe3f 	bl	80068c4 <strreverse>
 8006c46:	e000      	b.n	8006c4a <modp_dtoa2+0x2ca>
        return;
 8006c48:	bf00      	nop
}
 8006c4a:	3738      	adds	r7, #56	@ 0x38
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	0800ba30 	.word	0x0800ba30
 8006c54:	3fe00000 	.word	0x3fe00000
 8006c58:	cccccccd 	.word	0xcccccccd

08006c5c <Vending_Machine_EnableSensor>:
* </table><br><br>
* <hr>
*
*******************************************************************************/

uint8_t Vending_Machine_EnableSensor(void){
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
	Gpio_Set(SENSOR_GPIO, SENSOR_EN_PIN);
 8006c60:	2107      	movs	r1, #7
 8006c62:	4809      	ldr	r0, [pc, #36]	@ (8006c88 <Vending_Machine_EnableSensor+0x2c>)
 8006c64:	f000 fd20 	bl	80076a8 <Gpio_Set>
	Delay_Ms(10);
 8006c68:	200a      	movs	r0, #10
 8006c6a:	f000 f905 	bl	8006e78 <Delay_Ms>
	if(Gpio_Read(SENSOR_GPIO, SENSOR_DISPENSE_SENSE_PIN) == 1)
 8006c6e:	2104      	movs	r1, #4
 8006c70:	4805      	ldr	r0, [pc, #20]	@ (8006c88 <Vending_Machine_EnableSensor+0x2c>)
 8006c72:	f000 fd4c 	bl	800770e <Gpio_Read>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <Vending_Machine_EnableSensor+0x24>
		return 1;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <Vending_Machine_EnableSensor+0x26>
	else
		return 0;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	48000400 	.word	0x48000400

08006c8c <Vending_Machine_DisableSensor>:
* <tr><td> 30/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_DisableSensor(void){
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
	Gpio_Clear(SENSOR_GPIO, SENSOR_EN_PIN);
 8006c90:	2107      	movs	r1, #7
 8006c92:	4802      	ldr	r0, [pc, #8]	@ (8006c9c <Vending_Machine_DisableSensor+0x10>)
 8006c94:	f000 fd21 	bl	80076da <Gpio_Clear>
}
 8006c98:	bf00      	nop
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	48000400 	.word	0x48000400

08006ca0 <Vending_Machine_WaitForDispense>:
* <tr><td> 30/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t Vending_Machine_WaitForDispense(void){
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
	static uint32_t	timeOut;
	uint8_t		retVal	= 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	71fb      	strb	r3, [r7, #7]
	timeOut = 12000;
 8006caa:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <Vending_Machine_WaitForDispense+0x5c>)
 8006cac:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8006cb0:	601a      	str	r2, [r3, #0]
	while(timeOut){
 8006cb2:	e019      	b.n	8006ce8 <Vending_Machine_WaitForDispense+0x48>
		Delay_Ms(1);
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f000 f8df 	bl	8006e78 <Delay_Ms>
		if(Gpio_Read(SENSOR_GPIO, SENSOR_DISPENSE_SENSE_PIN) == 0){
 8006cba:	2104      	movs	r1, #4
 8006cbc:	4810      	ldr	r0, [pc, #64]	@ (8006d00 <Vending_Machine_WaitForDispense+0x60>)
 8006cbe:	f000 fd26 	bl	800770e <Gpio_Read>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <Vending_Machine_WaitForDispense+0x3e>
			measurementMatrix[SENSOR_PULSE_COUNT]++;
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d04 <Vending_Machine_WaitForDispense+0x64>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a0d      	ldr	r2, [pc, #52]	@ (8006d04 <Vending_Machine_WaitForDispense+0x64>)
 8006cd0:	6013      	str	r3, [r2, #0]
			retVal = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	71fb      	strb	r3, [r7, #7]
			timeOut = 0;
 8006cd6:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <Vending_Machine_WaitForDispense+0x5c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
			break;
 8006cdc:	e008      	b.n	8006cf0 <Vending_Machine_WaitForDispense+0x50>
		}
		timeOut--;
 8006cde:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <Vending_Machine_WaitForDispense+0x5c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a05      	ldr	r2, [pc, #20]	@ (8006cfc <Vending_Machine_WaitForDispense+0x5c>)
 8006ce6:	6013      	str	r3, [r2, #0]
	while(timeOut){
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <Vending_Machine_WaitForDispense+0x5c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e1      	bne.n	8006cb4 <Vending_Machine_WaitForDispense+0x14>
	}
	return retVal;
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000f10 	.word	0x20000f10
 8006d00:	48000400 	.word	0x48000400
 8006d04:	20003cf0 	.word	0x20003cf0

08006d08 <LED_Set_On>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void LED_Set_On(uint8_t led)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]
	Gpio_Set(LED_GPIO, led);
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	4619      	mov	r1, r3
 8006d16:	4803      	ldr	r0, [pc, #12]	@ (8006d24 <LED_Set_On+0x1c>)
 8006d18:	f000 fcc6 	bl	80076a8 <Gpio_Set>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	48000400 	.word	0x48000400

08006d28 <ADC1_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ADC1_Init(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0

  BATTERY_LEVEL_ADC_GPIO->MODER |= BATTERY_LEVEL_ADC_MODER_CONF;        // Analog input PA1
 8006d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8006d36:	f043 030c 	orr.w	r3, r3, #12
 8006d3a:	6013      	str	r3, [r2, #0]
  ADC1_2_COMMON->CCR 			|= 0x00010000;
 8006d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006de8 <ADC1_Init+0xc0>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a29      	ldr	r2, [pc, #164]	@ (8006de8 <ADC1_Init+0xc0>)
 8006d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d46:	6093      	str	r3, [r2, #8]
//  DISABLE_ADC(BATTERY_LEVEL_ADC);
//  if (ADC1->CR & ADC_CR_ADEN)               // Ensure the ADC is disabled before calibration

  BATTERY_LEVEL_ADC->CR &= ~ADC_CR_ADVREGEN;
 8006d48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006d52:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8006d56:	6093      	str	r3, [r2, #8]
  BATTERY_LEVEL_ADC->CR |= ADC_CR_ADVREGEN_0; // Enable the voltage regulator
 8006d58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	6093      	str	r3, [r2, #8]

  Delay_Ms(10);
 8006d68:	200a      	movs	r0, #10
 8006d6a:	f000 f885 	bl	8006e78 <Delay_Ms>

  BATTERY_LEVEL_ADC->CR &= ~0x00000001;             // Disable ADC
 8006d6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	6093      	str	r3, [r2, #8]


  BATTERY_LEVEL_ADC->CR |= ADC_CR_ADCAL;                 // Start calibration
 8006d7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006d88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d8c:	6093      	str	r3, [r2, #8]
  while(BATTERY_LEVEL_ADC->CR & ADC_CR_ADCAL){}       // Wait until calibration is complete
 8006d8e:	bf00      	nop
 8006d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dbfa      	blt.n	8006d90 <ADC1_Init+0x68>
//  CALIB_ADC(BATTERY_LEVEL_ADC);

  ENABLE_ADC(BATTERY_LEVEL_ADC);
 8006d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	6093      	str	r3, [r2, #8]
 8006daa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f8      	beq.n	8006daa <ADC1_Init+0x82>

  BATTERY_LEVEL_ADC->CFGR 		|= BATTERY_LEVEL_ADC_CFGR_CONF;
 8006db8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	60d3      	str	r3, [r2, #12]
  BATTERY_LEVEL_ADC->SMPR1 		|= BATTERY_LEVEL_ADC_SMPR1_CONF;				// ADC1 CAHNNEL 7
 8006dc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006dce:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8006dd2:	6153      	str	r3, [r2, #20]
  BATTERY_LEVEL_ADC->SQR1 		|= BATTERY_LEVEL_ADC_SQR1_CONF;				// Set channel 7 as the first conversion
 8006dd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de2:	6313      	str	r3, [r2, #48]	@ 0x30
 }
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	50000300 	.word	0x50000300

08006dec <ADC1_Read_battery_value>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
float ADC1_Read_battery_value(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
	BATTERY_LEVEL_ADC->CR |= ADC_START_CONVERSION;			// Start ADC conversion
 8006df0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006dfa:	f043 0304 	orr.w	r3, r3, #4
 8006dfe:	6093      	str	r3, [r2, #8]
	while (!(BATTERY_LEVEL_ADC->ISR & ADC_EOC));			// Wait until conversion is complete
 8006e00:	bf00      	nop
 8006e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f8      	beq.n	8006e02 <ADC1_Read_battery_value+0x16>
    adc_value =  ADC1->DR;                       			// Read the ADC value
 8006e10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	4a13      	ldr	r2, [pc, #76]	@ (8006e64 <ADC1_Read_battery_value+0x78>)
 8006e18:	6013      	str	r3, [r2, #0]
    adc_read_battery_val2 = adc_value / 1236.0f; 			// Perform float division      1212 and 202 for 200K and 1M reg
 8006e1a:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <ADC1_Read_battery_value+0x78>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e26:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006e68 <ADC1_Read_battery_value+0x7c>
 8006e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e6c <ADC1_Read_battery_value+0x80>)
 8006e30:	edc3 7a00 	vstr	s15, [r3]
    adc_read_battery_val1 = adc_value / 213.0f;  			// Perform float division      and these values for 220K and 1M reg
 8006e34:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <ADC1_Read_battery_value+0x78>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e40:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8006e70 <ADC1_Read_battery_value+0x84>
 8006e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e48:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <ADC1_Read_battery_value+0x88>)
 8006e4a:	edc3 7a00 	vstr	s15, [r3]
    //return adc_read_battery_val2;                			//return value
    return adc_read_battery_val1;
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <ADC1_Read_battery_value+0x88>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	ee07 3a90 	vmov	s15, r3
}
 8006e56:	eeb0 0a67 	vmov.f32	s0, s15
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000f14 	.word	0x20000f14
 8006e68:	449a8000 	.word	0x449a8000
 8006e6c:	20000f1c 	.word	0x20000f1c
 8006e70:	43550000 	.word	0x43550000
 8006e74:	20000f18 	.word	0x20000f18

08006e78 <Delay_Ms>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Delay_Ms( uint32_t ms)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	/*This Loop is Based on the assumption that each loop iterations takes about
	 * 12 cycles, The actual number of cycles will depend on the MCU, need to
	 * Fine tune
	 */
	uint32_t iterations = (SYS_FREQ_MHZ*1000/12) * ms;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f240 229a 	movw	r2, #666	@ 0x29a
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	60fb      	str	r3, [r7, #12]
	while(iterations > 0){
 8006e8c:	e003      	b.n	8006e96 <Delay_Ms+0x1e>
		iterations--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
		__asm__("NOP");
 8006e94:	bf00      	nop
	while(iterations > 0){
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f8      	bne.n	8006e8e <Delay_Ms+0x16>
	}
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <Convert_String_To_Integer>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint16_t Convert_String_To_Integer(uint8_t *const number)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	static uint32_t dec = 0, i;
	static uint8_t len = 0;
	dec = 0;
 8006eb4:	4b19      	ldr	r3, [pc, #100]	@ (8006f1c <Convert_String_To_Integer+0x70>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
	len = 0;
 8006eba:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <Convert_String_To_Integer+0x74>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
	len = strlen((char*)number);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7f9 f983 	bl	80001cc <strlen>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <Convert_String_To_Integer+0x74>)
 8006ecc:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < len; i++ )
 8006ece:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <Convert_String_To_Integer+0x78>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e014      	b.n	8006f00 <Convert_String_To_Integer+0x54>
	dec = dec * 10 + (number[i] - '0');
 8006ed6:	4b11      	ldr	r3, [pc, #68]	@ (8006f1c <Convert_String_To_Integer+0x70>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <Convert_String_To_Integer+0x78>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	440b      	add	r3, r1
 8006ef0:	3b30      	subs	r3, #48	@ 0x30
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <Convert_String_To_Integer+0x70>)
 8006ef4:	6013      	str	r3, [r2, #0]
	for( i = 0; i < len; i++ )
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <Convert_String_To_Integer+0x78>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3301      	adds	r3, #1
 8006efc:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <Convert_String_To_Integer+0x78>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <Convert_String_To_Integer+0x74>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <Convert_String_To_Integer+0x78>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d8e3      	bhi.n	8006ed6 <Convert_String_To_Integer+0x2a>

	return dec;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	@ (8006f1c <Convert_String_To_Integer+0x70>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000f24 	.word	0x20000f24
 8006f20:	20000f28 	.word	0x20000f28
 8006f24:	20000f2c 	.word	0x20000f2c

08006f28 <Convert_String_To_Integer32>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint32_t Convert_String_To_Integer32(uint8_t *const number)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	static uint32_t dec = 0, i;
	static uint8_t len = 0;
	dec = 0;
 8006f30:	4b19      	ldr	r3, [pc, #100]	@ (8006f98 <Convert_String_To_Integer32+0x70>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
	len = 0;
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <Convert_String_To_Integer32+0x74>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
	len = strlen((char*)number);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7f9 f945 	bl	80001cc <strlen>
 8006f42:	4603      	mov	r3, r0
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	4b15      	ldr	r3, [pc, #84]	@ (8006f9c <Convert_String_To_Integer32+0x74>)
 8006f48:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < len; i++ )
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <Convert_String_To_Integer32+0x78>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	e014      	b.n	8006f7c <Convert_String_To_Integer32+0x54>
	dec = dec * 10 + (number[i] - '0');
 8006f52:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <Convert_String_To_Integer32+0x70>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <Convert_String_To_Integer32+0x78>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3b30      	subs	r3, #48	@ 0x30
 8006f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f98 <Convert_String_To_Integer32+0x70>)
 8006f70:	6013      	str	r3, [r2, #0]
	for( i = 0; i < len; i++ )
 8006f72:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <Convert_String_To_Integer32+0x78>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	4a09      	ldr	r2, [pc, #36]	@ (8006fa0 <Convert_String_To_Integer32+0x78>)
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	4b07      	ldr	r3, [pc, #28]	@ (8006f9c <Convert_String_To_Integer32+0x74>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <Convert_String_To_Integer32+0x78>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d8e3      	bhi.n	8006f52 <Convert_String_To_Integer32+0x2a>

	return dec;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	@ (8006f98 <Convert_String_To_Integer32+0x70>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000f30 	.word	0x20000f30
 8006f9c:	20000f34 	.word	0x20000f34
 8006fa0:	20000f38 	.word	0x20000f38

08006fa4 <Convert_Integer_To_String>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Convert_Integer_To_String(uint8_t * const str, uint16_t number)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
	uint16_t n, len = 0, i, rem;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	81bb      	strh	r3, [r7, #12]
	n = number;
 8006fb4:	887b      	ldrh	r3, [r7, #2]
 8006fb6:	81fb      	strh	r3, [r7, #14]
	if(0 == n)
 8006fb8:	89fb      	ldrh	r3, [r7, #14]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <Convert_Integer_To_String+0x32>
		len = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	81bb      	strh	r3, [r7, #12]
	while (0 != n)
 8006fc2:	e008      	b.n	8006fd6 <Convert_Integer_To_String+0x32>
	{
		len++;
 8006fc4:	89bb      	ldrh	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	81bb      	strh	r3, [r7, #12]
		n /= 10;
 8006fca:	89fb      	ldrh	r3, [r7, #14]
 8006fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8007040 <Convert_Integer_To_String+0x9c>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	08db      	lsrs	r3, r3, #3
 8006fd4:	81fb      	strh	r3, [r7, #14]
	while (0 != n)
 8006fd6:	89fb      	ldrh	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1f3      	bne.n	8006fc4 <Convert_Integer_To_String+0x20>
	}

	for ( i = 0; i < len; i++ )
 8006fdc:	2300      	movs	r3, #0
 8006fde:	817b      	strh	r3, [r7, #10]
 8006fe0:	e01f      	b.n	8007022 <Convert_Integer_To_String+0x7e>
	{
		rem = number % 10;
 8006fe2:	887a      	ldrh	r2, [r7, #2]
 8006fe4:	4b16      	ldr	r3, [pc, #88]	@ (8007040 <Convert_Integer_To_String+0x9c>)
 8006fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8006fea:	08d9      	lsrs	r1, r3, #3
 8006fec:	460b      	mov	r3, r1
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	813b      	strh	r3, [r7, #8]
		number = number / 10;
 8006ff8:	887b      	ldrh	r3, [r7, #2]
 8006ffa:	4a11      	ldr	r2, [pc, #68]	@ (8007040 <Convert_Integer_To_String+0x9c>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	08db      	lsrs	r3, r3, #3
 8007002:	807b      	strh	r3, [r7, #2]
		str[len - (i + 1)] = rem + '0';
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	89b9      	ldrh	r1, [r7, #12]
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	3301      	adds	r3, #1
 800700e:	1acb      	subs	r3, r1, r3
 8007010:	4619      	mov	r1, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	440b      	add	r3, r1
 8007016:	3230      	adds	r2, #48	@ 0x30
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < len; i++ )
 800701c:	897b      	ldrh	r3, [r7, #10]
 800701e:	3301      	adds	r3, #1
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	897a      	ldrh	r2, [r7, #10]
 8007024:	89bb      	ldrh	r3, [r7, #12]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3db      	bcc.n	8006fe2 <Convert_Integer_To_String+0x3e>
	}
	str[len] = '\0';
 800702a:	89bb      	ldrh	r3, [r7, #12]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	cccccccd 	.word	0xcccccccd

08007044 <Str_Cpy_Marker>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t * Str_Cpy_Marker(uint8_t * src, uint8_t * dest, uint8_t startMarker, uint8_t endMarker)
{
 8007044:	b480      	push	{r7}
 8007046:	b089      	sub	sp, #36	@ 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4611      	mov	r1, r2
 8007050:	461a      	mov	r2, r3
 8007052:	460b      	mov	r3, r1
 8007054:	71fb      	strb	r3, [r7, #7]
 8007056:	4613      	mov	r3, r2
 8007058:	71bb      	strb	r3, [r7, #6]
	uint8_t *s, *d;
	uint16_t bytes=0;
 800705a:	2300      	movs	r3, #0
 800705c:	837b      	strh	r3, [r7, #26]
	while(*src != startMarker){
 800705e:	e008      	b.n	8007072 <Str_Cpy_Marker+0x2e>
		src++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
		if(*src == '\0')
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <Str_Cpy_Marker+0x2e>
			return 0;
 800706e:	2300      	movs	r3, #0
 8007070:	e033      	b.n	80070da <Str_Cpy_Marker+0x96>
	while(*src != startMarker){
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	79fa      	ldrb	r2, [r7, #7]
 8007078:	429a      	cmp	r2, r3
 800707a:	d1f1      	bne.n	8007060 <Str_Cpy_Marker+0x1c>
	}
	s = src;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	61fb      	str	r3, [r7, #28]
	src++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
	s++;
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	3301      	adds	r3, #1
 800708a:	61fb      	str	r3, [r7, #28]
	while(*src != endMarker){
 800708c:	e008      	b.n	80070a0 <Str_Cpy_Marker+0x5c>
		src++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
		if(*src == '\0')
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <Str_Cpy_Marker+0x5c>
			return 0;
 800709c:	2300      	movs	r3, #0
 800709e:	e01c      	b.n	80070da <Str_Cpy_Marker+0x96>
	while(*src != endMarker){
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	79ba      	ldrb	r2, [r7, #6]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d1f1      	bne.n	800708e <Str_Cpy_Marker+0x4a>
	}
	d = src;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	617b      	str	r3, [r7, #20]
	while(s!=d){
 80070ae:	e00c      	b.n	80070ca <Str_Cpy_Marker+0x86>
		*dest = *s;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	701a      	strb	r2, [r3, #0]
		dest++;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60bb      	str	r3, [r7, #8]
		s++;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3301      	adds	r3, #1
 80070c2:	61fb      	str	r3, [r7, #28]
		bytes++;
 80070c4:	8b7b      	ldrh	r3, [r7, #26]
 80070c6:	3301      	adds	r3, #1
 80070c8:	837b      	strh	r3, [r7, #26]
	while(s!=d){
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d1ee      	bne.n	80070b0 <Str_Cpy_Marker+0x6c>
	}
	*dest = '\0';
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
	return d;
 80070d8:	697b      	ldr	r3, [r7, #20]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3724      	adds	r7, #36	@ 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <strConcat>:


void strConcat(char* src, char* dest){
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
	for(;*src != '\0';src++);
 80070f0:	e002      	b.n	80070f8 <strConcat+0x12>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3301      	adds	r3, #1
 80070f6:	607b      	str	r3, [r7, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f8      	bne.n	80070f2 <strConcat+0xc>
	for(;*dest != '\0';dest++,src++){
 8007100:	e009      	b.n	8007116 <strConcat+0x30>
		*src = *dest;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	701a      	strb	r2, [r3, #0]
	for(;*dest != '\0';dest++,src++){
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3301      	adds	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f1      	bne.n	8007102 <strConcat+0x1c>
	}
	*src = '\0';
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <convert_to_epoch>:


void convert_to_epoch(char* date_time, uint32_t* result)
{
 8007130:	b5b0      	push	{r4, r5, r7, lr}
 8007132:	b09a      	sub	sp, #104	@ 0x68
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
    char isLeapYear=0, month, date, hours, minutes, seconds;
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    int year = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	653b      	str	r3, [r7, #80]	@ 0x50
    int no_of_yrs = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int leapdays = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	667b      	str	r3, [r7, #100]	@ 0x64
    int yr = 0, m = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007150:	2300      	movs	r3, #0
 8007152:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int currentdays = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	65bb      	str	r3, [r7, #88]	@ 0x58
    int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8007158:	4bb7      	ldr	r3, [pc, #732]	@ (8007438 <convert_to_epoch+0x308>)
 800715a:	f107 0408 	add.w	r4, r7, #8
 800715e:	461d      	mov	r5, r3
 8007160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800716c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int current_sec=0;
 8007170:	2300      	movs	r3, #0
 8007172:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t totaldays;
    int32_t correction = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	647b      	str	r3, [r7, #68]	@ 0x44
    uint8_t sign;
	int8_t tz;

    year = (*date_time++ - '0') * 10;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	653b      	str	r3, [r7, #80]	@ 0x50
    year += (*date_time++ - '0');
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	3b30      	subs	r3, #48	@ 0x30
 8007198:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800719a:	4413      	add	r3, r2
 800719c:	653b      	str	r3, [r7, #80]	@ 0x50
    year += 2000;
 800719e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80071a4:	653b      	str	r3, [r7, #80]	@ 0x50
    date_time++;  //skip /
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3301      	adds	r3, #1
 80071aa:	607b      	str	r3, [r7, #4]
    month = (*date_time++ - '0') * 10;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	0092      	lsls	r2, r2, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	3320      	adds	r3, #32
 80071c0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    month += (*date_time++ - '0');
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	3b30      	subs	r3, #48	@ 0x30
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071d4:	4413      	add	r3, r2
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    date_time++;  //skip /
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3301      	adds	r3, #1
 80071de:	607b      	str	r3, [r7, #4]
    date = (*date_time++ - '0') * 10;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	0092      	lsls	r2, r2, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	3320      	adds	r3, #32
 80071f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    date += (*date_time++ - '0');
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	3b30      	subs	r3, #48	@ 0x30
 8007202:	b2da      	uxtb	r2, r3
 8007204:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8007208:	4413      	add	r3, r2
 800720a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    date_time++;  //skip ,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3301      	adds	r3, #1
 8007212:	607b      	str	r3, [r7, #4]
    hours = (*date_time++ - '0') * 10;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	0092      	lsls	r2, r2, #2
 8007220:	4413      	add	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	b2db      	uxtb	r3, r3
 8007226:	3320      	adds	r3, #32
 8007228:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    hours += (*date_time++ - '0');
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	3b30      	subs	r3, #48	@ 0x30
 8007236:	b2da      	uxtb	r2, r3
 8007238:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800723c:	4413      	add	r3, r2
 800723e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
    date_time++;  //skip :
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3301      	adds	r3, #1
 8007246:	607b      	str	r3, [r7, #4]
    minutes = (*date_time++ - '0') * 10;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	0092      	lsls	r2, r2, #2
 8007254:	4413      	add	r3, r2
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	b2db      	uxtb	r3, r3
 800725a:	3320      	adds	r3, #32
 800725c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    minutes += (*date_time++ - '0');
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	607a      	str	r2, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	3b30      	subs	r3, #48	@ 0x30
 800726a:	b2da      	uxtb	r2, r3
 800726c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007270:	4413      	add	r3, r2
 8007272:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    date_time++;  //skip :
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3301      	adds	r3, #1
 800727a:	607b      	str	r3, [r7, #4]
    seconds = (*date_time++ - '0') * 10;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	0092      	lsls	r2, r2, #2
 8007288:	4413      	add	r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3320      	adds	r3, #32
 8007290:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    seconds += (*date_time++ - '0');
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	3b30      	subs	r3, #48	@ 0x30
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80072a4:	4413      	add	r3, r2
 80072a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    sign = date_time++;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    tz = (*date_time++ - '0') * 10;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	3b30      	subs	r3, #48	@ 0x30
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    tz += (*date_time++ - '0');
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	3b30      	subs	r3, #48	@ 0x30
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072de:	4413      	add	r3, r2
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    date_time++;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3301      	adds	r3, #1
 80072ea:	607b      	str	r3, [r7, #4]
    if(sign == '-'){
 80072ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80072f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80072f2:	d105      	bne.n	8007300 <convert_to_epoch+0x1d0>
    	tz= tz * -1;
 80072f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072f8:	425b      	negs	r3, r3
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }
    correction = ((5.5-(float)(tz/4.0)) * 3600);
 8007300:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007304:	4618      	mov	r0, r3
 8007306:	f7f9 f8bb 	bl	8000480 <__aeabi_i2d>
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	4b4b      	ldr	r3, [pc, #300]	@ (800743c <convert_to_epoch+0x30c>)
 8007310:	f7f9 fa4a 	bl	80007a8 <__aeabi_ddiv>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	f7f9 fbfc 	bl	8000b18 <__aeabi_d2f>
 8007320:	4603      	mov	r3, r0
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 f8be 	bl	80004a4 <__aeabi_f2d>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	4943      	ldr	r1, [pc, #268]	@ (8007440 <convert_to_epoch+0x310>)
 8007332:	f7f8 ff57 	bl	80001e4 <__aeabi_dsub>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4610      	mov	r0, r2
 800733c:	4619      	mov	r1, r3
 800733e:	a33c      	add	r3, pc, #240	@ (adr r3, 8007430 <convert_to_epoch+0x300>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	f7f9 f906 	bl	8000554 <__aeabi_dmul>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4610      	mov	r0, r2
 800734e:	4619      	mov	r1, r3
 8007350:	f7f9 fb9a 	bl	8000a88 <__aeabi_d2iz>
 8007354:	4603      	mov	r3, r0
 8007356:	647b      	str	r3, [r7, #68]	@ 0x44
    no_of_yrs = year - EPOCH_START_YEAR;
 8007358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800735a:	f2a3 73b2 	subw	r3, r3, #1970	@ 0x7b2
 800735e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    totaldays = no_of_yrs * 365;
 8007360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007362:	f240 126d 	movw	r2, #365	@ 0x16d
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (yr = EPOCH_START_YEAR; yr < year; yr++){
 800736c:	f240 73b2 	movw	r3, #1970	@ 0x7b2
 8007370:	663b      	str	r3, [r7, #96]	@ 0x60
 8007372:	e02e      	b.n	80073d2 <convert_to_epoch+0x2a2>
        isLeapYear = (yr % 4 == 0 && yr % 100 != 0) || (yr % 400 == 0);
 8007374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <convert_to_epoch+0x268>
 800737e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007380:	4b30      	ldr	r3, [pc, #192]	@ (8007444 <convert_to_epoch+0x314>)
 8007382:	fb83 1302 	smull	r1, r3, r3, r2
 8007386:	1159      	asrs	r1, r3, #5
 8007388:	17d3      	asrs	r3, r2, #31
 800738a:	1acb      	subs	r3, r1, r3
 800738c:	2164      	movs	r1, #100	@ 0x64
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10d      	bne.n	80073b4 <convert_to_epoch+0x284>
 8007398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800739a:	4b2a      	ldr	r3, [pc, #168]	@ (8007444 <convert_to_epoch+0x314>)
 800739c:	fb83 1302 	smull	r1, r3, r3, r2
 80073a0:	11d9      	asrs	r1, r3, #7
 80073a2:	17d3      	asrs	r3, r2, #31
 80073a4:	1acb      	subs	r3, r1, r3
 80073a6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80073aa:	fb01 f303 	mul.w	r3, r1, r3
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <convert_to_epoch+0x288>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <convert_to_epoch+0x28a>
 80073b8:	2300      	movs	r3, #0
 80073ba:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
        if (isLeapYear == 1 )
 80073be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d102      	bne.n	80073cc <convert_to_epoch+0x29c>
        {
            leapdays++;
 80073c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073c8:	3301      	adds	r3, #1
 80073ca:	667b      	str	r3, [r7, #100]	@ 0x64
    for (yr = EPOCH_START_YEAR; yr < year; yr++){
 80073cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073ce:	3301      	adds	r3, #1
 80073d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d6:	429a      	cmp	r2, r3
 80073d8:	dbcc      	blt.n	8007374 <convert_to_epoch+0x244>
        }
    }
    isLeapYear =0;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 80073e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10c      	bne.n	8007404 <convert_to_epoch+0x2d4>
 80073ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073ec:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <convert_to_epoch+0x314>)
 80073ee:	fb83 1302 	smull	r1, r3, r3, r2
 80073f2:	1159      	asrs	r1, r3, #5
 80073f4:	17d3      	asrs	r3, r2, #31
 80073f6:	1acb      	subs	r3, r1, r3
 80073f8:	2164      	movs	r1, #100	@ 0x64
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10d      	bne.n	8007420 <convert_to_epoch+0x2f0>
 8007404:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <convert_to_epoch+0x314>)
 8007408:	fb83 1302 	smull	r1, r3, r3, r2
 800740c:	11d9      	asrs	r1, r3, #7
 800740e:	17d3      	asrs	r3, r2, #31
 8007410:	1acb      	subs	r3, r1, r3
 8007412:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <convert_to_epoch+0x2f4>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <convert_to_epoch+0x2f6>
 8007424:	2300      	movs	r3, #0
 8007426:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    for (m = 1; m < month; ++m){
 800742a:	2301      	movs	r3, #1
 800742c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800742e:	e022      	b.n	8007476 <convert_to_epoch+0x346>
 8007430:	00000000 	.word	0x00000000
 8007434:	40ac2000 	.word	0x40ac2000
 8007438:	0800b868 	.word	0x0800b868
 800743c:	40100000 	.word	0x40100000
 8007440:	40160000 	.word	0x40160000
 8007444:	51eb851f 	.word	0x51eb851f
        currentdays += days_in_month[m-1];
 8007448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800744a:	3b01      	subs	r3, #1
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	3368      	adds	r3, #104	@ 0x68
 8007450:	443b      	add	r3, r7
 8007452:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8007456:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007458:	4413      	add	r3, r2
 800745a:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((m == 2) && (isLeapYear == 1)){
 800745c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800745e:	2b02      	cmp	r3, #2
 8007460:	d106      	bne.n	8007470 <convert_to_epoch+0x340>
 8007462:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8007466:	2b01      	cmp	r3, #1
 8007468:	d102      	bne.n	8007470 <convert_to_epoch+0x340>
            leapdays = leapdays + 1;
 800746a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800746c:	3301      	adds	r3, #1
 800746e:	667b      	str	r3, [r7, #100]	@ 0x64
    for (m = 1; m < month; ++m){
 8007470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007472:	3301      	adds	r3, #1
 8007474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800747a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800747c:	429a      	cmp	r2, r3
 800747e:	dbe3      	blt.n	8007448 <convert_to_epoch+0x318>
        }
    }
    totaldays += leapdays;
 8007480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007482:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007484:	4413      	add	r3, r2
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
    currentdays += (date - 1);
 8007488:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800748c:	3b01      	subs	r3, #1
 800748e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007490:	4413      	add	r3, r2
 8007492:	65bb      	str	r3, [r7, #88]	@ 0x58
    current_sec = (hours * 3600) + (minutes * 60) + seconds;
 8007494:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007498:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800749c:	fb02 f103 	mul.w	r1, r2, r3
 80074a0:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80074a4:	4613      	mov	r3, r2
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	18ca      	adds	r2, r1, r3
 80074ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074b2:	4413      	add	r3, r2
 80074b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *result = ((totaldays + currentdays) * 86400) + current_sec;
 80074b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	4413      	add	r3, r2
 80074bc:	4a08      	ldr	r2, [pc, #32]	@ (80074e0 <convert_to_epoch+0x3b0>)
 80074be:	fb03 f202 	mul.w	r2, r3, r2
 80074c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074c4:	441a      	add	r2, r3
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	601a      	str	r2, [r3, #0]
    *result += correction;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074d0:	441a      	add	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	601a      	str	r2, [r3, #0]
}
 80074d6:	bf00      	nop
 80074d8:	3768      	adds	r7, #104	@ 0x68
 80074da:	46bd      	mov	sp, r7
 80074dc:	bdb0      	pop	{r4, r5, r7, pc}
 80074de:	bf00      	nop
 80074e0:	00015180 	.word	0x00015180

080074e4 <Gpio_Init>:
* <hr>
*
*******************************************************************************/

void Gpio_Init(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
	/*Configuring the A7672 Communication UART for the AT Commands*/
	A7672_UART_TX_GPIO->MODER |= A7672_UART_TX_MODER_CONF;
 80074e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80074f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074f6:	6013      	str	r3, [r2, #0]
	A7672_UART_TX_GPIO->AFR[0] |= A7672_UART_TX_AFL_CONF;
 80074f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	6213      	str	r3, [r2, #32]
	A7672_UART_TX_GPIO->AFR[1] |= A7672_UART_TX_AFH_CONF;
 8007504:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800750e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8007512:	6253      	str	r3, [r2, #36]	@ 0x24
	A7672_UART_RX_GPIO->MODER |= A7672_UART_RX_MODER_CONF;
 8007514:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800751e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007522:	6013      	str	r3, [r2, #0]
	A7672_UART_RX_GPIO->AFR[0] |= A7672_UART_RX_AFL_CONF;
 8007524:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007528:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	6213      	str	r3, [r2, #32]
	A7672_UART_RX_GPIO->AFR[1] |= A7672_UART_RX_AFH_CONF;
 8007530:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800753a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800753e:	6253      	str	r3, [r2, #36]	@ 0x24

	/*Configuring GPIO to Switch On/Off the A7672 Module*/
	A7672_POWER_GPIO->MODER |= A7672_POWER_MODER_CONF;
 8007540:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800754a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800754e:	6013      	str	r3, [r2, #0]
	A7672_POWER_GPIO->PUPDR |= A7672_POWER_PUPDR_CONF;
 8007550:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800755a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800755e:	60d3      	str	r3, [r2, #12]

	/*Configuring the GPIO to Sense the Power Status of A7672 Module*/
	A7672_POWER_STATUS_GPIO->MODER |= A7672_POWER_STATUS_MODER_CONF;
 8007560:	4b4e      	ldr	r3, [pc, #312]	@ (800769c <Gpio_Init+0x1b8>)
 8007562:	4a4e      	ldr	r2, [pc, #312]	@ (800769c <Gpio_Init+0x1b8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6013      	str	r3, [r2, #0]
	A7672_POWER_STATUS_GPIO->PUPDR |= A7672_POWER_STATUS_PUPDR_CONF;
 8007568:	4b4c      	ldr	r3, [pc, #304]	@ (800769c <Gpio_Init+0x1b8>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a4b      	ldr	r2, [pc, #300]	@ (800769c <Gpio_Init+0x1b8>)
 800756e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007572:	60d3      	str	r3, [r2, #12]

	/*Configuring the GPIO to control the Onboard LEDs*/
	LED_GPIO->MODER |= LED1_MODER_CONF | LED2_MODER_CONF;
 8007574:	4b4a      	ldr	r3, [pc, #296]	@ (80076a0 <Gpio_Init+0x1bc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a49      	ldr	r2, [pc, #292]	@ (80076a0 <Gpio_Init+0x1bc>)
 800757a:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 800757e:	6013      	str	r3, [r2, #0]
	LED_GPIO->PUPDR |= LED1_PUPDR_CONF | LED2_PUPDR_CONF;
 8007580:	4b47      	ldr	r3, [pc, #284]	@ (80076a0 <Gpio_Init+0x1bc>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4a46      	ldr	r2, [pc, #280]	@ (80076a0 <Gpio_Init+0x1bc>)
 8007586:	f043 6320 	orr.w	r3, r3, #167772160	@ 0xa000000
 800758a:	60d3      	str	r3, [r2, #12]

	/*Configuring GPIO to sense the IR Sensors*/
	SENSOR_GPIO->MODER |= SENSOR_EN_MODER_CONF;
 800758c:	4b44      	ldr	r3, [pc, #272]	@ (80076a0 <Gpio_Init+0x1bc>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a43      	ldr	r2, [pc, #268]	@ (80076a0 <Gpio_Init+0x1bc>)
 8007592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007596:	6013      	str	r3, [r2, #0]
	SENSOR_GPIO->PUPDR |= SENSOR_PUPDR_CONF;
 8007598:	4b41      	ldr	r3, [pc, #260]	@ (80076a0 <Gpio_Init+0x1bc>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a40      	ldr	r2, [pc, #256]	@ (80076a0 <Gpio_Init+0x1bc>)
 800759e:	f443 4315 	orr.w	r3, r3, #38144	@ 0x9500
 80075a2:	60d3      	str	r3, [r2, #12]

	/*Configuring GPIO to Switch On/Off the Motor */
	MOTOR_GPIO->MODER |= MOTOR_MODER_CONF;
 80075a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075b2:	6013      	str	r3, [r2, #0]
	MOTOR_GPIO->PUPDR |= MOTOR_PUPDR_CONF;
 80075b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80075be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075c2:	60d3      	str	r3, [r2, #12]


	/*Configuring GPIO to Switch ON/OFF The RGB LEDs expected to be connected externally*/
	RGB_RED_LED_GPIO->MODER |= RGB_RED_LED_MODER_CONF;
 80075c4:	4b36      	ldr	r3, [pc, #216]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a35      	ldr	r2, [pc, #212]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ce:	6013      	str	r3, [r2, #0]
	RGB_RED_LED_GPIO->PUPDR |= RGB_RED_LED_PUPDR_CONF;
 80075d0:	4b33      	ldr	r3, [pc, #204]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4a32      	ldr	r2, [pc, #200]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075da:	60d3      	str	r3, [r2, #12]

	RGB_GREEN_LED_GPIO->MODER |= RGB_GREEN_LED_MODER_CONF;
 80075dc:	4b30      	ldr	r3, [pc, #192]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2f      	ldr	r2, [pc, #188]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075e6:	6013      	str	r3, [r2, #0]
	RGB_GREEN_LED_GPIO->PUPDR |= RGB_GREEN_LED_PUPDR_CONF;
 80075e8:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <Gpio_Init+0x1bc>)
 80075ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075f2:	60d3      	str	r3, [r2, #12]

	RGB_BLUE_LED_GPIO->MODER |= RGB_BLUE_LED_MODER_CONF;
 80075f4:	4b29      	ldr	r3, [pc, #164]	@ (800769c <Gpio_Init+0x1b8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a28      	ldr	r2, [pc, #160]	@ (800769c <Gpio_Init+0x1b8>)
 80075fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80075fe:	6013      	str	r3, [r2, #0]
	RGB_BLUE_LED_GPIO->PUPDR |= RGB_BLUE_LED_PUPDR_CONF;
 8007600:	4b26      	ldr	r3, [pc, #152]	@ (800769c <Gpio_Init+0x1b8>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	4a25      	ldr	r2, [pc, #148]	@ (800769c <Gpio_Init+0x1b8>)
 8007606:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800760a:	60d3      	str	r3, [r2, #12]

	/*Configuring SPI for the External Flash Component */
	FLASH_SPI3_GPIO->MODER |= FLASH_SPI3_MODER_CONF;
 800760c:	4b23      	ldr	r3, [pc, #140]	@ (800769c <Gpio_Init+0x1b8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a22      	ldr	r2, [pc, #136]	@ (800769c <Gpio_Init+0x1b8>)
 8007612:	f043 7328 	orr.w	r3, r3, #44040192	@ 0x2a00000
 8007616:	6013      	str	r3, [r2, #0]
	FLASH_SPI3_GPIO->AFR[0] |= FLASH_SPI3_AFL_CONF;
 8007618:	4b20      	ldr	r3, [pc, #128]	@ (800769c <Gpio_Init+0x1b8>)
 800761a:	4a20      	ldr	r2, [pc, #128]	@ (800769c <Gpio_Init+0x1b8>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	6213      	str	r3, [r2, #32]
	FLASH_SPI3_GPIO->AFR[1] |= FLASH_SPI3_AFH_CONF;
 8007620:	4b1e      	ldr	r3, [pc, #120]	@ (800769c <Gpio_Init+0x1b8>)
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	4a1d      	ldr	r2, [pc, #116]	@ (800769c <Gpio_Init+0x1b8>)
 8007626:	f443 23cc 	orr.w	r3, r3, #417792	@ 0x66000
 800762a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800762e:	6253      	str	r3, [r2, #36]	@ 0x24

	FLASH_SPI3_CS_GPIO->MODER |= FLASH_SPI3_CS_MODER_CONF;
 8007630:	4b1c      	ldr	r3, [pc, #112]	@ (80076a4 <Gpio_Init+0x1c0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <Gpio_Init+0x1c0>)
 8007636:	f043 0310 	orr.w	r3, r3, #16
 800763a:	6013      	str	r3, [r2, #0]
	FLASH_SPI3_CS_GPIO->PUPDR |= FLASH_CS_PUPDR_CONF;
 800763c:	4b19      	ldr	r3, [pc, #100]	@ (80076a4 <Gpio_Init+0x1c0>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	4a18      	ldr	r2, [pc, #96]	@ (80076a4 <Gpio_Init+0x1c0>)
 8007642:	f043 0310 	orr.w	r3, r3, #16
 8007646:	60d3      	str	r3, [r2, #12]

	FLASH_RESET_GPIO->MODER |= FLASH_RST_MODER_CONF;
 8007648:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8007652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007656:	6013      	str	r3, [r2, #0]
	FLASH_RESET_GPIO->PUPDR |= FLASH_RST_PUPDR_CONF;
 8007658:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8007662:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007666:	60d3      	str	r3, [r2, #12]

	FLASH_WP_GPIO->MODER |= FLASH_WP_MODER_CONF;
 8007668:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <Gpio_Init+0x1bc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0c      	ldr	r2, [pc, #48]	@ (80076a0 <Gpio_Init+0x1bc>)
 800766e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007672:	6013      	str	r3, [r2, #0]
	FLASH_WP_GPIO->PUPDR |= FLASH_WP_PUPDR_CONF;
 8007674:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <Gpio_Init+0x1bc>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <Gpio_Init+0x1bc>)
 800767a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767e:	60d3      	str	r3, [r2, #12]

	BATTERY_LEVEL_ADC_GPIO->MODER |= BATTERY_LEVEL_ADC_MODER_CONF;
 8007680:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800768a:	f043 030c 	orr.w	r3, r3, #12
 800768e:	6013      	str	r3, [r2, #0]
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	48000800 	.word	0x48000800
 80076a0:	48000400 	.word	0x48000400
 80076a4:	48000c00 	.word	0x48000c00

080076a8 <Gpio_Set>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Gpio_Set(GPIO_TypeDef* GPIO, uint8_t pin)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
	if( pin > 15 )
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d809      	bhi.n	80076ce <Gpio_Set+0x26>
		return;
	GPIO->BSRR |= (1U<<pin);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	619a      	str	r2, [r3, #24]
 80076cc:	e000      	b.n	80076d0 <Gpio_Set+0x28>
		return;
 80076ce:	bf00      	nop
}
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <Gpio_Clear>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Gpio_Clear(GPIO_TypeDef* GPIO, uint8_t pin)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
	if( pin > 15)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b0f      	cmp	r3, #15
 80076ea:	d80a      	bhi.n	8007702 <Gpio_Clear+0x28>
		return;
	GPIO->BSRR |= (0x00010000 << pin);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80076f6:	fa01 f202 	lsl.w	r2, r1, r2
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	619a      	str	r2, [r3, #24]
 8007700:	e000      	b.n	8007704 <Gpio_Clear+0x2a>
		return;
 8007702:	bf00      	nop
}
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <Gpio_Read>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t Gpio_Read(GPIO_TypeDef* GPIO, uint8_t pin)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
	if( pin > 15 )
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	2b0f      	cmp	r3, #15
 800771e:	d901      	bls.n	8007724 <Gpio_Read+0x16>
		return 2;
 8007720:	2302      	movs	r3, #2
 8007722:	e00b      	b.n	800773c <Gpio_Read+0x2e>

	if((GPIO->IDR & (1U<<pin)) != 0 )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	2101      	movs	r1, #1
 800772c:	fa01 f303 	lsl.w	r3, r1, r3
 8007730:	4013      	ands	r3, r2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <Gpio_Read+0x2c>
	{
		return 1;
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <Gpio_Read+0x2e>
	}
	else
	{
		return 0;
 800773a:	2300      	movs	r3, #0
	}
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007756:	2b00      	cmp	r3, #0
 8007758:	db0b      	blt.n	8007772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	f003 021f 	and.w	r2, r3, #31
 8007760:	4907      	ldr	r1, [pc, #28]	@ (8007780 <__NVIC_EnableIRQ+0x38>)
 8007762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2001      	movs	r0, #1
 800776a:	fa00 f202 	lsl.w	r2, r0, r2
 800776e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	e000e100 	.word	0xe000e100

08007784 <Spi_Init>:
* <hr>
*
*******************************************************************************/

void Spi_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
	FLASH_SPI->CR1 |= FLASH_SPI_CR1_CONF;
 8007788:	4b1f      	ldr	r3, [pc, #124]	@ (8007808 <Spi_Init+0x84>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1e      	ldr	r2, [pc, #120]	@ (8007808 <Spi_Init+0x84>)
 800778e:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8007792:	f043 0303 	orr.w	r3, r3, #3
 8007796:	6013      	str	r3, [r2, #0]
	FLASH_SPI->CR2 |= FLASH_SPI_CR2_CONF;
 8007798:	4b1b      	ldr	r3, [pc, #108]	@ (8007808 <Spi_Init+0x84>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a1a      	ldr	r2, [pc, #104]	@ (8007808 <Spi_Init+0x84>)
 800779e:	f043 0303 	orr.w	r3, r3, #3
 80077a2:	6053      	str	r3, [r2, #4]
	FLASH_SPI->CR1 |= ENABLE_FLASH_SPI;
 80077a4:	4b18      	ldr	r3, [pc, #96]	@ (8007808 <Spi_Init+0x84>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a17      	ldr	r2, [pc, #92]	@ (8007808 <Spi_Init+0x84>)
 80077aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ae:	6013      	str	r3, [r2, #0]

	/*****INITIALIZE DMA2_STREAM2 FOR TX OF SPI****************/
	FLASH_SPI3_TX_DMA_STREAM->CCR = 0;		/* << Disable DMA Stream */
 80077b0:	4b16      	ldr	r3, [pc, #88]	@ (800780c <Spi_Init+0x88>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	while((FLASH_SPI3_TX_DMA_STREAM->CCR & 0x00000001)){}  /* << Wait till DMA is disabled */
 80077b6:	bf00      	nop
 80077b8:	4b14      	ldr	r3, [pc, #80]	@ (800780c <Spi_Init+0x88>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f9      	bne.n	80077b8 <Spi_Init+0x34>

	/**************Configure the DMA Parameters for Transmit Stream *****************/
	/*Enable Memory Addr Increment */
	FLASH_SPI3_TX_DMA_STREAM->CCR |= FLASH_SPI3_TX_DMA_CCR_CONF;
 80077c4:	4b11      	ldr	r3, [pc, #68]	@ (800780c <Spi_Init+0x88>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a10      	ldr	r2, [pc, #64]	@ (800780c <Spi_Init+0x88>)
 80077ca:	f443 5384 	orr.w	r3, r3, #4224	@ 0x1080
 80077ce:	f043 031a 	orr.w	r3, r3, #26
 80077d2:	6013      	str	r3, [r2, #0]

	FLASH_SPI3_RX_DMA_STREAM->CCR = 0;
 80077d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007810 <Spi_Init+0x8c>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]

	while((FLASH_SPI3_RX_DMA_STREAM->CCR & 0x00000001)){}
 80077da:	bf00      	nop
 80077dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007810 <Spi_Init+0x8c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f9      	bne.n	80077dc <Spi_Init+0x58>

	FLASH_SPI3_RX_DMA_STREAM->CCR |= FLASH_SPI3_RX_DMA_CCR_CONF;
 80077e8:	4b09      	ldr	r3, [pc, #36]	@ (8007810 <Spi_Init+0x8c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a08      	ldr	r2, [pc, #32]	@ (8007810 <Spi_Init+0x8c>)
 80077ee:	f443 5384 	orr.w	r3, r3, #4224	@ 0x1080
 80077f2:	f043 030a 	orr.w	r3, r3, #10
 80077f6:	6013      	str	r3, [r2, #0]
	/*Enable DMA channel Interrupt in NVIC*/
	NVIC_EnableIRQ(FLASH_SPI3_TX_DMA_IRQ);
 80077f8:	2039      	movs	r0, #57	@ 0x39
 80077fa:	f7ff ffa5 	bl	8007748 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(FLASH_SPI3_RX_DMA_IRQ);
 80077fe:	2038      	movs	r0, #56	@ 0x38
 8007800:	f7ff ffa2 	bl	8007748 <__NVIC_EnableIRQ>

}
 8007804:	bf00      	nop
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40003c00 	.word	0x40003c00
 800780c:	4002041c 	.word	0x4002041c
 8007810:	40020408 	.word	0x40020408

08007814 <DMA2_CH2_IRQHandler>:
/****************************************************************************************************
 * INTERRUPTS
 ****************************************************************************************************/

void FLASH_SPI3_TX_DMA_HANDLER(void)
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
	if((FLASH_SPI_DMA->ISR) & 0x00000080)
 8007818:	4b10      	ldr	r3, [pc, #64]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <DMA2_CH2_IRQHandler+0x24>
	{
		//do something...
		FLASH_SPI3_TX_DMA_STREAM->CCR = 0;		/* << Disable DMA Stream */
 8007824:	4b0e      	ldr	r3, [pc, #56]	@ (8007860 <DMA2_CH2_IRQHandler+0x4c>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
		/*Clear the flag*/
		FLASH_SPI_DMA->IFCR |= 0x00000080;
 800782a:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4a0b      	ldr	r2, [pc, #44]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 8007830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007834:	6053      	str	r3, [r2, #4]
		/*Clear the flag*/
		FLASH_SPI_DMA->IFCR |= 0x00000020;

	}

}
 8007836:	e00b      	b.n	8007850 <DMA2_CH2_IRQHandler+0x3c>
	else if((FLASH_SPI_DMA->ISR) & 0x00000020)
 8007838:	4b08      	ldr	r3, [pc, #32]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <DMA2_CH2_IRQHandler+0x3c>
		FLASH_SPI_DMA->IFCR |= 0x00000020;
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a04      	ldr	r2, [pc, #16]	@ (800785c <DMA2_CH2_IRQHandler+0x48>)
 800784a:	f043 0320 	orr.w	r3, r3, #32
 800784e:	6053      	str	r3, [r2, #4]
}
 8007850:	bf00      	nop
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40020400 	.word	0x40020400
 8007860:	4002041c 	.word	0x4002041c

08007864 <DMA2_CH1_IRQHandler>:

void FLASH_SPI3_RX_DMA_HANDLER(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
	if((FLASH_SPI_DMA->ISR) & 0x00000008)
 8007868:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <DMA2_CH1_IRQHandler+0x24>
	{
		//do something...
		FLASH_SPI3_RX_DMA_STREAM->CCR = 0;		/* << Disable DMA Stream */
 8007874:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <DMA2_CH1_IRQHandler+0x4c>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
		/*Clear the flag*/
		FLASH_SPI_DMA->IFCR |= 0x00000008;
 800787a:	4b0c      	ldr	r3, [pc, #48]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	4a0b      	ldr	r2, [pc, #44]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 8007880:	f043 0308 	orr.w	r3, r3, #8
 8007884:	6053      	str	r3, [r2, #4]

		/*Clear the flag*/
		FLASH_SPI_DMA->IFCR |= 0x00000002;
	}

}
 8007886:	e00b      	b.n	80078a0 <DMA2_CH1_IRQHandler+0x3c>
	else if((FLASH_SPI_DMA->ISR) & 0x00000002)
 8007888:	4b08      	ldr	r3, [pc, #32]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <DMA2_CH1_IRQHandler+0x3c>
		FLASH_SPI_DMA->IFCR |= 0x00000002;
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a04      	ldr	r2, [pc, #16]	@ (80078ac <DMA2_CH1_IRQHandler+0x48>)
 800789a:	f043 0302 	orr.w	r3, r3, #2
 800789e:	6053      	str	r3, [r2, #4]
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40020400 	.word	0x40020400
 80078b0:	40020408 	.word	0x40020408

080078b4 <System_Clock_Init>:
* <hr>
*
*******************************************************************************/

void System_Clock_Init(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
	/*Check the Datasheet of the Device for the Block Diagram
	 * and check for the clock attached to the below periherals
	 */
	RCC->AHBENR |= GPIOACLKEN | GPIOBCLKEN | GPIOCCLKEN | GPIODCLKEN | ADC1CLKEN;
 80078b8:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <System_Clock_Init+0x48>)
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	4a0f      	ldr	r2, [pc, #60]	@ (80078fc <System_Clock_Init+0x48>)
 80078be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078c2:	f443 13f0 	orr.w	r3, r3, #1966080	@ 0x1e0000
 80078c6:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= TIM2CLKEN | FLASHSPICLKEN;
 80078c8:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <System_Clock_Init+0x48>)
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	4a0b      	ldr	r2, [pc, #44]	@ (80078fc <System_Clock_Init+0x48>)
 80078ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |=  A7672UARTCLKEN;
 80078d8:	4b08      	ldr	r3, [pc, #32]	@ (80078fc <System_Clock_Init+0x48>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4a07      	ldr	r2, [pc, #28]	@ (80078fc <System_Clock_Init+0x48>)
 80078de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078e2:	6193      	str	r3, [r2, #24]
	RCC->AHBENR |= DMA1CLKEN | DMA2CLKEN;
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <System_Clock_Init+0x48>)
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	4a04      	ldr	r2, [pc, #16]	@ (80078fc <System_Clock_Init+0x48>)
 80078ea:	f043 0303 	orr.w	r3, r3, #3
 80078ee:	6153      	str	r3, [r2, #20]
}
 80078f0:	bf00      	nop
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40021000 	.word	0x40021000

08007900 <__NVIC_EnableIRQ>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800790a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800790e:	2b00      	cmp	r3, #0
 8007910:	db0b      	blt.n	800792a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	f003 021f 	and.w	r2, r3, #31
 8007918:	4907      	ldr	r1, [pc, #28]	@ (8007938 <__NVIC_EnableIRQ+0x38>)
 800791a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	2001      	movs	r0, #1
 8007922:	fa00 f202 	lsl.w	r2, r0, r2
 8007926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	e000e100 	.word	0xe000e100

0800793c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794c:	2b00      	cmp	r3, #0
 800794e:	db0a      	blt.n	8007966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	490c      	ldr	r1, [pc, #48]	@ (8007988 <__NVIC_SetPriority+0x4c>)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	440b      	add	r3, r1
 8007960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007964:	e00a      	b.n	800797c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4908      	ldr	r1, [pc, #32]	@ (800798c <__NVIC_SetPriority+0x50>)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	3b04      	subs	r3, #4
 8007974:	0112      	lsls	r2, r2, #4
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	440b      	add	r3, r1
 800797a:	761a      	strb	r2, [r3, #24]
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	e000e100 	.word	0xe000e100
 800798c:	e000ed00 	.word	0xe000ed00

08007990 <Timer_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Timer_Init( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007994:	b672      	cpsid	i
}
 8007996:	bf00      	nop
	__disable_irq();
	ATCMD_RSP_TIMER->PSC = ATCMD_RSP_TIMER_PSC_CONF;
 8007998:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800799c:	2207      	movs	r2, #7
 800799e:	629a      	str	r2, [r3, #40]	@ 0x28
	ATCMD_RSP_TIMER->ARR = ATCMD_RSP_TIMER_ARR_CONF(1);  	/* This is set at 1Hz */
 80079a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079a4:	4a0e      	ldr	r2, [pc, #56]	@ (80079e0 <Timer_Init+0x50>)
 80079a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	ATCMD_RSP_TIMER->CR1 |= ATCMD_RSP_TIMER_CR1_CONF;		/* Timer is Enabled */
 80079a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80079b2:	f043 0301 	orr.w	r3, r3, #1
 80079b6:	6013      	str	r3, [r2, #0]
	ATCMD_RSP_TIMER->DIER |= ATCMD_RSP_TIMER_DIER_CONF;		/* Update Interrupt of Timer is Enabled*/
 80079b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(ATCMD_RSP_TIMER_IRQ, 6);
 80079c8:	2106      	movs	r1, #6
 80079ca:	201c      	movs	r0, #28
 80079cc:	f7ff ffb6 	bl	800793c <__NVIC_SetPriority>
	NVIC_EnableIRQ(ATCMD_RSP_TIMER_IRQ);					/* Enable the Timer Interrupt */
 80079d0:	201c      	movs	r0, #28
 80079d2:	f7ff ff95 	bl	8007900 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80079d6:	b662      	cpsie	i
}
 80079d8:	bf00      	nop
	__enable_irq();
}
 80079da:	bf00      	nop
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	000f423f 	.word	0x000f423f

080079e4 <TIM2_IRQHandler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void ATCMD_RSP_TIMER_HANDLER(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
	ATCMD_RSP_TIMER->SR = 0;
 80079e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079ec:	2200      	movs	r2, #0
 80079ee:	611a      	str	r2, [r3, #16]

	if((g_delayTimerStart == 1)&&(g_timeOutFlag == 0))
 80079f0:	4b18      	ldr	r3, [pc, #96]	@ (8007a54 <TIM2_IRQHandler+0x70>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d112      	bne.n	8007a1e <TIM2_IRQHandler+0x3a>
 80079f8:	4b17      	ldr	r3, [pc, #92]	@ (8007a58 <TIM2_IRQHandler+0x74>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10e      	bne.n	8007a1e <TIM2_IRQHandler+0x3a>
	{
		g_responseTimeOut--;
 8007a00:	4b16      	ldr	r3, [pc, #88]	@ (8007a5c <TIM2_IRQHandler+0x78>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	4a15      	ldr	r2, [pc, #84]	@ (8007a5c <TIM2_IRQHandler+0x78>)
 8007a08:	6013      	str	r3, [r2, #0]
		if(g_responseTimeOut <= 0) {
 8007a0a:	4b14      	ldr	r3, [pc, #80]	@ (8007a5c <TIM2_IRQHandler+0x78>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <TIM2_IRQHandler+0x3a>
			g_timeOutFlag = 1;
 8007a12:	4b11      	ldr	r3, [pc, #68]	@ (8007a58 <TIM2_IRQHandler+0x74>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
			g_delayTimerStart = 0;
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <TIM2_IRQHandler+0x70>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(s_mqttCredentials.status_timeout != 0)
 8007a1e:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <TIM2_IRQHandler+0x7c>)
 8007a20:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <TIM2_IRQHandler+0x6a>
	{
		if(g_pingTimeout == 0)
 8007a28:	4b0e      	ldr	r3, [pc, #56]	@ (8007a64 <TIM2_IRQHandler+0x80>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <TIM2_IRQHandler+0x60>
		{
			s_mqttCredentials.timeout_handler();
 8007a30:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <TIM2_IRQHandler+0x7c>)
 8007a32:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8007a36:	4798      	blx	r3
			g_pingTimeout = s_mqttCredentials.status_timeout;
 8007a38:	4b09      	ldr	r3, [pc, #36]	@ (8007a60 <TIM2_IRQHandler+0x7c>)
 8007a3a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8007a3e:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <TIM2_IRQHandler+0x80>)
 8007a40:	6013      	str	r3, [r2, #0]
		{
			g_pingTimeout = g_pingTimeout - 1;
		}
	}

}
 8007a42:	e004      	b.n	8007a4e <TIM2_IRQHandler+0x6a>
			g_pingTimeout = g_pingTimeout - 1;
 8007a44:	4b07      	ldr	r3, [pc, #28]	@ (8007a64 <TIM2_IRQHandler+0x80>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	4a06      	ldr	r2, [pc, #24]	@ (8007a64 <TIM2_IRQHandler+0x80>)
 8007a4c:	6013      	str	r3, [r2, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	2000078d 	.word	0x2000078d
 8007a58:	2000078c 	.word	0x2000078c
 8007a5c:	20000790 	.word	0x20000790
 8007a60:	2000060c 	.word	0x2000060c
 8007a64:	20000754 	.word	0x20000754

08007a68 <__NVIC_EnableIRQ>:
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	db0b      	blt.n	8007a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 021f 	and.w	r2, r3, #31
 8007a80:	4907      	ldr	r1, [pc, #28]	@ (8007aa0 <__NVIC_EnableIRQ+0x38>)
 8007a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	2001      	movs	r0, #1
 8007a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	e000e100 	.word	0xe000e100

08007aa4 <Uart_Init>:
* <hr>
*
*******************************************************************************/

void Uart_Init( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007aa8:	b672      	cpsid	i
}
 8007aaa:	bf00      	nop
	__disable_irq();
	Uart_set_baudrate(A7672_UART_CLK, A7672_UART_BR);
 8007aac:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8007ab0:	480f      	ldr	r0, [pc, #60]	@ (8007af0 <Uart_Init+0x4c>)
 8007ab2:	f000 f833 	bl	8007b1c <Uart_set_baudrate>
	/*
	 * Most of the Setting in CR1 will not take effect is UART is not disabled.
	 * Thus the UART is enabled after setting the CR1 register.
	 */
	A7672_UART->CR1 |= A7672_UART_CR1_CONF;
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8007af4 <Uart_Init+0x50>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a0e      	ldr	r2, [pc, #56]	@ (8007af4 <Uart_Init+0x50>)
 8007abc:	f043 036c 	orr.w	r3, r3, #108	@ 0x6c
 8007ac0:	6013      	str	r3, [r2, #0]
	A7672_UART->CR3 |= A7672_UART_CR3_CONF;
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8007af4 <Uart_Init+0x50>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8007af4 <Uart_Init+0x50>)
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007acc:	6093      	str	r3, [r2, #8]
	/*Enable the UART*/
	A7672_UART->CR1 |= (1U<<0);
 8007ace:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <Uart_Init+0x50>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a08      	ldr	r2, [pc, #32]	@ (8007af4 <Uart_Init+0x50>)
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(A7672_UART_IRQ);
 8007ada:	2025      	movs	r0, #37	@ 0x25
 8007adc:	f7ff ffc4 	bl	8007a68 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(A7672_UART_TX_DMA_IRQ);
 8007ae0:	200e      	movs	r0, #14
 8007ae2:	f7ff ffc1 	bl	8007a68 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8007ae6:	b662      	cpsie	i
}
 8007ae8:	bf00      	nop
	__enable_irq();

}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	007a1200 	.word	0x007a1200
 8007af4:	40013800 	.word	0x40013800

08007af8 <Uart_compute_bd>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static uint32_t Uart_compute_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	085a      	lsrs	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	441a      	add	r2, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <Uart_set_baudrate>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void Uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
	A7672_UART->BRR = Uart_compute_bd(periph_clk, baudrate);
 8007b26:	4c05      	ldr	r4, [pc, #20]	@ (8007b3c <Uart_set_baudrate+0x20>)
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff ffe4 	bl	8007af8 <Uart_compute_bd>
 8007b30:	4603      	mov	r3, r0
 8007b32:	60e3      	str	r3, [r4, #12]
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}
 8007b3c:	40013800 	.word	0x40013800

08007b40 <Uart_Transmit_Data_Dma>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Uart_Transmit_Data_Dma(uint32_t buff_addr, uint32_t len)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	/*Disable the DMA1 */
	 A7672_UART_TX_DMA_STREAM->CCR &= ~(1U<<0);
 8007b4a:	4b16      	ldr	r3, [pc, #88]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	6013      	str	r3, [r2, #0]

	/*Wait till the DMA is Disabled*/
	while((A7672_UART_TX_DMA_STREAM->CCR & 0x00000001)){}
 8007b56:	bf00      	nop
 8007b58:	4b12      	ldr	r3, [pc, #72]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1f9      	bne.n	8007b58 <Uart_Transmit_Data_Dma+0x18>

	SYS_DMA->IFCR = 0x0F000000;   	/*Clearing the Channel 7 Interrupt Flags */
 8007b64:	4b10      	ldr	r3, [pc, #64]	@ (8007ba8 <Uart_Transmit_Data_Dma+0x68>)
 8007b66:	f04f 6270 	mov.w	r2, #251658240	@ 0xf000000
 8007b6a:	605a      	str	r2, [r3, #4]

	/*Set Peripheral Address */
	A7672_UART_TX_DMA_STREAM->CPAR = (uint32_t)(&(A7672_UART->TDR));
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8007bac <Uart_Transmit_Data_Dma+0x6c>)
 8007b70:	609a      	str	r2, [r3, #8]

	/*Set Memory Address */
	A7672_UART_TX_DMA_STREAM->CMAR = buff_addr;
 8007b72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60d3      	str	r3, [r2, #12]

	/*Set Number of Transfer*/
	A7672_UART_TX_DMA_STREAM->CNDTR = len;
 8007b78:	4a0a      	ldr	r2, [pc, #40]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6053      	str	r3, [r2, #4]

	/*Enable Memory Address Increment, Direction is Set from Memory to Peripheral
	 * Transfer Complete Interrupt is Enabled.*/
	A7672_UART_TX_DMA_STREAM->CCR |= A7672_UART_DMA_TX_CCR_CONF;
 8007b7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a08      	ldr	r2, [pc, #32]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b84:	f043 0392 	orr.w	r3, r3, #146	@ 0x92
 8007b88:	6013      	str	r3, [r2, #0]

	A7672_UART_TX_DMA_STREAM->CCR |= (1U<<0);
 8007b8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a05      	ldr	r2, [pc, #20]	@ (8007ba4 <Uart_Transmit_Data_Dma+0x64>)
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	6013      	str	r3, [r2, #0]

}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40020044 	.word	0x40020044
 8007ba8:	40020000 	.word	0x40020000
 8007bac:	40013828 	.word	0x40013828

08007bb0 <Uart_Receive_Data>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint32_t Uart_Receive_Data(uint8_t **pBuffer)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	static uint32_t ret = 0;
	if( (1 == g_uartRxDataStart) && (1 == g_uartRxDataEnd) )
 8007bb8:	4b16      	ldr	r3, [pc, #88]	@ (8007c14 <Uart_Receive_Data+0x64>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d121      	bne.n	8007c04 <Uart_Receive_Data+0x54>
 8007bc0:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <Uart_Receive_Data+0x68>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d11d      	bne.n	8007c04 <Uart_Receive_Data+0x54>
	{
		ret = s_byteCount;
 8007bc8:	4b14      	ldr	r3, [pc, #80]	@ (8007c1c <Uart_Receive_Data+0x6c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a14      	ldr	r2, [pc, #80]	@ (8007c20 <Uart_Receive_Data+0x70>)
 8007bce:	6013      	str	r3, [r2, #0]
		*pBuffer = s_uartBuffer[s_bufferCount];
 8007bd0:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <Uart_Receive_Data+0x74>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	02db      	lsls	r3, r3, #11
 8007bd6:	4a14      	ldr	r2, [pc, #80]	@ (8007c28 <Uart_Receive_Data+0x78>)
 8007bd8:	441a      	add	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
		s_byteCount = 0;
 8007bde:	4b0f      	ldr	r3, [pc, #60]	@ (8007c1c <Uart_Receive_Data+0x6c>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
		s_bufferCount ^= 1;
 8007be4:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <Uart_Receive_Data+0x74>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f083 0301 	eor.w	r3, r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <Uart_Receive_Data+0x74>)
 8007bf0:	701a      	strb	r2, [r3, #0]
		g_uartRxDataStart = 0;
 8007bf2:	4b08      	ldr	r3, [pc, #32]	@ (8007c14 <Uart_Receive_Data+0x64>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
		g_uartRxDataEnd = 0;
 8007bf8:	4b07      	ldr	r3, [pc, #28]	@ (8007c18 <Uart_Receive_Data+0x68>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
		return ret;
 8007bfe:	4b08      	ldr	r3, [pc, #32]	@ (8007c20 <Uart_Receive_Data+0x70>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	e000      	b.n	8007c06 <Uart_Receive_Data+0x56>
	}
	else
	return 0;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20002744 	.word	0x20002744
 8007c18:	20002745 	.word	0x20002745
 8007c1c:	20000f3c 	.word	0x20000f3c
 8007c20:	20002748 	.word	0x20002748
 8007c24:	20000f40 	.word	0x20000f40
 8007c28:	20000f44 	.word	0x20000f44

08007c2c <Uart_Get_Current_Buffer>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t* Uart_Get_Current_Buffer(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
	return &s_uartBuffer[s_bufferCount][s_byteCount];
 8007c30:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <Uart_Get_Current_Buffer+0x20>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b06      	ldr	r3, [pc, #24]	@ (8007c50 <Uart_Get_Current_Buffer+0x24>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	02d2      	lsls	r2, r2, #11
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4a05      	ldr	r2, [pc, #20]	@ (8007c54 <Uart_Get_Current_Buffer+0x28>)
 8007c40:	4413      	add	r3, r2
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	20000f40 	.word	0x20000f40
 8007c50:	20000f3c 	.word	0x20000f3c
 8007c54:	20000f44 	.word	0x20000f44

08007c58 <Uart_Get_Transmit_Buffer>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint8_t* Uart_Get_Transmit_Buffer(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
	return &s_uartBuffer_Transmit[0];
 8007c5c:	4b02      	ldr	r3, [pc, #8]	@ (8007c68 <Uart_Get_Transmit_Buffer+0x10>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	20001f44 	.word	0x20001f44

08007c6c <USART1_EXTI25_IRQHandler>:
* <hr>
*
*******************************************************************************/

void A7672_UART_HANDLER(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
	/*Clear TC Interrupt Flag*/
	A7672_UART->ICR |= 0x00000040;
 8007c70:	4b29      	ldr	r3, [pc, #164]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	4a28      	ldr	r2, [pc, #160]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c7a:	6213      	str	r3, [r2, #32]
	if(( A7672_UART->ISR ) & 0x00000020)
 8007c7c:	4b26      	ldr	r3, [pc, #152]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d041      	beq.n	8007d0c <USART1_EXTI25_IRQHandler+0xa0>
	{
		A7672_UART->ICR |= 0x00000020;
 8007c88:	4b23      	ldr	r3, [pc, #140]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	4a22      	ldr	r2, [pc, #136]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007c8e:	f043 0320 	orr.w	r3, r3, #32
 8007c92:	6213      	str	r3, [r2, #32]
		if(( g_uartRxDataStart == 0 ) || ( g_uartRxDataEnd == 0 ))
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <USART1_EXTI25_IRQHandler+0xb0>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <USART1_EXTI25_IRQHandler+0x38>
 8007c9c:	4b20      	ldr	r3, [pc, #128]	@ (8007d20 <USART1_EXTI25_IRQHandler+0xb4>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10e      	bne.n	8007cc2 <USART1_EXTI25_IRQHandler+0x56>
			s_uartBuffer[s_bufferCount][s_byteCount] = A7672_UART->RDR;
 8007ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d18 <USART1_EXTI25_IRQHandler+0xac>)
 8007ca6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ca8:	b299      	uxth	r1, r3
 8007caa:	4b1e      	ldr	r3, [pc, #120]	@ (8007d24 <USART1_EXTI25_IRQHandler+0xb8>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	b2c8      	uxtb	r0, r1
 8007cb6:	491d      	ldr	r1, [pc, #116]	@ (8007d2c <USART1_EXTI25_IRQHandler+0xc0>)
 8007cb8:	02d2      	lsls	r2, r2, #11
 8007cba:	440a      	add	r2, r1
 8007cbc:	4413      	add	r3, r2
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	701a      	strb	r2, [r3, #0]
		if(( s_byteCount == 0 ) && ( g_uartRxDataStart == 0) && ( g_uartRxDataEnd == 0 ))
 8007cc2:	4b19      	ldr	r3, [pc, #100]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d110      	bne.n	8007cec <USART1_EXTI25_IRQHandler+0x80>
 8007cca:	4b14      	ldr	r3, [pc, #80]	@ (8007d1c <USART1_EXTI25_IRQHandler+0xb0>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <USART1_EXTI25_IRQHandler+0x80>
 8007cd2:	4b13      	ldr	r3, [pc, #76]	@ (8007d20 <USART1_EXTI25_IRQHandler+0xb4>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d108      	bne.n	8007cec <USART1_EXTI25_IRQHandler+0x80>
		{
			/*When First Byte is Received the InterByte Delay is enabled*/
			g_interByteTimer = 1;
 8007cda:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <USART1_EXTI25_IRQHandler+0xc4>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	701a      	strb	r2, [r3, #0]
			/* The flag indicating the first byte of the response is received is made active*/
			g_uartRxDataStart = 1;
 8007ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8007d1c <USART1_EXTI25_IRQHandler+0xb0>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
			/*The Flag indicating the last byte of the response is reset */
			g_uartRxDataEnd = 0;
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d20 <USART1_EXTI25_IRQHandler+0xb4>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
		}
		/*The Inter byte Delay is reloaded. with each byte received */
		g_interByteDelay = A7672_UART_INTERBYTE_DELAY_CONF;
 8007cec:	4b11      	ldr	r3, [pc, #68]	@ (8007d34 <USART1_EXTI25_IRQHandler+0xc8>)
 8007cee:	220a      	movs	r2, #10
 8007cf0:	701a      	strb	r2, [r3, #0]
		s_byteCount++;
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007cfa:	6013      	str	r3, [r2, #0]
		if( s_byteCount > A7672_UART_BUFFSIZE_CONF )
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d04:	d902      	bls.n	8007d0c <USART1_EXTI25_IRQHandler+0xa0>
		{
			/*If the byte count is above 256 bytes it behaves as circular buffer.
			 * and overwrites from begining of the buffer. */
			s_byteCount = 0;
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <USART1_EXTI25_IRQHandler+0xbc>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007d0c:	bf00      	nop
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40013800 	.word	0x40013800
 8007d1c:	20002744 	.word	0x20002744
 8007d20:	20002745 	.word	0x20002745
 8007d24:	20000f40 	.word	0x20000f40
 8007d28:	20000f3c 	.word	0x20000f3c
 8007d2c:	20000f44 	.word	0x20000f44
 8007d30:	20002746 	.word	0x20002746
 8007d34:	20002747 	.word	0x20002747

08007d38 <DMA1_CH4_IRQHandler>:
* <hr>
*
*******************************************************************************/

void A7672_UART_TX_DMA_HANDLER(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
	/*Checking for Transfer Complete Interrupt
	 * Occurence in Channel 7 DMA1 and Clearing
	 * The Flag
	 */
	if(( SYS_DMA->ISR ) & 0x00002000)
 8007d3c:	4b08      	ldr	r3, [pc, #32]	@ (8007d60 <DMA1_CH4_IRQHandler+0x28>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <DMA1_CH4_IRQHandler+0x1c>
	{

		SYS_DMA->IFCR |= 0x00002000;
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <DMA1_CH4_IRQHandler+0x28>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	4a04      	ldr	r2, [pc, #16]	@ (8007d60 <DMA1_CH4_IRQHandler+0x28>)
 8007d4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007d52:	6053      	str	r3, [r2, #4]
	}
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40020000 	.word	0x40020000

08007d64 <removeQuotes>:
void ATCMD_A7672_ModuleHardRestart(void);
/******************************************************************************
* Function Definitions
*******************************************************************************/

void removeQuotes(char *str){
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	for(;*str != '"'; str++);
 8007d6c:	e002      	b.n	8007d74 <removeQuotes+0x10>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3301      	adds	r3, #1
 8007d72:	607b      	str	r3, [r7, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b22      	cmp	r3, #34	@ 0x22
 8007d7a:	d1f8      	bne.n	8007d6e <removeQuotes+0xa>
	*str = '\0';
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <Vending_Machine_ModemHandler>:
* <tr><td> Date       </td><td> Software Version </td><td> Initials </td><td> Description </td></tr>
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*******************************************************************************/
void Vending_Machine_ModemHandler(void){
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	switch(Modem_State)
 8007d94:	4b2f      	ldr	r3, [pc, #188]	@ (8007e54 <Vending_Machine_ModemHandler+0xc4>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d851      	bhi.n	8007e40 <Vending_Machine_ModemHandler+0xb0>
 8007d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <Vending_Machine_ModemHandler+0x14>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007def 	.word	0x08007def
 8007dac:	08007e23 	.word	0x08007e23
 8007db0:	08007e41 	.word	0x08007e41
 8007db4:	08007e41 	.word	0x08007e41
	{
	case MODEM_OFF:
		if(Gpio_Read(A7672_POWER_STATUS_GPIO, A7672_POWER_STATUS_PIN)==0){
 8007db8:	2107      	movs	r1, #7
 8007dba:	4827      	ldr	r0, [pc, #156]	@ (8007e58 <Vending_Machine_ModemHandler+0xc8>)
 8007dbc:	f7ff fca7 	bl	800770e <Gpio_Read>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d108      	bne.n	8007dd8 <Vending_Machine_ModemHandler+0x48>
			if(ATCMD_A7672_Module_On() == 1)
 8007dc6:	f7fb fa17 	bl	80031f8 <ATCMD_A7672_Module_On>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d105      	bne.n	8007ddc <Vending_Machine_ModemHandler+0x4c>
			{
				Modem_State = MODEM_ON;
 8007dd0:	4b20      	ldr	r3, [pc, #128]	@ (8007e54 <Vending_Machine_ModemHandler+0xc4>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e001      	b.n	8007ddc <Vending_Machine_ModemHandler+0x4c>
			}
		}
		else{
			ATCMD_A7672_ModuleHardRestart();
 8007dd8:	f001 f8e4 	bl	8008fa4 <ATCMD_A7672_ModuleHardRestart>
		}
		if(ATCMD_A7672_Module_On() == 1)
 8007ddc:	f7fb fa0c 	bl	80031f8 <ATCMD_A7672_Module_On>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d12e      	bne.n	8007e44 <Vending_Machine_ModemHandler+0xb4>
		{
			Modem_State = MODEM_ON;
 8007de6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e54 <Vending_Machine_ModemHandler+0xc4>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
		}
		break;
 8007dec:	e02a      	b.n	8007e44 <Vending_Machine_ModemHandler+0xb4>
	case MODEM_ON:
		if(g_pbDone == 1)
 8007dee:	4b1b      	ldr	r3, [pc, #108]	@ (8007e5c <Vending_Machine_ModemHandler+0xcc>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d128      	bne.n	8007e48 <Vending_Machine_ModemHandler+0xb8>
		{
			LED_Set_On(LED1_PIN);
 8007df6:	200c      	movs	r0, #12
 8007df8:	f7fe ff86 	bl	8006d08 <LED_Set_On>
			g_pbDone = 0;
 8007dfc:	4b17      	ldr	r3, [pc, #92]	@ (8007e5c <Vending_Machine_ModemHandler+0xcc>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
			Modem_State = MODEM_READY;
 8007e02:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <Vending_Machine_ModemHandler+0xc4>)
 8007e04:	2202      	movs	r2, #2
 8007e06:	701a      	strb	r2, [r3, #0]
			g_sysHealth.httpConnectStatus 	= CONNECT_NOT_CONNECTED;
 8007e08:	4b15      	ldr	r3, [pc, #84]	@ (8007e60 <Vending_Machine_ModemHandler+0xd0>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	711a      	strb	r2, [r3, #4]
			g_sysHealth.mqttConnectStatus 	= CONNECT_NOT_CONNECTED;
 8007e0e:	4b14      	ldr	r3, [pc, #80]	@ (8007e60 <Vending_Machine_ModemHandler+0xd0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	715a      	strb	r2, [r3, #5]
			ATCMD_A7672_MQTT_Set_Connection_Status(MQTT_NOT_CONNECTED);
 8007e14:	2000      	movs	r0, #0
 8007e16:	f7fb f997 	bl	8003148 <ATCMD_A7672_MQTT_Set_Connection_Status>
			g_sysHealth.nwRegnStatus 		= NW_REGN_FAILED;
 8007e1a:	4b11      	ldr	r3, [pc, #68]	@ (8007e60 <Vending_Machine_ModemHandler+0xd0>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	705a      	strb	r2, [r3, #1]
		}
		break;
 8007e20:	e012      	b.n	8007e48 <Vending_Machine_ModemHandler+0xb8>
	case MODEM_READY:
		if(ATCMD_A7672_Module_Ready())
 8007e22:	f7fa fe71 	bl	8002b08 <ATCMD_A7672_Module_Ready>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00f      	beq.n	8007e4c <Vending_Machine_ModemHandler+0xbc>
		{
			Modem_State = MODEM_ON;						// keep on checking for "B DONE" urc
 8007e2c:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <Vending_Machine_ModemHandler+0xc4>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
			g_sysHealth.modemStatus = MODEM_READY;
 8007e32:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <Vending_Machine_ModemHandler+0xd0>)
 8007e34:	2202      	movs	r2, #2
 8007e36:	70da      	strb	r2, [r3, #3]
			g_sysState = SYS_MODE_TEST;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	@ (8007e64 <Vending_Machine_ModemHandler+0xd4>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
		}
	break;
 8007e3e:	e005      	b.n	8007e4c <Vending_Machine_ModemHandler+0xbc>
	case MODEM_IDLE:
		break;
	default:
		break;
 8007e40:	bf00      	nop
 8007e42:	e004      	b.n	8007e4e <Vending_Machine_ModemHandler+0xbe>
		break;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <Vending_Machine_ModemHandler+0xbe>
		break;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <Vending_Machine_ModemHandler+0xbe>
	break;
 8007e4c:	bf00      	nop
	}
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20003d11 	.word	0x20003d11
 8007e58:	48000800 	.word	0x48000800
 8007e5c:	200001ba 	.word	0x200001ba
 8007e60:	20003c98 	.word	0x20003c98
 8007e64:	20003d10 	.word	0x20003d10

08007e68 <Vending_Machine_State_Ctrl>:

void Vending_Machine_State_Ctrl(void){
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
	switch(g_sysState){
 8007e6c:	4b11      	ldr	r3, [pc, #68]	@ (8007eb4 <Vending_Machine_State_Ctrl+0x4c>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d81c      	bhi.n	8007eae <Vending_Machine_State_Ctrl+0x46>
 8007e74:	a201      	add	r2, pc, #4	@ (adr r2, 8007e7c <Vending_Machine_State_Ctrl+0x14>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007e91 	.word	0x08007e91
 8007e80:	08007e9d 	.word	0x08007e9d
 8007e84:	08007e97 	.word	0x08007e97
 8007e88:	08007ea3 	.word	0x08007ea3
 8007e8c:	08007ea9 	.word	0x08007ea9
	case SYS_MODE_TEST:
		Vending_Machine_SystemTest();
 8007e90:	f000 f812 	bl	8007eb8 <Vending_Machine_SystemTest>
		break;
 8007e94:	e00c      	b.n	8007eb0 <Vending_Machine_State_Ctrl+0x48>
	case SYS_MODE_CONFIG:
		Vending_Machine_SystemConfig();
 8007e96:	f000 f8bf 	bl	8008018 <Vending_Machine_SystemConfig>
		break;
 8007e9a:	e009      	b.n	8007eb0 <Vending_Machine_State_Ctrl+0x48>
	case SYS_MODE_NORMAL_OP:
		Vending_Machine_NormalOp();
 8007e9c:	f000 f930 	bl	8008100 <Vending_Machine_NormalOp>
		break;
 8007ea0:	e006      	b.n	8007eb0 <Vending_Machine_State_Ctrl+0x48>
	case SYS_MODE_FOTA:
		Vending_Machine_Fota();
 8007ea2:	f000 fa51 	bl	8008348 <Vending_Machine_Fota>
		break;
 8007ea6:	e003      	b.n	8007eb0 <Vending_Machine_State_Ctrl+0x48>
	case SYS_MODE_FAULT:
		Vending_Machine_SystemFault();
 8007ea8:	f000 fa58 	bl	800835c <Vending_Machine_SystemFault>
		break;
 8007eac:	e000      	b.n	8007eb0 <Vending_Machine_State_Ctrl+0x48>
	default:
		break;
 8007eae:	bf00      	nop
	}
}
 8007eb0:	bf00      	nop
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20003d10 	.word	0x20003d10

08007eb8 <Vending_Machine_SystemTest>:


void Vending_Machine_SystemTest(void){
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
	if(g_sysHealth.modemStatus == MODEM_READY){
 8007ebc:	4b52      	ldr	r3, [pc, #328]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007ebe:	78db      	ldrb	r3, [r3, #3]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d177      	bne.n	8007fb4 <Vending_Machine_SystemTest+0xfc>
		if(g_sysHealth.gsmInfoStatus == GSM_INFO_NOT_UPDATED){
 8007ec4:	4b50      	ldr	r3, [pc, #320]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007ec6:	789b      	ldrb	r3, [r3, #2]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <Vending_Machine_SystemTest+0x1e>
			Vending_Machine_GetModemInfo();							// update modem firmware version, IMEI & CCID and set gsmInfoStatus to GSM_INFO_UPDATED
 8007ecc:	f000 ff76 	bl	8008dbc <Vending_Machine_GetModemInfo>
			g_sysHealth.gsmInfoStatus = GSM_INFO_UPDATED;
 8007ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	709a      	strb	r2, [r3, #2]
		}
		if(g_sysHealth.nwRegnStatus == NW_REGN_FAILED){
 8007ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d112      	bne.n	8007f04 <Vending_Machine_SystemTest+0x4c>
			if(ATCMD_A7672_Module_Check() == 1){						// Check CGREG status for 0,1... if success, send CGATT and set nwRegnStatus to NW_REGN_SUCCESS on OK response
 8007ede:	f7fa ff5f 	bl	8002da0 <ATCMD_A7672_Module_Check>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d17b      	bne.n	8007fe0 <Vending_Machine_SystemTest+0x128>
				ATCMD_A7672_Get_NTP_HostName();
 8007ee8:	f7fa fe5c 	bl	8002ba4 <ATCMD_A7672_Get_NTP_HostName>
				ATCMD_A7672_Update_Modem_DateTime();
 8007eec:	f7fa fea8 	bl	8002c40 <ATCMD_A7672_Update_Modem_DateTime>
				while((ATCMD_A7672_Get_DateTime() == 0));
 8007ef0:	bf00      	nop
 8007ef2:	f7fa fefd 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0fa      	beq.n	8007ef2 <Vending_Machine_SystemTest+0x3a>
				g_sysHealth.nwRegnStatus = NW_REGN_SUCCESS;
 8007efc:	4b42      	ldr	r3, [pc, #264]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007efe:	2201      	movs	r2, #1
 8007f00:	705a      	strb	r2, [r3, #1]
 8007f02:	e06d      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
			}
		}
		else if(g_sysHealth.nwRegnStatus == NW_REGN_SUCCESS){
 8007f04:	4b40      	ldr	r3, [pc, #256]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d169      	bne.n	8007fe0 <Vending_Machine_SystemTest+0x128>
			if(g_sysHealth.cert_status == CERT_NOT_OK){
 8007f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <Vending_Machine_SystemTest+0x64>
				g_sysState = SYS_MODE_CONFIG;						// get any installed certificates list and delete them and download new certificates
 8007f14:	4b3d      	ldr	r3, [pc, #244]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f16:	2202      	movs	r2, #2
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e061      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
			}
			else{
				if(g_sysHealth.mqttConnectStatus == CONNECT_NOT_CONNECTED){
 8007f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f1e:	795b      	ldrb	r3, [r3, #5]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d124      	bne.n	8007f6e <Vending_Machine_SystemTest+0xb6>
					Vending_Machine_ConnectToMqttServer();
 8007f24:	f000 ffa6 	bl	8008e74 <Vending_Machine_ConnectToMqttServer>
					if (g_sysHealth.mqttConnectStatus == CONNECT_SUCCESS){
 8007f28:	4b37      	ldr	r3, [pc, #220]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f2a:	795b      	ldrb	r3, [r3, #5]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d117      	bne.n	8007f60 <Vending_Machine_SystemTest+0xa8>
						if(g_sysHealth.announceState == ANNOUNCE_NOT_SENT)
 8007f30:	4b35      	ldr	r3, [pc, #212]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f32:	7c9b      	ldrb	r3, [r3, #18]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <Vending_Machine_SystemTest+0x84>
						Vending_Machine_PrepareAnnouncePacket();
 8007f38:	f000 fa7a 	bl	8008430 <Vending_Machine_PrepareAnnouncePacket>
						if(ATCMD_A7672_MQTTS_Publish(jsonBuffer) == 1){
 8007f3c:	4b34      	ldr	r3, [pc, #208]	@ (8008010 <Vending_Machine_SystemTest+0x158>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fc fdcb 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d105      	bne.n	8007f58 <Vending_Machine_SystemTest+0xa0>
							g_sysHealth.announceState = ANNOUNCE_SENT;
 8007f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f4e:	2201      	movs	r2, #1
 8007f50:	749a      	strb	r2, [r3, #18]
							g_sysState = SYS_MODE_NORMAL_OP;
 8007f52:	4b2e      	ldr	r3, [pc, #184]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
						}
						g_sysState = SYS_MODE_NORMAL_OP;
 8007f58:	4b2c      	ldr	r3, [pc, #176]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	e002      	b.n	8007f66 <Vending_Machine_SystemTest+0xae>
					}
					else{
						g_sysState = SYS_MODE_CONFIG;
 8007f60:	4b2a      	ldr	r3, [pc, #168]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
					}

//					Vending_Machine_PublishPacket();
//					Vending_Machine_SubscribeActiveTopic();
					g_sysState = SYS_MODE_NORMAL_OP;
 8007f66:	4b29      	ldr	r3, [pc, #164]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e038      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
				}
				else if(g_sysHealth.mqttConnectStatus == CONNECT_FAILED){
 8007f6e:	4b26      	ldr	r3, [pc, #152]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d103      	bne.n	8007f7e <Vending_Machine_SystemTest+0xc6>
					g_sysState = SYS_MODE_CONFIG;
 8007f76:	4b25      	ldr	r3, [pc, #148]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007f78:	2202      	movs	r2, #2
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	e030      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
				}
				else if(g_sysHealth.mqttConnectStatus == CONNECT_DISCONNECTED){
 8007f7e:	4b22      	ldr	r3, [pc, #136]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007f80:	795b      	ldrb	r3, [r3, #5]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d112      	bne.n	8007fac <Vending_Machine_SystemTest+0xf4>
					ATCMD_A7672_MQTTS_Disonnect();
 8007f86:	f7fc fce3 	bl	8004950 <ATCMD_A7672_MQTTS_Disonnect>
					ATCMD_A7672_MQTT_Set_Connection_Status(MQTT_NOT_CONNECTED);
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f7fb f8dc 	bl	8003148 <ATCMD_A7672_MQTT_Set_Connection_Status>
					if(ATCMD_A7672_Check_Pdp_Context() == 0){
 8007f90:	f7fc fe90 	bl	8004cb4 <ATCMD_A7672_Check_Pdp_Context>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <Vending_Machine_SystemTest+0xee>
						while(ATCMD_A7672_Set_Pdp_Context());
 8007f9a:	bf00      	nop
 8007f9c:	f7fc fed2 	bl	8004d44 <ATCMD_A7672_Set_Pdp_Context>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1fa      	bne.n	8007f9c <Vending_Machine_SystemTest+0xe4>
					}
					Vending_Machine_ConnectToMqttServer();
 8007fa6:	f000 ff65 	bl	8008e74 <Vending_Machine_ConnectToMqttServer>
 8007faa:	e019      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
				}
				else{
					g_sysState = SYS_MODE_NORMAL_OP;
 8007fac:	4b17      	ldr	r3, [pc, #92]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e015      	b.n	8007fe0 <Vending_Machine_SystemTest+0x128>
				}
			}
		}
	}
	else if (g_sysHealth.modemStatus == MODEM_NOT_RDY){
 8007fb4:	4b14      	ldr	r3, [pc, #80]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007fb6:	78db      	ldrb	r3, [r3, #3]
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d111      	bne.n	8007fe0 <Vending_Machine_SystemTest+0x128>
		ATCMD_A7672_ModuleHardRestart();
 8007fbc:	f000 fff2 	bl	8008fa4 <ATCMD_A7672_ModuleHardRestart>
		g_sysHealth.modemRestartCount++;
 8007fc0:	4b11      	ldr	r3, [pc, #68]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007fc2:	79db      	ldrb	r3, [r3, #7]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007fca:	71da      	strb	r2, [r3, #7]
		if(g_sysHealth.modemRestartCount > MAX_MODEM_RESTART_COUNT){
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007fce:	79db      	ldrb	r3, [r3, #7]
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d905      	bls.n	8007fe0 <Vending_Machine_SystemTest+0x128>
			g_sysState = SYS_MODE_FAULT;
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <Vending_Machine_SystemTest+0x154>)
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	701a      	strb	r2, [r3, #0]
			g_sysHealth.faultReason = FAULT_NW_FAIL;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	@ (8008008 <Vending_Machine_SystemTest+0x150>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	719a      	strb	r2, [r3, #6]
		}
	}
	if(checkNwStatus){
 8007fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <Vending_Machine_SystemTest+0x15c>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <Vending_Machine_SystemTest+0x14c>
		checkNwStatus = 0;
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8008014 <Vending_Machine_SystemTest+0x15c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
		if(ATCMD_A7672_Check_Pdp_Context() == 0){
 8007fee:	f7fc fe61 	bl	8004cb4 <ATCMD_A7672_Check_Pdp_Context>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d105      	bne.n	8008004 <Vending_Machine_SystemTest+0x14c>
			while(ATCMD_A7672_Set_Pdp_Context());
 8007ff8:	bf00      	nop
 8007ffa:	f7fc fea3 	bl	8004d44 <ATCMD_A7672_Set_Pdp_Context>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1fa      	bne.n	8007ffa <Vending_Machine_SystemTest+0x142>

//	if(g_sysHealth.bat_voltage <= 10){
//		g_sysState = SYS_MODE_FAULT;
//		g_sysHealth.faultReason = FAULT_BAT_DOWN;
//	}
}
 8008004:	bf00      	nop
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20003c98 	.word	0x20003c98
 800800c:	20003d10 	.word	0x20003d10
 8008010:	20002770 	.word	0x20002770
 8008014:	20003d32 	.word	0x20003d32

08008018 <Vending_Machine_SystemConfig>:

void Vending_Machine_SystemConfig(void){
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
//	Vending_Machine_DeleteInstalledCertificates();
	uint8_t certCount=0;
 800801e:	2300      	movs	r3, #0
 8008020:	71fb      	strb	r3, [r7, #7]

//	if(g_sysHealth.mqttConnectStatus == CONNECT_FAILED){
//		vending_Machine_DeleteAllCerts();
//	}
	InstalledCerts = ATCMD_A7672_Check_Module_Certificates();
 8008022:	f7fc faf3 	bl	800460c <ATCMD_A7672_Check_Module_Certificates>
 8008026:	4603      	mov	r3, r0
 8008028:	4a2f      	ldr	r2, [pc, #188]	@ (80080e8 <Vending_Machine_SystemConfig+0xd0>)
 800802a:	6013      	str	r3, [r2, #0]
	if(InstalledCerts->certCount < 3){
 800802c:	4b2e      	ldr	r3, [pc, #184]	@ (80080e8 <Vending_Machine_SystemConfig+0xd0>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008034:	2b02      	cmp	r3, #2
 8008036:	d82b      	bhi.n	8008090 <Vending_Machine_SystemConfig+0x78>
		if(ATCMD_A7672_Download_Root_Ca()){
 8008038:	f7fb ff68 	bl	8003f0c <ATCMD_A7672_Download_Root_Ca>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d005      	beq.n	800804e <Vending_Machine_SystemConfig+0x36>
			ATCMD_A7672_HTTP_Read();
 8008042:	f7fb fb0d 	bl	8003660 <ATCMD_A7672_HTTP_Read>
			ATCMD_A7672_CertKey_Module_Download();
 8008046:	f7fc f95b 	bl	8004300 <ATCMD_A7672_CertKey_Module_Download>
			ATCMD_A7672_HTTP_Terminate();
 800804a:	f7fb faa9 	bl	80035a0 <ATCMD_A7672_HTTP_Terminate>
		}
		if(ATCMD_A7672_Provision_Device()){
 800804e:	f7fb f8ed 	bl	800322c <ATCMD_A7672_Provision_Device>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <Vending_Machine_SystemConfig+0x44>
			ATCMD_A7672_HTTP_Terminate();
 8008058:	f7fb faa2 	bl	80035a0 <ATCMD_A7672_HTTP_Terminate>
		}
		if(ATCMD_A7672_Download_Certificate()){
 800805c:	f7fb fb60 	bl	8003720 <ATCMD_A7672_Download_Certificate>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <Vending_Machine_SystemConfig+0x5a>
			ATCMD_A7672_HTTP_Read();
 8008066:	f7fb fafb 	bl	8003660 <ATCMD_A7672_HTTP_Read>
			ATCMD_A7672_CertKey_Module_Download();
 800806a:	f7fc f949 	bl	8004300 <ATCMD_A7672_CertKey_Module_Download>
			ATCMD_A7672_HTTP_Terminate();
 800806e:	f7fb fa97 	bl	80035a0 <ATCMD_A7672_HTTP_Terminate>
		}
		if(ATCMD_A7672_Download_Private_Key()){
 8008072:	f7fb fd51 	bl	8003b18 <ATCMD_A7672_Download_Private_Key>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <Vending_Machine_SystemConfig+0x70>
			ATCMD_A7672_HTTP_Read();
 800807c:	f7fb faf0 	bl	8003660 <ATCMD_A7672_HTTP_Read>
			ATCMD_A7672_CertKey_Module_Download();
 8008080:	f7fc f93e 	bl	8004300 <ATCMD_A7672_CertKey_Module_Download>
			ATCMD_A7672_HTTP_Terminate();
 8008084:	f7fb fa8c 	bl	80035a0 <ATCMD_A7672_HTTP_Terminate>
		}
		g_sysState = SYS_MODE_TEST;
 8008088:	4b18      	ldr	r3, [pc, #96]	@ (80080ec <Vending_Machine_SystemConfig+0xd4>)
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
		if(certCount == InstalledCerts->certCount){
			g_sysHealth.cert_status = CERT_OK;
			g_sysState = SYS_MODE_TEST;
		}
	}
}
 800808e:	e027      	b.n	80080e0 <Vending_Machine_SystemConfig+0xc8>
		if(ATCMD_A7672_Is_Module_Certificate("RootCA.pem"))
 8008090:	4817      	ldr	r0, [pc, #92]	@ (80080f0 <Vending_Machine_SystemConfig+0xd8>)
 8008092:	f7fc faf9 	bl	8004688 <ATCMD_A7672_Is_Module_Certificate>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <Vending_Machine_SystemConfig+0x8a>
			certCount++;
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	3301      	adds	r3, #1
 80080a0:	71fb      	strb	r3, [r7, #7]
		if(ATCMD_A7672_Is_Module_Certificate("certificate.pem"))
 80080a2:	4814      	ldr	r0, [pc, #80]	@ (80080f4 <Vending_Machine_SystemConfig+0xdc>)
 80080a4:	f7fc faf0 	bl	8004688 <ATCMD_A7672_Is_Module_Certificate>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <Vending_Machine_SystemConfig+0x9c>
			certCount++;
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	3301      	adds	r3, #1
 80080b2:	71fb      	strb	r3, [r7, #7]
		if(ATCMD_A7672_Is_Module_Certificate("privatekey.pem"))
 80080b4:	4810      	ldr	r0, [pc, #64]	@ (80080f8 <Vending_Machine_SystemConfig+0xe0>)
 80080b6:	f7fc fae7 	bl	8004688 <ATCMD_A7672_Is_Module_Certificate>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <Vending_Machine_SystemConfig+0xae>
			certCount++;
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	3301      	adds	r3, #1
 80080c4:	71fb      	strb	r3, [r7, #7]
		if(certCount == InstalledCerts->certCount){
 80080c6:	4b08      	ldr	r3, [pc, #32]	@ (80080e8 <Vending_Machine_SystemConfig+0xd0>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80080ce:	79fa      	ldrb	r2, [r7, #7]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d105      	bne.n	80080e0 <Vending_Machine_SystemConfig+0xc8>
			g_sysHealth.cert_status = CERT_OK;
 80080d4:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <Vending_Machine_SystemConfig+0xe4>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
			g_sysState = SYS_MODE_TEST;
 80080da:	4b04      	ldr	r3, [pc, #16]	@ (80080ec <Vending_Machine_SystemConfig+0xd4>)
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20003d0c 	.word	0x20003d0c
 80080ec:	20003d10 	.word	0x20003d10
 80080f0:	0800b898 	.word	0x0800b898
 80080f4:	0800b8a4 	.word	0x0800b8a4
 80080f8:	0800b8b4 	.word	0x0800b8b4
 80080fc:	20003c98 	.word	0x20003c98

08008100 <Vending_Machine_NormalOp>:

void Vending_Machine_NormalOp(void){
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
	char dispRetryCount = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	71fb      	strb	r3, [r7, #7]
//	while(1)
	{
		g_sysHealth.mqttConnectStatus = (ConnectStatus_t)ATCMD_A7672_MQTT_Get_Connection_Status();
 800810a:	f7fb f811 	bl	8003130 <ATCMD_A7672_MQTT_Get_Connection_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	4b7e      	ldr	r3, [pc, #504]	@ (800830c <Vending_Machine_NormalOp+0x20c>)
 8008114:	715a      	strb	r2, [r3, #5]
		if(g_sysHealth.mqttConnectStatus == CONNECT_DISCONNECTED){
 8008116:	4b7d      	ldr	r3, [pc, #500]	@ (800830c <Vending_Machine_NormalOp+0x20c>)
 8008118:	795b      	ldrb	r3, [r3, #5]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d102      	bne.n	8008124 <Vending_Machine_NormalOp+0x24>
			g_sysState = SYS_MODE_TEST;
 800811e:	4b7c      	ldr	r3, [pc, #496]	@ (8008310 <Vending_Machine_NormalOp+0x210>)
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
		}
		if(g_packetReceived){
 8008124:	4b7b      	ldr	r3, [pc, #492]	@ (8008314 <Vending_Machine_NormalOp+0x214>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80cb 	beq.w	80082c4 <Vending_Machine_NormalOp+0x1c4>
			g_packetReceived = 0;
 800812e:	4b79      	ldr	r3, [pc, #484]	@ (8008314 <Vending_Machine_NormalOp+0x214>)
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
			switch(g_requestType){
 8008134:	4b78      	ldr	r3, [pc, #480]	@ (8008318 <Vending_Machine_NormalOp+0x218>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b05      	cmp	r3, #5
 800813a:	f200 80bd 	bhi.w	80082b8 <Vending_Machine_NormalOp+0x1b8>
 800813e:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <Vending_Machine_NormalOp+0x44>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	080082b9 	.word	0x080082b9
 8008148:	0800815d 	.word	0x0800815d
 800814c:	08008221 	.word	0x08008221
 8008150:	080082b9 	.word	0x080082b9
 8008154:	08008261 	.word	0x08008261
 8008158:	080082b9 	.word	0x080082b9
			case REQ_TYPE_DIPSENSE:
				if(g_dispenseRequest.serialNumber != g_lastDispenseRequest.serialNumber){
 800815c:	4b6f      	ldr	r3, [pc, #444]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	4b6f      	ldr	r3, [pc, #444]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	f000 80a9 	beq.w	80082bc <Vending_Machine_NormalOp+0x1bc>
					dispRetryCount = MAX_DISP_RETRY_COUNT;
 800816a:	2302      	movs	r3, #2
 800816c:	71fb      	strb	r3, [r7, #7]
					  dispRetryCount--;
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	3b01      	subs	r3, #1
 8008172:	71fb      	strb	r3, [r7, #7]
					Vending_Machine_PrepareAckPacket();
 8008174:	f000 fa46 	bl	8008604 <Vending_Machine_PrepareAckPacket>
					memset(activeTopic, '\0', sizeof(activeTopic));
 8008178:	2223      	movs	r2, #35	@ 0x23
 800817a:	2100      	movs	r1, #0
 800817c:	4869      	ldr	r0, [pc, #420]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800817e:	f001 fa04 	bl	800958a <memset>
					strcpy(activeTopic, g_channelToSwitch);
 8008182:	4969      	ldr	r1, [pc, #420]	@ (8008328 <Vending_Machine_NormalOp+0x228>)
 8008184:	4867      	ldr	r0, [pc, #412]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008186:	f001 fa6d 	bl	8009664 <strcpy>
					strConcat(activeTopic, mqttResponsePubTopic);
 800818a:	4968      	ldr	r1, [pc, #416]	@ (800832c <Vending_Machine_NormalOp+0x22c>)
 800818c:	4865      	ldr	r0, [pc, #404]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800818e:	f7fe ffaa 	bl	80070e6 <strConcat>
					ATCMD_A7672_MQTT_Set_PubTopic(activeTopic);
 8008192:	4864      	ldr	r0, [pc, #400]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008194:	f7fa ffa4 	bl	80030e0 <ATCMD_A7672_MQTT_Set_PubTopic>
					ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 8008198:	4b65      	ldr	r3, [pc, #404]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7fc fc9d 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
					Vending_Machine_StartDispense();
 80081a2:	f000 fec5 	bl	8008f30 <Vending_Machine_StartDispense>
					if(g_dispenseRequest.dispenseStatus == DISPENSE_SUCCESS){
 80081a6:	4b5d      	ldr	r3, [pc, #372]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 80081a8:	7a5b      	ldrb	r3, [r3, #9]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <Vending_Machine_NormalOp+0xba>
						measurementMatrix[TOTAL_FIRST_TRIGGER]++;
 80081ae:	4b61      	ldr	r3, [pc, #388]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a5f      	ldr	r2, [pc, #380]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081b6:	6153      	str	r3, [r2, #20]
 80081b8:	e015      	b.n	80081e6 <Vending_Machine_NormalOp+0xe6>
					}
					else{
						do{
							measurementMatrix[TOTAL_RETRIES]++;
 80081ba:	4b5e      	ldr	r3, [pc, #376]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	3301      	adds	r3, #1
 80081c0:	4a5c      	ldr	r2, [pc, #368]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081c2:	6093      	str	r3, [r2, #8]
							Vending_Machine_StartDispense();
 80081c4:	f000 feb4 	bl	8008f30 <Vending_Machine_StartDispense>
							if(g_dispenseRequest.dispenseStatus == DISPENSE_SUCCESS){
 80081c8:	4b54      	ldr	r3, [pc, #336]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 80081ca:	7a5b      	ldrb	r3, [r3, #9]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d107      	bne.n	80081e0 <Vending_Machine_NormalOp+0xe0>
								measurementMatrix[TOTAL_RETRY_TRIGGER]++;
 80081d0:	4b58      	ldr	r3, [pc, #352]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	3301      	adds	r3, #1
 80081d6:	4a57      	ldr	r2, [pc, #348]	@ (8008334 <Vending_Machine_NormalOp+0x234>)
 80081d8:	6113      	str	r3, [r2, #16]
								dispRetryCount = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	71fb      	strb	r3, [r7, #7]
								break;
 80081de:	e002      	b.n	80081e6 <Vending_Machine_NormalOp+0xe6>
							}
						}while(dispRetryCount);
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e9      	bne.n	80081ba <Vending_Machine_NormalOp+0xba>
					}
					Vending_Machine_PrepareDispenseStatusPacket();
 80081e6:	f000 fa7f 	bl	80086e8 <Vending_Machine_PrepareDispenseStatusPacket>
					ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 80081ea:	4b51      	ldr	r3, [pc, #324]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fc fc74 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
					g_lastDispenseRequest.serialNumber = g_dispenseRequest.serialNumber;
 80081f4:	4b49      	ldr	r3, [pc, #292]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a49      	ldr	r2, [pc, #292]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 80081fa:	6013      	str	r3, [r2, #0]
					g_lastDispenseRequest.serialNumber = 0;
 80081fc:	4b48      	ldr	r3, [pc, #288]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
					g_lastDispenseRequest.requestTime = g_dispenseRequest.requestTime;
 8008202:	4b46      	ldr	r3, [pc, #280]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4a46      	ldr	r2, [pc, #280]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 8008208:	6053      	str	r3, [r2, #4]
					g_lastDispenseRequest.requestTime = 0;
 800820a:	4b45      	ldr	r3, [pc, #276]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 800820c:	2200      	movs	r2, #0
 800820e:	605a      	str	r2, [r3, #4]
					g_lastDispenseRequest.dispenseStatus = g_dispenseRequest.dispenseStatus;
 8008210:	4b42      	ldr	r3, [pc, #264]	@ (800831c <Vending_Machine_NormalOp+0x21c>)
 8008212:	7a5a      	ldrb	r2, [r3, #9]
 8008214:	4b42      	ldr	r3, [pc, #264]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 8008216:	725a      	strb	r2, [r3, #9]
					g_lastDispenseRequest.dispenseStatus = 0;
 8008218:	4b41      	ldr	r3, [pc, #260]	@ (8008320 <Vending_Machine_NormalOp+0x220>)
 800821a:	2200      	movs	r2, #0
 800821c:	725a      	strb	r2, [r3, #9]
				}
				break;
 800821e:	e04d      	b.n	80082bc <Vending_Machine_NormalOp+0x1bc>
			case REQ_TYPE_CHANGE_CHANNEL:

//				Vending_Machine_SaveActiveChannel(g_channelToSwitch);
				Vending_Machine_PrepareChannelChangeAckPacket();
 8008220:	f000 fc02 	bl	8008a28 <Vending_Machine_PrepareChannelChangeAckPacket>
				memset(activeTopic, '\0', sizeof(activeTopic));
 8008224:	2223      	movs	r2, #35	@ 0x23
 8008226:	2100      	movs	r1, #0
 8008228:	483e      	ldr	r0, [pc, #248]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800822a:	f001 f9ae 	bl	800958a <memset>
				strcpy(activeTopic, g_channelToSwitch);
 800822e:	493e      	ldr	r1, [pc, #248]	@ (8008328 <Vending_Machine_NormalOp+0x228>)
 8008230:	483c      	ldr	r0, [pc, #240]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008232:	f001 fa17 	bl	8009664 <strcpy>
				strConcat(activeTopic, mqttChannelChangePubTopic);
 8008236:	4940      	ldr	r1, [pc, #256]	@ (8008338 <Vending_Machine_NormalOp+0x238>)
 8008238:	483a      	ldr	r0, [pc, #232]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800823a:	f7fe ff54 	bl	80070e6 <strConcat>
				ATCMD_A7672_MQTT_Set_PubTopic(activeTopic);
 800823e:	4839      	ldr	r0, [pc, #228]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008240:	f7fa ff4e 	bl	80030e0 <ATCMD_A7672_MQTT_Set_PubTopic>
				ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 8008244:	4b3a      	ldr	r3, [pc, #232]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f7fc fc47 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
				ATCMD_A7672_MQTTS_Disonnect();
 800824e:	f7fc fb7f 	bl	8004950 <ATCMD_A7672_MQTTS_Disonnect>
				g_sysHealth.mqttConnectStatus = CONNECT_NOT_CONNECTED;
 8008252:	4b2e      	ldr	r3, [pc, #184]	@ (800830c <Vending_Machine_NormalOp+0x20c>)
 8008254:	2200      	movs	r2, #0
 8008256:	715a      	strb	r2, [r3, #5]
				g_sysState = SYS_MODE_TEST;
 8008258:	4b2d      	ldr	r3, [pc, #180]	@ (8008310 <Vending_Machine_NormalOp+0x210>)
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
//				Vending_Machine_ChannelChangeAckPacket();
//				Vending_Machine_Reboot();
				break;
 800825e:	e02e      	b.n	80082be <Vending_Machine_NormalOp+0x1be>
			case REQ_TYPE_OTA_START:

				break;
			case REQ_TYPE_MOTOR_TEST:
				Vending_Machine_PrepareAckPacket();
 8008260:	f000 f9d0 	bl	8008604 <Vending_Machine_PrepareAckPacket>
				memset(activeTopic, '\0', sizeof(activeTopic));
 8008264:	2223      	movs	r2, #35	@ 0x23
 8008266:	2100      	movs	r1, #0
 8008268:	482e      	ldr	r0, [pc, #184]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800826a:	f001 f98e 	bl	800958a <memset>
				strcpy(activeTopic, g_channelToSwitch);
 800826e:	492e      	ldr	r1, [pc, #184]	@ (8008328 <Vending_Machine_NormalOp+0x228>)
 8008270:	482c      	ldr	r0, [pc, #176]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008272:	f001 f9f7 	bl	8009664 <strcpy>
				strConcat(activeTopic, mqttResponsePubTopic);
 8008276:	492d      	ldr	r1, [pc, #180]	@ (800832c <Vending_Machine_NormalOp+0x22c>)
 8008278:	482a      	ldr	r0, [pc, #168]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 800827a:	f7fe ff34 	bl	80070e6 <strConcat>
				ATCMD_A7672_MQTT_Set_PubTopic(activeTopic);
 800827e:	4829      	ldr	r0, [pc, #164]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 8008280:	f7fa ff2e 	bl	80030e0 <ATCMD_A7672_MQTT_Set_PubTopic>
				ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 8008284:	4b2a      	ldr	r3, [pc, #168]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f7fc fc27 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
				for(; g_testDispenseCount; g_testDispenseCount--){
 800828e:	e00e      	b.n	80082ae <Vending_Machine_NormalOp+0x1ae>
					Vending_Machine_StartDispense();
 8008290:	f000 fe4e 	bl	8008f30 <Vending_Machine_StartDispense>
					Vending_Machine_PrepareDispenseStatusPacket();
 8008294:	f000 fa28 	bl	80086e8 <Vending_Machine_PrepareDispenseStatusPacket>
					ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 8008298:	4b25      	ldr	r3, [pc, #148]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f7fc fc1d 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
				for(; g_testDispenseCount; g_testDispenseCount--){
 80082a2:	4b26      	ldr	r3, [pc, #152]	@ (800833c <Vending_Machine_NormalOp+0x23c>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4b24      	ldr	r3, [pc, #144]	@ (800833c <Vending_Machine_NormalOp+0x23c>)
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	4b23      	ldr	r3, [pc, #140]	@ (800833c <Vending_Machine_NormalOp+0x23c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1ec      	bne.n	8008290 <Vending_Machine_NormalOp+0x190>
				}
				break;
 80082b6:	e002      	b.n	80082be <Vending_Machine_NormalOp+0x1be>

				break;
			case REQ_TYPE_NONE:
				break;
			default:
				break;
 80082b8:	bf00      	nop
 80082ba:	e000      	b.n	80082be <Vending_Machine_NormalOp+0x1be>
				break;
 80082bc:	bf00      	nop
			}
			g_requestType = REQ_TYPE_NONE;
 80082be:	4b16      	ldr	r3, [pc, #88]	@ (8008318 <Vending_Machine_NormalOp+0x218>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
		}
		if(mqttPacketPara.statusTimerExpired){
 80082c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008340 <Vending_Machine_NormalOp+0x240>)
 80082c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01a      	beq.n	8008304 <Vending_Machine_NormalOp+0x204>
			mqttPacketPara.statusTimerExpired = 0;
 80082ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008340 <Vending_Machine_NormalOp+0x240>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			memset(activeTopic, '\0', sizeof(activeTopic));
 80082d6:	2223      	movs	r2, #35	@ 0x23
 80082d8:	2100      	movs	r1, #0
 80082da:	4812      	ldr	r0, [pc, #72]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 80082dc:	f001 f955 	bl	800958a <memset>
			strcpy(activeTopic, g_channelToSwitch);
 80082e0:	4911      	ldr	r1, [pc, #68]	@ (8008328 <Vending_Machine_NormalOp+0x228>)
 80082e2:	4810      	ldr	r0, [pc, #64]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 80082e4:	f001 f9be 	bl	8009664 <strcpy>
			strConcat(activeTopic, mqttStatusPubTopic);
 80082e8:	4916      	ldr	r1, [pc, #88]	@ (8008344 <Vending_Machine_NormalOp+0x244>)
 80082ea:	480e      	ldr	r0, [pc, #56]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 80082ec:	f7fe fefb 	bl	80070e6 <strConcat>
			ATCMD_A7672_MQTT_Set_PubTopic(activeTopic);
 80082f0:	480c      	ldr	r0, [pc, #48]	@ (8008324 <Vending_Machine_NormalOp+0x224>)
 80082f2:	f7fa fef5 	bl	80030e0 <ATCMD_A7672_MQTT_Set_PubTopic>
			Vending_Machine_PrepareStatusPacket();
 80082f6:	f000 faa9 	bl	800884c <Vending_Machine_PrepareStatusPacket>
			ATCMD_A7672_MQTTS_Publish(jsonBuffer);
 80082fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <Vending_Machine_NormalOp+0x230>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fc fbec 	bl	8004adc <ATCMD_A7672_MQTTS_Publish>
		}
	}
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20003c98 	.word	0x20003c98
 8008310:	20003d10 	.word	0x20003d10
 8008314:	20003d13 	.word	0x20003d13
 8008318:	20003d12 	.word	0x20003d12
 800831c:	20003cac 	.word	0x20003cac
 8008320:	20003cb8 	.word	0x20003cb8
 8008324:	2000274c 	.word	0x2000274c
 8008328:	200000cc 	.word	0x200000cc
 800832c:	200000ac 	.word	0x200000ac
 8008330:	20002770 	.word	0x20002770
 8008334:	20003cf0 	.word	0x20003cf0
 8008338:	20000048 	.word	0x20000048
 800833c:	20003d14 	.word	0x20003d14
 8008340:	20003cc4 	.word	0x20003cc4
 8008344:	2000008c 	.word	0x2000008c

08008348 <Vending_Machine_Fota>:


void Vending_Machine_Fota(void){
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
	Vending_Machine_StartDispense();
 800834c:	f000 fdf0 	bl	8008f30 <Vending_Machine_StartDispense>
	Delay_Ms(3000);
 8008350:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008354:	f7fe fd90 	bl	8006e78 <Delay_Ms>
}
 8008358:	bf00      	nop
 800835a:	bd80      	pop	{r7, pc}

0800835c <Vending_Machine_SystemFault>:
void Vending_Machine_SystemFault(void){
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0
	;
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <System_Variables_Init>:



void System_Variables_Init(void){
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
	memset(&g_sysHealth,0x00,sizeof(g_sysHealth));
 8008370:	2214      	movs	r2, #20
 8008372:	2100      	movs	r1, #0
 8008374:	481e      	ldr	r0, [pc, #120]	@ (80083f0 <System_Variables_Init+0x84>)
 8008376:	f001 f908 	bl	800958a <memset>
	memset(&g_dispenseRequest,0,sizeof(g_dispenseRequest));
 800837a:	220c      	movs	r2, #12
 800837c:	2100      	movs	r1, #0
 800837e:	481d      	ldr	r0, [pc, #116]	@ (80083f4 <System_Variables_Init+0x88>)
 8008380:	f001 f903 	bl	800958a <memset>
	memset(&g_lastDispenseRequest,0,sizeof(g_lastDispenseRequest));
 8008384:	220c      	movs	r2, #12
 8008386:	2100      	movs	r1, #0
 8008388:	481b      	ldr	r0, [pc, #108]	@ (80083f8 <System_Variables_Init+0x8c>)
 800838a:	f001 f8fe 	bl	800958a <memset>
	ATCMD_A7672_Register_Message_Callback(parseMessageFromServer);
 800838e:	481b      	ldr	r0, [pc, #108]	@ (80083fc <System_Variables_Init+0x90>)
 8008390:	f7fa feec 	bl	800316c <ATCMD_A7672_Register_Message_Callback>
	ATCMD_A7672_Resgister_Status_Send_Callback(isTimerexpired,5);
 8008394:	2105      	movs	r1, #5
 8008396:	481a      	ldr	r0, [pc, #104]	@ (8008400 <System_Variables_Init+0x94>)
 8008398:	f7fa fef8 	bl	800318c <ATCMD_A7672_Resgister_Status_Send_Callback>
	ATCMD_A7672_Register_Error_Callback(vending_Machine_ErrorHandlerCallback,2);
 800839c:	2102      	movs	r1, #2
 800839e:	4819      	ldr	r0, [pc, #100]	@ (8008404 <System_Variables_Init+0x98>)
 80083a0:	f7fa ff16 	bl	80031d0 <ATCMD_A7672_Register_Error_Callback>
	ATCMD_A7672_HTTP_Set_DevProvURL(deviceProvisioningURL);
 80083a4:	4818      	ldr	r0, [pc, #96]	@ (8008408 <System_Variables_Init+0x9c>)
 80083a6:	f7fa fdcf 	bl	8002f48 <ATCMD_A7672_HTTP_Set_DevProvURL>
	ATCMD_A7672_HTTP_Set_RootCAURL(RootCAURL);
 80083aa:	4818      	ldr	r0, [pc, #96]	@ (800840c <System_Variables_Init+0xa0>)
 80083ac:	f7fa fe00 	bl	8002fb0 <ATCMD_A7672_HTTP_Set_RootCAURL>
	ATCMD_A7672_HTTP_Set_CertURL(clientCertURL);
 80083b0:	4817      	ldr	r0, [pc, #92]	@ (8008410 <System_Variables_Init+0xa4>)
 80083b2:	f7fa fd69 	bl	8002e88 <ATCMD_A7672_HTTP_Set_CertURL>
	ATCMD_A7672_HTTP_Set_PrivKeyURL(privateKeyURL);
 80083b6:	4817      	ldr	r0, [pc, #92]	@ (8008414 <System_Variables_Init+0xa8>)
 80083b8:	f7fa fd92 	bl	8002ee0 <ATCMD_A7672_HTTP_Set_PrivKeyURL>
	ATCMD_A7672_MQTT_Set_URL(mqttEpURL);
 80083bc:	4816      	ldr	r0, [pc, #88]	@ (8008418 <System_Variables_Init+0xac>)
 80083be:	f7fa fe2b 	bl	8003018 <ATCMD_A7672_MQTT_Set_URL>
	ATCMD_A7672_MQTT_Set_Port("8883");
 80083c2:	4816      	ldr	r0, [pc, #88]	@ (800841c <System_Variables_Init+0xb0>)
 80083c4:	f7fa fe46 	bl	8003054 <ATCMD_A7672_MQTT_Set_Port>
	mqttPacketPara.statusMessageIndex = 0;
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <System_Variables_Init+0xb4>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
	mqttPacketPara.dateTimePtr = dateTime;
 80083ce:	4b14      	ldr	r3, [pc, #80]	@ (8008420 <System_Variables_Init+0xb4>)
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <System_Variables_Init+0xb8>)
 80083d2:	605a      	str	r2, [r3, #4]
	mqttPacketPara.signalStrength = (char*)getSignalStrengthPtr();
 80083d4:	f7fc fc64 	bl	8004ca0 <getSignalStrengthPtr>
 80083d8:	4603      	mov	r3, r0
 80083da:	4a11      	ldr	r2, [pc, #68]	@ (8008420 <System_Variables_Init+0xb4>)
 80083dc:	6253      	str	r3, [r2, #36]	@ 0x24
	strcpy(mqttPacketPara.modelName,"UNI_");
 80083de:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <System_Variables_Init+0xbc>)
 80083e0:	4a12      	ldr	r2, [pc, #72]	@ (800842c <System_Variables_Init+0xc0>)
 80083e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083e6:	6018      	str	r0, [r3, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	7019      	strb	r1, [r3, #0]
}
 80083ec:	bf00      	nop
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20003c98 	.word	0x20003c98
 80083f4:	20003cac 	.word	0x20003cac
 80083f8:	20003cb8 	.word	0x20003cb8
 80083fc:	08008b21 	.word	0x08008b21
 8008400:	08008d6d 	.word	0x08008d6d
 8008404:	08009011 	.word	0x08009011
 8008408:	0800ba80 	.word	0x0800ba80
 800840c:	0800bad4 	.word	0x0800bad4
 8008410:	0800bb24 	.word	0x0800bb24
 8008414:	0800bb78 	.word	0x0800bb78
 8008418:	0800bbc8 	.word	0x0800bbc8
 800841c:	0800b8c4 	.word	0x0800b8c4
 8008420:	20003cc4 	.word	0x20003cc4
 8008424:	2000076c 	.word	0x2000076c
 8008428:	20003cd0 	.word	0x20003cd0
 800842c:	0800b8cc 	.word	0x0800b8cc

08008430 <Vending_Machine_PrepareAnnouncePacket>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_PrepareAnnouncePacket(void){
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af02      	add	r7, sp, #8
	char 	*deviceName		= (char*)ATCMD_A7672_HTTP_Get_DevName();
 8008436:	f7fa fd1d 	bl	8002e74 <ATCMD_A7672_HTTP_Get_DevName>
 800843a:	6078      	str	r0, [r7, #4]
	g_sysHealth.bat_voltage = ADC1_Read_battery_value();
 800843c:	f7fe fcd6 	bl	8006dec <ADC1_Read_battery_value>
 8008440:	eef0 7a40 	vmov.f32	s15, s0
 8008444:	4b51      	ldr	r3, [pc, #324]	@ (800858c <Vending_Machine_PrepareAnnouncePacket+0x15c>)
 8008446:	edc3 7a02 	vstr	s15, [r3, #8]
	ATCMD_A7672_Get_DateTime();
 800844a:	f7fa fc51 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
	ATCMD_A7672_Get_Signal_Strength();
 800844e:	f7fc f88b 	bl	8004568 <ATCMD_A7672_Get_Signal_Strength>
	convert_to_epoch(mqttPacketPara.dateTimePtr,&mqttPacketPara.epochTime);
 8008452:	4b4f      	ldr	r3, [pc, #316]	@ (8008590 <Vending_Machine_PrepareAnnouncePacket+0x160>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	494f      	ldr	r1, [pc, #316]	@ (8008594 <Vending_Machine_PrepareAnnouncePacket+0x164>)
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fe69 	bl	8007130 <convert_to_epoch>
	jsonBuffer = (char*)Uart_Get_Transmit_Buffer();
 800845e:	f7ff fbfb 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 8008462:	4603      	mov	r3, r0
 8008464:	4a4c      	ldr	r2, [pc, #304]	@ (8008598 <Vending_Machine_PrepareAnnouncePacket+0x168>)
 8008466:	6013      	str	r3, [r2, #0]
	removeQuotes(deviceName);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fc7b 	bl	8007d64 <removeQuotes>
	memset(jsonBuffer, 0,500);
 800846e:	4b4a      	ldr	r3, [pc, #296]	@ (8008598 <Vending_Machine_PrepareAnnouncePacket+0x168>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008476:	2100      	movs	r1, #0
 8008478:	4618      	mov	r0, r3
 800847a:	f001 f886 	bl	800958a <memset>
	jwOpen(&jPacket, (char*)jsonBuffer, 500, JW_OBJECT, JW_COMPACT);
 800847e:	4b46      	ldr	r3, [pc, #280]	@ (8008598 <Vending_Machine_PrepareAnnouncePacket+0x168>)
 8008480:	6819      	ldr	r1, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	2301      	movs	r3, #1
 8008488:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800848c:	4843      	ldr	r0, [pc, #268]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800848e:	f7fd ff80 	bl	8006392 <jwOpen>
	jwObj_int(&jPacket, "PT", 0);
 8008492:	2200      	movs	r2, #0
 8008494:	4942      	ldr	r1, [pc, #264]	@ (80085a0 <Vending_Machine_PrepareAnnouncePacket+0x170>)
 8008496:	4841      	ldr	r0, [pc, #260]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008498:	f7fe f82b 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "MI", 0);
 800849c:	2200      	movs	r2, #0
 800849e:	4941      	ldr	r1, [pc, #260]	@ (80085a4 <Vending_Machine_PrepareAnnouncePacket+0x174>)
 80084a0:	483e      	ldr	r0, [pc, #248]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084a2:	f7fe f826 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "UD", (char*)deviceName);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	493f      	ldr	r1, [pc, #252]	@ (80085a8 <Vending_Machine_PrepareAnnouncePacket+0x178>)
 80084aa:	483c      	ldr	r0, [pc, #240]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084ac:	f7fe f80c 	bl	80064c8 <jwObj_string>
	jwObj_string(&jPacket, "UI", (char*)deviceName);
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	493e      	ldr	r1, [pc, #248]	@ (80085ac <Vending_Machine_PrepareAnnouncePacket+0x17c>)
 80084b4:	4839      	ldr	r0, [pc, #228]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084b6:	f7fe f807 	bl	80064c8 <jwObj_string>
	jwObj_string(&jPacket, "UL", "Unisem");
 80084ba:	4a3d      	ldr	r2, [pc, #244]	@ (80085b0 <Vending_Machine_PrepareAnnouncePacket+0x180>)
 80084bc:	493d      	ldr	r1, [pc, #244]	@ (80085b4 <Vending_Machine_PrepareAnnouncePacket+0x184>)
 80084be:	4837      	ldr	r0, [pc, #220]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084c0:	f7fe f802 	bl	80064c8 <jwObj_string>
	jwObj_int(&jPacket, "DT", mqttPacketPara.epochTime);
 80084c4:	4b32      	ldr	r3, [pc, #200]	@ (8008590 <Vending_Machine_PrepareAnnouncePacket+0x160>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	461a      	mov	r2, r3
 80084ca:	493b      	ldr	r1, [pc, #236]	@ (80085b8 <Vending_Machine_PrepareAnnouncePacket+0x188>)
 80084cc:	4833      	ldr	r0, [pc, #204]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084ce:	f7fe f810 	bl	80064f2 <jwObj_int>
	jwObj_double(&jPacket, "BV", g_sysHealth.bat_voltage);
 80084d2:	4b2e      	ldr	r3, [pc, #184]	@ (800858c <Vending_Machine_PrepareAnnouncePacket+0x15c>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7f7 ffe4 	bl	80004a4 <__aeabi_f2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	ec43 2b10 	vmov	d0, r2, r3
 80084e4:	4935      	ldr	r1, [pc, #212]	@ (80085bc <Vending_Machine_PrepareAnnouncePacket+0x18c>)
 80084e6:	482d      	ldr	r0, [pc, #180]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084e8:	f7fe f81a 	bl	8006520 <jwObj_double>
	jwObj_string(&jPacket, "LRER", "MANUAL");;
 80084ec:	4a34      	ldr	r2, [pc, #208]	@ (80085c0 <Vending_Machine_PrepareAnnouncePacket+0x190>)
 80084ee:	4935      	ldr	r1, [pc, #212]	@ (80085c4 <Vending_Machine_PrepareAnnouncePacket+0x194>)
 80084f0:	482a      	ldr	r0, [pc, #168]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084f2:	f7fd ffe9 	bl	80064c8 <jwObj_string>
		jwObj_object(&jPacket, "MM");
 80084f6:	4934      	ldr	r1, [pc, #208]	@ (80085c8 <Vending_Machine_PrepareAnnouncePacket+0x198>)
 80084f8:	4828      	ldr	r0, [pc, #160]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 80084fa:	f7fe f830 	bl	800655e <jwObj_object>
			jwObj_object(&jPacket, "UDI");
 80084fe:	4933      	ldr	r1, [pc, #204]	@ (80085cc <Vending_Machine_PrepareAnnouncePacket+0x19c>)
 8008500:	4826      	ldr	r0, [pc, #152]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008502:	f7fe f82c 	bl	800655e <jwObj_object>
				jwObj_string(&jPacket, "UMN", "UNISEM ELECTRONICS");
 8008506:	4a32      	ldr	r2, [pc, #200]	@ (80085d0 <Vending_Machine_PrepareAnnouncePacket+0x1a0>)
 8008508:	4932      	ldr	r1, [pc, #200]	@ (80085d4 <Vending_Machine_PrepareAnnouncePacket+0x1a4>)
 800850a:	4824      	ldr	r0, [pc, #144]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800850c:	f7fd ffdc 	bl	80064c8 <jwObj_string>
				jwObj_string(&jPacket, "HV", (char*)firmwareVersion);
 8008510:	4a31      	ldr	r2, [pc, #196]	@ (80085d8 <Vending_Machine_PrepareAnnouncePacket+0x1a8>)
 8008512:	4932      	ldr	r1, [pc, #200]	@ (80085dc <Vending_Machine_PrepareAnnouncePacket+0x1ac>)
 8008514:	4821      	ldr	r0, [pc, #132]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008516:	f7fd ffd7 	bl	80064c8 <jwObj_string>
				jwObj_string(&jPacket, "FV", (char*)hardwareVersion);
 800851a:	4a31      	ldr	r2, [pc, #196]	@ (80085e0 <Vending_Machine_PrepareAnnouncePacket+0x1b0>)
 800851c:	4931      	ldr	r1, [pc, #196]	@ (80085e4 <Vending_Machine_PrepareAnnouncePacket+0x1b4>)
 800851e:	481f      	ldr	r0, [pc, #124]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008520:	f7fd ffd2 	bl	80064c8 <jwObj_string>
			jwEnd(&jPacket);
 8008524:	481d      	ldr	r0, [pc, #116]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008526:	f7fd ff8f 	bl	8006448 <jwEnd>
			jwObj_object(&jPacket, "ND");
 800852a:	492f      	ldr	r1, [pc, #188]	@ (80085e8 <Vending_Machine_PrepareAnnouncePacket+0x1b8>)
 800852c:	481b      	ldr	r0, [pc, #108]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800852e:	f7fe f816 	bl	800655e <jwObj_object>
				jwObj_string(&jPacket, "GFW", "A7672M6_V1.11.1");
 8008532:	4a2e      	ldr	r2, [pc, #184]	@ (80085ec <Vending_Machine_PrepareAnnouncePacket+0x1bc>)
 8008534:	492e      	ldr	r1, [pc, #184]	@ (80085f0 <Vending_Machine_PrepareAnnouncePacket+0x1c0>)
 8008536:	4819      	ldr	r0, [pc, #100]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008538:	f7fd ffc6 	bl	80064c8 <jwObj_string>
				jwObj_string(&jPacket, "IMEI", (char*)deviceName);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	492d      	ldr	r1, [pc, #180]	@ (80085f4 <Vending_Machine_PrepareAnnouncePacket+0x1c4>)
 8008540:	4816      	ldr	r0, [pc, #88]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008542:	f7fd ffc1 	bl	80064c8 <jwObj_string>
				jwObj_string(&jPacket, "CCID", "89914509006607302469");
 8008546:	4a2c      	ldr	r2, [pc, #176]	@ (80085f8 <Vending_Machine_PrepareAnnouncePacket+0x1c8>)
 8008548:	492c      	ldr	r1, [pc, #176]	@ (80085fc <Vending_Machine_PrepareAnnouncePacket+0x1cc>)
 800854a:	4814      	ldr	r0, [pc, #80]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800854c:	f7fd ffbc 	bl	80064c8 <jwObj_string>
				jwObj_int(&jPacket, "NSS", ((*mqttPacketPara.signalStrength)*100)/32);
 8008550:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <Vending_Machine_PrepareAnnouncePacket+0x160>)
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	2364      	movs	r3, #100	@ 0x64
 800855a:	fb02 f303 	mul.w	r3, r2, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	da00      	bge.n	8008564 <Vending_Machine_PrepareAnnouncePacket+0x134>
 8008562:	331f      	adds	r3, #31
 8008564:	115b      	asrs	r3, r3, #5
 8008566:	461a      	mov	r2, r3
 8008568:	4925      	ldr	r1, [pc, #148]	@ (8008600 <Vending_Machine_PrepareAnnouncePacket+0x1d0>)
 800856a:	480c      	ldr	r0, [pc, #48]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800856c:	f7fd ffc1 	bl	80064f2 <jwObj_int>
			jwEnd(&jPacket);
 8008570:	480a      	ldr	r0, [pc, #40]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008572:	f7fd ff69 	bl	8006448 <jwEnd>
		jwEnd(&jPacket);
 8008576:	4809      	ldr	r0, [pc, #36]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 8008578:	f7fd ff66 	bl	8006448 <jwEnd>
    jwClose(&jPacket);
 800857c:	4807      	ldr	r0, [pc, #28]	@ (800859c <Vending_Machine_PrepareAnnouncePacket+0x16c>)
 800857e:	f7fd ff41 	bl	8006404 <jwClose>

}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20003c98 	.word	0x20003c98
 8008590:	20003cc4 	.word	0x20003cc4
 8008594:	20003ccc 	.word	0x20003ccc
 8008598:	20002770 	.word	0x20002770
 800859c:	20002774 	.word	0x20002774
 80085a0:	0800b8d4 	.word	0x0800b8d4
 80085a4:	0800b8d8 	.word	0x0800b8d8
 80085a8:	0800b8dc 	.word	0x0800b8dc
 80085ac:	0800b8e0 	.word	0x0800b8e0
 80085b0:	0800b8e4 	.word	0x0800b8e4
 80085b4:	0800b8ec 	.word	0x0800b8ec
 80085b8:	0800b8f0 	.word	0x0800b8f0
 80085bc:	0800b8f4 	.word	0x0800b8f4
 80085c0:	0800b8f8 	.word	0x0800b8f8
 80085c4:	0800b900 	.word	0x0800b900
 80085c8:	0800b908 	.word	0x0800b908
 80085cc:	0800b90c 	.word	0x0800b90c
 80085d0:	0800b910 	.word	0x0800b910
 80085d4:	0800b924 	.word	0x0800b924
 80085d8:	0800bc04 	.word	0x0800bc04
 80085dc:	0800b928 	.word	0x0800b928
 80085e0:	0800bc18 	.word	0x0800bc18
 80085e4:	0800b92c 	.word	0x0800b92c
 80085e8:	0800b930 	.word	0x0800b930
 80085ec:	0800b934 	.word	0x0800b934
 80085f0:	0800b944 	.word	0x0800b944
 80085f4:	0800b948 	.word	0x0800b948
 80085f8:	0800b950 	.word	0x0800b950
 80085fc:	0800b968 	.word	0x0800b968
 8008600:	0800b970 	.word	0x0800b970

08008604 <Vending_Machine_PrepareAckPacket>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_PrepareAckPacket(void){
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af02      	add	r7, sp, #8
	jsonBuffer = (char*)Uart_Get_Transmit_Buffer();
 800860a:	f7ff fb25 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 800860e:	4603      	mov	r3, r0
 8008610:	4a28      	ldr	r2, [pc, #160]	@ (80086b4 <Vending_Machine_PrepareAckPacket+0xb0>)
 8008612:	6013      	str	r3, [r2, #0]
	ATCMD_A7672_Get_Signal_Strength();
 8008614:	f7fb ffa8 	bl	8004568 <ATCMD_A7672_Get_Signal_Strength>
	ATCMD_A7672_Get_DateTime();
 8008618:	f7fa fb6a 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
	convert_to_epoch(mqttPacketPara.dateTimePtr,&mqttPacketPara.epochTime);
 800861c:	4b26      	ldr	r3, [pc, #152]	@ (80086b8 <Vending_Machine_PrepareAckPacket+0xb4>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4926      	ldr	r1, [pc, #152]	@ (80086bc <Vending_Machine_PrepareAckPacket+0xb8>)
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fd84 	bl	8007130 <convert_to_epoch>
	memset(jsonBuffer,0,500);
 8008628:	4b22      	ldr	r3, [pc, #136]	@ (80086b4 <Vending_Machine_PrepareAckPacket+0xb0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f000 ffa9 	bl	800958a <memset>
	jwOpen(&jPacket, (char*)jsonBuffer, 500, JW_OBJECT, JW_COMPACT);
 8008638:	4b1e      	ldr	r3, [pc, #120]	@ (80086b4 <Vending_Machine_PrepareAckPacket+0xb0>)
 800863a:	6819      	ldr	r1, [r3, #0]
 800863c:	2300      	movs	r3, #0
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	2301      	movs	r3, #1
 8008642:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008646:	481e      	ldr	r0, [pc, #120]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 8008648:	f7fd fea3 	bl	8006392 <jwOpen>
	jwObj_int(&jPacket, "PT", 3);
 800864c:	2203      	movs	r2, #3
 800864e:	491d      	ldr	r1, [pc, #116]	@ (80086c4 <Vending_Machine_PrepareAckPacket+0xc0>)
 8008650:	481b      	ldr	r0, [pc, #108]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 8008652:	f7fd ff4e 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "PSN", g_dispenseRequest.serialNumber);
 8008656:	4b1c      	ldr	r3, [pc, #112]	@ (80086c8 <Vending_Machine_PrepareAckPacket+0xc4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	491b      	ldr	r1, [pc, #108]	@ (80086cc <Vending_Machine_PrepareAckPacket+0xc8>)
 800865e:	4818      	ldr	r0, [pc, #96]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 8008660:	f7fd ff47 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "MSG", "ACK");
 8008664:	4a1a      	ldr	r2, [pc, #104]	@ (80086d0 <Vending_Machine_PrepareAckPacket+0xcc>)
 8008666:	491b      	ldr	r1, [pc, #108]	@ (80086d4 <Vending_Machine_PrepareAckPacket+0xd0>)
 8008668:	4815      	ldr	r0, [pc, #84]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 800866a:	f7fd ff2d 	bl	80064c8 <jwObj_string>
	jwObj_int(&jPacket, "DT", mqttPacketPara.epochTime);
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <Vending_Machine_PrepareAckPacket+0xb4>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	461a      	mov	r2, r3
 8008674:	4918      	ldr	r1, [pc, #96]	@ (80086d8 <Vending_Machine_PrepareAckPacket+0xd4>)
 8008676:	4812      	ldr	r0, [pc, #72]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 8008678:	f7fd ff3b 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "NSS", ((*mqttPacketPara.signalStrength)*100)/32);
 800867c:	4b0e      	ldr	r3, [pc, #56]	@ (80086b8 <Vending_Machine_PrepareAckPacket+0xb4>)
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	2364      	movs	r3, #100	@ 0x64
 8008686:	fb02 f303 	mul.w	r3, r2, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	da00      	bge.n	8008690 <Vending_Machine_PrepareAckPacket+0x8c>
 800868e:	331f      	adds	r3, #31
 8008690:	115b      	asrs	r3, r3, #5
 8008692:	461a      	mov	r2, r3
 8008694:	4911      	ldr	r1, [pc, #68]	@ (80086dc <Vending_Machine_PrepareAckPacket+0xd8>)
 8008696:	480a      	ldr	r0, [pc, #40]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 8008698:	f7fd ff2b 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "MN", mqttPacketPara.modelName);
 800869c:	4a10      	ldr	r2, [pc, #64]	@ (80086e0 <Vending_Machine_PrepareAckPacket+0xdc>)
 800869e:	4911      	ldr	r1, [pc, #68]	@ (80086e4 <Vending_Machine_PrepareAckPacket+0xe0>)
 80086a0:	4807      	ldr	r0, [pc, #28]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 80086a2:	f7fd ff11 	bl	80064c8 <jwObj_string>
    jwClose(&jPacket);
 80086a6:	4806      	ldr	r0, [pc, #24]	@ (80086c0 <Vending_Machine_PrepareAckPacket+0xbc>)
 80086a8:	f7fd feac 	bl	8006404 <jwClose>

}
 80086ac:	bf00      	nop
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20002770 	.word	0x20002770
 80086b8:	20003cc4 	.word	0x20003cc4
 80086bc:	20003ccc 	.word	0x20003ccc
 80086c0:	20002774 	.word	0x20002774
 80086c4:	0800b8d4 	.word	0x0800b8d4
 80086c8:	20003cac 	.word	0x20003cac
 80086cc:	0800b974 	.word	0x0800b974
 80086d0:	0800b978 	.word	0x0800b978
 80086d4:	0800b97c 	.word	0x0800b97c
 80086d8:	0800b8f0 	.word	0x0800b8f0
 80086dc:	0800b970 	.word	0x0800b970
 80086e0:	20003cd0 	.word	0x20003cd0
 80086e4:	0800b980 	.word	0x0800b980

080086e8 <Vending_Machine_PrepareDispenseStatusPacket>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_PrepareDispenseStatusPacket(void){
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af02      	add	r7, sp, #8

	ATCMD_A7672_Get_DateTime();
 80086ee:	f7fa faff 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
	convert_to_epoch(mqttPacketPara.dateTimePtr,&mqttPacketPara.epochTime);
 80086f2:	4b45      	ldr	r3, [pc, #276]	@ (8008808 <Vending_Machine_PrepareDispenseStatusPacket+0x120>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4945      	ldr	r1, [pc, #276]	@ (800880c <Vending_Machine_PrepareDispenseStatusPacket+0x124>)
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fd19 	bl	8007130 <convert_to_epoch>
	jsonBuffer = (char *)Uart_Get_Transmit_Buffer();
 80086fe:	f7ff faab 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 8008702:	4603      	mov	r3, r0
 8008704:	4a42      	ldr	r2, [pc, #264]	@ (8008810 <Vending_Machine_PrepareDispenseStatusPacket+0x128>)
 8008706:	6013      	str	r3, [r2, #0]
	memset(jsonBuffer,0,500);
 8008708:	4b41      	ldr	r3, [pc, #260]	@ (8008810 <Vending_Machine_PrepareDispenseStatusPacket+0x128>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f000 ff39 	bl	800958a <memset>
	jwOpen(&jPacket, (char*)jsonBuffer, 500, JW_OBJECT, JW_COMPACT);
 8008718:	4b3d      	ldr	r3, [pc, #244]	@ (8008810 <Vending_Machine_PrepareDispenseStatusPacket+0x128>)
 800871a:	6819      	ldr	r1, [r3, #0]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2301      	movs	r3, #1
 8008722:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008726:	483b      	ldr	r0, [pc, #236]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 8008728:	f7fd fe33 	bl	8006392 <jwOpen>
	jwObj_int(&jPacket, "PT", 4);
 800872c:	2204      	movs	r2, #4
 800872e:	493a      	ldr	r1, [pc, #232]	@ (8008818 <Vending_Machine_PrepareDispenseStatusPacket+0x130>)
 8008730:	4838      	ldr	r0, [pc, #224]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 8008732:	f7fd fede 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "MN", mqttPacketPara.modelName);
 8008736:	4a39      	ldr	r2, [pc, #228]	@ (800881c <Vending_Machine_PrepareDispenseStatusPacket+0x134>)
 8008738:	4939      	ldr	r1, [pc, #228]	@ (8008820 <Vending_Machine_PrepareDispenseStatusPacket+0x138>)
 800873a:	4836      	ldr	r0, [pc, #216]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 800873c:	f7fd fec4 	bl	80064c8 <jwObj_string>
	jwObj_int(&jPacket, "PSN", g_dispenseRequest.serialNumber);
 8008740:	4b38      	ldr	r3, [pc, #224]	@ (8008824 <Vending_Machine_PrepareDispenseStatusPacket+0x13c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	4938      	ldr	r1, [pc, #224]	@ (8008828 <Vending_Machine_PrepareDispenseStatusPacket+0x140>)
 8008748:	4832      	ldr	r0, [pc, #200]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 800874a:	f7fd fed2 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "DT", mqttPacketPara.epochTime);
 800874e:	4b2e      	ldr	r3, [pc, #184]	@ (8008808 <Vending_Machine_PrepareDispenseStatusPacket+0x120>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	461a      	mov	r2, r3
 8008754:	4935      	ldr	r1, [pc, #212]	@ (800882c <Vending_Machine_PrepareDispenseStatusPacket+0x144>)
 8008756:	482f      	ldr	r0, [pc, #188]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 8008758:	f7fd fecb 	bl	80064f2 <jwObj_int>
	if(g_sysHealth.dispenseStatus == DISPENSE_SUCCESS){
 800875c:	4b34      	ldr	r3, [pc, #208]	@ (8008830 <Vending_Machine_PrepareDispenseStatusPacket+0x148>)
 800875e:	7c5b      	ldrb	r3, [r3, #17]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d105      	bne.n	8008770 <Vending_Machine_PrepareDispenseStatusPacket+0x88>
		jwObj_string(&jPacket, "MSG", "SUCCESS");
 8008764:	4a33      	ldr	r2, [pc, #204]	@ (8008834 <Vending_Machine_PrepareDispenseStatusPacket+0x14c>)
 8008766:	4934      	ldr	r1, [pc, #208]	@ (8008838 <Vending_Machine_PrepareDispenseStatusPacket+0x150>)
 8008768:	482a      	ldr	r0, [pc, #168]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 800876a:	f7fd fead 	bl	80064c8 <jwObj_string>
 800876e:	e008      	b.n	8008782 <Vending_Machine_PrepareDispenseStatusPacket+0x9a>
	}
	else if(g_sysHealth.dispenseStatus == DISPENSE_FAILED){
 8008770:	4b2f      	ldr	r3, [pc, #188]	@ (8008830 <Vending_Machine_PrepareDispenseStatusPacket+0x148>)
 8008772:	7c5b      	ldrb	r3, [r3, #17]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <Vending_Machine_PrepareDispenseStatusPacket+0x9a>
		jwObj_string(&jPacket, "MSG", "DISP_FAIL");
 8008778:	4a30      	ldr	r2, [pc, #192]	@ (800883c <Vending_Machine_PrepareDispenseStatusPacket+0x154>)
 800877a:	492f      	ldr	r1, [pc, #188]	@ (8008838 <Vending_Machine_PrepareDispenseStatusPacket+0x150>)
 800877c:	4825      	ldr	r0, [pc, #148]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 800877e:	f7fd fea3 	bl	80064c8 <jwObj_string>
	}
		jwObj_array(&jPacket, "MM");
 8008782:	492f      	ldr	r1, [pc, #188]	@ (8008840 <Vending_Machine_PrepareDispenseStatusPacket+0x158>)
 8008784:	4823      	ldr	r0, [pc, #140]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 8008786:	f7fd ff02 	bl	800658e <jwObj_array>
			jwArr_int(&jPacket, measurementMatrix[SENSOR_PULSE_COUNT]);
 800878a:	4b2e      	ldr	r3, [pc, #184]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	4820      	ldr	r0, [pc, #128]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 8008792:	f7fd ff27 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[MOTOR_RUN_PULSE_COUNT]);
 8008796:	4b2b      	ldr	r3, [pc, #172]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	481d      	ldr	r0, [pc, #116]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 800879e:	f7fd ff21 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_TRIGGER]);
 80087a2:	4b28      	ldr	r3, [pc, #160]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	4619      	mov	r1, r3
 80087a8:	481a      	ldr	r0, [pc, #104]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087aa:	f7fd ff1b 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_RETRIES]);
 80087ae:	4b25      	ldr	r3, [pc, #148]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4619      	mov	r1, r3
 80087b4:	4817      	ldr	r0, [pc, #92]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087b6:	f7fd ff15 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_RETRY_TRIGGER]);
 80087ba:	4b22      	ldr	r3, [pc, #136]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	4619      	mov	r1, r3
 80087c0:	4814      	ldr	r0, [pc, #80]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087c2:	f7fd ff0f 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_FIRST_TRIGGER]);
 80087c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008844 <Vending_Machine_PrepareDispenseStatusPacket+0x15c>)
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	4619      	mov	r1, r3
 80087cc:	4811      	ldr	r0, [pc, #68]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087ce:	f7fd ff09 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, g_lastDispenseRequest.requestTime);
 80087d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <Vending_Machine_PrepareDispenseStatusPacket+0x160>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	4619      	mov	r1, r3
 80087d8:	480e      	ldr	r0, [pc, #56]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087da:	f7fd ff03 	bl	80065e4 <jwArr_int>
			jwArr_double(&jPacket, g_sysHealth.bat_voltage);
 80087de:	4b14      	ldr	r3, [pc, #80]	@ (8008830 <Vending_Machine_PrepareDispenseStatusPacket+0x148>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f7 fe5e 	bl	80004a4 <__aeabi_f2d>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	ec43 2b10 	vmov	d0, r2, r3
 80087f0:	4808      	ldr	r0, [pc, #32]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087f2:	f7fd ff0c 	bl	800660e <jwArr_double>
		jwEnd(&jPacket);
 80087f6:	4807      	ldr	r0, [pc, #28]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087f8:	f7fd fe26 	bl	8006448 <jwEnd>
    jwClose(&jPacket);
 80087fc:	4805      	ldr	r0, [pc, #20]	@ (8008814 <Vending_Machine_PrepareDispenseStatusPacket+0x12c>)
 80087fe:	f7fd fe01 	bl	8006404 <jwClose>
}
 8008802:	bf00      	nop
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20003cc4 	.word	0x20003cc4
 800880c:	20003ccc 	.word	0x20003ccc
 8008810:	20002770 	.word	0x20002770
 8008814:	20002774 	.word	0x20002774
 8008818:	0800b8d4 	.word	0x0800b8d4
 800881c:	20003cd0 	.word	0x20003cd0
 8008820:	0800b980 	.word	0x0800b980
 8008824:	20003cac 	.word	0x20003cac
 8008828:	0800b974 	.word	0x0800b974
 800882c:	0800b8f0 	.word	0x0800b8f0
 8008830:	20003c98 	.word	0x20003c98
 8008834:	0800b984 	.word	0x0800b984
 8008838:	0800b97c 	.word	0x0800b97c
 800883c:	0800b98c 	.word	0x0800b98c
 8008840:	0800b908 	.word	0x0800b908
 8008844:	20003cf0 	.word	0x20003cf0
 8008848:	20003cb8 	.word	0x20003cb8

0800884c <Vending_Machine_PrepareStatusPacket>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_PrepareStatusPacket(void){
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af02      	add	r7, sp, #8

	ATCMD_A7672_Get_DateTime();
 8008852:	f7fa fa4d 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
	ATCMD_A7672_Get_Signal_Strength();
 8008856:	f7fb fe87 	bl	8004568 <ATCMD_A7672_Get_Signal_Strength>
	g_sysHealth.bat_voltage = ADC1_Read_battery_value();
 800885a:	f7fe fac7 	bl	8006dec <ADC1_Read_battery_value>
 800885e:	eef0 7a40 	vmov.f32	s15, s0
 8008862:	4b5b      	ldr	r3, [pc, #364]	@ (80089d0 <Vending_Machine_PrepareStatusPacket+0x184>)
 8008864:	edc3 7a02 	vstr	s15, [r3, #8]
	convert_to_epoch(mqttPacketPara.dateTimePtr,&mqttPacketPara.epochTime);
 8008868:	4b5a      	ldr	r3, [pc, #360]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	495a      	ldr	r1, [pc, #360]	@ (80089d8 <Vending_Machine_PrepareStatusPacket+0x18c>)
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fc5e 	bl	8007130 <convert_to_epoch>
	jsonBuffer = (char*)Uart_Get_Transmit_Buffer();
 8008874:	f7ff f9f0 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 8008878:	4603      	mov	r3, r0
 800887a:	4a58      	ldr	r2, [pc, #352]	@ (80089dc <Vending_Machine_PrepareStatusPacket+0x190>)
 800887c:	6013      	str	r3, [r2, #0]
	memset(jsonBuffer,'\0',500);
 800887e:	4b57      	ldr	r3, [pc, #348]	@ (80089dc <Vending_Machine_PrepareStatusPacket+0x190>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fe7e 	bl	800958a <memset>
	jwOpen(&jPacket, (char*)jsonBuffer, 500, JW_OBJECT, JW_COMPACT);
 800888e:	4b53      	ldr	r3, [pc, #332]	@ (80089dc <Vending_Machine_PrepareStatusPacket+0x190>)
 8008890:	6819      	ldr	r1, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	2301      	movs	r3, #1
 8008898:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800889c:	4850      	ldr	r0, [pc, #320]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800889e:	f7fd fd78 	bl	8006392 <jwOpen>
	jwObj_int(&jPacket, "PT", 1);
 80088a2:	2201      	movs	r2, #1
 80088a4:	494f      	ldr	r1, [pc, #316]	@ (80089e4 <Vending_Machine_PrepareStatusPacket+0x198>)
 80088a6:	484e      	ldr	r0, [pc, #312]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088a8:	f7fd fe23 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "MI", mqttPacketPara.statusMessageIndex);
 80088ac:	4b49      	ldr	r3, [pc, #292]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	494d      	ldr	r1, [pc, #308]	@ (80089e8 <Vending_Machine_PrepareStatusPacket+0x19c>)
 80088b4:	484a      	ldr	r0, [pc, #296]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088b6:	f7fd fe1c 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "UD", mqttPacketPara.modelName+4);
 80088ba:	4b4c      	ldr	r3, [pc, #304]	@ (80089ec <Vending_Machine_PrepareStatusPacket+0x1a0>)
 80088bc:	461a      	mov	r2, r3
 80088be:	494c      	ldr	r1, [pc, #304]	@ (80089f0 <Vending_Machine_PrepareStatusPacket+0x1a4>)
 80088c0:	4847      	ldr	r0, [pc, #284]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088c2:	f7fd fe01 	bl	80064c8 <jwObj_string>
	jwObj_string(&jPacket, "UI", mqttPacketPara.modelName+4);
 80088c6:	4b49      	ldr	r3, [pc, #292]	@ (80089ec <Vending_Machine_PrepareStatusPacket+0x1a0>)
 80088c8:	461a      	mov	r2, r3
 80088ca:	494a      	ldr	r1, [pc, #296]	@ (80089f4 <Vending_Machine_PrepareStatusPacket+0x1a8>)
 80088cc:	4844      	ldr	r0, [pc, #272]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088ce:	f7fd fdfb 	bl	80064c8 <jwObj_string>
	jwObj_int(&jPacket, "DT", mqttPacketPara.epochTime);
 80088d2:	4b40      	ldr	r3, [pc, #256]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	461a      	mov	r2, r3
 80088d8:	4947      	ldr	r1, [pc, #284]	@ (80089f8 <Vending_Machine_PrepareStatusPacket+0x1ac>)
 80088da:	4841      	ldr	r0, [pc, #260]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088dc:	f7fd fe09 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "SD", 0);
 80088e0:	2200      	movs	r2, #0
 80088e2:	4946      	ldr	r1, [pc, #280]	@ (80089fc <Vending_Machine_PrepareStatusPacket+0x1b0>)
 80088e4:	483e      	ldr	r0, [pc, #248]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80088e6:	f7fd fe04 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "NSS", ((*mqttPacketPara.signalStrength)*100)/32);
 80088ea:	4b3a      	ldr	r3, [pc, #232]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	2364      	movs	r3, #100	@ 0x64
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da00      	bge.n	80088fe <Vending_Machine_PrepareStatusPacket+0xb2>
 80088fc:	331f      	adds	r3, #31
 80088fe:	115b      	asrs	r3, r3, #5
 8008900:	461a      	mov	r2, r3
 8008902:	493f      	ldr	r1, [pc, #252]	@ (8008a00 <Vending_Machine_PrepareStatusPacket+0x1b4>)
 8008904:	4836      	ldr	r0, [pc, #216]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008906:	f7fd fdf4 	bl	80064f2 <jwObj_int>
	jwObj_object(&jPacket, "MP");
 800890a:	493e      	ldr	r1, [pc, #248]	@ (8008a04 <Vending_Machine_PrepareStatusPacket+0x1b8>)
 800890c:	4834      	ldr	r0, [pc, #208]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800890e:	f7fd fe26 	bl	800655e <jwObj_object>
		jwObj_int(&jPacket, "MT", 1);
 8008912:	2201      	movs	r2, #1
 8008914:	493c      	ldr	r1, [pc, #240]	@ (8008a08 <Vending_Machine_PrepareStatusPacket+0x1bc>)
 8008916:	4832      	ldr	r0, [pc, #200]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008918:	f7fd fdeb 	bl	80064f2 <jwObj_int>
		jwObj_int(&jPacket, "MD", 0);
 800891c:	2200      	movs	r2, #0
 800891e:	493b      	ldr	r1, [pc, #236]	@ (8008a0c <Vending_Machine_PrepareStatusPacket+0x1c0>)
 8008920:	482f      	ldr	r0, [pc, #188]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008922:	f7fd fde6 	bl	80064f2 <jwObj_int>
		jwObj_array(&jPacket, "MM");
 8008926:	493a      	ldr	r1, [pc, #232]	@ (8008a10 <Vending_Machine_PrepareStatusPacket+0x1c4>)
 8008928:	482d      	ldr	r0, [pc, #180]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800892a:	f7fd fe30 	bl	800658e <jwObj_array>
			jwArr_int(&jPacket, measurementMatrix[SENSOR_PULSE_COUNT]);
 800892e:	4b39      	ldr	r3, [pc, #228]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4619      	mov	r1, r3
 8008934:	482a      	ldr	r0, [pc, #168]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008936:	f7fd fe55 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[MOTOR_RUN_PULSE_COUNT]);
 800893a:	4b36      	ldr	r3, [pc, #216]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	4619      	mov	r1, r3
 8008940:	4827      	ldr	r0, [pc, #156]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008942:	f7fd fe4f 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_TRIGGER]);
 8008946:	4b33      	ldr	r3, [pc, #204]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	4619      	mov	r1, r3
 800894c:	4824      	ldr	r0, [pc, #144]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800894e:	f7fd fe49 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_RETRIES]);
 8008952:	4b30      	ldr	r3, [pc, #192]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	4619      	mov	r1, r3
 8008958:	4821      	ldr	r0, [pc, #132]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800895a:	f7fd fe43 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_RETRY_TRIGGER]);
 800895e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	4619      	mov	r1, r3
 8008964:	481e      	ldr	r0, [pc, #120]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008966:	f7fd fe3d 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, measurementMatrix[TOTAL_FIRST_TRIGGER]);
 800896a:	4b2a      	ldr	r3, [pc, #168]	@ (8008a14 <Vending_Machine_PrepareStatusPacket+0x1c8>)
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	4619      	mov	r1, r3
 8008970:	481b      	ldr	r0, [pc, #108]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008972:	f7fd fe37 	bl	80065e4 <jwArr_int>
			jwArr_int(&jPacket, g_lastDispenseRequest.requestTime);
 8008976:	4b28      	ldr	r3, [pc, #160]	@ (8008a18 <Vending_Machine_PrepareStatusPacket+0x1cc>)
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4619      	mov	r1, r3
 800897c:	4818      	ldr	r0, [pc, #96]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800897e:	f7fd fe31 	bl	80065e4 <jwArr_int>
			jwArr_double(&jPacket, g_sysHealth.bat_voltage);
 8008982:	4b13      	ldr	r3, [pc, #76]	@ (80089d0 <Vending_Machine_PrepareStatusPacket+0x184>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 fd8c 	bl	80004a4 <__aeabi_f2d>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	ec43 2b10 	vmov	d0, r2, r3
 8008994:	4812      	ldr	r0, [pc, #72]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 8008996:	f7fd fe3a 	bl	800660e <jwArr_double>
		jwEnd(&jPacket);
 800899a:	4811      	ldr	r0, [pc, #68]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 800899c:	f7fd fd54 	bl	8006448 <jwEnd>
		jwObj_int(&jPacket, "DL", 3);
 80089a0:	2203      	movs	r2, #3
 80089a2:	491e      	ldr	r1, [pc, #120]	@ (8008a1c <Vending_Machine_PrepareStatusPacket+0x1d0>)
 80089a4:	480e      	ldr	r0, [pc, #56]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80089a6:	f7fd fda4 	bl	80064f2 <jwObj_int>
		jwObj_string(&jPacket, "MN", mqttPacketPara.modelName);
 80089aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008a20 <Vending_Machine_PrepareStatusPacket+0x1d4>)
 80089ac:	491d      	ldr	r1, [pc, #116]	@ (8008a24 <Vending_Machine_PrepareStatusPacket+0x1d8>)
 80089ae:	480c      	ldr	r0, [pc, #48]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80089b0:	f7fd fd8a 	bl	80064c8 <jwObj_string>
		jwEnd(&jPacket);
 80089b4:	480a      	ldr	r0, [pc, #40]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80089b6:	f7fd fd47 	bl	8006448 <jwEnd>
    jwClose(&jPacket);
 80089ba:	4809      	ldr	r0, [pc, #36]	@ (80089e0 <Vending_Machine_PrepareStatusPacket+0x194>)
 80089bc:	f7fd fd22 	bl	8006404 <jwClose>
    mqttPacketPara.statusMessageIndex++;
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	4a03      	ldr	r2, [pc, #12]	@ (80089d4 <Vending_Machine_PrepareStatusPacket+0x188>)
 80089c8:	6013      	str	r3, [r2, #0]
}
 80089ca:	bf00      	nop
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20003c98 	.word	0x20003c98
 80089d4:	20003cc4 	.word	0x20003cc4
 80089d8:	20003ccc 	.word	0x20003ccc
 80089dc:	20002770 	.word	0x20002770
 80089e0:	20002774 	.word	0x20002774
 80089e4:	0800b8d4 	.word	0x0800b8d4
 80089e8:	0800b8d8 	.word	0x0800b8d8
 80089ec:	20003cd4 	.word	0x20003cd4
 80089f0:	0800b8dc 	.word	0x0800b8dc
 80089f4:	0800b8e0 	.word	0x0800b8e0
 80089f8:	0800b8f0 	.word	0x0800b8f0
 80089fc:	0800b998 	.word	0x0800b998
 8008a00:	0800b970 	.word	0x0800b970
 8008a04:	0800b99c 	.word	0x0800b99c
 8008a08:	0800b9a0 	.word	0x0800b9a0
 8008a0c:	0800b9a4 	.word	0x0800b9a4
 8008a10:	0800b908 	.word	0x0800b908
 8008a14:	20003cf0 	.word	0x20003cf0
 8008a18:	20003cb8 	.word	0x20003cb8
 8008a1c:	0800b9a8 	.word	0x0800b9a8
 8008a20:	20003cd0 	.word	0x20003cd0
 8008a24:	0800b980 	.word	0x0800b980

08008a28 <Vending_Machine_PrepareChannelChangeAckPacket>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_PrepareChannelChangeAckPacket(void){
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af02      	add	r7, sp, #8

	ATCMD_A7672_Get_DateTime();
 8008a2e:	f7fa f95f 	bl	8002cf0 <ATCMD_A7672_Get_DateTime>
	convert_to_epoch(mqttPacketPara.dateTimePtr,&mqttPacketPara.epochTime);
 8008a32:	4b2a      	ldr	r3, [pc, #168]	@ (8008adc <Vending_Machine_PrepareChannelChangeAckPacket+0xb4>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	492a      	ldr	r1, [pc, #168]	@ (8008ae0 <Vending_Machine_PrepareChannelChangeAckPacket+0xb8>)
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fb79 	bl	8007130 <convert_to_epoch>

	jsonBuffer = (char*)Uart_Get_Transmit_Buffer();
 8008a3e:	f7ff f90b 	bl	8007c58 <Uart_Get_Transmit_Buffer>
 8008a42:	4603      	mov	r3, r0
 8008a44:	4a27      	ldr	r2, [pc, #156]	@ (8008ae4 <Vending_Machine_PrepareChannelChangeAckPacket+0xbc>)
 8008a46:	6013      	str	r3, [r2, #0]
	memset(jsonBuffer,'\0',500);
 8008a48:	4b26      	ldr	r3, [pc, #152]	@ (8008ae4 <Vending_Machine_PrepareChannelChangeAckPacket+0xbc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008a50:	2100      	movs	r1, #0
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fd99 	bl	800958a <memset>

	jwOpen(&jPacket, (char*)jsonBuffer, 500, JW_OBJECT, JW_COMPACT);
 8008a58:	4b22      	ldr	r3, [pc, #136]	@ (8008ae4 <Vending_Machine_PrepareChannelChangeAckPacket+0xbc>)
 8008a5a:	6819      	ldr	r1, [r3, #0]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	2301      	movs	r3, #1
 8008a62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008a66:	4820      	ldr	r0, [pc, #128]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008a68:	f7fd fc93 	bl	8006392 <jwOpen>
	jwObj_int(&jPacket, "PT", 5);
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	491f      	ldr	r1, [pc, #124]	@ (8008aec <Vending_Machine_PrepareChannelChangeAckPacket+0xc4>)
 8008a70:	481d      	ldr	r0, [pc, #116]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008a72:	f7fd fd3e 	bl	80064f2 <jwObj_int>
	jwObj_int(&jPacket, "MI", 1);
 8008a76:	2201      	movs	r2, #1
 8008a78:	491d      	ldr	r1, [pc, #116]	@ (8008af0 <Vending_Machine_PrepareChannelChangeAckPacket+0xc8>)
 8008a7a:	481b      	ldr	r0, [pc, #108]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008a7c:	f7fd fd39 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "MN", mqttPacketPara.modelName);
 8008a80:	4a1c      	ldr	r2, [pc, #112]	@ (8008af4 <Vending_Machine_PrepareChannelChangeAckPacket+0xcc>)
 8008a82:	491d      	ldr	r1, [pc, #116]	@ (8008af8 <Vending_Machine_PrepareChannelChangeAckPacket+0xd0>)
 8008a84:	4818      	ldr	r0, [pc, #96]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008a86:	f7fd fd1f 	bl	80064c8 <jwObj_string>
	jwObj_int(&jPacket, "DT", mqttPacketPara.epochTime);
 8008a8a:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <Vending_Machine_PrepareChannelChangeAckPacket+0xb4>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	491a      	ldr	r1, [pc, #104]	@ (8008afc <Vending_Machine_PrepareChannelChangeAckPacket+0xd4>)
 8008a92:	4815      	ldr	r0, [pc, #84]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008a94:	f7fd fd2d 	bl	80064f2 <jwObj_int>
	jwObj_string(&jPacket, "run", mqttPacketPara.modelName+4);
 8008a98:	4b19      	ldr	r3, [pc, #100]	@ (8008b00 <Vending_Machine_PrepareChannelChangeAckPacket+0xd8>)
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4919      	ldr	r1, [pc, #100]	@ (8008b04 <Vending_Machine_PrepareChannelChangeAckPacket+0xdc>)
 8008a9e:	4812      	ldr	r0, [pc, #72]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008aa0:	f7fd fd12 	bl	80064c8 <jwObj_string>
	jwObj_string(&jPacket, "rap", "WiRun_UserConfig");
 8008aa4:	4a18      	ldr	r2, [pc, #96]	@ (8008b08 <Vending_Machine_PrepareChannelChangeAckPacket+0xe0>)
 8008aa6:	4919      	ldr	r1, [pc, #100]	@ (8008b0c <Vending_Machine_PrepareChannelChangeAckPacket+0xe4>)
 8008aa8:	480f      	ldr	r0, [pc, #60]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008aaa:	f7fd fd0d 	bl	80064c8 <jwObj_string>
	jwObj_object(&jPacket, "CP");
 8008aae:	4918      	ldr	r1, [pc, #96]	@ (8008b10 <Vending_Machine_PrepareChannelChangeAckPacket+0xe8>)
 8008ab0:	480d      	ldr	r0, [pc, #52]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008ab2:	f7fd fd54 	bl	800655e <jwObj_object>
		jwObj_int(&jPacket, "mst", 255);
 8008ab6:	22ff      	movs	r2, #255	@ 0xff
 8008ab8:	4916      	ldr	r1, [pc, #88]	@ (8008b14 <Vending_Machine_PrepareChannelChangeAckPacket+0xec>)
 8008aba:	480b      	ldr	r0, [pc, #44]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008abc:	f7fd fd19 	bl	80064f2 <jwObj_int>
		jwObj_string(&jPacket, "topic", g_channelToSwitch);
 8008ac0:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <Vending_Machine_PrepareChannelChangeAckPacket+0xf0>)
 8008ac2:	4916      	ldr	r1, [pc, #88]	@ (8008b1c <Vending_Machine_PrepareChannelChangeAckPacket+0xf4>)
 8008ac4:	4808      	ldr	r0, [pc, #32]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008ac6:	f7fd fcff 	bl	80064c8 <jwObj_string>
		jwEnd(&jPacket);
 8008aca:	4807      	ldr	r0, [pc, #28]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008acc:	f7fd fcbc 	bl	8006448 <jwEnd>
    jwClose(&jPacket);
 8008ad0:	4805      	ldr	r0, [pc, #20]	@ (8008ae8 <Vending_Machine_PrepareChannelChangeAckPacket+0xc0>)
 8008ad2:	f7fd fc97 	bl	8006404 <jwClose>
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20003cc4 	.word	0x20003cc4
 8008ae0:	20003ccc 	.word	0x20003ccc
 8008ae4:	20002770 	.word	0x20002770
 8008ae8:	20002774 	.word	0x20002774
 8008aec:	0800b8d4 	.word	0x0800b8d4
 8008af0:	0800b8d8 	.word	0x0800b8d8
 8008af4:	20003cd0 	.word	0x20003cd0
 8008af8:	0800b980 	.word	0x0800b980
 8008afc:	0800b8f0 	.word	0x0800b8f0
 8008b00:	20003cd4 	.word	0x20003cd4
 8008b04:	0800b9ac 	.word	0x0800b9ac
 8008b08:	0800b9b0 	.word	0x0800b9b0
 8008b0c:	0800b9c4 	.word	0x0800b9c4
 8008b10:	0800b9c8 	.word	0x0800b9c8
 8008b14:	0800b9cc 	.word	0x0800b9cc
 8008b18:	200000cc 	.word	0x200000cc
 8008b1c:	0800b9d0 	.word	0x0800b9d0

08008b20 <parseMessageFromServer>:
* </table><br><br>
* <hr>
*
*******************************************************************************/

void parseMessageFromServer(uint8_t *arg){
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	struct jsonReadToken *tempToken;
	unsigned char err = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t packetType = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73bb      	strb	r3, [r7, #14]
	memset(jsonBuffer,0,500);
 8008b30:	4b7c      	ldr	r3, [pc, #496]	@ (8008d24 <parseMessageFromServer+0x204>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fd25 	bl	800958a <memset>
	memset(&jreadPacket,0,sizeof(jreadPacket));
 8008b40:	f241 42bc 	movw	r2, #5308	@ 0x14bc
 8008b44:	2100      	movs	r1, #0
 8008b46:	4878      	ldr	r0, [pc, #480]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008b48:	f000 fd1f 	bl	800958a <memset>
	err = JSONStructInit(&jreadPacket, (char *)arg);
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	4876      	ldr	r0, [pc, #472]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008b50:	f7fc ff36 	bl	80059c0 <JSONStructInit>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
	if(err != JDATA_NOK){
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d009      	beq.n	8008b72 <parseMessageFromServer+0x52>
		while(jreadPacket.parserStatus!=JSON_END)
 8008b5e:	e004      	b.n	8008b6a <parseMessageFromServer+0x4a>
			err = JSONParseData(&jreadPacket);
 8008b60:	4871      	ldr	r0, [pc, #452]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008b62:	f7fc ff7b 	bl	8005a5c <JSONParseData>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73fb      	strb	r3, [r7, #15]
		while(jreadPacket.parserStatus!=JSON_END)
 8008b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008b6c:	7b1b      	ldrb	r3, [r3, #12]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d1f6      	bne.n	8008b60 <parseMessageFromServer+0x40>
	}
	jPacketToken = SearchToken(&jreadPacket, "\"PT\"");
 8008b72:	496e      	ldr	r1, [pc, #440]	@ (8008d2c <parseMessageFromServer+0x20c>)
 8008b74:	486c      	ldr	r0, [pc, #432]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008b76:	f7fd fbc1 	bl	80062fc <SearchToken>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4a6c      	ldr	r2, [pc, #432]	@ (8008d30 <parseMessageFromServer+0x210>)
 8008b7e:	6013      	str	r3, [r2, #0]
	if(jPacketToken != NULL){
 8008b80:	4b6b      	ldr	r3, [pc, #428]	@ (8008d30 <parseMessageFromServer+0x210>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80c9 	beq.w	8008d1c <parseMessageFromServer+0x1fc>
		packetType = Convert_String_To_Integer((uint8_t *)&jPacketToken->jsonValue);
 8008b8a:	4b69      	ldr	r3, [pc, #420]	@ (8008d30 <parseMessageFromServer+0x210>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3384      	adds	r3, #132	@ 0x84
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe f98b 	bl	8006eac <Convert_String_To_Integer>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]
		switch(packetType){
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b84      	cmp	r3, #132	@ 0x84
 8008b9e:	d020      	beq.n	8008be2 <parseMessageFromServer+0xc2>
 8008ba0:	2b84      	cmp	r3, #132	@ 0x84
 8008ba2:	f300 80b5 	bgt.w	8008d10 <parseMessageFromServer+0x1f0>
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	dc18      	bgt.n	8008bdc <parseMessageFromServer+0xbc>
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	f2c0 80b0 	blt.w	8008d10 <parseMessageFromServer+0x1f0>
 8008bb0:	3b02      	subs	r3, #2
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	f200 80ac 	bhi.w	8008d10 <parseMessageFromServer+0x1f0>
 8008bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc0 <parseMessageFromServer+0xa0>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008be3 	.word	0x08008be3
 8008bc4:	08008d11 	.word	0x08008d11
 8008bc8:	08008d11 	.word	0x08008d11
 8008bcc:	08008c3d 	.word	0x08008c3d
 8008bd0:	08008ca3 	.word	0x08008ca3
 8008bd4:	08008cc5 	.word	0x08008cc5
 8008bd8:	08008ce9 	.word	0x08008ce9
 8008bdc:	2b80      	cmp	r3, #128	@ 0x80
 8008bde:	d060      	beq.n	8008ca2 <parseMessageFromServer+0x182>
			memset(g_requestedFWVersion, '\0', sizeof(g_requestedFWVersion));
			strcpy(g_requestedFWVersion, tempToken->jsonValue);
			g_requestType = REQ_TYPE_OTA_START;
			break;
		default:
			break;
 8008be0:	e096      	b.n	8008d10 <parseMessageFromServer+0x1f0>
			tempToken = SearchToken(&jreadPacket, "\"REQT\"");
 8008be2:	4954      	ldr	r1, [pc, #336]	@ (8008d34 <parseMessageFromServer+0x214>)
 8008be4:	4850      	ldr	r0, [pc, #320]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008be6:	f7fd fb89 	bl	80062fc <SearchToken>
 8008bea:	60b8      	str	r0, [r7, #8]
			g_dispenseRequest.requestTime = Convert_String_To_Integer32((uint8_t *)&tempToken->jsonValue);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3384      	adds	r3, #132	@ 0x84
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe f999 	bl	8006f28 <Convert_String_To_Integer32>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8008d38 <parseMessageFromServer+0x218>)
 8008bfa:	6053      	str	r3, [r2, #4]
			tempToken = SearchToken(&jreadPacket, "\"VAL\"");
 8008bfc:	494f      	ldr	r1, [pc, #316]	@ (8008d3c <parseMessageFromServer+0x21c>)
 8008bfe:	484a      	ldr	r0, [pc, #296]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c00:	f7fd fb7c 	bl	80062fc <SearchToken>
 8008c04:	60b8      	str	r0, [r7, #8]
			g_dispenseRequest.val = Convert_String_To_Integer((uint8_t *)&tempToken->jsonValue);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3384      	adds	r3, #132	@ 0x84
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe f94e 	bl	8006eac <Convert_String_To_Integer>
 8008c10:	4603      	mov	r3, r0
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	4b48      	ldr	r3, [pc, #288]	@ (8008d38 <parseMessageFromServer+0x218>)
 8008c16:	721a      	strb	r2, [r3, #8]
			tempToken = SearchToken(&jreadPacket, "\"PSN\"");
 8008c18:	4949      	ldr	r1, [pc, #292]	@ (8008d40 <parseMessageFromServer+0x220>)
 8008c1a:	4843      	ldr	r0, [pc, #268]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c1c:	f7fd fb6e 	bl	80062fc <SearchToken>
 8008c20:	60b8      	str	r0, [r7, #8]
			g_dispenseRequest.serialNumber = Convert_String_To_Integer((uint8_t *)&tempToken->jsonValue);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3384      	adds	r3, #132	@ 0x84
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe f940 	bl	8006eac <Convert_String_To_Integer>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4b41      	ldr	r3, [pc, #260]	@ (8008d38 <parseMessageFromServer+0x218>)
 8008c32:	601a      	str	r2, [r3, #0]
			g_requestType = REQ_TYPE_DIPSENSE;
 8008c34:	4b43      	ldr	r3, [pc, #268]	@ (8008d44 <parseMessageFromServer+0x224>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
			break;
 8008c3a:	e06c      	b.n	8008d16 <parseMessageFromServer+0x1f6>
			tempToken = SearchToken(&jreadPacket, "\"CP\"");
 8008c3c:	4942      	ldr	r1, [pc, #264]	@ (8008d48 <parseMessageFromServer+0x228>)
 8008c3e:	483a      	ldr	r0, [pc, #232]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c40:	f7fd fb5c 	bl	80062fc <SearchToken>
 8008c44:	60b8      	str	r0, [r7, #8]
			memset(&jreadPacket,'\0',sizeof(jreadPacket));
 8008c46:	f241 42bc 	movw	r2, #5308	@ 0x14bc
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4836      	ldr	r0, [pc, #216]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c4e:	f000 fc9c 	bl	800958a <memset>
			err = JSONStructInit(&jreadPacket, tempToken->jsonValue);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3384      	adds	r3, #132	@ 0x84
 8008c56:	4619      	mov	r1, r3
 8008c58:	4833      	ldr	r0, [pc, #204]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c5a:	f7fc feb1 	bl	80059c0 <JSONStructInit>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73fb      	strb	r3, [r7, #15]
			if(err != JDATA_NOK){
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d009      	beq.n	8008c7c <parseMessageFromServer+0x15c>
			while(jreadPacket.parserStatus!=JSON_END)
 8008c68:	e004      	b.n	8008c74 <parseMessageFromServer+0x154>
				err = JSONParseData(&jreadPacket);
 8008c6a:	482f      	ldr	r0, [pc, #188]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c6c:	f7fc fef6 	bl	8005a5c <JSONParseData>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
			while(jreadPacket.parserStatus!=JSON_END)
 8008c74:	4b2c      	ldr	r3, [pc, #176]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c76:	7b1b      	ldrb	r3, [r3, #12]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d1f6      	bne.n	8008c6a <parseMessageFromServer+0x14a>
			tempToken = SearchToken(&jreadPacket, "\"topic\"");
 8008c7c:	4933      	ldr	r1, [pc, #204]	@ (8008d4c <parseMessageFromServer+0x22c>)
 8008c7e:	482a      	ldr	r0, [pc, #168]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008c80:	f7fd fb3c 	bl	80062fc <SearchToken>
 8008c84:	60b8      	str	r0, [r7, #8]
			memset(g_channelToSwitch, '\0', 10);
 8008c86:	220a      	movs	r2, #10
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4831      	ldr	r0, [pc, #196]	@ (8008d50 <parseMessageFromServer+0x230>)
 8008c8c:	f000 fc7d 	bl	800958a <memset>
			strcpy(g_channelToSwitch, tempToken->jsonValue);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3384      	adds	r3, #132	@ 0x84
 8008c94:	4619      	mov	r1, r3
 8008c96:	482e      	ldr	r0, [pc, #184]	@ (8008d50 <parseMessageFromServer+0x230>)
 8008c98:	f000 fce4 	bl	8009664 <strcpy>
			g_requestType = REQ_TYPE_CHANGE_CHANNEL;
 8008c9c:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <parseMessageFromServer+0x224>)
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	701a      	strb	r2, [r3, #0]
			tempToken = SearchToken(&jreadPacket, "\"reboot\"");
 8008ca2:	492c      	ldr	r1, [pc, #176]	@ (8008d54 <parseMessageFromServer+0x234>)
 8008ca4:	4820      	ldr	r0, [pc, #128]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008ca6:	f7fd fb29 	bl	80062fc <SearchToken>
 8008caa:	60b8      	str	r0, [r7, #8]
			if(Convert_String_To_Integer32((uint8_t *)&tempToken->jsonValue) == 1)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3384      	adds	r3, #132	@ 0x84
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe f939 	bl	8006f28 <Convert_String_To_Integer32>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d12b      	bne.n	8008d14 <parseMessageFromServer+0x1f4>
				g_requestType = REQ_TYPE_REBOOT;
 8008cbc:	4b21      	ldr	r3, [pc, #132]	@ (8008d44 <parseMessageFromServer+0x224>)
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	701a      	strb	r2, [r3, #0]
			break;
 8008cc2:	e027      	b.n	8008d14 <parseMessageFromServer+0x1f4>
			tempToken = SearchToken(&jreadPacket, "\"Dispense_Count\"");
 8008cc4:	4924      	ldr	r1, [pc, #144]	@ (8008d58 <parseMessageFromServer+0x238>)
 8008cc6:	4818      	ldr	r0, [pc, #96]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008cc8:	f7fd fb18 	bl	80062fc <SearchToken>
 8008ccc:	60b8      	str	r0, [r7, #8]
			g_testDispenseCount = Convert_String_To_Integer32((uint8_t *)&tempToken->jsonValue);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3384      	adds	r3, #132	@ 0x84
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe f928 	bl	8006f28 <Convert_String_To_Integer32>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d5c <parseMessageFromServer+0x23c>)
 8008cde:	701a      	strb	r2, [r3, #0]
			g_requestType = REQ_TYPE_MOTOR_TEST;
 8008ce0:	4b18      	ldr	r3, [pc, #96]	@ (8008d44 <parseMessageFromServer+0x224>)
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	701a      	strb	r2, [r3, #0]
			break;
 8008ce6:	e016      	b.n	8008d16 <parseMessageFromServer+0x1f6>
			tempToken = SearchToken(&jreadPacket, "\"FV\"");
 8008ce8:	491d      	ldr	r1, [pc, #116]	@ (8008d60 <parseMessageFromServer+0x240>)
 8008cea:	480f      	ldr	r0, [pc, #60]	@ (8008d28 <parseMessageFromServer+0x208>)
 8008cec:	f7fd fb06 	bl	80062fc <SearchToken>
 8008cf0:	60b8      	str	r0, [r7, #8]
			memset(g_requestedFWVersion, '\0', sizeof(g_requestedFWVersion));
 8008cf2:	2219      	movs	r2, #25
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	481b      	ldr	r0, [pc, #108]	@ (8008d64 <parseMessageFromServer+0x244>)
 8008cf8:	f000 fc47 	bl	800958a <memset>
			strcpy(g_requestedFWVersion, tempToken->jsonValue);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	3384      	adds	r3, #132	@ 0x84
 8008d00:	4619      	mov	r1, r3
 8008d02:	4818      	ldr	r0, [pc, #96]	@ (8008d64 <parseMessageFromServer+0x244>)
 8008d04:	f000 fcae 	bl	8009664 <strcpy>
			g_requestType = REQ_TYPE_OTA_START;
 8008d08:	4b0e      	ldr	r3, [pc, #56]	@ (8008d44 <parseMessageFromServer+0x224>)
 8008d0a:	2205      	movs	r2, #5
 8008d0c:	701a      	strb	r2, [r3, #0]
			break;
 8008d0e:	e002      	b.n	8008d16 <parseMessageFromServer+0x1f6>
			break;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <parseMessageFromServer+0x1f6>
			break;
 8008d14:	bf00      	nop
		}
		g_packetReceived = 1;
 8008d16:	4b14      	ldr	r3, [pc, #80]	@ (8008d68 <parseMessageFromServer+0x248>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
	}
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20002770 	.word	0x20002770
 8008d28:	200027d8 	.word	0x200027d8
 8008d2c:	0800b9d8 	.word	0x0800b9d8
 8008d30:	20003c94 	.word	0x20003c94
 8008d34:	0800b9e0 	.word	0x0800b9e0
 8008d38:	20003cac 	.word	0x20003cac
 8008d3c:	0800b9e8 	.word	0x0800b9e8
 8008d40:	0800b9f0 	.word	0x0800b9f0
 8008d44:	20003d12 	.word	0x20003d12
 8008d48:	0800b9f8 	.word	0x0800b9f8
 8008d4c:	0800ba00 	.word	0x0800ba00
 8008d50:	200000cc 	.word	0x200000cc
 8008d54:	0800ba08 	.word	0x0800ba08
 8008d58:	0800ba14 	.word	0x0800ba14
 8008d5c:	20003d14 	.word	0x20003d14
 8008d60:	0800ba28 	.word	0x0800ba28
 8008d64:	20003d18 	.word	0x20003d18
 8008d68:	20003d13 	.word	0x20003d13

08008d6c <isTimerexpired>:


void isTimerexpired(void){
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
	counter++;
 8008d70:	4b0e      	ldr	r3, [pc, #56]	@ (8008dac <isTimerexpired+0x40>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b0c      	ldr	r3, [pc, #48]	@ (8008dac <isTimerexpired+0x40>)
 8008d7a:	701a      	strb	r2, [r3, #0]
	if(counter == 3){
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dac <isTimerexpired+0x40>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d107      	bne.n	8008d94 <isTimerexpired+0x28>
		counter = 0;
 8008d84:	4b09      	ldr	r3, [pc, #36]	@ (8008dac <isTimerexpired+0x40>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
		mqttPacketPara.statusTimerExpired = 1;
 8008d8a:	4b09      	ldr	r3, [pc, #36]	@ (8008db0 <isTimerexpired+0x44>)
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	else{
		checkNwStatus = 1;
		g_sysState = SYS_MODE_TEST;
	}

}
 8008d92:	e005      	b.n	8008da0 <isTimerexpired+0x34>
		checkNwStatus = 1;
 8008d94:	4b07      	ldr	r3, [pc, #28]	@ (8008db4 <isTimerexpired+0x48>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
		g_sysState = SYS_MODE_TEST;
 8008d9a:	4b07      	ldr	r3, [pc, #28]	@ (8008db8 <isTimerexpired+0x4c>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20003d31 	.word	0x20003d31
 8008db0:	20003cc4 	.word	0x20003cc4
 8008db4:	20003d32 	.word	0x20003d32
 8008db8:	20003d10 	.word	0x20003d10

08008dbc <Vending_Machine_GetModemInfo>:
* <tr><td> 30/04/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_GetModemInfo(void){
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
	ATCMD_A7672_Get_IMEI_Number();
 8008dc0:	f7fb fb82 	bl	80044c8 <ATCMD_A7672_Get_IMEI_Number>
	ATCMD_A7672_Get_Signal_Strength();
 8008dc4:	f7fb fbd0 	bl	8004568 <ATCMD_A7672_Get_Signal_Strength>
	strcat((char*)mqttPacketPara.modelName,(char*)ATCMD_A7672_HTTP_Get_DevName());
 8008dc8:	f7fa f854 	bl	8002e74 <ATCMD_A7672_HTTP_Get_DevName>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4812      	ldr	r0, [pc, #72]	@ (8008e1c <Vending_Machine_GetModemInfo+0x60>)
 8008dd2:	f000 fbe2 	bl	800959a <strcat>
	removeQuotes(mqttPacketPara.modelName);
 8008dd6:	4811      	ldr	r0, [pc, #68]	@ (8008e1c <Vending_Machine_GetModemInfo+0x60>)
 8008dd8:	f7fe ffc4 	bl	8007d64 <removeQuotes>
	strConcat(mqttOnlinePubTopic,mqttPacketPara.modelName+4);
 8008ddc:	4b10      	ldr	r3, [pc, #64]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008dde:	4619      	mov	r1, r3
 8008de0:	4810      	ldr	r0, [pc, #64]	@ (8008e24 <Vending_Machine_GetModemInfo+0x68>)
 8008de2:	f7fe f980 	bl	80070e6 <strConcat>
	strConcat(mqttStatusPubTopic,mqttPacketPara.modelName+4);
 8008de6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008de8:	4619      	mov	r1, r3
 8008dea:	480f      	ldr	r0, [pc, #60]	@ (8008e28 <Vending_Machine_GetModemInfo+0x6c>)
 8008dec:	f7fe f97b 	bl	80070e6 <strConcat>
	strConcat(mqttTrackingSubTopic,mqttPacketPara.modelName+4);
 8008df0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008df2:	4619      	mov	r1, r3
 8008df4:	480d      	ldr	r0, [pc, #52]	@ (8008e2c <Vending_Machine_GetModemInfo+0x70>)
 8008df6:	f7fe f976 	bl	80070e6 <strConcat>
	strConcat(mqttChannelChangeSubTopic,mqttPacketPara.modelName+4);
 8008dfa:	4b09      	ldr	r3, [pc, #36]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	480c      	ldr	r0, [pc, #48]	@ (8008e30 <Vending_Machine_GetModemInfo+0x74>)
 8008e00:	f7fe f971 	bl	80070e6 <strConcat>
	strConcat(mqttChannelChangePubTopic,mqttPacketPara.modelName+4);
 8008e04:	4b06      	ldr	r3, [pc, #24]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008e06:	4619      	mov	r1, r3
 8008e08:	480a      	ldr	r0, [pc, #40]	@ (8008e34 <Vending_Machine_GetModemInfo+0x78>)
 8008e0a:	f7fe f96c 	bl	80070e6 <strConcat>
	strConcat(mqttResponsePubTopic,mqttPacketPara.modelName+4);
 8008e0e:	4b04      	ldr	r3, [pc, #16]	@ (8008e20 <Vending_Machine_GetModemInfo+0x64>)
 8008e10:	4619      	mov	r1, r3
 8008e12:	4809      	ldr	r0, [pc, #36]	@ (8008e38 <Vending_Machine_GetModemInfo+0x7c>)
 8008e14:	f7fe f967 	bl	80070e6 <strConcat>
}
 8008e18:	bf00      	nop
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20003cd0 	.word	0x20003cd0
 8008e20:	20003cd4 	.word	0x20003cd4
 8008e24:	2000006c 	.word	0x2000006c
 8008e28:	2000008c 	.word	0x2000008c
 8008e2c:	20000004 	.word	0x20000004
 8008e30:	20000024 	.word	0x20000024
 8008e34:	20000048 	.word	0x20000048
 8008e38:	200000ac 	.word	0x200000ac

08008e3c <Vending_Machine_System_Init>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_System_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
	/*1. System Clock and Peripheral Clock have to be intialized
	 * and Running
	 */
	System_Clock_Init();
 8008e40:	f7fe fd38 	bl	80078b4 <System_Clock_Init>
	/*2. GPIOs are Initialized*/
	Gpio_Init();
 8008e44:	f7fe fb4e 	bl	80074e4 <Gpio_Init>
	/*3. UAART Initialized*/
	Uart_Init();
 8008e48:	f7fe fe2c 	bl	8007aa4 <Uart_Init>
	/*4. Timer Initalized */
	Timer_Init();
 8008e4c:	f7fe fda0 	bl	8007990 <Timer_Init>
	/*5.SPI Intialized*/
	Spi_Init();
 8008e50:	f7fe fc98 	bl	8007784 <Spi_Init>
	/*6.ADC Intialized*/
	ADC1_Init();
 8008e54:	f7fd ff68 	bl	8006d28 <ADC1_Init>
	/*Enable the Floating Point Unit*/
	SCB->CPACR |= (0xF << 20);
 8008e58:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <Vending_Machine_System_Init+0x34>)
 8008e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e5e:	4a04      	ldr	r2, [pc, #16]	@ (8008e70 <Vending_Machine_System_Init+0x34>)
 8008e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	/*7.Initialize other system variables*/
	System_Variables_Init();
 8008e68:	f7ff fa80 	bl	800836c <System_Variables_Init>

}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	e000ed00 	.word	0xe000ed00

08008e74 <Vending_Machine_ConnectToMqttServer>:



void Vending_Machine_ConnectToMqttServer(void){
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
	uint16_t tempConnResult;
	ATCMD_A7672_Sslconf_Init();
 8008e7a:	f7fb fc35 	bl	80046e8 <ATCMD_A7672_Sslconf_Init>
	tempConnResult = ATCMD_A7672_MQTTS_Connect();
 8008e7e:	f7fb fc83 	bl	8004788 <ATCMD_A7672_MQTTS_Connect>
 8008e82:	4603      	mov	r3, r0
 8008e84:	80fb      	strh	r3, [r7, #6]
	if (tempConnResult == 0){
 8008e86:	88fb      	ldrh	r3, [r7, #6]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <Vending_Machine_ConnectToMqttServer+0x20>
		g_sysHealth.mqttConnectStatus = CONNECT_SUCCESS;
 8008e8c:	4b22      	ldr	r3, [pc, #136]	@ (8008f18 <Vending_Machine_ConnectToMqttServer+0xa4>)
 8008e8e:	2202      	movs	r2, #2
 8008e90:	715a      	strb	r2, [r3, #5]
 8008e92:	e008      	b.n	8008ea6 <Vending_Machine_ConnectToMqttServer+0x32>
	}
	else if(tempConnResult == 34){
 8008e94:	88fb      	ldrh	r3, [r7, #6]
 8008e96:	2b22      	cmp	r3, #34	@ 0x22
 8008e98:	d105      	bne.n	8008ea6 <Vending_Machine_ConnectToMqttServer+0x32>
		g_sysHealth.faultReason = FAULT_MQTT_CONNECT_FAIL;
 8008e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8008f18 <Vending_Machine_ConnectToMqttServer+0xa4>)
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	719a      	strb	r2, [r3, #6]
		g_sysHealth.mqttConnectStatus = CONNECT_FAILED;
 8008ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f18 <Vending_Machine_ConnectToMqttServer+0xa4>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	715a      	strb	r2, [r3, #5]
	}
	memset(activeTopic, '\0', sizeof(activeTopic));
 8008ea6:	2223      	movs	r2, #35	@ 0x23
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	481c      	ldr	r0, [pc, #112]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008eac:	f000 fb6d 	bl	800958a <memset>
	strcpy(activeTopic, g_channelToSwitch);
 8008eb0:	491b      	ldr	r1, [pc, #108]	@ (8008f20 <Vending_Machine_ConnectToMqttServer+0xac>)
 8008eb2:	481a      	ldr	r0, [pc, #104]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008eb4:	f000 fbd6 	bl	8009664 <strcpy>
	strConcat(activeTopic, mqttOnlinePubTopic);
 8008eb8:	491a      	ldr	r1, [pc, #104]	@ (8008f24 <Vending_Machine_ConnectToMqttServer+0xb0>)
 8008eba:	4818      	ldr	r0, [pc, #96]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ebc:	f7fe f913 	bl	80070e6 <strConcat>
	ATCMD_A7672_MQTT_Set_PubTopic(activeTopic);
 8008ec0:	4816      	ldr	r0, [pc, #88]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ec2:	f7fa f90d 	bl	80030e0 <ATCMD_A7672_MQTT_Set_PubTopic>
	memset(activeTopic, '\0', sizeof(activeTopic));
 8008ec6:	2223      	movs	r2, #35	@ 0x23
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4814      	ldr	r0, [pc, #80]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ecc:	f000 fb5d 	bl	800958a <memset>
	strcpy(activeTopic, g_channelToSwitch);
 8008ed0:	4913      	ldr	r1, [pc, #76]	@ (8008f20 <Vending_Machine_ConnectToMqttServer+0xac>)
 8008ed2:	4812      	ldr	r0, [pc, #72]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ed4:	f000 fbc6 	bl	8009664 <strcpy>
	strConcat(activeTopic, mqttTrackingSubTopic);
 8008ed8:	4913      	ldr	r1, [pc, #76]	@ (8008f28 <Vending_Machine_ConnectToMqttServer+0xb4>)
 8008eda:	4810      	ldr	r0, [pc, #64]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008edc:	f7fe f903 	bl	80070e6 <strConcat>
	ATCMD_A7672_MQTT_Set_SubTopic(activeTopic);
 8008ee0:	480e      	ldr	r0, [pc, #56]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ee2:	f7fa f8d5 	bl	8003090 <ATCMD_A7672_MQTT_Set_SubTopic>
	ATCMD_A7672_MQTTS_Subscribe();
 8008ee6:	f7fb fd83 	bl	80049f0 <ATCMD_A7672_MQTTS_Subscribe>
	memset(activeTopic, '\0', sizeof(activeTopic));
 8008eea:	2223      	movs	r2, #35	@ 0x23
 8008eec:	2100      	movs	r1, #0
 8008eee:	480b      	ldr	r0, [pc, #44]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ef0:	f000 fb4b 	bl	800958a <memset>
	strcpy(activeTopic, g_channelToSwitch);
 8008ef4:	490a      	ldr	r1, [pc, #40]	@ (8008f20 <Vending_Machine_ConnectToMqttServer+0xac>)
 8008ef6:	4809      	ldr	r0, [pc, #36]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008ef8:	f000 fbb4 	bl	8009664 <strcpy>
	strConcat(activeTopic, mqttChannelChangeSubTopic);
 8008efc:	490b      	ldr	r1, [pc, #44]	@ (8008f2c <Vending_Machine_ConnectToMqttServer+0xb8>)
 8008efe:	4807      	ldr	r0, [pc, #28]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008f00:	f7fe f8f1 	bl	80070e6 <strConcat>
	ATCMD_A7672_MQTT_Set_SubTopic(activeTopic);
 8008f04:	4805      	ldr	r0, [pc, #20]	@ (8008f1c <Vending_Machine_ConnectToMqttServer+0xa8>)
 8008f06:	f7fa f8c3 	bl	8003090 <ATCMD_A7672_MQTT_Set_SubTopic>
	ATCMD_A7672_MQTTS_Subscribe();
 8008f0a:	f7fb fd71 	bl	80049f0 <ATCMD_A7672_MQTTS_Subscribe>
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20003c98 	.word	0x20003c98
 8008f1c:	2000274c 	.word	0x2000274c
 8008f20:	200000cc 	.word	0x200000cc
 8008f24:	2000006c 	.word	0x2000006c
 8008f28:	20000004 	.word	0x20000004
 8008f2c:	20000024 	.word	0x20000024

08008f30 <Vending_Machine_StartDispense>:
* <tr><td> 30/05/2024 </td><td> 0.1.0            </td><td> SP      </td><td> Interface Created </td></tr>
* </table><br><br>
* <hr>
*
*******************************************************************************/
void Vending_Machine_StartDispense(void){
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	71fb      	strb	r3, [r7, #7]
	if(Vending_Machine_EnableSensor() == 1){
 8008f3a:	f7fd fe8f 	bl	8006c5c <Vending_Machine_EnableSensor>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d124      	bne.n	8008f8e <Vending_Machine_StartDispense+0x5e>
		VENDING_MACHINE_MOTOR_ON();
 8008f44:	2107      	movs	r1, #7
 8008f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f4a:	f7fe fbad 	bl	80076a8 <Gpio_Set>
		result = Vending_Machine_WaitForDispense();
 8008f4e:	f7fd fea7 	bl	8006ca0 <Vending_Machine_WaitForDispense>
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
		if(result == 1){
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d10b      	bne.n	8008f74 <Vending_Machine_StartDispense+0x44>
			g_sysHealth.dispenseStatus = DISPENSE_SUCCESS;
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f98 <Vending_Machine_StartDispense+0x68>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	745a      	strb	r2, [r3, #17]
			measurementMatrix[TOTAL_TRIGGER]++;
 8008f62:	4b0e      	ldr	r3, [pc, #56]	@ (8008f9c <Vending_Machine_StartDispense+0x6c>)
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	3301      	adds	r3, #1
 8008f68:	4a0c      	ldr	r2, [pc, #48]	@ (8008f9c <Vending_Machine_StartDispense+0x6c>)
 8008f6a:	60d3      	str	r3, [r2, #12]
			g_dispenseRequest.dispenseStatus = DISPENSE_SUCCESS;
 8008f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa0 <Vending_Machine_StartDispense+0x70>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	725a      	strb	r2, [r3, #9]
 8008f72:	e005      	b.n	8008f80 <Vending_Machine_StartDispense+0x50>
		}
		else{
			g_sysHealth.dispenseStatus = DISPENSE_FAILED;
 8008f74:	4b08      	ldr	r3, [pc, #32]	@ (8008f98 <Vending_Machine_StartDispense+0x68>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	745a      	strb	r2, [r3, #17]
			g_dispenseRequest.dispenseStatus = DISPENSE_FAILED;
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <Vending_Machine_StartDispense+0x70>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	725a      	strb	r2, [r3, #9]
		}
		VENDING_MACHINE_MOTRO_OFF();
 8008f80:	2107      	movs	r1, #7
 8008f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f86:	f7fe fba8 	bl	80076da <Gpio_Clear>
		Vending_Machine_DisableSensor();
 8008f8a:	f7fd fe7f 	bl	8006c8c <Vending_Machine_DisableSensor>
	}
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20003c98 	.word	0x20003c98
 8008f9c:	20003cf0 	.word	0x20003cf0
 8008fa0:	20003cac 	.word	0x20003cac

08008fa4 <ATCMD_A7672_ModuleHardRestart>:
* <hr>
*
*******************************************************************************/

void ATCMD_A7672_ModuleHardRestart(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
	Gpio_Set(A7672_POWER_GPIO, A7672_POWER_PIN);
 8008fa8:	210b      	movs	r1, #11
 8008faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008fae:	f7fe fb7b 	bl	80076a8 <Gpio_Set>
	Delay_Ms(3000);
 8008fb2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008fb6:	f7fd ff5f 	bl	8006e78 <Delay_Ms>
	Gpio_Clear(A7672_POWER_GPIO, A7672_POWER_PIN);
 8008fba:	210b      	movs	r1, #11
 8008fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008fc0:	f7fe fb8b 	bl	80076da <Gpio_Clear>
	while(Gpio_Read(A7672_POWER_STATUS_GPIO, A7672_POWER_STATUS_PIN)==1);
 8008fc4:	bf00      	nop
 8008fc6:	2107      	movs	r1, #7
 8008fc8:	4810      	ldr	r0, [pc, #64]	@ (800900c <ATCMD_A7672_ModuleHardRestart+0x68>)
 8008fca:	f7fe fba0 	bl	800770e <Gpio_Read>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d0f8      	beq.n	8008fc6 <ATCMD_A7672_ModuleHardRestart+0x22>
	Gpio_Clear(A7672_POWER_GPIO, A7672_POWER_PIN);
 8008fd4:	210b      	movs	r1, #11
 8008fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008fda:	f7fe fb7e 	bl	80076da <Gpio_Clear>
	Delay_Ms(5);
 8008fde:	2005      	movs	r0, #5
 8008fe0:	f7fd ff4a 	bl	8006e78 <Delay_Ms>
	Gpio_Set(A7672_POWER_GPIO, A7672_POWER_PIN);
 8008fe4:	210b      	movs	r1, #11
 8008fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008fea:	f7fe fb5d 	bl	80076a8 <Gpio_Set>
	while(Gpio_Read(A7672_POWER_STATUS_GPIO, A7672_POWER_STATUS_PIN)==0);
 8008fee:	bf00      	nop
 8008ff0:	2107      	movs	r1, #7
 8008ff2:	4806      	ldr	r0, [pc, #24]	@ (800900c <ATCMD_A7672_ModuleHardRestart+0x68>)
 8008ff4:	f7fe fb8b 	bl	800770e <Gpio_Read>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f8      	beq.n	8008ff0 <ATCMD_A7672_ModuleHardRestart+0x4c>
	Gpio_Clear(A7672_POWER_GPIO, A7672_POWER_PIN);
 8008ffe:	210b      	movs	r1, #11
 8009000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009004:	f7fe fb69 	bl	80076da <Gpio_Clear>
}
 8009008:	bf00      	nop
 800900a:	bd80      	pop	{r7, pc}
 800900c:	48000800 	.word	0x48000800

08009010 <vending_Machine_ErrorHandlerCallback>:
	return retVal;
}



void vending_Machine_ErrorHandlerCallback(uint8_t *value){
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	ATCMD_A7672_ModuleHardRestart();
 8009018:	f7ff ffc4 	bl	8008fa4 <ATCMD_A7672_ModuleHardRestart>
	g_sysHealth.httpConnectStatus = CONNECT_NOT_CONNECTED;
 800901c:	4b07      	ldr	r3, [pc, #28]	@ (800903c <vending_Machine_ErrorHandlerCallback+0x2c>)
 800901e:	2200      	movs	r2, #0
 8009020:	711a      	strb	r2, [r3, #4]
	g_sysHealth.mqttConnectStatus = CONNECT_NOT_CONNECTED;
 8009022:	4b06      	ldr	r3, [pc, #24]	@ (800903c <vending_Machine_ErrorHandlerCallback+0x2c>)
 8009024:	2200      	movs	r2, #0
 8009026:	715a      	strb	r2, [r3, #5]
	ATCMD_A7672_MQTT_Set_Connection_Status(MQTT_NOT_CONNECTED);
 8009028:	2000      	movs	r0, #0
 800902a:	f7fa f88d 	bl	8003148 <ATCMD_A7672_MQTT_Set_Connection_Status>
	g_sysHealth.nwRegnStatus = NW_REGN_FAILED;
 800902e:	4b03      	ldr	r3, [pc, #12]	@ (800903c <vending_Machine_ErrorHandlerCallback+0x2c>)
 8009030:	2200      	movs	r2, #0
 8009032:	705a      	strb	r2, [r3, #1]
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20003c98 	.word	0x20003c98

08009040 <Vending_Machine_App_Thread>:


//modem_state_t Modem_State = MODEM_OFF;

void Vending_Machine_App_Thread( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
	while(1)
	{
		Vending_Machine_ModemHandler();
 8009044:	f7fe fea4 	bl	8007d90 <Vending_Machine_ModemHandler>
		Vending_Machine_State_Ctrl();
 8009048:	f7fe ff0e 	bl	8007e68 <Vending_Machine_State_Ctrl>
		Vending_Machine_ModemHandler();
 800904c:	bf00      	nop
 800904e:	e7f9      	b.n	8009044 <Vending_Machine_App_Thread+0x4>

08009050 <main>:
	}
}

int main(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
	Vending_Machine_System_Init();
 8009056:	f7ff fef1 	bl	8008e3c <Vending_Machine_System_Init>
	ATCMD_A7672_Urc_Queue_Init();
 800905a:	f7f9 fbe1 	bl	8002820 <ATCMD_A7672_Urc_Queue_Init>
	ATCMD_Core_Init();
 800905e:	f7fb feb9 	bl	8004dd4 <ATCMD_Core_Init>
	osKernelAddThread( Vending_Machine_App_Thread, 3);
 8009062:	2103      	movs	r1, #3
 8009064:	4807      	ldr	r0, [pc, #28]	@ (8009084 <main+0x34>)
 8009066:	f000 f939 	bl	80092dc <osKernelAddThread>
	int8_t ret = osKernelLaunch(QUANTA);
 800906a:	200a      	movs	r0, #10
 800906c:	f000 f9b6 	bl	80093dc <osKernelLaunch>
 8009070:	4603      	mov	r3, r0
 8009072:	71fb      	strb	r3, [r7, #7]
	if( ret == -1)
 8009074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d101      	bne.n	8009082 <main+0x32>
	{
		while(1);
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <main+0x2e>
		/*The Scheduler Launch Failed*/
	}

	for(;;);
 8009082:	e7fe      	b.n	8009082 <main+0x32>
 8009084:	08009041 	.word	0x08009041

08009088 <__NVIC_SetPriority>:
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009098:	2b00      	cmp	r3, #0
 800909a:	db0a      	blt.n	80090b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	490c      	ldr	r1, [pc, #48]	@ (80090d4 <__NVIC_SetPriority+0x4c>)
 80090a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090a6:	0112      	lsls	r2, r2, #4
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	440b      	add	r3, r1
 80090ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80090b0:	e00a      	b.n	80090c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	4908      	ldr	r1, [pc, #32]	@ (80090d8 <__NVIC_SetPriority+0x50>)
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	3b04      	subs	r3, #4
 80090c0:	0112      	lsls	r2, r2, #4
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	440b      	add	r3, r1
 80090c6:	761a      	strb	r2, [r3, #24]
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	e000e100 	.word	0xe000e100
 80090d8:	e000ed00 	.word	0xe000ed00

080090dc <osSchedulerPeriodicRR>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void osSchedulerPeriodicRR(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
	s_currentPt = s_currentPt->nextPt;
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <osSchedulerPeriodicRR+0x24>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4a06      	ldr	r2, [pc, #24]	@ (8009100 <osSchedulerPeriodicRR+0x24>)
 80090e8:	6013      	str	r3, [r2, #0]
	s_switchWeight = s_currentPt->weight;
 80090ea:	4b05      	ldr	r3, [pc, #20]	@ (8009100 <osSchedulerPeriodicRR+0x24>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <osSchedulerPeriodicRR+0x28>)
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20005018 	.word	0x20005018
 8009104:	20004ffc 	.word	0x20004ffc

08009108 <osSchedulerLaunch>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void osSchedulerLaunch(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	/*Load address of currentPt into R0*/
	__asm("LDR R0, =s_currentPt");
 800910c:	4809      	ldr	r0, [pc, #36]	@ (8009134 <osSchedulerLaunch+0x2c>)
	/*Load R2 from address equals to R0 i.e. R2=currentPt*/
	__asm("LDR R2, [R0]");
 800910e:	6802      	ldr	r2, [r0, #0]
	/*Load Cortex M SP from address equals R2, i.e. SP = currentPt->stackPt*/
	__asm("LDR SP, [R2]");
 8009110:	f8d2 d000 	ldr.w	sp, [r2]
	/*Restore R4, r5, r6, r7, r8, r9, r10, r11*/
	__asm("POP {R4-R11}");
 8009114:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	/*Restore r0, r1, r2, r3*/
	__asm("POP {R0-R3}");
 8009118:	bc0f      	pop	{r0, r1, r2, r3}
	/*Restore R12*/
	__asm("POP {R12}");
 800911a:	f85d cb04 	ldr.w	ip, [sp], #4
	/*Skip LR by adding 4 to SP*/
	__asm("ADD SP, SP, #4");
 800911e:	b001      	add	sp, #4
	/*Skip LR*/
	__asm("POP {LR}");
 8009120:	f85d eb04 	ldr.w	lr, [sp], #4
	/*Skip PSR by adding 4 to SP*/
	__asm("ADD SP, SP, #4");
 8009124:	b001      	add	sp, #4
	/*Enable Global Interrupt*/
	__asm("CPSIE   I");
 8009126:	b662      	cpsie	i
	/*Return from exception*/
	__asm("BX    LR");
 8009128:	4770      	bx	lr
}
 800912a:	bf00      	nop
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20005018 	.word	0x20005018

08009138 <osKernelStackInit>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
static void osKernelStackInit(int i)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
	s_tcbs[i].stackPt = &s_TCB_STACK[i][THREAD_STACKSIZE - 16]; /*Stack Pointer.*/
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8009146:	fb02 f303 	mul.w	r3, r2, r3
 800914a:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 800914e:	4a61      	ldr	r2, [pc, #388]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009150:	1899      	adds	r1, r3, r2
 8009152:	4861      	ldr	r0, [pc, #388]	@ (80092d8 <osKernelStackInit+0x1a0>)
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4403      	add	r3, r0
 8009160:	6019      	str	r1, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE -1] = 0x01000000; 		/*PSR*/
 8009162:	4a5c      	ldr	r2, [pc, #368]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800916a:	fb01 f303 	mul.w	r3, r1, r3
 800916e:	4413      	add	r3, r2
 8009170:	f603 135c 	addw	r3, r3, #2396	@ 0x95c
 8009174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009178:	601a      	str	r2, [r3, #0]

	s_TCB_STACK[i][THREAD_STACKSIZE - 3] = 0x14141414; /*R14*/
 800917a:	4a56      	ldr	r2, [pc, #344]	@ (80092d4 <osKernelStackInit+0x19c>)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	4413      	add	r3, r2
 8009188:	f603 1354 	addw	r3, r3, #2388	@ 0x954
 800918c:	f04f 3214 	mov.w	r2, #336860180	@ 0x14141414
 8009190:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 4] = 0x12121212; /*R12*/
 8009192:	4a50      	ldr	r2, [pc, #320]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6315 	add.w	r3, r3, #2384	@ 0x950
 80091a4:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80091a8:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 5] = 0x03030303; /*R3*/
 80091aa:	4a4a      	ldr	r2, [pc, #296]	@ (80092d4 <osKernelStackInit+0x19c>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	f603 134c 	addw	r3, r3, #2380	@ 0x94c
 80091bc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80091c0:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 6] = 0x02020202; /*R2*/
 80091c2:	4a44      	ldr	r2, [pc, #272]	@ (80092d4 <osKernelStackInit+0x19c>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	f603 1348 	addw	r3, r3, #2376	@ 0x948
 80091d4:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80091d8:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 7] = 0x01010101; /*R1*/
 80091da:	4a3e      	ldr	r2, [pc, #248]	@ (80092d4 <osKernelStackInit+0x19c>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	f603 1344 	addw	r3, r3, #2372	@ 0x944
 80091ec:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80091f0:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 8] = 0x00000000; /*R0*/
 80091f2:	4a38      	ldr	r2, [pc, #224]	@ (80092d4 <osKernelStackInit+0x19c>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6314 	add.w	r3, r3, #2368	@ 0x940
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]

	/*Have to Manually Saved*/
	s_TCB_STACK[i][THREAD_STACKSIZE - 9] = 0x11111111; /*R11*/
 8009208:	4a32      	ldr	r2, [pc, #200]	@ (80092d4 <osKernelStackInit+0x19c>)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009210:	fb01 f303 	mul.w	r3, r1, r3
 8009214:	4413      	add	r3, r2
 8009216:	f603 133c 	addw	r3, r3, #2364	@ 0x93c
 800921a:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800921e:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 10] = 0x10101010; /*R10*/
 8009220:	4a2c      	ldr	r2, [pc, #176]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	4413      	add	r3, r2
 800922e:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8009232:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8009236:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 11] = 0x09090909; /*R9*/
 8009238:	4a26      	ldr	r2, [pc, #152]	@ (80092d4 <osKernelStackInit+0x19c>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009240:	fb01 f303 	mul.w	r3, r1, r3
 8009244:	4413      	add	r3, r2
 8009246:	f603 1334 	addw	r3, r3, #2356	@ 0x934
 800924a:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800924e:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 12] = 0x08080808; /*R8*/
 8009250:	4a20      	ldr	r2, [pc, #128]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	4413      	add	r3, r2
 800925e:	f503 6313 	add.w	r3, r3, #2352	@ 0x930
 8009262:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8009266:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 13] = 0x07070707; /*R7*/
 8009268:	4a1a      	ldr	r2, [pc, #104]	@ (80092d4 <osKernelStackInit+0x19c>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	4413      	add	r3, r2
 8009276:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 800927a:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800927e:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 14] = 0x06060606; /*R6*/
 8009280:	4a14      	ldr	r2, [pc, #80]	@ (80092d4 <osKernelStackInit+0x19c>)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8009288:	fb01 f303 	mul.w	r3, r1, r3
 800928c:	4413      	add	r3, r2
 800928e:	f603 1328 	addw	r3, r3, #2344	@ 0x928
 8009292:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8009296:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 15] = 0x05050505; /*R5*/
 8009298:	4a0e      	ldr	r2, [pc, #56]	@ (80092d4 <osKernelStackInit+0x19c>)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	4413      	add	r3, r2
 80092a6:	f603 1324 	addw	r3, r3, #2340	@ 0x924
 80092aa:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80092ae:	601a      	str	r2, [r3, #0]
	s_TCB_STACK[i][THREAD_STACKSIZE - 16] = 0x04040404; /*R4*/
 80092b0:	4a08      	ldr	r2, [pc, #32]	@ (80092d4 <osKernelStackInit+0x19c>)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80092b8:	fb01 f303 	mul.w	r3, r1, r3
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 80092c2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80092c6:	601a      	str	r2, [r3, #0]
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	20003d38 	.word	0x20003d38
 80092d8:	20005000 	.word	0x20005000

080092dc <osKernelAddThread>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
int8_t osKernelAddThread( task_t thread, uint32_t wt)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80092e6:	b672      	cpsid	i
}
 80092e8:	bf00      	nop
	__disable_irq();
	if(( thread == NULL ) || ( s_threadCount >= NUM_OF_THREADS) || (wt <= 0))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <osKernelAddThread+0x22>
 80092f0:	4b36      	ldr	r3, [pc, #216]	@ (80093cc <osKernelAddThread+0xf0>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d802      	bhi.n	80092fe <osKernelAddThread+0x22>
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <osKernelAddThread+0x28>
		return -1;
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	e05e      	b.n	80093c2 <osKernelAddThread+0xe6>

	s_threadCount++;
 8009304:	4b31      	ldr	r3, [pc, #196]	@ (80093cc <osKernelAddThread+0xf0>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	4b2f      	ldr	r3, [pc, #188]	@ (80093cc <osKernelAddThread+0xf0>)
 800930e:	701a      	strb	r2, [r3, #0]
	if(s_threadCount == 1)
 8009310:	4b2e      	ldr	r3, [pc, #184]	@ (80093cc <osKernelAddThread+0xf0>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d10d      	bne.n	8009334 <osKernelAddThread+0x58>
	{
		s_tcbs[0].nextPt = NULL;
 8009318:	4b2d      	ldr	r3, [pc, #180]	@ (80093d0 <osKernelAddThread+0xf4>)
 800931a:	2200      	movs	r2, #0
 800931c:	605a      	str	r2, [r3, #4]
		s_tcbs[0].weight = wt;
 800931e:	4a2c      	ldr	r2, [pc, #176]	@ (80093d0 <osKernelAddThread+0xf4>)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	6093      	str	r3, [r2, #8]
		osKernelStackInit(0);
 8009324:	2000      	movs	r0, #0
 8009326:	f7ff ff07 	bl	8009138 <osKernelStackInit>
		s_TCB_STACK[0][THREAD_STACKSIZE - 2] = (int32_t)thread;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a29      	ldr	r2, [pc, #164]	@ (80093d4 <osKernelAddThread+0xf8>)
 800932e:	f8c2 3958 	str.w	r3, [r2, #2392]	@ 0x958
 8009332:	e041      	b.n	80093b8 <osKernelAddThread+0xdc>
	}
	else
	{
		s_tailThreadPt->nextPt = &s_tcbs[s_threadCount-1];
 8009334:	4b25      	ldr	r3, [pc, #148]	@ (80093cc <osKernelAddThread+0xf0>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	4b27      	ldr	r3, [pc, #156]	@ (80093d8 <osKernelAddThread+0xfc>)
 800933c:	6819      	ldr	r1, [r3, #0]
 800933e:	4613      	mov	r3, r2
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	4413      	add	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4a22      	ldr	r2, [pc, #136]	@ (80093d0 <osKernelAddThread+0xf4>)
 8009348:	4413      	add	r3, r2
 800934a:	604b      	str	r3, [r1, #4]
		s_tailThreadPt = &s_tcbs[s_threadCount-1];
 800934c:	4b1f      	ldr	r3, [pc, #124]	@ (80093cc <osKernelAddThread+0xf0>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	1e5a      	subs	r2, r3, #1
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <osKernelAddThread+0xf4>)
 800935c:	4413      	add	r3, r2
 800935e:	4a1e      	ldr	r2, [pc, #120]	@ (80093d8 <osKernelAddThread+0xfc>)
 8009360:	6013      	str	r3, [r2, #0]
		s_tcbs[s_threadCount-1].nextPt = &s_tcbs[0];
 8009362:	4b1a      	ldr	r3, [pc, #104]	@ (80093cc <osKernelAddThread+0xf0>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	1e5a      	subs	r2, r3, #1
 8009368:	4919      	ldr	r1, [pc, #100]	@ (80093d0 <osKernelAddThread+0xf4>)
 800936a:	4613      	mov	r3, r2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	3304      	adds	r3, #4
 8009376:	4a16      	ldr	r2, [pc, #88]	@ (80093d0 <osKernelAddThread+0xf4>)
 8009378:	601a      	str	r2, [r3, #0]
		s_tcbs[s_threadCount-1].weight = wt;
 800937a:	4b14      	ldr	r3, [pc, #80]	@ (80093cc <osKernelAddThread+0xf0>)
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	4913      	ldr	r1, [pc, #76]	@ (80093d0 <osKernelAddThread+0xf4>)
 8009382:	4613      	mov	r3, r2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3308      	adds	r3, #8
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	601a      	str	r2, [r3, #0]
		osKernelStackInit(s_threadCount-1);
 8009392:	4b0e      	ldr	r3, [pc, #56]	@ (80093cc <osKernelAddThread+0xf0>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	3b01      	subs	r3, #1
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fecd 	bl	8009138 <osKernelStackInit>
		s_TCB_STACK[s_threadCount-1][THREAD_STACKSIZE - 2] = (int32_t)thread;
 800939e:	4b0b      	ldr	r3, [pc, #44]	@ (80093cc <osKernelAddThread+0xf0>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	490b      	ldr	r1, [pc, #44]	@ (80093d4 <osKernelAddThread+0xf8>)
 80093a8:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 80093ac:	fb00 f303 	mul.w	r3, r0, r3
 80093b0:	440b      	add	r3, r1
 80093b2:	f603 1358 	addw	r3, r3, #2392	@ 0x958
 80093b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80093b8:	b662      	cpsie	i
}
 80093ba:	bf00      	nop
	}

	__enable_irq();
	return s_threadCount;
 80093bc:	4b03      	ldr	r3, [pc, #12]	@ (80093cc <osKernelAddThread+0xf0>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	b25b      	sxtb	r3, r3
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20004ff8 	.word	0x20004ff8
 80093d0:	20005000 	.word	0x20005000
 80093d4:	20003d38 	.word	0x20003d38
 80093d8:	200000d8 	.word	0x200000d8

080093dc <osKernelLaunch>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
int8_t osKernelLaunch( uint32_t quanta )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	if(( quanta <= 0) || ( quanta > 1000 ))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <osKernelLaunch+0x16>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093f0:	d902      	bls.n	80093f8 <osKernelLaunch+0x1c>
		return -1;
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295
 80093f6:	e02e      	b.n	8009456 <osKernelLaunch+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 80093f8:	b672      	cpsid	i
}
 80093fa:	bf00      	nop
	__disable_irq();
	s_currentPt = &s_tcbs[0];
 80093fc:	4b18      	ldr	r3, [pc, #96]	@ (8009460 <osKernelLaunch+0x84>)
 80093fe:	4a19      	ldr	r2, [pc, #100]	@ (8009464 <osKernelLaunch+0x88>)
 8009400:	601a      	str	r2, [r3, #0]
	s_switchWeight = s_currentPt->weight;
 8009402:	4b17      	ldr	r3, [pc, #92]	@ (8009460 <osKernelLaunch+0x84>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	4a17      	ldr	r2, [pc, #92]	@ (8009468 <osKernelLaunch+0x8c>)
 800940a:	6013      	str	r3, [r2, #0]

	s_MILLIS_PRESCALER = (SYS_FREQ/1000); /*This Prescaler Value gives 1 ms Delay*/
 800940c:	4b17      	ldr	r3, [pc, #92]	@ (800946c <osKernelLaunch+0x90>)
 800940e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009412:	601a      	str	r2, [r3, #0]
	SysTick->CTRL = 0;
 8009414:	4b16      	ldr	r3, [pc, #88]	@ (8009470 <osKernelLaunch+0x94>)
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 800941a:	4b15      	ldr	r3, [pc, #84]	@ (8009470 <osKernelLaunch+0x94>)
 800941c:	2200      	movs	r2, #0
 800941e:	609a      	str	r2, [r3, #8]
	SysTick->LOAD = (quanta * s_MILLIS_PRESCALER) - 1;
 8009420:	4b12      	ldr	r3, [pc, #72]	@ (800946c <osKernelLaunch+0x90>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	fb02 f303 	mul.w	r3, r2, r3
 800942a:	4a11      	ldr	r2, [pc, #68]	@ (8009470 <osKernelLaunch+0x94>)
 800942c:	3b01      	subs	r3, #1
 800942e:	6053      	str	r3, [r2, #4]

	SYSPRI3 = (SYSPRI3 & 0x00FFFFFF) | 0xE0000000; /* Priority Level at 7*/
 8009430:	4b10      	ldr	r3, [pc, #64]	@ (8009474 <osKernelLaunch+0x98>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009438:	4a0e      	ldr	r2, [pc, #56]	@ (8009474 <osKernelLaunch+0x98>)
 800943a:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800943e:	6013      	str	r3, [r2, #0]
	SysTick->CTRL = 0x00000007; 	/*Enable the SysTick Timer*/
 8009440:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <osKernelLaunch+0x94>)
 8009442:	2207      	movs	r2, #7
 8009444:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 8009446:	21ff      	movs	r1, #255	@ 0xff
 8009448:	f06f 0001 	mvn.w	r0, #1
 800944c:	f7ff fe1c 	bl	8009088 <__NVIC_SetPriority>

	osSchedulerLaunch();
 8009450:	f7ff fe5a 	bl	8009108 <osSchedulerLaunch>
	/*The Control does not go beyond this if the scheduler is successfully Launched*/
	return 0;
 8009454:	2300      	movs	r3, #0

}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20005018 	.word	0x20005018
 8009464:	20005000 	.word	0x20005000
 8009468:	20004ffc 	.word	0x20004ffc
 800946c:	20003d34 	.word	0x20003d34
 8009470:	e000e010 	.word	0xe000e010
 8009474:	e000ed20 	.word	0xe000ed20

08009478 <SysTick_Handler>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void SysTick_Handler(void)
{
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
	if( s_threadCount > 1)
 800947c:	4b1b      	ldr	r3, [pc, #108]	@ (80094ec <SysTick_Handler+0x74>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d90d      	bls.n	80094a0 <SysTick_Handler+0x28>
	{
		if( s_switchWeight == 0 ){
 8009484:	4b1a      	ldr	r3, [pc, #104]	@ (80094f0 <SysTick_Handler+0x78>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <SysTick_Handler+0x1e>
			/*Trigger PENDSV */
			INTCTRL = 0x10000000;
 800948c:	4b19      	ldr	r3, [pc, #100]	@ (80094f4 <SysTick_Handler+0x7c>)
 800948e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e004      	b.n	80094a0 <SysTick_Handler+0x28>
		}
		else
		{
			s_switchWeight = s_switchWeight - 1;
 8009496:	4b16      	ldr	r3, [pc, #88]	@ (80094f0 <SysTick_Handler+0x78>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3b01      	subs	r3, #1
 800949c:	4a14      	ldr	r2, [pc, #80]	@ (80094f0 <SysTick_Handler+0x78>)
 800949e:	6013      	str	r3, [r2, #0]
		}

	}
	/*These Variables are Used in uart.c*/
	if( 1 ==  g_interByteTimer )
 80094a0:	4b15      	ldr	r3, [pc, #84]	@ (80094f8 <SysTick_Handler+0x80>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d105      	bne.n	80094b4 <SysTick_Handler+0x3c>
	{
		g_interByteDelay--;
 80094a8:	4b14      	ldr	r3, [pc, #80]	@ (80094fc <SysTick_Handler+0x84>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <SysTick_Handler+0x84>)
 80094b2:	701a      	strb	r2, [r3, #0]
	}
	if(( 0 == g_interByteDelay ) && ( 1 == g_uartRxDataStart ))
 80094b4:	4b11      	ldr	r3, [pc, #68]	@ (80094fc <SysTick_Handler+0x84>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d109      	bne.n	80094d0 <SysTick_Handler+0x58>
 80094bc:	4b10      	ldr	r3, [pc, #64]	@ (8009500 <SysTick_Handler+0x88>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d105      	bne.n	80094d0 <SysTick_Handler+0x58>
	{
		g_uartRxDataEnd = 1;
 80094c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <SysTick_Handler+0x8c>)
 80094c6:	2201      	movs	r2, #1
 80094c8:	701a      	strb	r2, [r3, #0]
		g_interByteTimer = 0;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <SysTick_Handler+0x80>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
	}
	/*These Variables are exported from common.c*/
	if(g_timeDelay > 0){
 80094d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009508 <SysTick_Handler+0x90>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <SysTick_Handler+0x6a>
		g_timeDelay--;
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <SysTick_Handler+0x90>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3b01      	subs	r3, #1
 80094de:	4a0a      	ldr	r2, [pc, #40]	@ (8009508 <SysTick_Handler+0x90>)
 80094e0:	6013      	str	r3, [r2, #0]
	}
}
 80094e2:	bf00      	nop
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20004ff8 	.word	0x20004ff8
 80094f0:	20004ffc 	.word	0x20004ffc
 80094f4:	e000ed04 	.word	0xe000ed04
 80094f8:	20002746 	.word	0x20002746
 80094fc:	20002747 	.word	0x20002747
 8009500:	20002744 	.word	0x20002744
 8009504:	20002745 	.word	0x20002745
 8009508:	20000f20 	.word	0x20000f20

0800950c <PendSV_Handler>:
*******************************************************************************/
__attribute__((naked))void PendSV_Handler(void)
{
	/*Suspend Current Thread*/
	/*Disable Global Interrupt*/
	__asm("CPSID	I");
 800950c:	b672      	cpsid	i

	/*Save r4, r5, r6, r7, r8, r9, r10, r11*/
	__asm("PUSH		{R4-R11}");
 800950e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Load Address of the currentPt into r0*/
	__asm("LDR R0, =s_currentPt");
 8009512:	4808      	ldr	r0, [pc, #32]	@ (8009534 <PendSV_Handler+0x28>)

	/*Load R1 from address equal to R0, i.e. r1 = currentPt*/
	__asm("LDR R1, [R0]");
 8009514:	6801      	ldr	r1, [r0, #0]

	/*Store CortexM SP at address equal to R1, i.e. save SP into TCB*/
	__asm("STR SP, [R1]");
 8009516:	f8c1 d000 	str.w	sp, [r1]

	/*Push R0 and LR to the Stack*/
	__asm("PUSH   {R0, LR}");
 800951a:	b501      	push	{r0, lr}

	/*Switch the Task*/
	osSchedulerPeriodicRR();
 800951c:	f7ff fdde 	bl	80090dc <osSchedulerPeriodicRR>

	__asm("POP  {R0, LR}");
 8009520:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*R1 = currentPt*/
	__asm("LDR R1, [R0]");
 8009524:	6801      	ldr	r1, [r0, #0]

	/*Load Cortex-M SP from address equals to R1, i.e. SP = currentPt->stackPt*/
	__asm("LDR SP, [R1]");
 8009526:	f8d1 d000 	ldr.w	sp, [r1]

	/*Restore r4, r5, r6, r7, r8, r9, r10, r11 */
	__asm("POP {R4-R11}");
 800952a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	/*Enable Global Interrupt*/
	__asm("CPSIE     I");
 800952e:	b662      	cpsie	i

	/*Return from Exception and restore R0, r1, r2, r3, , r12, pc, lr, psr*/
	__asm("BX  LR");
 8009530:	4770      	bx	lr
}
 8009532:	bf00      	nop
 8009534:	20005018 	.word	0x20005018

08009538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009538:	480d      	ldr	r0, [pc, #52]	@ (8009570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800953a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800953c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009540:	480c      	ldr	r0, [pc, #48]	@ (8009574 <LoopForever+0x6>)
  ldr r1, =_edata
 8009542:	490d      	ldr	r1, [pc, #52]	@ (8009578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009544:	4a0d      	ldr	r2, [pc, #52]	@ (800957c <LoopForever+0xe>)
  movs r3, #0
 8009546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009548:	e002      	b.n	8009550 <LoopCopyDataInit>

0800954a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800954a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800954c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800954e:	3304      	adds	r3, #4

08009550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009554:	d3f9      	bcc.n	800954a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009556:	4a0a      	ldr	r2, [pc, #40]	@ (8009580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009558:	4c0a      	ldr	r4, [pc, #40]	@ (8009584 <LoopForever+0x16>)
  movs r3, #0
 800955a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800955c:	e001      	b.n	8009562 <LoopFillZerobss>

0800955e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800955e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009560:	3204      	adds	r2, #4

08009562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009564:	d3fb      	bcc.n	800955e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009566:	f000 f859 	bl	800961c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800956a:	f7ff fd71 	bl	8009050 <main>

0800956e <LoopForever>:

LoopForever:
  b LoopForever
 800956e:	e7fe      	b.n	800956e <LoopForever>
  ldr   r0, =_estack
 8009570:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8009574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009578:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800957c:	0800bc3c 	.word	0x0800bc3c
  ldr r2, =_sbss
 8009580:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8009584:	2000501c 	.word	0x2000501c

08009588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009588:	e7fe      	b.n	8009588 <ADC1_2_IRQHandler>

0800958a <memset>:
 800958a:	4402      	add	r2, r0
 800958c:	4603      	mov	r3, r0
 800958e:	4293      	cmp	r3, r2
 8009590:	d100      	bne.n	8009594 <memset+0xa>
 8009592:	4770      	bx	lr
 8009594:	f803 1b01 	strb.w	r1, [r3], #1
 8009598:	e7f9      	b.n	800958e <memset+0x4>

0800959a <strcat>:
 800959a:	b510      	push	{r4, lr}
 800959c:	4602      	mov	r2, r0
 800959e:	7814      	ldrb	r4, [r2, #0]
 80095a0:	4613      	mov	r3, r2
 80095a2:	3201      	adds	r2, #1
 80095a4:	2c00      	cmp	r4, #0
 80095a6:	d1fa      	bne.n	800959e <strcat+0x4>
 80095a8:	3b01      	subs	r3, #1
 80095aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	d1f9      	bne.n	80095aa <strcat+0x10>
 80095b6:	bd10      	pop	{r4, pc}

080095b8 <strchr>:
 80095b8:	b2c9      	uxtb	r1, r1
 80095ba:	4603      	mov	r3, r0
 80095bc:	4618      	mov	r0, r3
 80095be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095c2:	b112      	cbz	r2, 80095ca <strchr+0x12>
 80095c4:	428a      	cmp	r2, r1
 80095c6:	d1f9      	bne.n	80095bc <strchr+0x4>
 80095c8:	4770      	bx	lr
 80095ca:	2900      	cmp	r1, #0
 80095cc:	bf18      	it	ne
 80095ce:	2000      	movne	r0, #0
 80095d0:	4770      	bx	lr

080095d2 <strncmp>:
 80095d2:	b510      	push	{r4, lr}
 80095d4:	b16a      	cbz	r2, 80095f2 <strncmp+0x20>
 80095d6:	3901      	subs	r1, #1
 80095d8:	1884      	adds	r4, r0, r2
 80095da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d103      	bne.n	80095ee <strncmp+0x1c>
 80095e6:	42a0      	cmp	r0, r4
 80095e8:	d001      	beq.n	80095ee <strncmp+0x1c>
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	d1f5      	bne.n	80095da <strncmp+0x8>
 80095ee:	1ad0      	subs	r0, r2, r3
 80095f0:	bd10      	pop	{r4, pc}
 80095f2:	4610      	mov	r0, r2
 80095f4:	e7fc      	b.n	80095f0 <strncmp+0x1e>

080095f6 <strncpy>:
 80095f6:	b510      	push	{r4, lr}
 80095f8:	3901      	subs	r1, #1
 80095fa:	4603      	mov	r3, r0
 80095fc:	b132      	cbz	r2, 800960c <strncpy+0x16>
 80095fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009602:	f803 4b01 	strb.w	r4, [r3], #1
 8009606:	3a01      	subs	r2, #1
 8009608:	2c00      	cmp	r4, #0
 800960a:	d1f7      	bne.n	80095fc <strncpy+0x6>
 800960c:	441a      	add	r2, r3
 800960e:	2100      	movs	r1, #0
 8009610:	4293      	cmp	r3, r2
 8009612:	d100      	bne.n	8009616 <strncpy+0x20>
 8009614:	bd10      	pop	{r4, pc}
 8009616:	f803 1b01 	strb.w	r1, [r3], #1
 800961a:	e7f9      	b.n	8009610 <strncpy+0x1a>

0800961c <__libc_init_array>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	4d0d      	ldr	r5, [pc, #52]	@ (8009654 <__libc_init_array+0x38>)
 8009620:	4c0d      	ldr	r4, [pc, #52]	@ (8009658 <__libc_init_array+0x3c>)
 8009622:	1b64      	subs	r4, r4, r5
 8009624:	10a4      	asrs	r4, r4, #2
 8009626:	2600      	movs	r6, #0
 8009628:	42a6      	cmp	r6, r4
 800962a:	d109      	bne.n	8009640 <__libc_init_array+0x24>
 800962c:	4d0b      	ldr	r5, [pc, #44]	@ (800965c <__libc_init_array+0x40>)
 800962e:	4c0c      	ldr	r4, [pc, #48]	@ (8009660 <__libc_init_array+0x44>)
 8009630:	f000 f82e 	bl	8009690 <_init>
 8009634:	1b64      	subs	r4, r4, r5
 8009636:	10a4      	asrs	r4, r4, #2
 8009638:	2600      	movs	r6, #0
 800963a:	42a6      	cmp	r6, r4
 800963c:	d105      	bne.n	800964a <__libc_init_array+0x2e>
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	f855 3b04 	ldr.w	r3, [r5], #4
 8009644:	4798      	blx	r3
 8009646:	3601      	adds	r6, #1
 8009648:	e7ee      	b.n	8009628 <__libc_init_array+0xc>
 800964a:	f855 3b04 	ldr.w	r3, [r5], #4
 800964e:	4798      	blx	r3
 8009650:	3601      	adds	r6, #1
 8009652:	e7f2      	b.n	800963a <__libc_init_array+0x1e>
 8009654:	0800bc34 	.word	0x0800bc34
 8009658:	0800bc34 	.word	0x0800bc34
 800965c:	0800bc34 	.word	0x0800bc34
 8009660:	0800bc38 	.word	0x0800bc38

08009664 <strcpy>:
 8009664:	4603      	mov	r3, r0
 8009666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966a:	f803 2b01 	strb.w	r2, [r3], #1
 800966e:	2a00      	cmp	r2, #0
 8009670:	d1f9      	bne.n	8009666 <strcpy+0x2>
 8009672:	4770      	bx	lr

08009674 <memcpy>:
 8009674:	440a      	add	r2, r1
 8009676:	4291      	cmp	r1, r2
 8009678:	f100 33ff 	add.w	r3, r0, #4294967295
 800967c:	d100      	bne.n	8009680 <memcpy+0xc>
 800967e:	4770      	bx	lr
 8009680:	b510      	push	{r4, lr}
 8009682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800968a:	4291      	cmp	r1, r2
 800968c:	d1f9      	bne.n	8009682 <memcpy+0xe>
 800968e:	bd10      	pop	{r4, pc}

08009690 <_init>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr

0800969c <_fini>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	bf00      	nop
 80096a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096a2:	bc08      	pop	{r3}
 80096a4:	469e      	mov	lr, r3
 80096a6:	4770      	bx	lr
